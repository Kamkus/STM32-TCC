
TCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e2c  08008e2c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08008e2c  08008e2c  00018e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e34  08008e34  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08008e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  200000b0  08008eec  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08008eec  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015246  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f78  00000000  00000000  00035369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  000382e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d98  00000000  00000000  00039468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d45  00000000  00000000  0003a200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170b1  00000000  00000000  00061f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f51f7  00000000  00000000  00078ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fac  00000000  00000000  0016e1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0017319c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008c8c 	.word	0x08008c8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08008c8c 	.word	0x08008c8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b970 	b.w	8000f44 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9e08      	ldr	r6, [sp, #32]
 8000c82:	460d      	mov	r5, r1
 8000c84:	4604      	mov	r4, r0
 8000c86:	460f      	mov	r7, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d14a      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4694      	mov	ip, r2
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0xe2>
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	b143      	cbz	r3, 8000caa <__udivmoddi4+0x2e>
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	f1c3 0220 	rsb	r2, r3, #32
 8000ca0:	409f      	lsls	r7, r3
 8000ca2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca6:	4317      	orrs	r7, r2
 8000ca8:	409c      	lsls	r4, r3
 8000caa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cae:	fa1f f58c 	uxth.w	r5, ip
 8000cb2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb6:	0c22      	lsrs	r2, r4, #16
 8000cb8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc0:	fb01 f005 	mul.w	r0, r1, r5
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x62>
 8000cc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ccc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cd0:	f080 811c 	bcs.w	8000f0c <__udivmoddi4+0x290>
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	f240 8119 	bls.w	8000f0c <__udivmoddi4+0x290>
 8000cda:	3902      	subs	r1, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a12      	subs	r2, r2, r0
 8000ce0:	b2a4      	uxth	r4, r4
 8000ce2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cee:	fb00 f505 	mul.w	r5, r0, r5
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x90>
 8000cf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfe:	f080 8107 	bcs.w	8000f10 <__udivmoddi4+0x294>
 8000d02:	42a5      	cmp	r5, r4
 8000d04:	f240 8104 	bls.w	8000f10 <__udivmoddi4+0x294>
 8000d08:	4464      	add	r4, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d10:	1b64      	subs	r4, r4, r5
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11e      	cbz	r6, 8000d1e <__udivmoddi4+0xa2>
 8000d16:	40dc      	lsrs	r4, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0xbc>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f000 80ed 	beq.w	8000f06 <__udivmoddi4+0x28a>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	d149      	bne.n	8000dd4 <__udivmoddi4+0x158>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	d302      	bcc.n	8000d4a <__udivmoddi4+0xce>
 8000d44:	4282      	cmp	r2, r0
 8000d46:	f200 80f8 	bhi.w	8000f3a <__udivmoddi4+0x2be>
 8000d4a:	1a84      	subs	r4, r0, r2
 8000d4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d50:	2001      	movs	r0, #1
 8000d52:	4617      	mov	r7, r2
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	d0e2      	beq.n	8000d1e <__udivmoddi4+0xa2>
 8000d58:	e9c6 4700 	strd	r4, r7, [r6]
 8000d5c:	e7df      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xe6>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f382 	clz	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x210>
 8000d6c:	1a8a      	subs	r2, r1, r2
 8000d6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	2101      	movs	r1, #1
 8000d78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d80:	0c22      	lsrs	r2, r4, #16
 8000d82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d86:	fb0e f005 	mul.w	r0, lr, r5
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x124>
 8000d8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x122>
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	f200 80cb 	bhi.w	8000f34 <__udivmoddi4+0x2b8>
 8000d9e:	4645      	mov	r5, r8
 8000da0:	1a12      	subs	r2, r2, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db0:	fb0e fe00 	mul.w	lr, lr, r0
 8000db4:	45a6      	cmp	lr, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x14e>
 8000db8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc0:	d202      	bcs.n	8000dc8 <__udivmoddi4+0x14c>
 8000dc2:	45a6      	cmp	lr, r4
 8000dc4:	f200 80bb 	bhi.w	8000f3e <__udivmoddi4+0x2c2>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dd2:	e79f      	b.n	8000d14 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0720 	rsb	r7, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de2:	fa05 f401 	lsl.w	r4, r5, r1
 8000de6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dea:	40fd      	lsrs	r5, r7
 8000dec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e04:	fb08 f50e 	mul.w	r5, r8, lr
 8000e08:	42a5      	cmp	r5, r4
 8000e0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e12:	d90b      	bls.n	8000e2c <__udivmoddi4+0x1b0>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e1c:	f080 8088 	bcs.w	8000f30 <__udivmoddi4+0x2b4>
 8000e20:	42a5      	cmp	r5, r4
 8000e22:	f240 8085 	bls.w	8000f30 <__udivmoddi4+0x2b4>
 8000e26:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2a:	4464      	add	r4, ip
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	b29d      	uxth	r5, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1da>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e4c:	d26c      	bcs.n	8000f28 <__udivmoddi4+0x2ac>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	d96a      	bls.n	8000f28 <__udivmoddi4+0x2ac>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	4464      	add	r4, ip
 8000e56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	42ac      	cmp	r4, r5
 8000e64:	46c8      	mov	r8, r9
 8000e66:	46ae      	mov	lr, r5
 8000e68:	d356      	bcc.n	8000f18 <__udivmoddi4+0x29c>
 8000e6a:	d053      	beq.n	8000f14 <__udivmoddi4+0x298>
 8000e6c:	b156      	cbz	r6, 8000e84 <__udivmoddi4+0x208>
 8000e6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e72:	eb64 040e 	sbc.w	r4, r4, lr
 8000e76:	fa04 f707 	lsl.w	r7, r4, r7
 8000e7a:	40ca      	lsrs	r2, r1
 8000e7c:	40cc      	lsrs	r4, r1
 8000e7e:	4317      	orrs	r7, r2
 8000e80:	e9c6 7400 	strd	r7, r4, [r6]
 8000e84:	4618      	mov	r0, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	f1c3 0120 	rsb	r1, r3, #32
 8000e90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e94:	fa20 f201 	lsr.w	r2, r0, r1
 8000e98:	fa25 f101 	lsr.w	r1, r5, r1
 8000e9c:	409d      	lsls	r5, r3
 8000e9e:	432a      	orrs	r2, r5
 8000ea0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eac:	fb07 1510 	mls	r5, r7, r0, r1
 8000eb0:	0c11      	lsrs	r1, r2, #16
 8000eb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eba:	428d      	cmp	r5, r1
 8000ebc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x258>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eca:	d22f      	bcs.n	8000f2c <__udivmoddi4+0x2b0>
 8000ecc:	428d      	cmp	r5, r1
 8000ece:	d92d      	bls.n	8000f2c <__udivmoddi4+0x2b0>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	1b49      	subs	r1, r1, r5
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000edc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ee0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee8:	4291      	cmp	r1, r2
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x282>
 8000eec:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef4:	d216      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000ef6:	4291      	cmp	r1, r2
 8000ef8:	d914      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000efa:	3d02      	subs	r5, #2
 8000efc:	4462      	add	r2, ip
 8000efe:	1a52      	subs	r2, r2, r1
 8000f00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f04:	e738      	b.n	8000d78 <__udivmoddi4+0xfc>
 8000f06:	4631      	mov	r1, r6
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e708      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000f0c:	4639      	mov	r1, r7
 8000f0e:	e6e6      	b.n	8000cde <__udivmoddi4+0x62>
 8000f10:	4610      	mov	r0, r2
 8000f12:	e6fb      	b.n	8000d0c <__udivmoddi4+0x90>
 8000f14:	4548      	cmp	r0, r9
 8000f16:	d2a9      	bcs.n	8000e6c <__udivmoddi4+0x1f0>
 8000f18:	ebb9 0802 	subs.w	r8, r9, r2
 8000f1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f20:	3b01      	subs	r3, #1
 8000f22:	e7a3      	b.n	8000e6c <__udivmoddi4+0x1f0>
 8000f24:	4645      	mov	r5, r8
 8000f26:	e7ea      	b.n	8000efe <__udivmoddi4+0x282>
 8000f28:	462b      	mov	r3, r5
 8000f2a:	e794      	b.n	8000e56 <__udivmoddi4+0x1da>
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	e7d1      	b.n	8000ed4 <__udivmoddi4+0x258>
 8000f30:	46d0      	mov	r8, sl
 8000f32:	e77b      	b.n	8000e2c <__udivmoddi4+0x1b0>
 8000f34:	3d02      	subs	r5, #2
 8000f36:	4462      	add	r2, ip
 8000f38:	e732      	b.n	8000da0 <__udivmoddi4+0x124>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e70a      	b.n	8000d54 <__udivmoddi4+0xd8>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e742      	b.n	8000dca <__udivmoddi4+0x14e>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 fa47 	bl	80013e4 <null_ptr_check>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d117      	bne.n	8000f92 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	20d0      	movs	r0, #208	; 0xd0
 8000f6a:	f000 f818 	bl	8000f9e <bmp2_get_regs>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10b      	bne.n	8000f92 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b58      	cmp	r3, #88	; 0x58
 8000f80:	d105      	bne.n	8000f8e <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 fa79 	bl	800147a <get_calib_param>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e001      	b.n	8000f92 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000f8e:	23fc      	movs	r3, #252	; 0xfc
 8000f90:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000f9e:	b590      	push	{r4, r7, lr}
 8000fa0:	b087      	sub	sp, #28
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	4603      	mov	r3, r0
 8000fac:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fae:	6838      	ldr	r0, [r7, #0]
 8000fb0:	f000 fa18 	bl	80013e4 <null_ptr_check>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d11e      	bne.n	8000ffe <bmp2_get_regs+0x60>
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d01b      	beq.n	8000ffe <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	785b      	ldrb	r3, [r3, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d103      	bne.n	8000fd6 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fd4:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68dc      	ldr	r4, [r3, #12]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	7bf8      	ldrb	r0, [r7, #15]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	68b9      	ldr	r1, [r7, #8]
 8000fe4:	47a0      	blx	r4
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8000ff8:	23fe      	movs	r3, #254	; 0xfe
 8000ffa:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000ffc:	e001      	b.n	8001002 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000ffe:	23ff      	movs	r3, #255	; 0xff
 8001000:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001002:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001006:	4618      	mov	r0, r3
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd90      	pop	{r4, r7, pc}

0800100e <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800100e:	b590      	push	{r4, r7, lr}
 8001010:	b08b      	sub	sp, #44	; 0x2c
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d901      	bls.n	8001026 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001022:	2304      	movs	r3, #4
 8001024:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001026:	6838      	ldr	r0, [r7, #0]
 8001028:	f000 f9dc 	bl	80013e4 <null_ptr_check>
 800102c:	4603      	mov	r3, r0
 800102e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001032:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001036:	2b00      	cmp	r3, #0
 8001038:	d150      	bne.n	80010dc <bmp2_set_regs+0xce>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d04d      	beq.n	80010dc <bmp2_set_regs+0xce>
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d04a      	beq.n	80010dc <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d043      	beq.n	80010d4 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d114      	bne.n	8001084 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800105a:	2300      	movs	r3, #0
 800105c:	77fb      	strb	r3, [r7, #31]
 800105e:	e00d      	b.n	800107c <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001060:	7ffb      	ldrb	r3, [r7, #31]
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	7ffb      	ldrb	r3, [r7, #31]
 800106a:	68f9      	ldr	r1, [r7, #12]
 800106c:	440b      	add	r3, r1
 800106e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001076:	7ffb      	ldrb	r3, [r7, #31]
 8001078:	3301      	adds	r3, #1
 800107a:	77fb      	strb	r3, [r7, #31]
 800107c:	7ffb      	ldrb	r3, [r7, #31]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8ed      	bhi.n	8001060 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d90b      	bls.n	80010a2 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 800108a:	f107 0114 	add.w	r1, r7, #20
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f9c6 	bl	8001424 <interleave_data>
                temp_len = ((len * 2) - 1);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	3b01      	subs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
 80010a0:	e001      	b.n	80010a6 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	691c      	ldr	r4, [r3, #16]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	7818      	ldrb	r0, [r3, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f107 0114 	add.w	r1, r7, #20
 80010b6:	6a3a      	ldr	r2, [r7, #32]
 80010b8:	47a0      	blx	r4
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00b      	beq.n	80010e4 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80010cc:	23fe      	movs	r3, #254	; 0xfe
 80010ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 80010d2:	e007      	b.n	80010e4 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80010d4:	23fd      	movs	r3, #253	; 0xfd
 80010d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 80010da:	e003      	b.n	80010e4 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010dc:	23ff      	movs	r3, #255	; 0xff
 80010de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010e2:	e000      	b.n	80010e6 <bmp2_set_regs+0xd8>
        if (len > 0)
 80010e4:	bf00      	nop
    }

    return rslt;
 80010e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	372c      	adds	r7, #44	; 0x2c
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd90      	pop	{r4, r7, pc}

080010f2 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80010fa:	23e0      	movs	r3, #224	; 0xe0
 80010fc:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80010fe:	23b6      	movs	r3, #182	; 0xb6
 8001100:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001102:	f107 010d 	add.w	r1, r7, #13
 8001106:	f107 000e 	add.w	r0, r7, #14
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f7ff ff7e 	bl	800100e <bmp2_set_regs>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800112c:	2300      	movs	r3, #0
 800112e:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d02d      	beq.n	8001192 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001136:	f107 010c 	add.w	r1, r7, #12
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2202      	movs	r2, #2
 800113e:	20f4      	movs	r0, #244	; 0xf4
 8001140:	f7ff ff2d 	bl	8000f9e <bmp2_get_regs>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d122      	bne.n	8001196 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001150:	7b3b      	ldrb	r3, [r7, #12]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	b2da      	uxtb	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800115a:	7b3b      	ldrb	r3, [r7, #12]
 800115c:	109b      	asrs	r3, r3, #2
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	b2da      	uxtb	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800116a:	7b7b      	ldrb	r3, [r7, #13]
 800116c:	095b      	lsrs	r3, r3, #5
 800116e:	b2da      	uxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001174:	7b7b      	ldrb	r3, [r7, #13]
 8001176:	109b      	asrs	r3, r3, #2
 8001178:	b2db      	uxtb	r3, r3
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	b2da      	uxtb	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001184:	7b7b      	ldrb	r3, [r7, #13]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	b2da      	uxtb	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	715a      	strb	r2, [r3, #5]
 8001190:	e001      	b.n	8001196 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001192:	23ff      	movs	r3, #255	; 0xff
 8001194:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	2000      	movs	r0, #0
 80011b2:	f000 f9fd 	bl	80015b0 <conf_sensor>
 80011b6:	4603      	mov	r3, r0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01b      	beq.n	8001208 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80011d0:	f107 010e 	add.w	r1, r7, #14
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	20f3      	movs	r0, #243	; 0xf3
 80011da:	f7ff fee0 	bl	8000f9e <bmp2_get_regs>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d110      	bne.n	800120c <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	10db      	asrs	r3, r3, #3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	705a      	strb	r2, [r3, #1]
 8001206:	e001      	b.n	800120c <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001208:	23ff      	movs	r3, #255	; 0xff
 800120a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800120c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	68b9      	ldr	r1, [r7, #8]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f9bf 	bl	80015b0 <conf_sensor>
 8001232:	4603      	mov	r3, r0
 8001234:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001236:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	2300      	movs	r3, #0
 8001252:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d024      	beq.n	80012ae <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001264:	f107 0110 	add.w	r1, r7, #16
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2206      	movs	r2, #6
 800126c:	20f7      	movs	r0, #247	; 0xf7
 800126e:	f7ff fe96 	bl	8000f9e <bmp2_get_regs>
 8001272:	4603      	mov	r3, r0
 8001274:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 800127e:	f107 0208 	add.w	r2, r7, #8
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fab9 	bl	8001800 <parse_sensor_data>
 800128e:	4603      	mov	r3, r0
 8001290:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001292:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10b      	bne.n	80012b2 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f80b 	bl	80012be <bmp2_compensate_data>
 80012a8:	4603      	mov	r3, r0
 80012aa:	75fb      	strb	r3, [r7, #23]
 80012ac:	e001      	b.n	80012b2 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012ae:	23ff      	movs	r3, #255	; 0xff
 80012b0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f88a 	bl	80013e4 <null_ptr_check>
 80012d0:	4603      	mov	r3, r0
 80012d2:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80012d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d129      	bne.n	8001330 <bmp2_compensate_data+0x72>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d026      	beq.n	8001330 <bmp2_compensate_data+0x72>
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d023      	beq.n	8001330 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	3308      	adds	r3, #8
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	68f9      	ldr	r1, [r7, #12]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fabb 	bl	8001888 <compensate_temperature>
 8001312:	4603      	mov	r3, r0
 8001314:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001316:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10a      	bne.n	8001334 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68f9      	ldr	r1, [r7, #12]
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fba7 	bl	8001a78 <compensate_pressure>
 800132a:	4603      	mov	r3, r0
 800132c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800132e:	e001      	b.n	8001334 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001330:	23ff      	movs	r3, #255	; 0xff
 8001332:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001334:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b092      	sub	sp, #72	; 0x48
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <bmp2_compute_meas_time+0x9c>)
 800134e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001352:	461d      	mov	r5, r3
 8001354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <bmp2_compute_meas_time+0xa0>)
 800135e:	f107 0410 	add.w	r4, r7, #16
 8001362:	461d      	mov	r5, r3
 8001364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001368:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800136c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f837 	bl	80013e4 <null_ptr_check>
 8001376:	4603      	mov	r3, r0
 8001378:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 800137c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001380:	2b00      	cmp	r3, #0
 8001382:	d122      	bne.n	80013ca <bmp2_compute_meas_time+0x8a>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d01f      	beq.n	80013ca <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7e1b      	ldrb	r3, [r3, #24]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d111      	bne.n	80013b6 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	78db      	ldrb	r3, [r3, #3]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	3348      	adds	r3, #72	; 0x48
 800139a:	443b      	add	r3, r7
 800139c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	789b      	ldrb	r3, [r3, #2]
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	3348      	adds	r3, #72	; 0x48
 80013a8:	443b      	add	r3, r7
 80013aa:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013ae:	441a      	add	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013b4:	e00c      	b.n	80013d0 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	78db      	ldrb	r3, [r3, #3]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	3348      	adds	r3, #72	; 0x48
 80013be:	443b      	add	r3, r7
 80013c0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013c8:	e002      	b.n	80013d0 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013ca:	23ff      	movs	r3, #255	; 0xff
 80013cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 80013d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3748      	adds	r7, #72	; 0x48
 80013d8:	46bd      	mov	sp, r7
 80013da:	bdb0      	pop	{r4, r5, r7, pc}
 80013dc:	08008ca4 	.word	0x08008ca4
 80013e0:	08008cb8 	.word	0x08008cb8

080013e4 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <null_ptr_check+0x26>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <null_ptr_check+0x26>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <null_ptr_check+0x26>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	e001      	b.n	8001414 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001414:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001432:	2301      	movs	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e015      	b.n	8001464 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	441a      	add	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	3b01      	subs	r3, #1
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	440b      	add	r3, r1
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	441a      	add	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	440b      	add	r3, r1
 800145a:	7812      	ldrb	r2, [r2, #0]
 800145c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d3e5      	bcc.n	8001438 <interleave_data+0x14>
    }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	371c      	adds	r7, #28
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b08a      	sub	sp, #40	; 0x28
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
 8001496:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001498:	f107 010c 	add.w	r1, r7, #12
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2219      	movs	r2, #25
 80014a0:	2088      	movs	r0, #136	; 0x88
 80014a2:	f7ff fd7c 	bl	8000f9e <bmp2_get_regs>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 80014ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d177      	bne.n	80015a4 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80014b4:	7b7b      	ldrb	r3, [r7, #13]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	7b3b      	ldrb	r3, [r7, #12]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	7bbb      	ldrb	r3, [r7, #14]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80014da:	7c7b      	ldrb	r3, [r7, #17]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	b21a      	sxth	r2, r3
 80014e0:	7c3b      	ldrb	r3, [r7, #16]
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	7cbb      	ldrb	r3, [r7, #18]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001500:	7d7b      	ldrb	r3, [r7, #21]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21a      	sxth	r2, r3
 8001506:	7d3b      	ldrb	r3, [r7, #20]
 8001508:	b21b      	sxth	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b21a      	sxth	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	7dbb      	ldrb	r3, [r7, #22]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21a      	sxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001524:	7e7b      	ldrb	r3, [r7, #25]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	7e3b      	ldrb	r3, [r7, #24]
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b21a      	sxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001536:	7efb      	ldrb	r3, [r7, #27]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	7ebb      	ldrb	r3, [r7, #26]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21a      	sxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001548:	7f7b      	ldrb	r3, [r7, #29]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	7f3b      	ldrb	r3, [r7, #28]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21a      	sxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800155a:	7ffb      	ldrb	r3, [r7, #31]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b21a      	sxth	r2, r3
 8001560:	7fbb      	ldrb	r3, [r7, #30]
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21a      	sxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 800156c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21a      	sxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 8001582:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21a      	sxth	r2, r3
 800158a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21a      	sxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001598:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800159c:	b25a      	sxtb	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 80015a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80015be:	2300      	movs	r3, #0
 80015c0:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 80015c2:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 80015c6:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d074      	beq.n	80016b8 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80015ce:	f107 0114 	add.w	r1, r7, #20
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2202      	movs	r2, #2
 80015d6:	20f4      	movs	r0, #244	; 0xf4
 80015d8:	f7ff fce1 	bl	8000f9e <bmp2_get_regs>
 80015dc:	4603      	mov	r3, r0
 80015de:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80015e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d169      	bne.n	80016bc <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fd82 	bl	80010f2 <bmp2_soft_reset>
 80015ee:	4603      	mov	r3, r0
 80015f0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80015f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d160      	bne.n	80016bc <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f861 	bl	80016c8 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001606:	7d7b      	ldrb	r3, [r7, #21]
 8001608:	b25b      	sxtb	r3, r3
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	b25a      	sxtb	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	789b      	ldrb	r3, [r3, #2]
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	b25b      	sxtb	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b25b      	sxtb	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001620:	7d7b      	ldrb	r3, [r7, #21]
 8001622:	b25b      	sxtb	r3, r3
 8001624:	f023 031c 	bic.w	r3, r3, #28
 8001628:	b25a      	sxtb	r2, r3
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	791b      	ldrb	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	b25b      	sxtb	r3, r3
 8001632:	f003 031c 	and.w	r3, r3, #28
 8001636:	b25b      	sxtb	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b25b      	sxtb	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001640:	7d7b      	ldrb	r3, [r7, #21]
 8001642:	b25b      	sxtb	r3, r3
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	b25a      	sxtb	r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	795b      	ldrb	r3, [r3, #5]
 800164e:	b25b      	sxtb	r3, r3
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	b25b      	sxtb	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800165e:	f107 0114 	add.w	r1, r7, #20
 8001662:	f107 0010 	add.w	r0, r7, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2202      	movs	r2, #2
 800166a:	f7ff fcd0 	bl	800100e <bmp2_set_regs>
 800166e:	4603      	mov	r3, r0
 8001670:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001672:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d120      	bne.n	80016bc <conf_sensor+0x10c>
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01d      	beq.n	80016bc <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001686:	7d3b      	ldrb	r3, [r7, #20]
 8001688:	b25b      	sxtb	r3, r3
 800168a:	f023 0303 	bic.w	r3, r3, #3
 800168e:	b25a      	sxtb	r2, r3
 8001690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	b25b      	sxtb	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	b25b      	sxtb	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80016a2:	f107 0114 	add.w	r1, r7, #20
 80016a6:	f107 0010 	add.w	r0, r7, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f7ff fcae 	bl	800100e <bmp2_set_regs>
 80016b2:	4603      	mov	r3, r0
 80016b4:	75fb      	strb	r3, [r7, #23]
 80016b6:	e001      	b.n	80016bc <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016b8:	23ff      	movs	r3, #255	; 0xff
 80016ba:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	78db      	ldrb	r3, [r3, #3]
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	f200 808b 	bhi.w	80017f2 <set_os_mode+0x12a>
 80016dc:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <set_os_mode+0x1c>)
 80016de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e2:	bf00      	nop
 80016e4:	080016f9 	.word	0x080016f9
 80016e8:	0800172b 	.word	0x0800172b
 80016ec:	0800175d 	.word	0x0800175d
 80016f0:	0800178f 	.word	0x0800178f
 80016f4:	080017c1 	.word	0x080017c1
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	b25b      	sxtb	r3, r3
 8001704:	f043 0320 	orr.w	r3, r3, #32
 8001708:	b25b      	sxtb	r3, r3
 800170a:	b2da      	uxtb	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b25b      	sxtb	r3, r3
 8001716:	f023 031c 	bic.w	r3, r3, #28
 800171a:	b25b      	sxtb	r3, r3
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	b25b      	sxtb	r3, r3
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]
            break;
 8001728:	e064      	b.n	80017f4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b25b      	sxtb	r3, r3
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	b25b      	sxtb	r3, r3
 8001736:	f043 0320 	orr.w	r3, r3, #32
 800173a:	b25b      	sxtb	r3, r3
 800173c:	b2da      	uxtb	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	b25b      	sxtb	r3, r3
 8001748:	f023 031c 	bic.w	r3, r3, #28
 800174c:	b25b      	sxtb	r3, r3
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	b25b      	sxtb	r3, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	701a      	strb	r2, [r3, #0]
            break;
 800175a:	e04b      	b.n	80017f4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b25b      	sxtb	r3, r3
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	b25b      	sxtb	r3, r3
 8001768:	f043 0320 	orr.w	r3, r3, #32
 800176c:	b25b      	sxtb	r3, r3
 800176e:	b2da      	uxtb	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b25b      	sxtb	r3, r3
 800177a:	f023 031c 	bic.w	r3, r3, #28
 800177e:	b25b      	sxtb	r3, r3
 8001780:	f043 030c 	orr.w	r3, r3, #12
 8001784:	b25b      	sxtb	r3, r3
 8001786:	b2da      	uxtb	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	701a      	strb	r2, [r3, #0]
            break;
 800178c:	e032      	b.n	80017f4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b25b      	sxtb	r3, r3
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	b25b      	sxtb	r3, r3
 800179a:	f043 0320 	orr.w	r3, r3, #32
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	f023 031c 	bic.w	r3, r3, #28
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	f043 0310 	orr.w	r3, r3, #16
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	701a      	strb	r2, [r3, #0]
            break;
 80017be:	e019      	b.n	80017f4 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	f003 031f 	and.w	r3, r3, #31
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f023 031c 	bic.w	r3, r3, #28
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	f043 0314 	orr.w	r3, r3, #20
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	701a      	strb	r2, [r3, #0]
            break;
 80017f0:	e000      	b.n	80017f4 <set_os_mode+0x12c>
        default:
            break;
 80017f2:	bf00      	nop
    }
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	031b      	lsls	r3, r3, #12
 8001810:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3301      	adds	r3, #1
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3302      	adds	r3, #2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	b2db      	uxtb	r3, r3
 8001826:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	431a      	orrs	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	431a      	orrs	r2, r3
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3303      	adds	r3, #3
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	031b      	lsls	r3, r3, #12
 800183e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3304      	adds	r3, #4
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3305      	adds	r3, #5
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	b2db      	uxtb	r3, r3
 8001854:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	431a      	orrs	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	461a      	mov	r2, r3
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4619      	mov	r1, r3
 8001870:	4610      	mov	r0, r2
 8001872:	f000 fae5 	bl	8001e40 <st_check_boundaries>
 8001876:	4603      	mov	r3, r0
 8001878:	72fb      	strb	r3, [r7, #11]

    return rslt;
 800187a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800188c:	b08c      	sub	sp, #48	; 0x30
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe57 	bl	8000554 <__aeabi_i2d>
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b6c      	ldr	r3, [pc, #432]	; (8001a5c <compensate_temperature+0x1d4>)
 80018ac:	f7fe ffe6 	bl	800087c <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	461d      	mov	r5, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	8b9b      	ldrh	r3, [r3, #28]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe39 	bl	8000534 <__aeabi_ui2d>
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b66      	ldr	r3, [pc, #408]	; (8001a60 <compensate_temperature+0x1d8>)
 80018c8:	f7fe ffd8 	bl	800087c <__aeabi_ddiv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4620      	mov	r0, r4
 80018d2:	4629      	mov	r1, r5
 80018d4:	f7fe fcf0 	bl	80002b8 <__aeabi_dsub>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4614      	mov	r4, r2
 80018de:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe34 	bl	8000554 <__aeabi_i2d>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018f0:	4620      	mov	r0, r4
 80018f2:	4629      	mov	r1, r5
 80018f4:	f7fe fe98 	bl	8000628 <__aeabi_dmul>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe25 	bl	8000554 <__aeabi_i2d>
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001912:	f7fe ffb3 	bl	800087c <__aeabi_ddiv>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4614      	mov	r4, r2
 800191c:	461d      	mov	r5, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	8b9b      	ldrh	r3, [r3, #28]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe06 	bl	8000534 <__aeabi_ui2d>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <compensate_temperature+0x1dc>)
 800192e:	f7fe ffa5 	bl	800087c <__aeabi_ddiv>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4620      	mov	r0, r4
 8001938:	4629      	mov	r1, r5
 800193a:	f7fe fcbd 	bl	80002b8 <__aeabi_dsub>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4614      	mov	r4, r2
 8001944:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fe02 	bl	8000554 <__aeabi_i2d>
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001958:	f7fe ff90 	bl	800087c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4690      	mov	r8, r2
 8001962:	4699      	mov	r9, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	8b9b      	ldrh	r3, [r3, #28]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fde3 	bl	8000534 <__aeabi_ui2d>
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <compensate_temperature+0x1dc>)
 8001974:	f7fe ff82 	bl	800087c <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4640      	mov	r0, r8
 800197e:	4649      	mov	r1, r9
 8001980:	f7fe fc9a 	bl	80002b8 <__aeabi_dsub>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fe4c 	bl	8000628 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4614      	mov	r4, r2
 8001996:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdd8 	bl	8000554 <__aeabi_i2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
    var2 =
 80019a8:	4620      	mov	r0, r4
 80019aa:	4629      	mov	r1, r5
 80019ac:	f7fe fe3c 	bl	8000628 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80019b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019c0:	f7fe fc7c 	bl	80002bc <__adddf3>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff f8c6 	bl	8000b5c <__aeabi_d2iz>
 80019d0:	4602      	mov	r2, r0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 80019d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019de:	f7fe fc6d 	bl	80002bc <__adddf3>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <compensate_temperature+0x1e0>)
 80019f0:	f7fe ff44 	bl	800087c <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <compensate_temperature+0x1e4>)
 8001a02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a06:	f7ff f881 	bl	8000b0c <__aeabi_dcmplt>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <compensate_temperature+0x1e4>)
 8001a16:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <compensate_temperature+0x1e8>)
 8001a26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a2a:	f7ff f88d 	bl	8000b48 <__aeabi_dcmpgt>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <compensate_temperature+0x1e8>)
 8001a3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a4a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3730      	adds	r7, #48	; 0x30
 8001a56:	46bd      	mov	sp, r7
 8001a58:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a5c:	40d00000 	.word	0x40d00000
 8001a60:	40900000 	.word	0x40900000
 8001a64:	40c00000 	.word	0x40c00000
 8001a68:	40b40000 	.word	0x40b40000
 8001a6c:	c0440000 	.word	0xc0440000
 8001a70:	40554000 	.word	0x40554000
 8001a74:	00000000 	.word	0x00000000

08001a78 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd5a 	bl	8000554 <__aeabi_i2d>
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa8:	f7fe fee8 	bl	800087c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4bcb      	ldr	r3, [pc, #812]	; (8001de8 <compensate_pressure+0x370>)
 8001aba:	f7fe fbfd 	bl	80002b8 <__aeabi_dsub>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001ac6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ace:	f7fe fdab 	bl	8000628 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4614      	mov	r4, r2
 8001ad8:	461d      	mov	r5, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fd37 	bl	8000554 <__aeabi_i2d>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4620      	mov	r0, r4
 8001aec:	4629      	mov	r1, r5
 8001aee:	f7fe fd9b 	bl	8000628 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	4bbb      	ldr	r3, [pc, #748]	; (8001dec <compensate_pressure+0x374>)
 8001b00:	f7fe febc 	bl	800087c <__aeabi_ddiv>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd1e 	bl	8000554 <__aeabi_i2d>
 8001b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b1c:	f7fe fd84 	bl	8000628 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	f7fe fbc6 	bl	80002bc <__adddf3>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b38:	f7fe fbc0 	bl	80002bc <__adddf3>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4ba9      	ldr	r3, [pc, #676]	; (8001df0 <compensate_pressure+0x378>)
 8001b4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b4e:	f7fe fe95 	bl	800087c <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4614      	mov	r4, r2
 8001b58:	461d      	mov	r5, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcf7 	bl	8000554 <__aeabi_i2d>
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	4ba2      	ldr	r3, [pc, #648]	; (8001df4 <compensate_pressure+0x37c>)
 8001b6c:	f7fe fd5c 	bl	8000628 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4620      	mov	r0, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	f7fe fba0 	bl	80002bc <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fce2 	bl	8000554 <__aeabi_i2d>
 8001b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b94:	f7fe fd48 	bl	8000628 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba4:	f7fe fd40 	bl	8000628 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b90      	ldr	r3, [pc, #576]	; (8001df8 <compensate_pressure+0x380>)
 8001bb6:	f7fe fe61 	bl	800087c <__aeabi_ddiv>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fcc3 	bl	8000554 <__aeabi_i2d>
 8001bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd2:	f7fe fd29 	bl	8000628 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fb6d 	bl	80002bc <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b82      	ldr	r3, [pc, #520]	; (8001df8 <compensate_pressure+0x380>)
 8001bf0:	f7fe fe44 	bl	800087c <__aeabi_ddiv>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b7a      	ldr	r3, [pc, #488]	; (8001dec <compensate_pressure+0x374>)
 8001c02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c06:	f7fe fe39 	bl	800087c <__aeabi_ddiv>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b79      	ldr	r3, [pc, #484]	; (8001dfc <compensate_pressure+0x384>)
 8001c18:	f7fe fb50 	bl	80002bc <__adddf3>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4614      	mov	r4, r2
 8001c22:	461d      	mov	r5, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fc83 	bl	8000534 <__aeabi_ui2d>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4620      	mov	r0, r4
 8001c34:	4629      	mov	r1, r5
 8001c36:	f7fe fcf7 	bl	8000628 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c4e:	f7fe ff5d 	bl	8000b0c <__aeabi_dcmplt>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10b      	bne.n	8001c70 <compensate_pressure+0x1f8>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c64:	f7fe ff70 	bl	8000b48 <__aeabi_dcmpgt>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80de 	beq.w	8001e2c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc5d 	bl	8000534 <__aeabi_ui2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	495f      	ldr	r1, [pc, #380]	; (8001e00 <compensate_pressure+0x388>)
 8001c84:	f7fe fb18 	bl	80002b8 <__aeabi_dsub>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <compensate_pressure+0x38c>)
 8001c96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c9a:	f7fe fdef 	bl	800087c <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ca6:	f7fe fb07 	bl	80002b8 <__aeabi_dsub>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	a347      	add	r3, pc, #284	; (adr r3, 8001dd0 <compensate_pressure+0x358>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fcb6 	bl	8000628 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc8:	f7fe fdd8 	bl	800087c <__aeabi_ddiv>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc3a 	bl	8000554 <__aeabi_i2d>
 8001ce0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ce4:	f7fe fca0 	bl	8000628 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cf4:	f7fe fc98 	bl	8000628 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b40      	ldr	r3, [pc, #256]	; (8001e08 <compensate_pressure+0x390>)
 8001d06:	f7fe fdb9 	bl	800087c <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc1b 	bl	8000554 <__aeabi_i2d>
 8001d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d22:	f7fe fc81 	bl	8000628 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <compensate_pressure+0x374>)
 8001d34:	f7fe fda2 	bl	800087c <__aeabi_ddiv>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d48:	f7fe fab8 	bl	80002bc <__adddf3>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4614      	mov	r4, r2
 8001d52:	461d      	mov	r5, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fbfa 	bl	8000554 <__aeabi_i2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4620      	mov	r0, r4
 8001d66:	4629      	mov	r1, r5
 8001d68:	f7fe faa8 	bl	80002bc <__adddf3>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <compensate_pressure+0x394>)
 8001d7a:	f7fe fd7f 	bl	800087c <__aeabi_ddiv>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d86:	f7fe fa99 	bl	80002bc <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001d92:	a311      	add	r3, pc, #68	; (adr r3, 8001dd8 <compensate_pressure+0x360>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d9c:	f7fe feb6 	bl	8000b0c <__aeabi_dcmplt>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001da6:	a30c      	add	r3, pc, #48	; (adr r3, 8001dd8 <compensate_pressure+0x360>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001db0:	2303      	movs	r3, #3
 8001db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001db6:	a30a      	add	r3, pc, #40	; (adr r3, 8001de0 <compensate_pressure+0x368>)
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dc0:	f7fe fec2 	bl	8000b48 <__aeabi_dcmpgt>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	e022      	b.n	8001e10 <compensate_pressure+0x398>
 8001dca:	bf00      	nop
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	40b86a00 	.word	0x40b86a00
 8001dd8:	00000000 	.word	0x00000000
 8001ddc:	40dd4c00 	.word	0x40dd4c00
 8001de0:	00000000 	.word	0x00000000
 8001de4:	40fadb00 	.word	0x40fadb00
 8001de8:	40ef4000 	.word	0x40ef4000
 8001dec:	40e00000 	.word	0x40e00000
 8001df0:	40100000 	.word	0x40100000
 8001df4:	40f00000 	.word	0x40f00000
 8001df8:	41200000 	.word	0x41200000
 8001dfc:	3ff00000 	.word	0x3ff00000
 8001e00:	41300000 	.word	0x41300000
 8001e04:	40b00000 	.word	0x40b00000
 8001e08:	41e00000 	.word	0x41e00000
 8001e0c:	40300000 	.word	0x40300000
 8001e10:	d007      	beq.n	8001e22 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e12:	a309      	add	r3, pc, #36	; (adr r3, 8001e38 <compensate_pressure+0x3c0>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001e22:	68f9      	ldr	r1, [r7, #12]
 8001e24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e28:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3730      	adds	r7, #48	; 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bdb0      	pop	{r4, r5, r7, pc}
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	40fadb00 	.word	0x40fadb00

08001e40 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db03      	blt.n	8001e5c <st_check_boundaries+0x1c>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <st_check_boundaries+0x88>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	dd09      	ble.n	8001e70 <st_check_boundaries+0x30>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db06      	blt.n	8001e70 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <st_check_boundaries+0x88>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	dc02      	bgt.n	8001e70 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001e6a:	23fa      	movs	r3, #250	; 0xfa
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e023      	b.n	8001eb8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db03      	blt.n	8001e7e <st_check_boundaries+0x3e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a13      	ldr	r2, [pc, #76]	; (8001ec8 <st_check_boundaries+0x88>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	dd09      	ble.n	8001e92 <st_check_boundaries+0x52>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db06      	blt.n	8001e92 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <st_check_boundaries+0x88>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	dc02      	bgt.n	8001e92 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001e8c:	23fb      	movs	r3, #251	; 0xfb
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	e012      	b.n	8001eb8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db03      	blt.n	8001ea0 <st_check_boundaries+0x60>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <st_check_boundaries+0x88>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	dd09      	ble.n	8001eb4 <st_check_boundaries+0x74>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db03      	blt.n	8001eae <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <st_check_boundaries+0x88>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	dd02      	ble.n	8001eb4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001eae:	23f9      	movs	r3, #249	; 0xf9
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e001      	b.n	8001eb8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	000ffff0 	.word	0x000ffff0

08001ecc <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff f837 	bl	8000f48 <bmp2_init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001ede:	f107 0308 	add.w	r3, r7, #8
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff f91c 	bl	8001122 <bmp2_get_config>
 8001eea:	4603      	mov	r3, r0
 8001eec:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff f94e 	bl	80011a2 <bmp2_set_config>
 8001f06:	4603      	mov	r3, r0
 8001f08:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4619      	mov	r1, r3
 8001f12:	2003      	movs	r0, #3
 8001f14:	f7ff f980 	bl	8001218 <bmp2_set_power_mode>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f1c:	f107 0108 	add.w	r1, r7, #8
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fa0a 	bl	8001340 <bmp2_compute_meas_time>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f50:	2300      	movs	r3, #0
 8001f52:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	6858      	ldr	r0, [r3, #4]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	891b      	ldrh	r3, [r3, #8]
 8001f60:	2200      	movs	r2, #0
 8001f62:	4619      	mov	r1, r3
 8001f64:	f001 fa96 	bl	8003494 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	f107 010f 	add.w	r1, r7, #15
 8001f70:	2305      	movs	r3, #5
 8001f72:	2201      	movs	r2, #1
 8001f74:	f002 fc6d 	bl	8004852 <HAL_SPI_Transmit>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	2305      	movs	r3, #5
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	f002 fdd1 	bl	8004b2e <HAL_SPI_Receive>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	7dbb      	ldrb	r3, [r7, #22]
 8001f92:	4413      	add	r3, r2
 8001f94:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6858      	ldr	r0, [r3, #4]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	891b      	ldrh	r3, [r3, #8]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f001 fa77 	bl	8003494 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001fa6:	7dbb      	ldrb	r3, [r7, #22]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <bmp2_spi_read+0x74>
    iError = -1;
 8001fac:	23ff      	movs	r3, #255	; 0xff
 8001fae:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	4603      	mov	r3, r0
 8001fca:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	6858      	ldr	r0, [r3, #4]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	891b      	ldrh	r3, [r3, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f001 fa56 	bl	8003494 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	f107 010f 	add.w	r1, r7, #15
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f002 fc2d 	bl	8004852 <HAL_SPI_Transmit>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	b29a      	uxth	r2, r3
 8002004:	2305      	movs	r3, #5
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	f002 fc23 	bl	8004852 <HAL_SPI_Transmit>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	7dbb      	ldrb	r3, [r7, #22]
 8002012:	4413      	add	r3, r2
 8002014:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	6858      	ldr	r0, [r3, #4]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	891b      	ldrh	r3, [r3, #8]
 800201e:	2201      	movs	r2, #1
 8002020:	4619      	mov	r1, r3
 8002022:	f001 fa37 	bl	8003494 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002026:	7dbb      	ldrb	r3, [r7, #22]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <bmp2_spi_write+0x74>
    iError = -1;
 800202c:	23ff      	movs	r3, #255	; 0xff
 800202e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002030:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a05      	ldr	r2, [pc, #20]	; (8002060 <bmp2_delay_us+0x24>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	099b      	lsrs	r3, r3, #6
 8002050:	4618      	mov	r0, r3
 8002052:	f000 feab 	bl	8002dac <HAL_Delay>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	10624dd3 	.word	0x10624dd3

08002064 <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b08d      	sub	sp, #52	; 0x34
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 800206c:	23ff      	movs	r3, #255	; 0xff
 800206e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double temp = NAN;
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <BMP2_ReadTemperature_degC+0x9c>)
 8002078:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	899b      	ldrh	r3, [r3, #12]
 8002082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff f897 	bl	80011c0 <bmp2_get_status>
 8002092:	4603      	mov	r3, r0
 8002094:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002098:	f107 0308 	add.w	r3, r7, #8
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f8cf 	bl	8001242 <bmp2_get_sensor_data>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    temp = comp_data.temperature;
 80020aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 80020b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80020c0:	7f3b      	ldrb	r3, [r7, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <BMP2_ReadTemperature_degC+0x6a>
 80020c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	dcdb      	bgt.n	8002086 <BMP2_ReadTemperature_degC+0x22>

  /* Save reading result in sensor handler */
  BMP2_GET_TEMP(dev) = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685c      	ldr	r4, [r3, #4]
 80020d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020d6:	f7fe fd69 	bl	8000bac <__aeabi_d2f>
 80020da:	4603      	mov	r3, r0
 80020dc:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80020e6:	729a      	strb	r2, [r3, #10]

  return temp;
 80020e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80020f0:	eeb0 0a47 	vmov.f32	s0, s14
 80020f4:	eef0 0a67 	vmov.f32	s1, s15
 80020f8:	3734      	adds	r7, #52	; 0x34
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}
 80020fe:	bf00      	nop
 8002100:	7ff80000 	.word	0x7ff80000

08002104 <BMP2_ReadPressure_hPa>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Pressure measurement [hPa]
 */
double BMP2_ReadPressure_hPa(struct bmp2_dev *dev)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b08d      	sub	sp, #52	; 0x34
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 800210c:	23ff      	movs	r3, #255	; 0xff
 800210e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double press = NAN;
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	4b25      	ldr	r3, [pc, #148]	; (80021ac <BMP2_ReadPressure_hPa+0xa8>)
 8002118:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	899b      	ldrh	r3, [r3, #12]
 8002122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002126:	f107 031c 	add.w	r3, r7, #28
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff f847 	bl	80011c0 <bmp2_get_status>
 8002132:	4603      	mov	r3, r0
 8002134:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002138:	f107 0308 	add.w	r3, r7, #8
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f87f 	bl	8001242 <bmp2_get_sensor_data>
 8002144:	4603      	mov	r3, r0
 8002146:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    press = comp_data.pressure / 100.0;
 800214a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <BMP2_ReadPressure_hPa+0xac>)
 8002154:	f7fe fb92 	bl	800087c <__aeabi_ddiv>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 8002160:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002164:	b2db      	uxtb	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 800216e:	7f3b      	ldrb	r3, [r7, #28]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <BMP2_ReadPressure_hPa+0x78>
 8002174:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002178:	2b00      	cmp	r3, #0
 800217a:	dcd4      	bgt.n	8002126 <BMP2_ReadPressure_hPa+0x22>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = press;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685c      	ldr	r4, [r3, #4]
 8002180:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002184:	f7fe fd12 	bl	8000bac <__aeabi_d2f>
 8002188:	4603      	mov	r3, r0
 800218a:	6163      	str	r3, [r4, #20]
  BMP2_GET_STATUS(dev) = rslt;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002194:	729a      	strb	r2, [r3, #10]

  return press;
 8002196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800219a:	ec43 2b17 	vmov	d7, r2, r3
}
 800219e:	eeb0 0a47 	vmov.f32	s0, s14
 80021a2:	eef0 0a67 	vmov.f32	s1, s15
 80021a6:	3734      	adds	r7, #52	; 0x34
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd90      	pop	{r4, r7, pc}
 80021ac:	7ff80000 	.word	0x7ff80000
 80021b0:	40590000 	.word	0x40590000

080021b4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	; 0x30
 80021b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ca:	4b86      	ldr	r3, [pc, #536]	; (80023e4 <MX_GPIO_Init+0x230>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a85      	ldr	r2, [pc, #532]	; (80023e4 <MX_GPIO_Init+0x230>)
 80021d0:	f043 0310 	orr.w	r3, r3, #16
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b83      	ldr	r3, [pc, #524]	; (80023e4 <MX_GPIO_Init+0x230>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	4b80      	ldr	r3, [pc, #512]	; (80023e4 <MX_GPIO_Init+0x230>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a7f      	ldr	r2, [pc, #508]	; (80023e4 <MX_GPIO_Init+0x230>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b7d      	ldr	r3, [pc, #500]	; (80023e4 <MX_GPIO_Init+0x230>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021fa:	4b7a      	ldr	r3, [pc, #488]	; (80023e4 <MX_GPIO_Init+0x230>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a79      	ldr	r2, [pc, #484]	; (80023e4 <MX_GPIO_Init+0x230>)
 8002200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b77      	ldr	r3, [pc, #476]	; (80023e4 <MX_GPIO_Init+0x230>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	4b74      	ldr	r3, [pc, #464]	; (80023e4 <MX_GPIO_Init+0x230>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a73      	ldr	r2, [pc, #460]	; (80023e4 <MX_GPIO_Init+0x230>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b71      	ldr	r3, [pc, #452]	; (80023e4 <MX_GPIO_Init+0x230>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	4b6e      	ldr	r3, [pc, #440]	; (80023e4 <MX_GPIO_Init+0x230>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a6d      	ldr	r2, [pc, #436]	; (80023e4 <MX_GPIO_Init+0x230>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b6b      	ldr	r3, [pc, #428]	; (80023e4 <MX_GPIO_Init+0x230>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002242:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <MX_GPIO_Init+0x230>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a67      	ldr	r2, [pc, #412]	; (80023e4 <MX_GPIO_Init+0x230>)
 8002248:	f043 0308 	orr.w	r3, r3, #8
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <MX_GPIO_Init+0x230>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800225a:	4b62      	ldr	r3, [pc, #392]	; (80023e4 <MX_GPIO_Init+0x230>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a61      	ldr	r2, [pc, #388]	; (80023e4 <MX_GPIO_Init+0x230>)
 8002260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b5f      	ldr	r3, [pc, #380]	; (80023e4 <MX_GPIO_Init+0x230>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 8002272:	2200      	movs	r2, #0
 8002274:	2110      	movs	r1, #16
 8002276:	485c      	ldr	r0, [pc, #368]	; (80023e8 <MX_GPIO_Init+0x234>)
 8002278:	f001 f90c 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800227c:	2200      	movs	r2, #0
 800227e:	f244 0181 	movw	r1, #16513	; 0x4081
 8002282:	485a      	ldr	r0, [pc, #360]	; (80023ec <MX_GPIO_Init+0x238>)
 8002284:	f001 f906 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	2140      	movs	r1, #64	; 0x40
 800228c:	4858      	ldr	r0, [pc, #352]	; (80023f0 <MX_GPIO_Init+0x23c>)
 800228e:	f001 f901 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8002292:	2310      	movs	r3, #16
 8002294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	2301      	movs	r3, #1
 8002298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	4619      	mov	r1, r3
 80022a8:	484f      	ldr	r0, [pc, #316]	; (80023e8 <MX_GPIO_Init+0x234>)
 80022aa:	f000 ff47 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80022ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	4619      	mov	r1, r3
 80022c4:	484b      	ldr	r0, [pc, #300]	; (80023f4 <MX_GPIO_Init+0x240>)
 80022c6:	f000 ff39 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80022ca:	2332      	movs	r3, #50	; 0x32
 80022cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022da:	230b      	movs	r3, #11
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	4619      	mov	r1, r3
 80022e4:	4843      	ldr	r0, [pc, #268]	; (80023f4 <MX_GPIO_Init+0x240>)
 80022e6:	f000 ff29 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80022ea:	2386      	movs	r3, #134	; 0x86
 80022ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022fa:	230b      	movs	r3, #11
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	4619      	mov	r1, r3
 8002304:	483c      	ldr	r0, [pc, #240]	; (80023f8 <MX_GPIO_Init+0x244>)
 8002306:	f000 ff19 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800230a:	f244 0381 	movw	r3, #16513	; 0x4081
 800230e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	4832      	ldr	r0, [pc, #200]	; (80023ec <MX_GPIO_Init+0x238>)
 8002324:	f000 ff0a 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800232c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002336:	2303      	movs	r3, #3
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800233a:	230b      	movs	r3, #11
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	4619      	mov	r1, r3
 8002344:	4829      	ldr	r0, [pc, #164]	; (80023ec <MX_GPIO_Init+0x238>)
 8002346:	f000 fef9 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800234a:	2340      	movs	r3, #64	; 0x40
 800234c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	2301      	movs	r3, #1
 8002350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	4619      	mov	r1, r3
 8002360:	4823      	ldr	r0, [pc, #140]	; (80023f0 <MX_GPIO_Init+0x23c>)
 8002362:	f000 feeb 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	4619      	mov	r1, r3
 8002378:	481d      	ldr	r0, [pc, #116]	; (80023f0 <MX_GPIO_Init+0x23c>)
 800237a:	f000 fedf 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800237e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002390:	230a      	movs	r3, #10
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	4619      	mov	r1, r3
 800239a:	4817      	ldr	r0, [pc, #92]	; (80023f8 <MX_GPIO_Init+0x244>)
 800239c:	f000 fece 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80023a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023ae:	f107 031c 	add.w	r3, r7, #28
 80023b2:	4619      	mov	r1, r3
 80023b4:	4810      	ldr	r0, [pc, #64]	; (80023f8 <MX_GPIO_Init+0x244>)
 80023b6:	f000 fec1 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80023ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80023be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c8:	2303      	movs	r3, #3
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023cc:	230b      	movs	r3, #11
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	4619      	mov	r1, r3
 80023d6:	4806      	ldr	r0, [pc, #24]	; (80023f0 <MX_GPIO_Init+0x23c>)
 80023d8:	f000 feb0 	bl	800313c <HAL_GPIO_Init>

}
 80023dc:	bf00      	nop
 80023de:	3730      	adds	r7, #48	; 0x30
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40020400 	.word	0x40020400
 80023f0:	40021800 	.word	0x40021800
 80023f4:	40020800 	.word	0x40020800
 80023f8:	40020000 	.word	0x40020000

080023fc <HAL_TIM_PeriodElapsedCallback>:
int newTemp = 0;
float preassure;
int newPreassure = 0;
uint8_t dane[128];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if(htim==&htim2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a32      	ldr	r2, [pc, #200]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d15c      	bne.n	80024c6 <HAL_TIM_PeriodElapsedCallback+0xca>
  {
	  preassure = BMP2_ReadPressure_hPa(&bmp2dev_1);
 800240c:	4831      	ldr	r0, [pc, #196]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800240e:	f7ff fe79 	bl	8002104 <BMP2_ReadPressure_hPa>
 8002412:	ec53 2b10 	vmov	r2, r3, d0
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fbc7 	bl	8000bac <__aeabi_d2f>
 800241e:	4603      	mov	r3, r0
 8002420:	4a2d      	ldr	r2, [pc, #180]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002422:	6013      	str	r3, [r2, #0]
	  temp = BMP2_ReadTemperature_degC(&bmp2dev_1);
 8002424:	482b      	ldr	r0, [pc, #172]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002426:	f7ff fe1d 	bl	8002064 <BMP2_ReadTemperature_degC>
 800242a:	ec53 2b10 	vmov	r2, r3, d0
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f7fe fbbb 	bl	8000bac <__aeabi_d2f>
 8002436:	4603      	mov	r3, r0
 8002438:	4a28      	ldr	r2, [pc, #160]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800243a:	6013      	str	r3, [r2, #0]
	  newTemp = (int)(temp*1000);
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80024e0 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8002446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800244a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800244e:	ee17 2a90 	vmov	r2, s15
 8002452:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002454:	601a      	str	r2, [r3, #0]
	  newPreassure = (int)(preassure*1000);
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80024e0 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8002460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002468:	ee17 2a90 	vmov	r2, s15
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800246e:	601a      	str	r2, [r3, #0]
	  int afterKropkaTemp = newTemp%1000;
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002476:	fb82 1203 	smull	r1, r2, r2, r3
 800247a:	1191      	asrs	r1, r2, #6
 800247c:	17da      	asrs	r2, r3, #31
 800247e:	1a8a      	subs	r2, r1, r2
 8002480:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002484:	fb01 f202 	mul.w	r2, r1, r2
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	617b      	str	r3, [r7, #20]
	  int afterKropkaPressure = newPreassure%1000;
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a16      	ldr	r2, [pc, #88]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002492:	fb82 1203 	smull	r1, r2, r2, r3
 8002496:	1191      	asrs	r1, r2, #6
 8002498:	17da      	asrs	r2, r3, #31
 800249a:	1a8a      	subs	r2, r1, r2
 800249c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024a0:	fb01 f202 	mul.w	r2, r1, r2
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
	  int daneD=sprintf(dane,"%d\r\n",newTemp);
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4910      	ldr	r1, [pc, #64]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80024b0:	4810      	ldr	r0, [pc, #64]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80024b2:	f005 ff47 	bl	8008344 <siprintf>
 80024b6:	60f8      	str	r0, [r7, #12]
	  HAL_UART_Transmit_IT(&huart3,(uint8_t*)dane , daneD);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	490d      	ldr	r1, [pc, #52]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80024c0:	480d      	ldr	r0, [pc, #52]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80024c2:	f004 fb8f 	bl	8006be4 <HAL_UART_Transmit_IT>
  }
}
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200001d0 	.word	0x200001d0
 80024d4:	20000018 	.word	0x20000018
 80024d8:	200000d4 	.word	0x200000d4
 80024dc:	200000cc 	.word	0x200000cc
 80024e0:	447a0000 	.word	0x447a0000
 80024e4:	200000d0 	.word	0x200000d0
 80024e8:	200000d8 	.word	0x200000d8
 80024ec:	10624dd3 	.word	0x10624dd3
 80024f0:	08008cd8 	.word	0x08008cd8
 80024f4:	200000dc 	.word	0x200000dc
 80024f8:	20000268 	.word	0x20000268

080024fc <HAL_UART_RxCpltCallback>:

unsigned char PWM[6];
int duty = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
    duty = strtol((unsigned char*)&PWM[3], NULL, 10);
 8002504:	220a      	movs	r2, #10
 8002506:	2100      	movs	r1, #0
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <HAL_UART_RxCpltCallback+0x40>)
 800250a:	f005 ff11 	bl	8008330 <strtol>
 800250e:	4603      	mov	r3, r0
 8002510:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <HAL_UART_RxCpltCallback+0x44>)
 8002512:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty*10);
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <HAL_UART_RxCpltCallback+0x44>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	461a      	mov	r2, r3
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_UART_RxCpltCallback+0x48>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_UART_Receive_IT(&huart3,(unsigned char*)PWM , 6);
 8002528:	2206      	movs	r2, #6
 800252a:	4907      	ldr	r1, [pc, #28]	; (8002548 <HAL_UART_RxCpltCallback+0x4c>)
 800252c:	4807      	ldr	r0, [pc, #28]	; (800254c <HAL_UART_RxCpltCallback+0x50>)
 800252e:	f004 fbb7 	bl	8006ca0 <HAL_UART_Receive_IT>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000015f 	.word	0x2000015f
 8002540:	20000164 	.word	0x20000164
 8002544:	2000021c 	.word	0x2000021c
 8002548:	2000015c 	.word	0x2000015c
 800254c:	20000268 	.word	0x20000268

08002550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002554:	f000 fbcd 	bl	8002cf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002558:	f000 f824 	bl	80025a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800255c:	f7ff fe2a 	bl	80021b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002560:	f000 fb06 	bl	8002b70 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8002564:	f000 f892 	bl	800268c <MX_SPI4_Init>
  MX_TIM2_Init();
 8002568:	f000 f9d8 	bl	800291c <MX_TIM2_Init>
  MX_TIM3_Init();
 800256c:	f000 fa24 	bl	80029b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev_1);
 8002570:	4807      	ldr	r0, [pc, #28]	; (8002590 <main+0x40>)
 8002572:	f7ff fcab 	bl	8001ecc <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8002576:	4807      	ldr	r0, [pc, #28]	; (8002594 <main+0x44>)
 8002578:	f003 f98c 	bl	8005894 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800257c:	2100      	movs	r1, #0
 800257e:	4806      	ldr	r0, [pc, #24]	; (8002598 <main+0x48>)
 8002580:	f003 fa58 	bl	8005a34 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3,(unsigned char*)PWM , 6);
 8002584:	2206      	movs	r2, #6
 8002586:	4905      	ldr	r1, [pc, #20]	; (800259c <main+0x4c>)
 8002588:	4805      	ldr	r0, [pc, #20]	; (80025a0 <main+0x50>)
 800258a:	f004 fb89 	bl	8006ca0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800258e:	e7fe      	b.n	800258e <main+0x3e>
 8002590:	20000018 	.word	0x20000018
 8002594:	200001d0 	.word	0x200001d0
 8002598:	2000021c 	.word	0x2000021c
 800259c:	2000015c 	.word	0x2000015c
 80025a0:	20000268 	.word	0x20000268

080025a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b094      	sub	sp, #80	; 0x50
 80025a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025aa:	f107 0320 	add.w	r3, r7, #32
 80025ae:	2230      	movs	r2, #48	; 0x30
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f005 fee6 	bl	8008384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80025c8:	f000 ff7e 	bl	80034c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <SystemClock_Config+0xd4>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	4a29      	ldr	r2, [pc, #164]	; (8002678 <SystemClock_Config+0xd4>)
 80025d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d6:	6413      	str	r3, [r2, #64]	; 0x40
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <SystemClock_Config+0xd4>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <SystemClock_Config+0xd8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a24      	ldr	r2, [pc, #144]	; (800267c <SystemClock_Config+0xd8>)
 80025ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <SystemClock_Config+0xd8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025fc:	2301      	movs	r3, #1
 80025fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002600:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002606:	2302      	movs	r3, #2
 8002608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800260a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002610:	2304      	movs	r3, #4
 8002612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002614:	23d8      	movs	r3, #216	; 0xd8
 8002616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002618:	2302      	movs	r3, #2
 800261a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800261c:	2303      	movs	r3, #3
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002620:	f107 0320 	add.w	r3, r7, #32
 8002624:	4618      	mov	r0, r3
 8002626:	f000 ffaf 	bl	8003588 <HAL_RCC_OscConfig>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002630:	f000 f826 	bl	8002680 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002634:	f000 ff58 	bl	80034e8 <HAL_PWREx_EnableOverDrive>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800263e:	f000 f81f 	bl	8002680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002642:	230f      	movs	r3, #15
 8002644:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002646:	2302      	movs	r3, #2
 8002648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800264e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002654:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800265a:	f107 030c 	add.w	r3, r7, #12
 800265e:	2107      	movs	r1, #7
 8002660:	4618      	mov	r0, r3
 8002662:	f001 fa35 	bl	8003ad0 <HAL_RCC_ClockConfig>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800266c:	f000 f808 	bl	8002680 <Error_Handler>
  }
}
 8002670:	bf00      	nop
 8002672:	3750      	adds	r7, #80	; 0x50
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40023800 	.word	0x40023800
 800267c:	40007000 	.word	0x40007000

08002680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002684:	b672      	cpsid	i
}
 8002686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002688:	e7fe      	b.n	8002688 <Error_Handler+0x8>
	...

0800268c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <MX_SPI4_Init+0x74>)
 8002692:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <MX_SPI4_Init+0x78>)
 8002694:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <MX_SPI4_Init+0x74>)
 8002698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800269c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <MX_SPI4_Init+0x74>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80026a4:	4b16      	ldr	r3, [pc, #88]	; (8002700 <MX_SPI4_Init+0x74>)
 80026a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026aa:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <MX_SPI4_Init+0x74>)
 80026ae:	2202      	movs	r2, #2
 80026b0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80026b2:	4b13      	ldr	r3, [pc, #76]	; (8002700 <MX_SPI4_Init+0x74>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <MX_SPI4_Init+0x74>)
 80026ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026be:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <MX_SPI4_Init+0x74>)
 80026c2:	2210      	movs	r2, #16
 80026c4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <MX_SPI4_Init+0x74>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <MX_SPI4_Init+0x74>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <MX_SPI4_Init+0x74>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <MX_SPI4_Init+0x74>)
 80026da:	2207      	movs	r2, #7
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <MX_SPI4_Init+0x74>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <MX_SPI4_Init+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_SPI4_Init+0x74>)
 80026ec:	f002 f806 	bl	80046fc <HAL_SPI_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80026f6:	f7ff ffc3 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000168 	.word	0x20000168
 8002704:	40013400 	.word	0x40013400

08002708 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_SPI_MspInit+0x8c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d12f      	bne.n	800278a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_SPI_MspInit+0x90>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <HAL_SPI_MspInit+0x90>)
 8002730:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002734:	6453      	str	r3, [r2, #68]	; 0x44
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_SPI_MspInit+0x90>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_SPI_MspInit+0x90>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <HAL_SPI_MspInit+0x90>)
 8002748:	f043 0310 	orr.w	r3, r3, #16
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_SPI_MspInit+0x90>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800275a:	2364      	movs	r3, #100	; 0x64
 800275c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800276a:	2305      	movs	r3, #5
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4619      	mov	r1, r3
 8002774:	4809      	ldr	r0, [pc, #36]	; (800279c <HAL_SPI_MspInit+0x94>)
 8002776:	f000 fce1 	bl	800313c <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	2054      	movs	r0, #84	; 0x54
 8002780:	f000 fc13 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002784:	2054      	movs	r0, #84	; 0x54
 8002786:	f000 fc2c 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800278a:	bf00      	nop
 800278c:	3728      	adds	r7, #40	; 0x28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40013400 	.word	0x40013400
 8002798:	40023800 	.word	0x40023800
 800279c:	40021000 	.word	0x40021000

080027a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <HAL_MspInit+0x44>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a0e      	ldr	r2, [pc, #56]	; (80027e4 <HAL_MspInit+0x44>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <HAL_MspInit+0x44>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_MspInit+0x44>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <HAL_MspInit+0x44>)
 80027c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_MspInit+0x44>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800

080027e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <NMI_Handler+0x4>

080027ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <HardFault_Handler+0x4>

080027f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <MemManage_Handler+0x4>

080027fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <BusFault_Handler+0x4>

08002800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <UsageFault_Handler+0x4>

08002806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002834:	f000 fa9a 	bl	8002d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <TIM2_IRQHandler+0x10>)
 8002842:	f003 f9f1 	bl	8005c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200001d0 	.word	0x200001d0

08002850 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <TIM3_IRQHandler+0x10>)
 8002856:	f003 f9e7 	bl	8005c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	2000021c 	.word	0x2000021c

08002864 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002868:	4802      	ldr	r0, [pc, #8]	; (8002874 <USART3_IRQHandler+0x10>)
 800286a:	f004 fa5d 	bl	8006d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000268 	.word	0x20000268

08002878 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <SPI4_IRQHandler+0x10>)
 800287e:	f002 fc99 	bl	80051b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000168 	.word	0x20000168

0800288c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002894:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <_sbrk+0x5c>)
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <_sbrk+0x60>)
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <_sbrk+0x64>)
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <_sbrk+0x68>)
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d207      	bcs.n	80028cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028bc:	f005 fd6a 	bl	8008394 <__errno>
 80028c0:	4603      	mov	r3, r0
 80028c2:	220c      	movs	r2, #12
 80028c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ca:	e009      	b.n	80028e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <_sbrk+0x64>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <_sbrk+0x64>)
 80028dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028de:	68fb      	ldr	r3, [r7, #12]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20050000 	.word	0x20050000
 80028ec:	00000400 	.word	0x00000400
 80028f0:	200001cc 	.word	0x200001cc
 80028f4:	20000440 	.word	0x20000440

080028f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <SystemInit+0x20>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <SystemInit+0x20>)
 8002904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <MX_TIM2_Init+0x94>)
 800293c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002940:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <MX_TIM2_Init+0x94>)
 8002944:	226b      	movs	r2, #107	; 0x6b
 8002946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <MX_TIM2_Init+0x94>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249999;
 800294e:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <MX_TIM2_Init+0x94>)
 8002950:	4a18      	ldr	r2, [pc, #96]	; (80029b4 <MX_TIM2_Init+0x98>)
 8002952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002954:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <MX_TIM2_Init+0x94>)
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <MX_TIM2_Init+0x94>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002960:	4813      	ldr	r0, [pc, #76]	; (80029b0 <MX_TIM2_Init+0x94>)
 8002962:	f002 ff3f 	bl	80057e4 <HAL_TIM_Base_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800296c:	f7ff fe88 	bl	8002680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002974:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002976:	f107 0310 	add.w	r3, r7, #16
 800297a:	4619      	mov	r1, r3
 800297c:	480c      	ldr	r0, [pc, #48]	; (80029b0 <MX_TIM2_Init+0x94>)
 800297e:	f003 fb87 	bl	8006090 <HAL_TIM_ConfigClockSource>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002988:	f7ff fe7a 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800298c:	2300      	movs	r3, #0
 800298e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	4619      	mov	r1, r3
 8002998:	4805      	ldr	r0, [pc, #20]	; (80029b0 <MX_TIM2_Init+0x94>)
 800299a:	f004 f829 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029a4:	f7ff fe6c 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029a8:	bf00      	nop
 80029aa:	3720      	adds	r7, #32
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200001d0 	.word	0x200001d0
 80029b4:	0003d08f 	.word	0x0003d08f

080029b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029be:	f107 031c 	add.w	r3, r7, #28
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	605a      	str	r2, [r3, #4]
 80029c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ca:	463b      	mov	r3, r7
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
 80029d8:	615a      	str	r2, [r3, #20]
 80029da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <MX_TIM3_Init+0xac>)
 80029de:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <MX_TIM3_Init+0xb0>)
 80029e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <MX_TIM3_Init+0xac>)
 80029e4:	226b      	movs	r2, #107	; 0x6b
 80029e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e8:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <MX_TIM3_Init+0xac>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80029ee:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <MX_TIM3_Init+0xac>)
 80029f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f6:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <MX_TIM3_Init+0xac>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <MX_TIM3_Init+0xac>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a02:	4818      	ldr	r0, [pc, #96]	; (8002a64 <MX_TIM3_Init+0xac>)
 8002a04:	f002 ffbe 	bl	8005984 <HAL_TIM_PWM_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002a0e:	f7ff fe37 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a1a:	f107 031c 	add.w	r3, r7, #28
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4810      	ldr	r0, [pc, #64]	; (8002a64 <MX_TIM3_Init+0xac>)
 8002a22:	f003 ffe5 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002a2c:	f7ff fe28 	bl	8002680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a30:	2360      	movs	r3, #96	; 0x60
 8002a32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a40:	463b      	mov	r3, r7
 8002a42:	2200      	movs	r2, #0
 8002a44:	4619      	mov	r1, r3
 8002a46:	4807      	ldr	r0, [pc, #28]	; (8002a64 <MX_TIM3_Init+0xac>)
 8002a48:	f003 fa0e 	bl	8005e68 <HAL_TIM_PWM_ConfigChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002a52:	f7ff fe15 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a56:	4803      	ldr	r0, [pc, #12]	; (8002a64 <MX_TIM3_Init+0xac>)
 8002a58:	f000 f852 	bl	8002b00 <HAL_TIM_MspPostInit>

}
 8002a5c:	bf00      	nop
 8002a5e:	3728      	adds	r7, #40	; 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2000021c 	.word	0x2000021c
 8002a68:	40000400 	.word	0x40000400

08002a6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7c:	d113      	bne.n	8002aa6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <HAL_TIM_Base_MspInit+0x44>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <HAL_TIM_Base_MspInit+0x44>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_TIM_Base_MspInit+0x44>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	201c      	movs	r0, #28
 8002a9c:	f000 fa85 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002aa0:	201c      	movs	r0, #28
 8002aa2:	f000 fa9e 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800

08002ab4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <HAL_TIM_PWM_MspInit+0x44>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d113      	bne.n	8002aee <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_TIM_PWM_MspInit+0x48>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <HAL_TIM_PWM_MspInit+0x48>)
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_TIM_PWM_MspInit+0x48>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	201d      	movs	r0, #29
 8002ae4:	f000 fa61 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ae8:	201d      	movs	r0, #29
 8002aea:	f000 fa7a 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40023800 	.word	0x40023800

08002b00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 030c 	add.w	r3, r7, #12
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a11      	ldr	r2, [pc, #68]	; (8002b64 <HAL_TIM_MspPostInit+0x64>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d11b      	bne.n	8002b5a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_TIM_MspPostInit+0x68>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a10      	ldr	r2, [pc, #64]	; (8002b68 <HAL_TIM_MspPostInit+0x68>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_TIM_MspPostInit+0x68>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b3a:	2340      	movs	r3, #64	; 0x40
 8002b3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4e:	f107 030c 	add.w	r3, r7, #12
 8002b52:	4619      	mov	r1, r3
 8002b54:	4805      	ldr	r0, [pc, #20]	; (8002b6c <HAL_TIM_MspPostInit+0x6c>)
 8002b56:	f000 faf1 	bl	800313c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b5a:	bf00      	nop
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020000 	.word	0x40020000

08002b70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b74:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <MX_USART3_UART_Init+0x58>)
 8002b76:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <MX_USART3_UART_Init+0x5c>)
 8002b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002b7a:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <MX_USART3_UART_Init+0x58>)
 8002b7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b82:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <MX_USART3_UART_Init+0x58>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <MX_USART3_UART_Init+0x58>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <MX_USART3_UART_Init+0x58>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <MX_USART3_UART_Init+0x58>)
 8002b96:	220c      	movs	r2, #12
 8002b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <MX_USART3_UART_Init+0x58>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <MX_USART3_UART_Init+0x58>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <MX_USART3_UART_Init+0x58>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <MX_USART3_UART_Init+0x58>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bb2:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_USART3_UART_Init+0x58>)
 8002bb4:	f003 ffc8 	bl	8006b48 <HAL_UART_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002bbe:	f7ff fd5f 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000268 	.word	0x20000268
 8002bcc:	40004800 	.word	0x40004800

08002bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b0aa      	sub	sp, #168	; 0xa8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	2284      	movs	r2, #132	; 0x84
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f005 fbc7 	bl	8008384 <memset>
  if(uartHandle->Instance==USART3)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <HAL_UART_MspInit+0xc4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d144      	bne.n	8002c8a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c04:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c06:	2300      	movs	r3, #0
 8002c08:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c0a:	f107 0310 	add.w	r3, r7, #16
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 f984 	bl	8003f1c <HAL_RCCEx_PeriphCLKConfig>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c1a:	f7ff fd31 	bl	8002680 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_UART_MspInit+0xc8>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <HAL_UART_MspInit+0xc8>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_UART_MspInit+0xc8>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_UART_MspInit+0xc8>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <HAL_UART_MspInit+0xc8>)
 8002c3c:	f043 0308 	orr.w	r3, r3, #8
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_UART_MspInit+0xc8>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	2303      	movs	r3, #3
 8002c64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c68:	2307      	movs	r3, #7
 8002c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c72:	4619      	mov	r1, r3
 8002c74:	4809      	ldr	r0, [pc, #36]	; (8002c9c <HAL_UART_MspInit+0xcc>)
 8002c76:	f000 fa61 	bl	800313c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2027      	movs	r0, #39	; 0x27
 8002c80:	f000 f993 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c84:	2027      	movs	r0, #39	; 0x27
 8002c86:	f000 f9ac 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	37a8      	adds	r7, #168	; 0xa8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40004800 	.word	0x40004800
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40020c00 	.word	0x40020c00

08002ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ca4:	480d      	ldr	r0, [pc, #52]	; (8002cdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ca6:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ca8:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cac:	e002      	b.n	8002cb4 <LoopCopyDataInit>

08002cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb2:	3304      	adds	r3, #4

08002cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb8:	d3f9      	bcc.n	8002cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cba:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cbc:	4c0b      	ldr	r4, [pc, #44]	; (8002cec <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc0:	e001      	b.n	8002cc6 <LoopFillZerobss>

08002cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc4:	3204      	adds	r2, #4

08002cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc8:	d3fb      	bcc.n	8002cc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cca:	f7ff fe15 	bl	80028f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cce:	f005 fb67 	bl	80083a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cd2:	f7ff fc3d 	bl	8002550 <main>
  bx  lr    
 8002cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cd8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002ce4:	08008e3c 	.word	0x08008e3c
  ldr r2, =_sbss
 8002ce8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002cec:	2000043c 	.word	0x2000043c

08002cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf0:	e7fe      	b.n	8002cf0 <ADC_IRQHandler>

08002cf2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf6:	2003      	movs	r0, #3
 8002cf8:	f000 f94c 	bl	8002f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f000 f805 	bl	8002d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d02:	f7ff fd4d 	bl	80027a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_InitTick+0x54>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_InitTick+0x58>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f967 	bl	8002ffe <HAL_SYSTICK_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00e      	b.n	8002d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d80a      	bhi.n	8002d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d40:	2200      	movs	r2, #0
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f000 f92f 	bl	8002faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d4c:	4a06      	ldr	r2, [pc, #24]	; (8002d68 <HAL_InitTick+0x5c>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000054 	.word	0x20000054
 8002d64:	2000005c 	.word	0x2000005c
 8002d68:	20000058 	.word	0x20000058

08002d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_IncTick+0x20>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_IncTick+0x24>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_IncTick+0x24>)
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	2000005c 	.word	0x2000005c
 8002d90:	200002f0 	.word	0x200002f0

08002d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return uwTick;
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_GetTick+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	200002f0 	.word	0x200002f0

08002dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db4:	f7ff ffee 	bl	8002d94 <HAL_GetTick>
 8002db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d005      	beq.n	8002dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_Delay+0x44>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dd2:	bf00      	nop
 8002dd4:	f7ff ffde 	bl	8002d94 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d8f7      	bhi.n	8002dd4 <HAL_Delay+0x28>
  {
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	2000005c 	.word	0x2000005c

08002df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <__NVIC_SetPriorityGrouping+0x40>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e10:	4013      	ands	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e22:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <__NVIC_SetPriorityGrouping+0x40>)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	60d3      	str	r3, [r2, #12]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000ed00 	.word	0xe000ed00
 8002e38:	05fa0000 	.word	0x05fa0000

08002e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <__NVIC_GetPriorityGrouping+0x18>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 0307 	and.w	r3, r3, #7
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	db0b      	blt.n	8002e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4907      	ldr	r1, [pc, #28]	; (8002e90 <__NVIC_EnableIRQ+0x38>)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2001      	movs	r0, #1
 8002e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db0a      	blt.n	8002ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	490c      	ldr	r1, [pc, #48]	; (8002ee0 <__NVIC_SetPriority+0x4c>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ebc:	e00a      	b.n	8002ed4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4908      	ldr	r1, [pc, #32]	; (8002ee4 <__NVIC_SetPriority+0x50>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3b04      	subs	r3, #4
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f1c3 0307 	rsb	r3, r3, #7
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	bf28      	it	cs
 8002f06:	2304      	movcs	r3, #4
 8002f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d902      	bls.n	8002f18 <NVIC_EncodePriority+0x30>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3b03      	subs	r3, #3
 8002f16:	e000      	b.n	8002f1a <NVIC_EncodePriority+0x32>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f30:	f04f 31ff 	mov.w	r1, #4294967295
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43d9      	mvns	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	4313      	orrs	r3, r2
         );
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f60:	d301      	bcc.n	8002f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00f      	b.n	8002f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <SysTick_Config+0x40>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6e:	210f      	movs	r1, #15
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f7ff ff8e 	bl	8002e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <SysTick_Config+0x40>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <SysTick_Config+0x40>)
 8002f80:	2207      	movs	r2, #7
 8002f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000e010 	.word	0xe000e010

08002f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff29 	bl	8002df4 <__NVIC_SetPriorityGrouping>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fbc:	f7ff ff3e 	bl	8002e3c <__NVIC_GetPriorityGrouping>
 8002fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	6978      	ldr	r0, [r7, #20]
 8002fc8:	f7ff ff8e 	bl	8002ee8 <NVIC_EncodePriority>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff5d 	bl	8002e94 <__NVIC_SetPriority>
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff31 	bl	8002e58 <__NVIC_EnableIRQ>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffa2 	bl	8002f50 <SysTick_Config>
 800300c:	4603      	mov	r3, r0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003022:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff feb6 	bl	8002d94 <HAL_GetTick>
 8003028:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d008      	beq.n	8003048 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e052      	b.n	80030ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0216 	bic.w	r2, r2, #22
 8003056:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003066:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d103      	bne.n	8003078 <HAL_DMA_Abort+0x62>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0208 	bic.w	r2, r2, #8
 8003086:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003098:	e013      	b.n	80030c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800309a:	f7ff fe7b 	bl	8002d94 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b05      	cmp	r3, #5
 80030a6:	d90c      	bls.n	80030c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2203      	movs	r2, #3
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e015      	b.n	80030ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e4      	bne.n	800309a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	223f      	movs	r2, #63	; 0x3f
 80030d6:	409a      	lsls	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d004      	beq.n	8003114 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e00c      	b.n	800312e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2205      	movs	r2, #5
 8003118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	e175      	b.n	8003448 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800315c:	2201      	movs	r2, #1
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	429a      	cmp	r2, r3
 8003176:	f040 8164 	bne.w	8003442 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d005      	beq.n	8003192 <HAL_GPIO_Init+0x56>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d130      	bne.n	80031f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c8:	2201      	movs	r2, #1
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 0201 	and.w	r2, r3, #1
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d017      	beq.n	8003230 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d123      	bne.n	8003284 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	08da      	lsrs	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3208      	adds	r2, #8
 8003244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	220f      	movs	r2, #15
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	08da      	lsrs	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3208      	adds	r2, #8
 800327e:	69b9      	ldr	r1, [r7, #24]
 8003280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	2203      	movs	r2, #3
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0203 	and.w	r2, r3, #3
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80be 	beq.w	8003442 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c6:	4b66      	ldr	r3, [pc, #408]	; (8003460 <HAL_GPIO_Init+0x324>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	4a65      	ldr	r2, [pc, #404]	; (8003460 <HAL_GPIO_Init+0x324>)
 80032cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d0:	6453      	str	r3, [r2, #68]	; 0x44
 80032d2:	4b63      	ldr	r3, [pc, #396]	; (8003460 <HAL_GPIO_Init+0x324>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032de:	4a61      	ldr	r2, [pc, #388]	; (8003464 <HAL_GPIO_Init+0x328>)
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	089b      	lsrs	r3, r3, #2
 80032e4:	3302      	adds	r3, #2
 80032e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	220f      	movs	r2, #15
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a58      	ldr	r2, [pc, #352]	; (8003468 <HAL_GPIO_Init+0x32c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d037      	beq.n	800337a <HAL_GPIO_Init+0x23e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a57      	ldr	r2, [pc, #348]	; (800346c <HAL_GPIO_Init+0x330>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d031      	beq.n	8003376 <HAL_GPIO_Init+0x23a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a56      	ldr	r2, [pc, #344]	; (8003470 <HAL_GPIO_Init+0x334>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02b      	beq.n	8003372 <HAL_GPIO_Init+0x236>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a55      	ldr	r2, [pc, #340]	; (8003474 <HAL_GPIO_Init+0x338>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d025      	beq.n	800336e <HAL_GPIO_Init+0x232>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a54      	ldr	r2, [pc, #336]	; (8003478 <HAL_GPIO_Init+0x33c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01f      	beq.n	800336a <HAL_GPIO_Init+0x22e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a53      	ldr	r2, [pc, #332]	; (800347c <HAL_GPIO_Init+0x340>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d019      	beq.n	8003366 <HAL_GPIO_Init+0x22a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a52      	ldr	r2, [pc, #328]	; (8003480 <HAL_GPIO_Init+0x344>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <HAL_GPIO_Init+0x226>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a51      	ldr	r2, [pc, #324]	; (8003484 <HAL_GPIO_Init+0x348>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00d      	beq.n	800335e <HAL_GPIO_Init+0x222>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a50      	ldr	r2, [pc, #320]	; (8003488 <HAL_GPIO_Init+0x34c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <HAL_GPIO_Init+0x21e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4f      	ldr	r2, [pc, #316]	; (800348c <HAL_GPIO_Init+0x350>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_GPIO_Init+0x21a>
 8003352:	2309      	movs	r3, #9
 8003354:	e012      	b.n	800337c <HAL_GPIO_Init+0x240>
 8003356:	230a      	movs	r3, #10
 8003358:	e010      	b.n	800337c <HAL_GPIO_Init+0x240>
 800335a:	2308      	movs	r3, #8
 800335c:	e00e      	b.n	800337c <HAL_GPIO_Init+0x240>
 800335e:	2307      	movs	r3, #7
 8003360:	e00c      	b.n	800337c <HAL_GPIO_Init+0x240>
 8003362:	2306      	movs	r3, #6
 8003364:	e00a      	b.n	800337c <HAL_GPIO_Init+0x240>
 8003366:	2305      	movs	r3, #5
 8003368:	e008      	b.n	800337c <HAL_GPIO_Init+0x240>
 800336a:	2304      	movs	r3, #4
 800336c:	e006      	b.n	800337c <HAL_GPIO_Init+0x240>
 800336e:	2303      	movs	r3, #3
 8003370:	e004      	b.n	800337c <HAL_GPIO_Init+0x240>
 8003372:	2302      	movs	r3, #2
 8003374:	e002      	b.n	800337c <HAL_GPIO_Init+0x240>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_GPIO_Init+0x240>
 800337a:	2300      	movs	r3, #0
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	f002 0203 	and.w	r2, r2, #3
 8003382:	0092      	lsls	r2, r2, #2
 8003384:	4093      	lsls	r3, r2
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800338c:	4935      	ldr	r1, [pc, #212]	; (8003464 <HAL_GPIO_Init+0x328>)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	089b      	lsrs	r3, r3, #2
 8003392:	3302      	adds	r3, #2
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <HAL_GPIO_Init+0x354>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033be:	4a34      	ldr	r2, [pc, #208]	; (8003490 <HAL_GPIO_Init+0x354>)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c4:	4b32      	ldr	r3, [pc, #200]	; (8003490 <HAL_GPIO_Init+0x354>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e8:	4a29      	ldr	r2, [pc, #164]	; (8003490 <HAL_GPIO_Init+0x354>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ee:	4b28      	ldr	r3, [pc, #160]	; (8003490 <HAL_GPIO_Init+0x354>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003412:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <HAL_GPIO_Init+0x354>)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_GPIO_Init+0x354>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800343c:	4a14      	ldr	r2, [pc, #80]	; (8003490 <HAL_GPIO_Init+0x354>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3301      	adds	r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b0f      	cmp	r3, #15
 800344c:	f67f ae86 	bls.w	800315c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	3724      	adds	r7, #36	; 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	40013800 	.word	0x40013800
 8003468:	40020000 	.word	0x40020000
 800346c:	40020400 	.word	0x40020400
 8003470:	40020800 	.word	0x40020800
 8003474:	40020c00 	.word	0x40020c00
 8003478:	40021000 	.word	0x40021000
 800347c:	40021400 	.word	0x40021400
 8003480:	40021800 	.word	0x40021800
 8003484:	40021c00 	.word	0x40021c00
 8003488:	40022000 	.word	0x40022000
 800348c:	40022400 	.word	0x40022400
 8003490:	40013c00 	.word	0x40013c00

08003494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
 80034a0:	4613      	mov	r3, r2
 80034a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a4:	787b      	ldrb	r3, [r7, #1]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034b0:	e003      	b.n	80034ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034b2:	887b      	ldrh	r3, [r7, #2]
 80034b4:	041a      	lsls	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	619a      	str	r2, [r3, #24]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d6:	6013      	str	r3, [r2, #0]
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40007000 	.word	0x40007000

080034e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034f2:	4b23      	ldr	r3, [pc, #140]	; (8003580 <HAL_PWREx_EnableOverDrive+0x98>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a22      	ldr	r2, [pc, #136]	; (8003580 <HAL_PWREx_EnableOverDrive+0x98>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_PWREx_EnableOverDrive+0x98>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <HAL_PWREx_EnableOverDrive+0x9c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003514:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003516:	f7ff fc3d 	bl	8002d94 <HAL_GetTick>
 800351a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800351c:	e009      	b.n	8003532 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800351e:	f7ff fc39 	bl	8002d94 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800352c:	d901      	bls.n	8003532 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e022      	b.n	8003578 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003532:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353e:	d1ee      	bne.n	800351e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003540:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800354c:	f7ff fc22 	bl	8002d94 <HAL_GetTick>
 8003550:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003552:	e009      	b.n	8003568 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003554:	f7ff fc1e 	bl	8002d94 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003562:	d901      	bls.n	8003568 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e007      	b.n	8003578 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_PWREx_EnableOverDrive+0x9c>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003574:	d1ee      	bne.n	8003554 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	40007000 	.word	0x40007000

08003588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003590:	2300      	movs	r3, #0
 8003592:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e291      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8087 	beq.w	80036ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035ac:	4b96      	ldr	r3, [pc, #600]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d00c      	beq.n	80035d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b8:	4b93      	ldr	r3, [pc, #588]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d112      	bne.n	80035ea <HAL_RCC_OscConfig+0x62>
 80035c4:	4b90      	ldr	r3, [pc, #576]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d0:	d10b      	bne.n	80035ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d2:	4b8d      	ldr	r3, [pc, #564]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d06c      	beq.n	80036b8 <HAL_RCC_OscConfig+0x130>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d168      	bne.n	80036b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e26b      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x7a>
 80035f4:	4b84      	ldr	r3, [pc, #528]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a83      	ldr	r2, [pc, #524]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80035fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	e02e      	b.n	8003660 <HAL_RCC_OscConfig+0xd8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x9c>
 800360a:	4b7f      	ldr	r3, [pc, #508]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a7e      	ldr	r2, [pc, #504]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b7c      	ldr	r3, [pc, #496]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7b      	ldr	r2, [pc, #492]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800361c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e01d      	b.n	8003660 <HAL_RCC_OscConfig+0xd8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0xc0>
 800362e:	4b76      	ldr	r3, [pc, #472]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a75      	ldr	r2, [pc, #468]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b73      	ldr	r3, [pc, #460]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a72      	ldr	r2, [pc, #456]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e00b      	b.n	8003660 <HAL_RCC_OscConfig+0xd8>
 8003648:	4b6f      	ldr	r3, [pc, #444]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a6e      	ldr	r2, [pc, #440]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800364e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a6b      	ldr	r2, [pc, #428]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800365a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7ff fb94 	bl	8002d94 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7ff fb90 	bl	8002d94 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e21f      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	4b61      	ldr	r3, [pc, #388]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0xe8>
 800368e:	e014      	b.n	80036ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7ff fb80 	bl	8002d94 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7ff fb7c 	bl	8002d94 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e20b      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036aa:	4b57      	ldr	r3, [pc, #348]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x110>
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d069      	beq.n	800379a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036c6:	4b50      	ldr	r3, [pc, #320]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d2:	4b4d      	ldr	r3, [pc, #308]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d11c      	bne.n	8003718 <HAL_RCC_OscConfig+0x190>
 80036de:	4b4a      	ldr	r3, [pc, #296]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d116      	bne.n	8003718 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	4b47      	ldr	r3, [pc, #284]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_RCC_OscConfig+0x17a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d001      	beq.n	8003702 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e1df      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003702:	4b41      	ldr	r3, [pc, #260]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	493d      	ldr	r1, [pc, #244]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003716:	e040      	b.n	800379a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d023      	beq.n	8003768 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a38      	ldr	r2, [pc, #224]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7ff fb32 	bl	8002d94 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003734:	f7ff fb2e 	bl	8002d94 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e1bd      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	4b30      	ldr	r3, [pc, #192]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003752:	4b2d      	ldr	r3, [pc, #180]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4929      	ldr	r1, [pc, #164]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]
 8003766:	e018      	b.n	800379a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003768:	4b27      	ldr	r3, [pc, #156]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a26      	ldr	r2, [pc, #152]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7ff fb0e 	bl	8002d94 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377c:	f7ff fb0a 	bl	8002d94 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e199      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d038      	beq.n	8003818 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d019      	beq.n	80037e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ae:	4b16      	ldr	r3, [pc, #88]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80037b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b2:	4a15      	ldr	r2, [pc, #84]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ba:	f7ff faeb 	bl	8002d94 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c2:	f7ff fae7 	bl	8002d94 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e176      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80037d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x23a>
 80037e0:	e01a      	b.n	8003818 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	4a08      	ldr	r2, [pc, #32]	; (8003808 <HAL_RCC_OscConfig+0x280>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ee:	f7ff fad1 	bl	8002d94 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f4:	e00a      	b.n	800380c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f6:	f7ff facd 	bl	8002d94 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d903      	bls.n	800380c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e15c      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
 8003808:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	4b91      	ldr	r3, [pc, #580]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 800380e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1ee      	bne.n	80037f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a4 	beq.w	800396e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003826:	4b8b      	ldr	r3, [pc, #556]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10d      	bne.n	800384e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	4b88      	ldr	r3, [pc, #544]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a87      	ldr	r2, [pc, #540]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
 800383e:	4b85      	ldr	r3, [pc, #532]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800384e:	4b82      	ldr	r3, [pc, #520]	; (8003a58 <HAL_RCC_OscConfig+0x4d0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d118      	bne.n	800388c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800385a:	4b7f      	ldr	r3, [pc, #508]	; (8003a58 <HAL_RCC_OscConfig+0x4d0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a7e      	ldr	r2, [pc, #504]	; (8003a58 <HAL_RCC_OscConfig+0x4d0>)
 8003860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003866:	f7ff fa95 	bl	8002d94 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386e:	f7ff fa91 	bl	8002d94 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b64      	cmp	r3, #100	; 0x64
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e120      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003880:	4b75      	ldr	r3, [pc, #468]	; (8003a58 <HAL_RCC_OscConfig+0x4d0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x31a>
 8003894:	4b6f      	ldr	r3, [pc, #444]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a6e      	ldr	r2, [pc, #440]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
 80038a0:	e02d      	b.n	80038fe <HAL_RCC_OscConfig+0x376>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x33c>
 80038aa:	4b6a      	ldr	r3, [pc, #424]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a69      	ldr	r2, [pc, #420]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
 80038b6:	4b67      	ldr	r3, [pc, #412]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a66      	ldr	r2, [pc, #408]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038bc:	f023 0304 	bic.w	r3, r3, #4
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
 80038c2:	e01c      	b.n	80038fe <HAL_RCC_OscConfig+0x376>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d10c      	bne.n	80038e6 <HAL_RCC_OscConfig+0x35e>
 80038cc:	4b61      	ldr	r3, [pc, #388]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	4a60      	ldr	r2, [pc, #384]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038d2:	f043 0304 	orr.w	r3, r3, #4
 80038d6:	6713      	str	r3, [r2, #112]	; 0x70
 80038d8:	4b5e      	ldr	r3, [pc, #376]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
 80038e4:	e00b      	b.n	80038fe <HAL_RCC_OscConfig+0x376>
 80038e6:	4b5b      	ldr	r3, [pc, #364]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a5a      	ldr	r2, [pc, #360]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
 80038f2:	4b58      	ldr	r3, [pc, #352]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a57      	ldr	r2, [pc, #348]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80038f8:	f023 0304 	bic.w	r3, r3, #4
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d015      	beq.n	8003932 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003906:	f7ff fa45 	bl	8002d94 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390c:	e00a      	b.n	8003924 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7ff fa41 	bl	8002d94 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e0ce      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003924:	4b4b      	ldr	r3, [pc, #300]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ee      	beq.n	800390e <HAL_RCC_OscConfig+0x386>
 8003930:	e014      	b.n	800395c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7ff fa2f 	bl	8002d94 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7ff fa2b 	bl	8002d94 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	; 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e0b8      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003950:	4b40      	ldr	r3, [pc, #256]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ee      	bne.n	800393a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d105      	bne.n	800396e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003962:	4b3c      	ldr	r3, [pc, #240]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a3b      	ldr	r2, [pc, #236]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a4 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003978:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	d06b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d149      	bne.n	8003a20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398c:	4b31      	ldr	r3, [pc, #196]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a30      	ldr	r2, [pc, #192]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003992:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7ff f9fc 	bl	8002d94 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a0:	f7ff f9f8 	bl	8002d94 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e087      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	4b28      	ldr	r3, [pc, #160]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	3b01      	subs	r3, #1
 80039d8:	041b      	lsls	r3, r3, #16
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	4313      	orrs	r3, r2
 80039e4:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80039f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7ff f9cc 	bl	8002d94 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7ff f9c8 	bl	8002d94 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e057      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x478>
 8003a1e:	e04f      	b.n	8003ac0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a0b      	ldr	r2, [pc, #44]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7ff f9b2 	bl	8002d94 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7ff f9ae 	bl	8002d94 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e03d      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4ac>
 8003a52:	e035      	b.n	8003ac0 <HAL_RCC_OscConfig+0x538>
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x544>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d028      	beq.n	8003abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d121      	bne.n	8003abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d11a      	bne.n	8003abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d111      	bne.n	8003abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800

08003ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0d0      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d910      	bls.n	8003b18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b67      	ldr	r3, [pc, #412]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 020f 	bic.w	r2, r3, #15
 8003afe:	4965      	ldr	r1, [pc, #404]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b63      	ldr	r3, [pc, #396]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0b8      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b30:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a58      	ldr	r2, [pc, #352]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b48:	4b53      	ldr	r3, [pc, #332]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a52      	ldr	r2, [pc, #328]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b54:	4b50      	ldr	r3, [pc, #320]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	494d      	ldr	r1, [pc, #308]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d040      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d107      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	4b47      	ldr	r3, [pc, #284]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d115      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e07f      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b92:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e073      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	4b3d      	ldr	r3, [pc, #244]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e06b      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f023 0203 	bic.w	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4936      	ldr	r1, [pc, #216]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc4:	f7ff f8e6 	bl	8002d94 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bcc:	f7ff f8e2 	bl	8002d94 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e053      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	4b2d      	ldr	r3, [pc, #180]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 020c 	and.w	r2, r3, #12
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d1eb      	bne.n	8003bcc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d210      	bcs.n	8003c24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 020f 	bic.w	r2, r3, #15
 8003c0a:	4922      	ldr	r1, [pc, #136]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e032      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4916      	ldr	r1, [pc, #88]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	490e      	ldr	r1, [pc, #56]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c62:	f000 f821 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003c66:	4602      	mov	r2, r0
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	490a      	ldr	r1, [pc, #40]	; (8003c9c <HAL_RCC_ClockConfig+0x1cc>)
 8003c74:	5ccb      	ldrb	r3, [r1, r3]
 8003c76:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7a:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8003c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x1d4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff f842 	bl	8002d0c <HAL_InitTick>

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023c00 	.word	0x40023c00
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	08008ce0 	.word	0x08008ce0
 8003ca0:	20000054 	.word	0x20000054
 8003ca4:	20000058 	.word	0x20000058

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cac:	b094      	sub	sp, #80	; 0x50
 8003cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb8:	2300      	movs	r3, #0
 8003cba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cc0:	4b79      	ldr	r3, [pc, #484]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d00d      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	f200 80e1 	bhi.w	8003e94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x34>
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cda:	e0db      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cdc:	4b73      	ldr	r3, [pc, #460]	; (8003eac <HAL_RCC_GetSysClockFreq+0x204>)
 8003cde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ce0:	e0db      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ce2:	4b73      	ldr	r3, [pc, #460]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ce4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ce6:	e0d8      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ce8:	4b6f      	ldr	r3, [pc, #444]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cf2:	4b6d      	ldr	r3, [pc, #436]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d063      	beq.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cfe:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	099b      	lsrs	r3, r3, #6
 8003d04:	2200      	movs	r2, #0
 8003d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d10:	633b      	str	r3, [r7, #48]	; 0x30
 8003d12:	2300      	movs	r3, #0
 8003d14:	637b      	str	r3, [r7, #52]	; 0x34
 8003d16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d1a:	4622      	mov	r2, r4
 8003d1c:	462b      	mov	r3, r5
 8003d1e:	f04f 0000 	mov.w	r0, #0
 8003d22:	f04f 0100 	mov.w	r1, #0
 8003d26:	0159      	lsls	r1, r3, #5
 8003d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d2c:	0150      	lsls	r0, r2, #5
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4621      	mov	r1, r4
 8003d34:	1a51      	subs	r1, r2, r1
 8003d36:	6139      	str	r1, [r7, #16]
 8003d38:	4629      	mov	r1, r5
 8003d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	018b      	lsls	r3, r1, #6
 8003d50:	4651      	mov	r1, sl
 8003d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d56:	4651      	mov	r1, sl
 8003d58:	018a      	lsls	r2, r1, #6
 8003d5a:	4651      	mov	r1, sl
 8003d5c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d60:	4659      	mov	r1, fp
 8003d62:	eb63 0901 	sbc.w	r9, r3, r1
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d7a:	4690      	mov	r8, r2
 8003d7c:	4699      	mov	r9, r3
 8003d7e:	4623      	mov	r3, r4
 8003d80:	eb18 0303 	adds.w	r3, r8, r3
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	462b      	mov	r3, r5
 8003d88:	eb49 0303 	adc.w	r3, r9, r3
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	024b      	lsls	r3, r1, #9
 8003d9e:	4621      	mov	r1, r4
 8003da0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003da4:	4621      	mov	r1, r4
 8003da6:	024a      	lsls	r2, r1, #9
 8003da8:	4610      	mov	r0, r2
 8003daa:	4619      	mov	r1, r3
 8003dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dae:	2200      	movs	r2, #0
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003db4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003db8:	f7fc ff48 	bl	8000c4c <__aeabi_uldivmod>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc4:	e058      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc6:	4b38      	ldr	r3, [pc, #224]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	099b      	lsrs	r3, r3, #6
 8003dcc:	2200      	movs	r2, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
 8003ddc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003de0:	4642      	mov	r2, r8
 8003de2:	464b      	mov	r3, r9
 8003de4:	f04f 0000 	mov.w	r0, #0
 8003de8:	f04f 0100 	mov.w	r1, #0
 8003dec:	0159      	lsls	r1, r3, #5
 8003dee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003df2:	0150      	lsls	r0, r2, #5
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4641      	mov	r1, r8
 8003dfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dfe:	4649      	mov	r1, r9
 8003e00:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e18:	ebb2 040a 	subs.w	r4, r2, sl
 8003e1c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	00eb      	lsls	r3, r5, #3
 8003e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e2e:	00e2      	lsls	r2, r4, #3
 8003e30:	4614      	mov	r4, r2
 8003e32:	461d      	mov	r5, r3
 8003e34:	4643      	mov	r3, r8
 8003e36:	18e3      	adds	r3, r4, r3
 8003e38:	603b      	str	r3, [r7, #0]
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	eb45 0303 	adc.w	r3, r5, r3
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e4e:	4629      	mov	r1, r5
 8003e50:	028b      	lsls	r3, r1, #10
 8003e52:	4621      	mov	r1, r4
 8003e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e58:	4621      	mov	r1, r4
 8003e5a:	028a      	lsls	r2, r1, #10
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e62:	2200      	movs	r2, #0
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	61fa      	str	r2, [r7, #28]
 8003e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e6c:	f7fc feee 	bl	8000c4c <__aeabi_uldivmod>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4613      	mov	r3, r2
 8003e76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	3301      	adds	r3, #1
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003e88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e92:	e002      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCC_GetSysClockFreq+0x204>)
 8003e96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3750      	adds	r7, #80	; 0x50
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	00f42400 	.word	0x00f42400
 8003eb0:	007a1200 	.word	0x007a1200

08003eb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000054 	.word	0x20000054

08003ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ed0:	f7ff fff0 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	0a9b      	lsrs	r3, r3, #10
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	4903      	ldr	r1, [pc, #12]	; (8003ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee2:	5ccb      	ldrb	r3, [r1, r3]
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	08008cf0 	.word	0x08008cf0

08003ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ef8:	f7ff ffdc 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	0b5b      	lsrs	r3, r3, #13
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	4903      	ldr	r1, [pc, #12]	; (8003f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f0a:	5ccb      	ldrb	r3, [r1, r3]
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40023800 	.word	0x40023800
 8003f18:	08008cf0 	.word	0x08008cf0

08003f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d012      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f44:	4b69      	ldr	r3, [pc, #420]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a68      	ldr	r2, [pc, #416]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f4e:	6093      	str	r3, [r2, #8]
 8003f50:	4b66      	ldr	r3, [pc, #408]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f58:	4964      	ldr	r1, [pc, #400]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f66:	2301      	movs	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d017      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f76:	4b5d      	ldr	r3, [pc, #372]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	4959      	ldr	r1, [pc, #356]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f94:	d101      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d017      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fb2:	4b4e      	ldr	r3, [pc, #312]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	494a      	ldr	r1, [pc, #296]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 808b 	beq.w	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004000:	4b3a      	ldr	r3, [pc, #232]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	4a39      	ldr	r2, [pc, #228]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400a:	6413      	str	r3, [r2, #64]	; 0x40
 800400c:	4b37      	ldr	r3, [pc, #220]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004018:	4b35      	ldr	r3, [pc, #212]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800401e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004024:	f7fe feb6 	bl	8002d94 <HAL_GetTick>
 8004028:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402c:	f7fe feb2 	bl	8002d94 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e357      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800404a:	4b28      	ldr	r3, [pc, #160]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004052:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d035      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d02e      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004068:	4b20      	ldr	r3, [pc, #128]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004070:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004072:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800407e:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a1a      	ldr	r2, [pc, #104]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004088:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800408a:	4a18      	ldr	r2, [pc, #96]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004090:	4b16      	ldr	r3, [pc, #88]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d114      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fe fe7a 	bl	8002d94 <HAL_GetTick>
 80040a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a2:	e00a      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a4:	f7fe fe76 	bl	8002d94 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e319      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ba:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0ee      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d2:	d111      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040e0:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040e2:	400b      	ands	r3, r1
 80040e4:	4901      	ldr	r1, [pc, #4]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
 80040ea:	e00b      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40007000 	.word	0x40007000
 80040f4:	0ffffcff 	.word	0x0ffffcff
 80040f8:	4baa      	ldr	r3, [pc, #680]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4aa9      	ldr	r2, [pc, #676]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004102:	6093      	str	r3, [r2, #8]
 8004104:	4ba7      	ldr	r3, [pc, #668]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004106:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004110:	49a4      	ldr	r1, [pc, #656]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004112:	4313      	orrs	r3, r2
 8004114:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b00      	cmp	r3, #0
 8004120:	d010      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004122:	4ba0      	ldr	r3, [pc, #640]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004128:	4a9e      	ldr	r2, [pc, #632]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800412a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800412e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004132:	4b9c      	ldr	r3, [pc, #624]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004134:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	4999      	ldr	r1, [pc, #612]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004150:	4b94      	ldr	r3, [pc, #592]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004156:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800415e:	4991      	ldr	r1, [pc, #580]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004172:	4b8c      	ldr	r3, [pc, #560]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004178:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004180:	4988      	ldr	r1, [pc, #544]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004194:	4b83      	ldr	r3, [pc, #524]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a2:	4980      	ldr	r1, [pc, #512]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041b6:	4b7b      	ldr	r3, [pc, #492]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	4977      	ldr	r1, [pc, #476]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041d8:	4b72      	ldr	r3, [pc, #456]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	496f      	ldr	r1, [pc, #444]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041fa:	4b6a      	ldr	r3, [pc, #424]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f023 020c 	bic.w	r2, r3, #12
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004208:	4966      	ldr	r1, [pc, #408]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800421c:	4b61      	ldr	r3, [pc, #388]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422a:	495e      	ldr	r1, [pc, #376]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800423e:	4b59      	ldr	r3, [pc, #356]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424c:	4955      	ldr	r1, [pc, #340]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004260:	4b50      	ldr	r3, [pc, #320]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	494d      	ldr	r1, [pc, #308]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004282:	4b48      	ldr	r3, [pc, #288]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	4944      	ldr	r1, [pc, #272]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80042a4:	4b3f      	ldr	r3, [pc, #252]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b2:	493c      	ldr	r1, [pc, #240]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d4:	4933      	ldr	r1, [pc, #204]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042e8:	4b2e      	ldr	r3, [pc, #184]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042f6:	492b      	ldr	r1, [pc, #172]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d011      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800430a:	4b26      	ldr	r3, [pc, #152]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004318:	4922      	ldr	r1, [pc, #136]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004328:	d101      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800432a:	2301      	movs	r3, #1
 800432c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800433a:	2301      	movs	r3, #1
 800433c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800434a:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004358:	4912      	ldr	r1, [pc, #72]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00b      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800437c:	4909      	ldr	r1, [pc, #36]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d006      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80d9 	beq.w	800454a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004398:	4b02      	ldr	r3, [pc, #8]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a01      	ldr	r2, [pc, #4]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043a2:	e001      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80043a4:	40023800 	.word	0x40023800
 80043a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043aa:	f7fe fcf3 	bl	8002d94 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043b2:	f7fe fcef 	bl	8002d94 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b64      	cmp	r3, #100	; 0x64
 80043be:	d901      	bls.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e194      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043c4:	4b6c      	ldr	r3, [pc, #432]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d021      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d11d      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043e4:	4b64      	ldr	r3, [pc, #400]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ea:	0c1b      	lsrs	r3, r3, #16
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043f2:	4b61      	ldr	r3, [pc, #388]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f8:	0e1b      	lsrs	r3, r3, #24
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	019a      	lsls	r2, r3, #6
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	431a      	orrs	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	061b      	lsls	r3, r3, #24
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	071b      	lsls	r3, r3, #28
 8004418:	4957      	ldr	r1, [pc, #348]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004434:	d00a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800443e:	2b00      	cmp	r3, #0
 8004440:	d02e      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444a:	d129      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800444c:	4b4a      	ldr	r3, [pc, #296]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800444e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004452:	0c1b      	lsrs	r3, r3, #16
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800445a:	4b47      	ldr	r3, [pc, #284]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004460:	0f1b      	lsrs	r3, r3, #28
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	019a      	lsls	r2, r3, #6
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	061b      	lsls	r3, r3, #24
 800447a:	431a      	orrs	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	071b      	lsls	r3, r3, #28
 8004480:	493d      	ldr	r1, [pc, #244]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004488:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800448a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800448e:	f023 021f 	bic.w	r2, r3, #31
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	3b01      	subs	r3, #1
 8004498:	4937      	ldr	r1, [pc, #220]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01d      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044ac:	4b32      	ldr	r3, [pc, #200]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b2:	0e1b      	lsrs	r3, r3, #24
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044ba:	4b2f      	ldr	r3, [pc, #188]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c0:	0f1b      	lsrs	r3, r3, #28
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	019a      	lsls	r2, r3, #6
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	041b      	lsls	r3, r3, #16
 80044d4:	431a      	orrs	r2, r3
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	431a      	orrs	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	071b      	lsls	r3, r3, #28
 80044e0:	4925      	ldr	r1, [pc, #148]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d011      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	019a      	lsls	r2, r3, #6
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	061b      	lsls	r3, r3, #24
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	071b      	lsls	r3, r3, #28
 8004510:	4919      	ldr	r1, [pc, #100]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004518:	4b17      	ldr	r3, [pc, #92]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a16      	ldr	r2, [pc, #88]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800451e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004524:	f7fe fc36 	bl	8002d94 <HAL_GetTick>
 8004528:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800452c:	f7fe fc32 	bl	8002d94 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e0d7      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b01      	cmp	r3, #1
 800454e:	f040 80cd 	bne.w	80046ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a08      	ldr	r2, [pc, #32]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800455e:	f7fe fc19 	bl	8002d94 <HAL_GetTick>
 8004562:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004564:	e00a      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004566:	f7fe fc15 	bl	8002d94 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b64      	cmp	r3, #100	; 0x64
 8004572:	d903      	bls.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0ba      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004578:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800457c:	4b5e      	ldr	r3, [pc, #376]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004588:	d0ed      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d02e      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d12a      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045b2:	4b51      	ldr	r3, [pc, #324]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045c0:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	0f1b      	lsrs	r3, r3, #28
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	019a      	lsls	r2, r3, #6
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	431a      	orrs	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	071b      	lsls	r3, r3, #28
 80045e6:	4944      	ldr	r1, [pc, #272]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045ee:	4b42      	ldr	r3, [pc, #264]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	493d      	ldr	r1, [pc, #244]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d022      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800461c:	d11d      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800461e:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	0e1b      	lsrs	r3, r3, #24
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800462c:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	0f1b      	lsrs	r3, r3, #28
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	019a      	lsls	r2, r3, #6
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	041b      	lsls	r3, r3, #16
 8004646:	431a      	orrs	r2, r3
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	061b      	lsls	r3, r3, #24
 800464c:	431a      	orrs	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	071b      	lsls	r3, r3, #28
 8004652:	4929      	ldr	r1, [pc, #164]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d028      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004666:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	0e1b      	lsrs	r3, r3, #24
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004674:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467a:	0c1b      	lsrs	r3, r3, #16
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	019a      	lsls	r2, r3, #6
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	431a      	orrs	r2, r3
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	071b      	lsls	r3, r3, #28
 800469a:	4917      	ldr	r1, [pc, #92]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	4911      	ldr	r1, [pc, #68]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a0e      	ldr	r2, [pc, #56]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c4:	f7fe fb66 	bl	8002d94 <HAL_GetTick>
 80046c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046cc:	f7fe fb62 	bl	8002d94 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b64      	cmp	r3, #100	; 0x64
 80046d8:	d901      	bls.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e007      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ea:	d1ef      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800

080046fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e09d      	b.n	800484a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471e:	d009      	beq.n	8004734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	61da      	str	r2, [r3, #28]
 8004726:	e005      	b.n	8004734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fd ffda 	bl	8002708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004774:	d902      	bls.n	800477c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e002      	b.n	8004782 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800477c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004780:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800478a:	d007      	beq.n	800479c <HAL_SPI_Init+0xa0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004794:	d002      	beq.n	800479c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	ea42 0103 	orr.w	r1, r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	f003 0204 	and.w	r2, r3, #4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004818:	ea42 0103 	orr.w	r1, r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004838:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b088      	sub	sp, #32
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	4613      	mov	r3, r2
 8004860:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_SPI_Transmit+0x22>
 8004870:	2302      	movs	r3, #2
 8004872:	e158      	b.n	8004b26 <HAL_SPI_Transmit+0x2d4>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800487c:	f7fe fa8a 	bl	8002d94 <HAL_GetTick>
 8004880:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b01      	cmp	r3, #1
 8004890:	d002      	beq.n	8004898 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004892:	2302      	movs	r3, #2
 8004894:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004896:	e13d      	b.n	8004b14 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_SPI_Transmit+0x52>
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048a8:	e134      	b.n	8004b14 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2203      	movs	r2, #3
 80048ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	88fa      	ldrh	r2, [r7, #6]
 80048c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f4:	d10f      	bne.n	8004916 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004904:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004914:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d007      	beq.n	8004934 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004932:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800493c:	d94b      	bls.n	80049d6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_SPI_Transmit+0xfa>
 8004946:	8afb      	ldrh	r3, [r7, #22]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d13e      	bne.n	80049ca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	881a      	ldrh	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	1c9a      	adds	r2, r3, #2
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004970:	e02b      	b.n	80049ca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b02      	cmp	r3, #2
 800497e:	d112      	bne.n	80049a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	881a      	ldrh	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	1c9a      	adds	r2, r3, #2
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049a4:	e011      	b.n	80049ca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049a6:	f7fe f9f5 	bl	8002d94 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d803      	bhi.n	80049be <HAL_SPI_Transmit+0x16c>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d102      	bne.n	80049c4 <HAL_SPI_Transmit+0x172>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d102      	bne.n	80049ca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049c8:	e0a4      	b.n	8004b14 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ce      	bne.n	8004972 <HAL_SPI_Transmit+0x120>
 80049d4:	e07c      	b.n	8004ad0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_SPI_Transmit+0x192>
 80049de:	8afb      	ldrh	r3, [r7, #22]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d170      	bne.n	8004ac6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d912      	bls.n	8004a14 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	881a      	ldrh	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	1c9a      	adds	r2, r3, #2
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b02      	subs	r3, #2
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a12:	e058      	b.n	8004ac6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	7812      	ldrb	r2, [r2, #0]
 8004a20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a3a:	e044      	b.n	8004ac6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d12b      	bne.n	8004aa2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d912      	bls.n	8004a7a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	881a      	ldrh	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b02      	subs	r3, #2
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a78:	e025      	b.n	8004ac6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	7812      	ldrb	r2, [r2, #0]
 8004a86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aa0:	e011      	b.n	8004ac6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aa2:	f7fe f977 	bl	8002d94 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d803      	bhi.n	8004aba <HAL_SPI_Transmit+0x268>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d102      	bne.n	8004ac0 <HAL_SPI_Transmit+0x26e>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ac4:	e026      	b.n	8004b14 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1b5      	bne.n	8004a3c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fe1b 	bl	8005710 <SPI_EndRxTxTransaction>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aee:	2300      	movs	r3, #0
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e000      	b.n	8004b14 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004b12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b24:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b088      	sub	sp, #32
 8004b32:	af02      	add	r7, sp, #8
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b4a:	d112      	bne.n	8004b72 <HAL_SPI_Receive+0x44>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10e      	bne.n	8004b72 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2204      	movs	r2, #4
 8004b58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b5c:	88fa      	ldrh	r2, [r7, #6]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	4613      	mov	r3, r2
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f910 	bl	8004d8e <HAL_SPI_TransmitReceive>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	e109      	b.n	8004d86 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_SPI_Receive+0x52>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e102      	b.n	8004d86 <HAL_SPI_Receive+0x258>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b88:	f7fe f904 	bl	8002d94 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d002      	beq.n	8004ba0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b9e:	e0e9      	b.n	8004d74 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_SPI_Receive+0x7e>
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bb0:	e0e0      	b.n	8004d74 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	88fa      	ldrh	r2, [r7, #6]
 8004bca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	88fa      	ldrh	r2, [r7, #6]
 8004bd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bfc:	d908      	bls.n	8004c10 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	e007      	b.n	8004c20 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c1e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c28:	d10f      	bne.n	8004c4a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	d007      	beq.n	8004c68 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c70:	d867      	bhi.n	8004d42 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c72:	e030      	b.n	8004cd6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d117      	bne.n	8004cb2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f103 020c 	add.w	r2, r3, #12
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	7812      	ldrb	r2, [r2, #0]
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004cb0:	e011      	b.n	8004cd6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb2:	f7fe f86f 	bl	8002d94 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d803      	bhi.n	8004cca <HAL_SPI_Receive+0x19c>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d102      	bne.n	8004cd0 <HAL_SPI_Receive+0x1a2>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cd4:	e04e      	b.n	8004d74 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1c8      	bne.n	8004c74 <HAL_SPI_Receive+0x146>
 8004ce2:	e034      	b.n	8004d4e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d115      	bne.n	8004d1e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	b292      	uxth	r2, r2
 8004cfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	1c9a      	adds	r2, r3, #2
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d1c:	e011      	b.n	8004d42 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d1e:	f7fe f839 	bl	8002d94 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d803      	bhi.n	8004d36 <HAL_SPI_Receive+0x208>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d102      	bne.n	8004d3c <HAL_SPI_Receive+0x20e>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d40:	e018      	b.n	8004d74 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1ca      	bne.n	8004ce4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	6839      	ldr	r1, [r7, #0]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fc60 	bl	8005618 <SPI_EndRxTransaction>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	75fb      	strb	r3, [r7, #23]
 8004d70:	e000      	b.n	8004d74 <HAL_SPI_Receive+0x246>
  }

error :
 8004d72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b08a      	sub	sp, #40	; 0x28
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x26>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e1fb      	b.n	80051ac <HAL_SPI_TransmitReceive+0x41e>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dbc:	f7fd ffea 	bl	8002d94 <HAL_GetTick>
 8004dc0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dc8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004dd0:	887b      	ldrh	r3, [r7, #2]
 8004dd2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004dd4:	887b      	ldrh	r3, [r7, #2]
 8004dd6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dd8:	7efb      	ldrb	r3, [r7, #27]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d00e      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x6e>
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de4:	d106      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x66>
 8004dee:	7efb      	ldrb	r3, [r7, #27]
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d003      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004df4:	2302      	movs	r3, #2
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004dfa:	e1cd      	b.n	8005198 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_SPI_TransmitReceive+0x80>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_SPI_TransmitReceive+0x80>
 8004e08:	887b      	ldrh	r3, [r7, #2]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d103      	bne.n	8004e16 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e14:	e1c0      	b.n	8005198 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d003      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2205      	movs	r2, #5
 8004e26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	887a      	ldrh	r2, [r7, #2]
 8004e3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	887a      	ldrh	r2, [r7, #2]
 8004e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	887a      	ldrh	r2, [r7, #2]
 8004e50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	887a      	ldrh	r2, [r7, #2]
 8004e56:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e6c:	d802      	bhi.n	8004e74 <HAL_SPI_TransmitReceive+0xe6>
 8004e6e:	8a3b      	ldrh	r3, [r7, #16]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d908      	bls.n	8004e86 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	e007      	b.n	8004e96 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e94:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d007      	beq.n	8004eb4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ebc:	d97c      	bls.n	8004fb8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_SPI_TransmitReceive+0x13e>
 8004ec6:	8a7b      	ldrh	r3, [r7, #18]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d169      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	881a      	ldrh	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	1c9a      	adds	r2, r3, #2
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef0:	e056      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d11b      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x1aa>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d016      	beq.n	8004f38 <HAL_SPI_TransmitReceive+0x1aa>
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d113      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	881a      	ldrh	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	1c9a      	adds	r2, r3, #2
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d11c      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x1f2>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d016      	beq.n	8004f80 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	b292      	uxth	r2, r2
 8004f5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	1c9a      	adds	r2, r3, #2
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f80:	f7fd ff08 	bl	8002d94 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d807      	bhi.n	8004fa0 <HAL_SPI_TransmitReceive+0x212>
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d003      	beq.n	8004fa0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f9e:	e0fb      	b.n	8005198 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1a3      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x164>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d19d      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x164>
 8004fb6:	e0df      	b.n	8005178 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_SPI_TransmitReceive+0x23a>
 8004fc0:	8a7b      	ldrh	r3, [r7, #18]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	f040 80cb 	bne.w	800515e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d912      	bls.n	8004ff8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	881a      	ldrh	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	1c9a      	adds	r2, r3, #2
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b02      	subs	r3, #2
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ff6:	e0b2      	b.n	800515e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	330c      	adds	r3, #12
 8005002:	7812      	ldrb	r2, [r2, #0]
 8005004:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501e:	e09e      	b.n	800515e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d134      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x30a>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d02f      	beq.n	8005098 <HAL_SPI_TransmitReceive+0x30a>
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	2b01      	cmp	r3, #1
 800503c:	d12c      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b01      	cmp	r3, #1
 8005046:	d912      	bls.n	800506e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	881a      	ldrh	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	1c9a      	adds	r2, r3, #2
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b02      	subs	r3, #2
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800506c:	e012      	b.n	8005094 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	330c      	adds	r3, #12
 8005078:	7812      	ldrb	r2, [r2, #0]
 800507a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508a:	b29b      	uxth	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d148      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x3aa>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d042      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d923      	bls.n	8005106 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	b292      	uxth	r2, r2
 80050ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	1c9a      	adds	r2, r3, #2
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b02      	subs	r3, #2
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d81f      	bhi.n	8005134 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005102:	605a      	str	r2, [r3, #4]
 8005104:	e016      	b.n	8005134 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f103 020c 	add.w	r2, r3, #12
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	7812      	ldrb	r2, [r2, #0]
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005134:	2301      	movs	r3, #1
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005138:	f7fd fe2c 	bl	8002d94 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005144:	429a      	cmp	r2, r3
 8005146:	d803      	bhi.n	8005150 <HAL_SPI_TransmitReceive+0x3c2>
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d102      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x3c8>
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	2b00      	cmp	r3, #0
 8005154:	d103      	bne.n	800515e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800515c:	e01c      	b.n	8005198 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	f47f af5b 	bne.w	8005020 <HAL_SPI_TransmitReceive+0x292>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	f47f af54 	bne.w	8005020 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fac7 	bl	8005710 <SPI_EndRxTxTransaction>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d006      	beq.n	8005196 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	661a      	str	r2, [r3, #96]	; 0x60
 8005194:	e000      	b.n	8005198 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005196:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3728      	adds	r7, #40	; 0x28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10e      	bne.n	80051f4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d004      	beq.n	80051f4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
    return;
 80051f2:	e0ce      	b.n	8005392 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <HAL_SPI_IRQHandler+0x5e>
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
    return;
 8005210:	e0bf      	b.n	8005392 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <HAL_SPI_IRQHandler+0x7e>
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d105      	bne.n	8005232 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80b0 	beq.w	8005392 <HAL_SPI_IRQHandler+0x1de>
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 80aa 	beq.w	8005392 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d023      	beq.n	8005290 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b03      	cmp	r3, #3
 8005252:	d011      	beq.n	8005278 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005258:	f043 0204 	orr.w	r2, r3, #4
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	e00b      	b.n	8005290 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]
        return;
 800528e:	e080      	b.n	8005392 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d014      	beq.n	80052c4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529e:	f043 0201 	orr.w	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00c      	beq.n	80052e8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d2:	f043 0208 	orr.w	r2, r3, #8
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d04f      	beq.n	8005390 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052fe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d104      	bne.n	800531c <HAL_SPI_IRQHandler+0x168>
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d034      	beq.n	8005386 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0203 	bic.w	r2, r2, #3
 800532a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005330:	2b00      	cmp	r3, #0
 8005332:	d011      	beq.n	8005358 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	4a17      	ldr	r2, [pc, #92]	; (8005398 <HAL_SPI_IRQHandler+0x1e4>)
 800533a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005340:	4618      	mov	r0, r3
 8005342:	f7fd fed8 	bl	80030f6 <HAL_DMA_Abort_IT>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005350:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	2b00      	cmp	r3, #0
 800535e:	d016      	beq.n	800538e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005364:	4a0c      	ldr	r2, [pc, #48]	; (8005398 <HAL_SPI_IRQHandler+0x1e4>)
 8005366:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	4618      	mov	r0, r3
 800536e:	f7fd fec2 	bl	80030f6 <HAL_DMA_Abort_IT>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005384:	e003      	b.n	800538e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f808 	bl	800539c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800538c:	e000      	b.n	8005390 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800538e:	bf00      	nop
    return;
 8005390:	bf00      	nop
  }
}
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	080053b1 	.word	0x080053b1

0800539c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff ffe5 	bl	800539c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053ec:	f7fd fcd2 	bl	8002d94 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	4413      	add	r3, r2
 80053fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053fc:	f7fd fcca 	bl	8002d94 <HAL_GetTick>
 8005400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005402:	4b39      	ldr	r3, [pc, #228]	; (80054e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	015b      	lsls	r3, r3, #5
 8005408:	0d1b      	lsrs	r3, r3, #20
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	fb02 f303 	mul.w	r3, r2, r3
 8005410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005412:	e054      	b.n	80054be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	d050      	beq.n	80054be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800541c:	f7fd fcba 	bl	8002d94 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	429a      	cmp	r2, r3
 800542a:	d902      	bls.n	8005432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d13d      	bne.n	80054ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800544a:	d111      	bne.n	8005470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005454:	d004      	beq.n	8005460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545e:	d107      	bne.n	8005470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800546e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005478:	d10f      	bne.n	800549a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e017      	b.n	80054de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d19b      	bne.n	8005414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000054 	.word	0x20000054

080054ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	; 0x28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054fe:	f7fd fc49 	bl	8002d94 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	4413      	add	r3, r2
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800550e:	f7fd fc41 	bl	8002d94 <HAL_GetTick>
 8005512:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800551c:	4b3d      	ldr	r3, [pc, #244]	; (8005614 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	00da      	lsls	r2, r3, #3
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	0d1b      	lsrs	r3, r3, #20
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	fb02 f303 	mul.w	r3, r2, r3
 8005532:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005534:	e060      	b.n	80055f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800553c:	d107      	bne.n	800554e <SPI_WaitFifoStateUntilTimeout+0x62>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d104      	bne.n	800554e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800554c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d050      	beq.n	80055f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005556:	f7fd fc1d 	bl	8002d94 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005562:	429a      	cmp	r2, r3
 8005564:	d902      	bls.n	800556c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d13d      	bne.n	80055e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800557a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005584:	d111      	bne.n	80055aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558e:	d004      	beq.n	800559a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005598:	d107      	bne.n	80055aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b2:	d10f      	bne.n	80055d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e010      	b.n	800560a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4013      	ands	r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d196      	bne.n	8005536 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3728      	adds	r7, #40	; 0x28
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000054 	.word	0x20000054

08005618 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800562c:	d111      	bne.n	8005652 <SPI_EndRxTransaction+0x3a>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005636:	d004      	beq.n	8005642 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005640:	d107      	bne.n	8005652 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005650:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800565a:	d112      	bne.n	8005682 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2200      	movs	r2, #0
 8005664:	2180      	movs	r1, #128	; 0x80
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff feb8 	bl	80053dc <SPI_WaitFlagStateUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d021      	beq.n	80056b6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e03d      	b.n	80056fe <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005682:	4b21      	ldr	r3, [pc, #132]	; (8005708 <SPI_EndRxTransaction+0xf0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a21      	ldr	r2, [pc, #132]	; (800570c <SPI_EndRxTransaction+0xf4>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	0d5b      	lsrs	r3, r3, #21
 800568e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ae:	2b80      	cmp	r3, #128	; 0x80
 80056b0:	d0f2      	beq.n	8005698 <SPI_EndRxTransaction+0x80>
 80056b2:	e000      	b.n	80056b6 <SPI_EndRxTransaction+0x9e>
        break;
 80056b4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056be:	d11d      	bne.n	80056fc <SPI_EndRxTransaction+0xe4>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c8:	d004      	beq.n	80056d4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d2:	d113      	bne.n	80056fc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2200      	movs	r2, #0
 80056dc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f7ff ff03 	bl	80054ec <SPI_WaitFifoStateUntilTimeout>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e000      	b.n	80056fe <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000054 	.word	0x20000054
 800570c:	165e9f81 	.word	0x165e9f81

08005710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2200      	movs	r2, #0
 8005724:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff fedf 	bl	80054ec <SPI_WaitFifoStateUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005738:	f043 0220 	orr.w	r2, r3, #32
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e046      	b.n	80057d2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005744:	4b25      	ldr	r3, [pc, #148]	; (80057dc <SPI_EndRxTxTransaction+0xcc>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a25      	ldr	r2, [pc, #148]	; (80057e0 <SPI_EndRxTxTransaction+0xd0>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	0d5b      	lsrs	r3, r3, #21
 8005750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005754:	fb02 f303 	mul.w	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005762:	d112      	bne.n	800578a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	2180      	movs	r1, #128	; 0x80
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff fe34 	bl	80053dc <SPI_WaitFlagStateUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d016      	beq.n	80057a8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e023      	b.n	80057d2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	3b01      	subs	r3, #1
 8005794:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a0:	2b80      	cmp	r3, #128	; 0x80
 80057a2:	d0f2      	beq.n	800578a <SPI_EndRxTxTransaction+0x7a>
 80057a4:	e000      	b.n	80057a8 <SPI_EndRxTxTransaction+0x98>
        break;
 80057a6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f7ff fe99 	bl	80054ec <SPI_WaitFifoStateUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c4:	f043 0220 	orr.w	r2, r3, #32
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e000      	b.n	80057d2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000054 	.word	0x20000054
 80057e0:	165e9f81 	.word	0x165e9f81

080057e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e049      	b.n	800588a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fd f92e 	bl	8002a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3304      	adds	r3, #4
 8005820:	4619      	mov	r1, r3
 8005822:	4610      	mov	r0, r2
 8005824:	f000 fd26 	bl	8006274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d001      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e054      	b.n	8005956 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a26      	ldr	r2, [pc, #152]	; (8005964 <HAL_TIM_Base_Start_IT+0xd0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d022      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d6:	d01d      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a22      	ldr	r2, [pc, #136]	; (8005968 <HAL_TIM_Base_Start_IT+0xd4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d018      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a21      	ldr	r2, [pc, #132]	; (800596c <HAL_TIM_Base_Start_IT+0xd8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d013      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <HAL_TIM_Base_Start_IT+0xdc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00e      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_TIM_Base_Start_IT+0xe0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <HAL_TIM_Base_Start_IT+0xe4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d004      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x80>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_TIM_Base_Start_IT+0xe8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d115      	bne.n	8005940 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	4b19      	ldr	r3, [pc, #100]	; (8005980 <HAL_TIM_Base_Start_IT+0xec>)
 800591c:	4013      	ands	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b06      	cmp	r3, #6
 8005924:	d015      	beq.n	8005952 <HAL_TIM_Base_Start_IT+0xbe>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d011      	beq.n	8005952 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0201 	orr.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593e:	e008      	b.n	8005952 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	e000      	b.n	8005954 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40010000 	.word	0x40010000
 8005968:	40000400 	.word	0x40000400
 800596c:	40000800 	.word	0x40000800
 8005970:	40000c00 	.word	0x40000c00
 8005974:	40010400 	.word	0x40010400
 8005978:	40014000 	.word	0x40014000
 800597c:	40001800 	.word	0x40001800
 8005980:	00010007 	.word	0x00010007

08005984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e049      	b.n	8005a2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fd f882 	bl	8002ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f000 fc56 	bl	8006274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d109      	bne.n	8005a58 <HAL_TIM_PWM_Start+0x24>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	bf14      	ite	ne
 8005a50:	2301      	movne	r3, #1
 8005a52:	2300      	moveq	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	e03c      	b.n	8005ad2 <HAL_TIM_PWM_Start+0x9e>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d109      	bne.n	8005a72 <HAL_TIM_PWM_Start+0x3e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	bf14      	ite	ne
 8005a6a:	2301      	movne	r3, #1
 8005a6c:	2300      	moveq	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	e02f      	b.n	8005ad2 <HAL_TIM_PWM_Start+0x9e>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d109      	bne.n	8005a8c <HAL_TIM_PWM_Start+0x58>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	bf14      	ite	ne
 8005a84:	2301      	movne	r3, #1
 8005a86:	2300      	moveq	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	e022      	b.n	8005ad2 <HAL_TIM_PWM_Start+0x9e>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b0c      	cmp	r3, #12
 8005a90:	d109      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0x72>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	bf14      	ite	ne
 8005a9e:	2301      	movne	r3, #1
 8005aa0:	2300      	moveq	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	e015      	b.n	8005ad2 <HAL_TIM_PWM_Start+0x9e>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d109      	bne.n	8005ac0 <HAL_TIM_PWM_Start+0x8c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	bf14      	ite	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	2300      	moveq	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	e008      	b.n	8005ad2 <HAL_TIM_PWM_Start+0x9e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	bf14      	ite	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	2300      	moveq	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e092      	b.n	8005c00 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_PWM_Start+0xb6>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae8:	e023      	b.n	8005b32 <HAL_TIM_PWM_Start+0xfe>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d104      	bne.n	8005afa <HAL_TIM_PWM_Start+0xc6>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af8:	e01b      	b.n	8005b32 <HAL_TIM_PWM_Start+0xfe>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d104      	bne.n	8005b0a <HAL_TIM_PWM_Start+0xd6>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b08:	e013      	b.n	8005b32 <HAL_TIM_PWM_Start+0xfe>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b0c      	cmp	r3, #12
 8005b0e:	d104      	bne.n	8005b1a <HAL_TIM_PWM_Start+0xe6>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b18:	e00b      	b.n	8005b32 <HAL_TIM_PWM_Start+0xfe>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d104      	bne.n	8005b2a <HAL_TIM_PWM_Start+0xf6>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b28:	e003      	b.n	8005b32 <HAL_TIM_PWM_Start+0xfe>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2201      	movs	r2, #1
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 ff32 	bl	80069a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <HAL_TIM_PWM_Start+0x1d4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_TIM_PWM_Start+0x120>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2f      	ldr	r2, [pc, #188]	; (8005c0c <HAL_TIM_PWM_Start+0x1d8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d101      	bne.n	8005b58 <HAL_TIM_PWM_Start+0x124>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <HAL_TIM_PWM_Start+0x126>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a25      	ldr	r2, [pc, #148]	; (8005c08 <HAL_TIM_PWM_Start+0x1d4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d022      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x18a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b80:	d01d      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x18a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <HAL_TIM_PWM_Start+0x1dc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d018      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x18a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a20      	ldr	r2, [pc, #128]	; (8005c14 <HAL_TIM_PWM_Start+0x1e0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x18a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1f      	ldr	r2, [pc, #124]	; (8005c18 <HAL_TIM_PWM_Start+0x1e4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00e      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x18a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <HAL_TIM_PWM_Start+0x1d8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d009      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x18a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1b      	ldr	r2, [pc, #108]	; (8005c1c <HAL_TIM_PWM_Start+0x1e8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d004      	beq.n	8005bbe <HAL_TIM_PWM_Start+0x18a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <HAL_TIM_PWM_Start+0x1ec>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d115      	bne.n	8005bea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	4b17      	ldr	r3, [pc, #92]	; (8005c24 <HAL_TIM_PWM_Start+0x1f0>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d015      	beq.n	8005bfc <HAL_TIM_PWM_Start+0x1c8>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd6:	d011      	beq.n	8005bfc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be8:	e008      	b.n	8005bfc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0201 	orr.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	e000      	b.n	8005bfe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40010400 	.word	0x40010400
 8005c10:	40000400 	.word	0x40000400
 8005c14:	40000800 	.word	0x40000800
 8005c18:	40000c00 	.word	0x40000c00
 8005c1c:	40014000 	.word	0x40014000
 8005c20:	40001800 	.word	0x40001800
 8005c24:	00010007 	.word	0x00010007

08005c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d122      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d11b      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0202 	mvn.w	r2, #2
 8005c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fae4 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8005c70:	e005      	b.n	8005c7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fad6 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fae7 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d122      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d11b      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0204 	mvn.w	r2, #4
 8005ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2202      	movs	r2, #2
 8005cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 faba 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8005cc4:	e005      	b.n	8005cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 faac 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fabd 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d122      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d11b      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0208 	mvn.w	r2, #8
 8005cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2204      	movs	r2, #4
 8005d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa90 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8005d18:	e005      	b.n	8005d26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fa82 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fa93 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f003 0310 	and.w	r3, r3, #16
 8005d36:	2b10      	cmp	r3, #16
 8005d38:	d122      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d11b      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f06f 0210 	mvn.w	r2, #16
 8005d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2208      	movs	r2, #8
 8005d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa66 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8005d6c:	e005      	b.n	8005d7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa58 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fa69 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d10e      	bne.n	8005dac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d107      	bne.n	8005dac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0201 	mvn.w	r2, #1
 8005da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fc fb28 	bl	80023fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db6:	2b80      	cmp	r3, #128	; 0x80
 8005db8:	d10e      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d107      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fea4 	bl	8006b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de6:	d10e      	bne.n	8005e06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df2:	2b80      	cmp	r3, #128	; 0x80
 8005df4:	d107      	bne.n	8005e06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fe97 	bl	8006b34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b40      	cmp	r3, #64	; 0x40
 8005e12:	d10e      	bne.n	8005e32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b40      	cmp	r3, #64	; 0x40
 8005e20:	d107      	bne.n	8005e32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fa17 	bl	8006260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d10e      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d107      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f06f 0220 	mvn.w	r2, #32
 8005e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fe57 	bl	8006b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e0ff      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b14      	cmp	r3, #20
 8005e92:	f200 80f0 	bhi.w	8006076 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08006077 	.word	0x08006077
 8005ea4:	08006077 	.word	0x08006077
 8005ea8:	08006077 	.word	0x08006077
 8005eac:	08005f31 	.word	0x08005f31
 8005eb0:	08006077 	.word	0x08006077
 8005eb4:	08006077 	.word	0x08006077
 8005eb8:	08006077 	.word	0x08006077
 8005ebc:	08005f73 	.word	0x08005f73
 8005ec0:	08006077 	.word	0x08006077
 8005ec4:	08006077 	.word	0x08006077
 8005ec8:	08006077 	.word	0x08006077
 8005ecc:	08005fb3 	.word	0x08005fb3
 8005ed0:	08006077 	.word	0x08006077
 8005ed4:	08006077 	.word	0x08006077
 8005ed8:	08006077 	.word	0x08006077
 8005edc:	08005ff5 	.word	0x08005ff5
 8005ee0:	08006077 	.word	0x08006077
 8005ee4:	08006077 	.word	0x08006077
 8005ee8:	08006077 	.word	0x08006077
 8005eec:	08006035 	.word	0x08006035
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fa5c 	bl	80063b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0208 	orr.w	r2, r2, #8
 8005f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0204 	bic.w	r2, r2, #4
 8005f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6999      	ldr	r1, [r3, #24]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	619a      	str	r2, [r3, #24]
      break;
 8005f2e:	e0a5      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 faae 	bl	8006498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6999      	ldr	r1, [r3, #24]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	021a      	lsls	r2, r3, #8
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	619a      	str	r2, [r3, #24]
      break;
 8005f70:	e084      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fb05 	bl	8006588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0208 	orr.w	r2, r2, #8
 8005f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0204 	bic.w	r2, r2, #4
 8005f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69d9      	ldr	r1, [r3, #28]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	61da      	str	r2, [r3, #28]
      break;
 8005fb0:	e064      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fb5b 	bl	8006674 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69d9      	ldr	r1, [r3, #28]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	021a      	lsls	r2, r3, #8
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	61da      	str	r2, [r3, #28]
      break;
 8005ff2:	e043      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fb92 	bl	8006724 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0208 	orr.w	r2, r2, #8
 800600e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0204 	bic.w	r2, r2, #4
 800601e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006032:	e023      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fbc4 	bl	80067c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800604e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	021a      	lsls	r2, r3, #8
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006074:	e002      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
      break;
 800607a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006084:	7dfb      	ldrb	r3, [r7, #23]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop

08006090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIM_ConfigClockSource+0x1c>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e0b4      	b.n	8006216 <HAL_TIM_ConfigClockSource+0x186>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	4b56      	ldr	r3, [pc, #344]	; (8006220 <HAL_TIM_ConfigClockSource+0x190>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e4:	d03e      	beq.n	8006164 <HAL_TIM_ConfigClockSource+0xd4>
 80060e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ea:	f200 8087 	bhi.w	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f2:	f000 8086 	beq.w	8006202 <HAL_TIM_ConfigClockSource+0x172>
 80060f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fa:	d87f      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 80060fc:	2b70      	cmp	r3, #112	; 0x70
 80060fe:	d01a      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0xa6>
 8006100:	2b70      	cmp	r3, #112	; 0x70
 8006102:	d87b      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 8006104:	2b60      	cmp	r3, #96	; 0x60
 8006106:	d050      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0x11a>
 8006108:	2b60      	cmp	r3, #96	; 0x60
 800610a:	d877      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 800610c:	2b50      	cmp	r3, #80	; 0x50
 800610e:	d03c      	beq.n	800618a <HAL_TIM_ConfigClockSource+0xfa>
 8006110:	2b50      	cmp	r3, #80	; 0x50
 8006112:	d873      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d058      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x13a>
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	d86f      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b30      	cmp	r3, #48	; 0x30
 800611e:	d064      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x15a>
 8006120:	2b30      	cmp	r3, #48	; 0x30
 8006122:	d86b      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b20      	cmp	r3, #32
 8006126:	d060      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x15a>
 8006128:	2b20      	cmp	r3, #32
 800612a:	d867      	bhi.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b00      	cmp	r3, #0
 800612e:	d05c      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x15a>
 8006130:	2b10      	cmp	r3, #16
 8006132:	d05a      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x15a>
 8006134:	e062      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006146:	f000 fc0d 	bl	8006964 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	609a      	str	r2, [r3, #8]
      break;
 8006162:	e04f      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006174:	f000 fbf6 	bl	8006964 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006186:	609a      	str	r2, [r3, #8]
      break;
 8006188:	e03c      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006196:	461a      	mov	r2, r3
 8006198:	f000 fb6a 	bl	8006870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2150      	movs	r1, #80	; 0x50
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 fbc3 	bl	800692e <TIM_ITRx_SetConfig>
      break;
 80061a8:	e02c      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b6:	461a      	mov	r2, r3
 80061b8:	f000 fb89 	bl	80068ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2160      	movs	r1, #96	; 0x60
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fbb3 	bl	800692e <TIM_ITRx_SetConfig>
      break;
 80061c8:	e01c      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d6:	461a      	mov	r2, r3
 80061d8:	f000 fb4a 	bl	8006870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2140      	movs	r1, #64	; 0x40
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fba3 	bl	800692e <TIM_ITRx_SetConfig>
      break;
 80061e8:	e00c      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f000 fb9a 	bl	800692e <TIM_ITRx_SetConfig>
      break;
 80061fa:	e003      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006200:	e000      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	fffeff88 	.word	0xfffeff88

08006224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a40      	ldr	r2, [pc, #256]	; (8006388 <TIM_Base_SetConfig+0x114>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006292:	d00f      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3d      	ldr	r2, [pc, #244]	; (800638c <TIM_Base_SetConfig+0x118>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00b      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3c      	ldr	r2, [pc, #240]	; (8006390 <TIM_Base_SetConfig+0x11c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3b      	ldr	r2, [pc, #236]	; (8006394 <TIM_Base_SetConfig+0x120>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a3a      	ldr	r2, [pc, #232]	; (8006398 <TIM_Base_SetConfig+0x124>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d108      	bne.n	80062c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2f      	ldr	r2, [pc, #188]	; (8006388 <TIM_Base_SetConfig+0x114>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d02b      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d4:	d027      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2c      	ldr	r2, [pc, #176]	; (800638c <TIM_Base_SetConfig+0x118>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d023      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2b      	ldr	r2, [pc, #172]	; (8006390 <TIM_Base_SetConfig+0x11c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d01f      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2a      	ldr	r2, [pc, #168]	; (8006394 <TIM_Base_SetConfig+0x120>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01b      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a29      	ldr	r2, [pc, #164]	; (8006398 <TIM_Base_SetConfig+0x124>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d017      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a28      	ldr	r2, [pc, #160]	; (800639c <TIM_Base_SetConfig+0x128>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d013      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a27      	ldr	r2, [pc, #156]	; (80063a0 <TIM_Base_SetConfig+0x12c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00f      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a26      	ldr	r2, [pc, #152]	; (80063a4 <TIM_Base_SetConfig+0x130>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00b      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a25      	ldr	r2, [pc, #148]	; (80063a8 <TIM_Base_SetConfig+0x134>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d007      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a24      	ldr	r2, [pc, #144]	; (80063ac <TIM_Base_SetConfig+0x138>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d003      	beq.n	8006326 <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a23      	ldr	r2, [pc, #140]	; (80063b0 <TIM_Base_SetConfig+0x13c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d108      	bne.n	8006338 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800632c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4313      	orrs	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a0a      	ldr	r2, [pc, #40]	; (8006388 <TIM_Base_SetConfig+0x114>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_Base_SetConfig+0xf8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a0c      	ldr	r2, [pc, #48]	; (8006398 <TIM_Base_SetConfig+0x124>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d103      	bne.n	8006374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	615a      	str	r2, [r3, #20]
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40010000 	.word	0x40010000
 800638c:	40000400 	.word	0x40000400
 8006390:	40000800 	.word	0x40000800
 8006394:	40000c00 	.word	0x40000c00
 8006398:	40010400 	.word	0x40010400
 800639c:	40014000 	.word	0x40014000
 80063a0:	40014400 	.word	0x40014400
 80063a4:	40014800 	.word	0x40014800
 80063a8:	40001800 	.word	0x40001800
 80063ac:	40001c00 	.word	0x40001c00
 80063b0:	40002000 	.word	0x40002000

080063b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f023 0201 	bic.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4b2b      	ldr	r3, [pc, #172]	; (800648c <TIM_OC1_SetConfig+0xd8>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 0302 	bic.w	r3, r3, #2
 80063fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a21      	ldr	r2, [pc, #132]	; (8006490 <TIM_OC1_SetConfig+0xdc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_OC1_SetConfig+0x64>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a20      	ldr	r2, [pc, #128]	; (8006494 <TIM_OC1_SetConfig+0xe0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d10c      	bne.n	8006432 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0308 	bic.w	r3, r3, #8
 800641e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f023 0304 	bic.w	r3, r3, #4
 8006430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a16      	ldr	r2, [pc, #88]	; (8006490 <TIM_OC1_SetConfig+0xdc>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_OC1_SetConfig+0x8e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a15      	ldr	r2, [pc, #84]	; (8006494 <TIM_OC1_SetConfig+0xe0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d111      	bne.n	8006466 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	621a      	str	r2, [r3, #32]
}
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	fffeff8f 	.word	0xfffeff8f
 8006490:	40010000 	.word	0x40010000
 8006494:	40010400 	.word	0x40010400

08006498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	f023 0210 	bic.w	r2, r3, #16
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4b2e      	ldr	r3, [pc, #184]	; (800657c <TIM_OC2_SetConfig+0xe4>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	021b      	lsls	r3, r3, #8
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f023 0320 	bic.w	r3, r3, #32
 80064e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a23      	ldr	r2, [pc, #140]	; (8006580 <TIM_OC2_SetConfig+0xe8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_OC2_SetConfig+0x68>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a22      	ldr	r2, [pc, #136]	; (8006584 <TIM_OC2_SetConfig+0xec>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10d      	bne.n	800651c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a18      	ldr	r2, [pc, #96]	; (8006580 <TIM_OC2_SetConfig+0xe8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d003      	beq.n	800652c <TIM_OC2_SetConfig+0x94>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a17      	ldr	r2, [pc, #92]	; (8006584 <TIM_OC2_SetConfig+0xec>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d113      	bne.n	8006554 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800653a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	4313      	orrs	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	621a      	str	r2, [r3, #32]
}
 800656e:	bf00      	nop
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	feff8fff 	.word	0xfeff8fff
 8006580:	40010000 	.word	0x40010000
 8006584:	40010400 	.word	0x40010400

08006588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4b2d      	ldr	r3, [pc, #180]	; (8006668 <TIM_OC3_SetConfig+0xe0>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0303 	bic.w	r3, r3, #3
 80065be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a22      	ldr	r2, [pc, #136]	; (800666c <TIM_OC3_SetConfig+0xe4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d003      	beq.n	80065ee <TIM_OC3_SetConfig+0x66>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a21      	ldr	r2, [pc, #132]	; (8006670 <TIM_OC3_SetConfig+0xe8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d10d      	bne.n	800660a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a17      	ldr	r2, [pc, #92]	; (800666c <TIM_OC3_SetConfig+0xe4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d003      	beq.n	800661a <TIM_OC3_SetConfig+0x92>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a16      	ldr	r2, [pc, #88]	; (8006670 <TIM_OC3_SetConfig+0xe8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d113      	bne.n	8006642 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	621a      	str	r2, [r3, #32]
}
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	fffeff8f 	.word	0xfffeff8f
 800666c:	40010000 	.word	0x40010000
 8006670:	40010400 	.word	0x40010400

08006674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4b1e      	ldr	r3, [pc, #120]	; (8006718 <TIM_OC4_SetConfig+0xa4>)
 80066a0:	4013      	ands	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	021b      	lsls	r3, r3, #8
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	031b      	lsls	r3, r3, #12
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a13      	ldr	r2, [pc, #76]	; (800671c <TIM_OC4_SetConfig+0xa8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d003      	beq.n	80066dc <TIM_OC4_SetConfig+0x68>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a12      	ldr	r2, [pc, #72]	; (8006720 <TIM_OC4_SetConfig+0xac>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d109      	bne.n	80066f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	019b      	lsls	r3, r3, #6
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	621a      	str	r2, [r3, #32]
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	feff8fff 	.word	0xfeff8fff
 800671c:	40010000 	.word	0x40010000
 8006720:	40010400 	.word	0x40010400

08006724 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4b1b      	ldr	r3, [pc, #108]	; (80067bc <TIM_OC5_SetConfig+0x98>)
 8006750:	4013      	ands	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006764:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	041b      	lsls	r3, r3, #16
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a12      	ldr	r2, [pc, #72]	; (80067c0 <TIM_OC5_SetConfig+0x9c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d003      	beq.n	8006782 <TIM_OC5_SetConfig+0x5e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a11      	ldr	r2, [pc, #68]	; (80067c4 <TIM_OC5_SetConfig+0xa0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d109      	bne.n	8006796 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006788:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	021b      	lsls	r3, r3, #8
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	621a      	str	r2, [r3, #32]
}
 80067b0:	bf00      	nop
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	fffeff8f 	.word	0xfffeff8f
 80067c0:	40010000 	.word	0x40010000
 80067c4:	40010400 	.word	0x40010400

080067c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4b1c      	ldr	r3, [pc, #112]	; (8006864 <TIM_OC6_SetConfig+0x9c>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	021b      	lsls	r3, r3, #8
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800680a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	051b      	lsls	r3, r3, #20
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a13      	ldr	r2, [pc, #76]	; (8006868 <TIM_OC6_SetConfig+0xa0>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d003      	beq.n	8006828 <TIM_OC6_SetConfig+0x60>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a12      	ldr	r2, [pc, #72]	; (800686c <TIM_OC6_SetConfig+0xa4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d109      	bne.n	800683c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800682e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	029b      	lsls	r3, r3, #10
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	feff8fff 	.word	0xfeff8fff
 8006868:	40010000 	.word	0x40010000
 800686c:	40010400 	.word	0x40010400

08006870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f023 0201 	bic.w	r2, r3, #1
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800689a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f023 030a 	bic.w	r3, r3, #10
 80068ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b087      	sub	sp, #28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f023 0210 	bic.w	r2, r3, #16
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	031b      	lsls	r3, r3, #12
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	4313      	orrs	r3, r2
 8006902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800690a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	621a      	str	r2, [r3, #32]
}
 8006922:	bf00      	nop
 8006924:	371c      	adds	r7, #28
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	f043 0307 	orr.w	r3, r3, #7
 8006950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	609a      	str	r2, [r3, #8]
}
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800697e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	021a      	lsls	r2, r3, #8
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	431a      	orrs	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	4313      	orrs	r3, r2
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	609a      	str	r2, [r3, #8]
}
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	2201      	movs	r2, #1
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1a      	ldr	r2, [r3, #32]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	43db      	mvns	r3, r3
 80069c6:	401a      	ands	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a1a      	ldr	r2, [r3, #32]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	fa01 f303 	lsl.w	r3, r1, r3
 80069dc:	431a      	orrs	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	621a      	str	r2, [r3, #32]
}
 80069e2:	bf00      	nop
 80069e4:	371c      	adds	r7, #28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e06d      	b.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a30      	ldr	r2, [pc, #192]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2f      	ldr	r2, [pc, #188]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d108      	bne.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a20      	ldr	r2, [pc, #128]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d022      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7a:	d01d      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1d      	ldr	r2, [pc, #116]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d018      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1c      	ldr	r2, [pc, #112]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d013      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a1a      	ldr	r2, [pc, #104]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00e      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d009      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d004      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d10c      	bne.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006abe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	40010000 	.word	0x40010000
 8006af4:	40010400 	.word	0x40010400
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40000c00 	.word	0x40000c00
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40001800 	.word	0x40001800

08006b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e040      	b.n	8006bdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fc f830 	bl	8002bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2224      	movs	r2, #36	; 0x24
 8006b74:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0201 	bic.w	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fbc0 	bl	800730c <UART_SetConfig>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e022      	b.n	8006bdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fe18 	bl	80077d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fe9f 	bl	8007918 <UART_CheckIdleState>
 8006bda:	4603      	mov	r3, r0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b08b      	sub	sp, #44	; 0x2c
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d147      	bne.n	8006c8a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <HAL_UART_Transmit_IT+0x22>
 8006c00:	88fb      	ldrh	r3, [r7, #6]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e040      	b.n	8006c8c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	88fa      	ldrh	r2, [r7, #6]
 8006c14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	88fa      	ldrh	r2, [r7, #6]
 8006c1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2221      	movs	r2, #33	; 0x21
 8006c32:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3c:	d107      	bne.n	8006c4e <HAL_UART_Transmit_IT+0x6a>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d103      	bne.n	8006c4e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4a13      	ldr	r2, [pc, #76]	; (8006c98 <HAL_UART_Transmit_IT+0xb4>)
 8006c4a:	66da      	str	r2, [r3, #108]	; 0x6c
 8006c4c:	e002      	b.n	8006c54 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4a12      	ldr	r2, [pc, #72]	; (8006c9c <HAL_UART_Transmit_IT+0xb8>)
 8006c52:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	613b      	str	r3, [r7, #16]
   return(result);
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	623b      	str	r3, [r7, #32]
 8006c74:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	69f9      	ldr	r1, [r7, #28]
 8006c78:	6a3a      	ldr	r2, [r7, #32]
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e6      	bne.n	8006c54 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	e000      	b.n	8006c8c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006c8a:	2302      	movs	r3, #2
  }
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	372c      	adds	r7, #44	; 0x2c
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	08007e4b 	.word	0x08007e4b
 8006c9c:	08007d95 	.word	0x08007d95

08006ca0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08a      	sub	sp, #40	; 0x28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d132      	bne.n	8006d1e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <HAL_UART_Receive_IT+0x24>
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e02b      	b.n	8006d20 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d018      	beq.n	8006d0e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	623b      	str	r3, [r7, #32]
 8006cfc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	69f9      	ldr	r1, [r7, #28]
 8006d00:	6a3a      	ldr	r2, [r7, #32]
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e6      	bne.n	8006cdc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d0e:	88fb      	ldrh	r3, [r7, #6]
 8006d10:	461a      	mov	r2, r3
 8006d12:	68b9      	ldr	r1, [r7, #8]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fefd 	bl	8007b14 <UART_Start_Receive_IT>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	e000      	b.n	8006d20 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006d1e:	2302      	movs	r3, #2
  }
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3728      	adds	r7, #40	; 0x28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b0ba      	sub	sp, #232	; 0xe8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d52:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d56:	4013      	ands	r3, r2
 8006d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d115      	bne.n	8006d90 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00f      	beq.n	8006d90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d009      	beq.n	8006d90 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 8297 	beq.w	80072b4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	4798      	blx	r3
      }
      return;
 8006d8e:	e291      	b.n	80072b4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 8117 	beq.w	8006fc8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006da6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006daa:	4b85      	ldr	r3, [pc, #532]	; (8006fc0 <HAL_UART_IRQHandler+0x298>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 810a 	beq.w	8006fc8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d011      	beq.n	8006de4 <HAL_UART_IRQHandler+0xbc>
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00b      	beq.n	8006de4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dda:	f043 0201 	orr.w	r2, r3, #1
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d011      	beq.n	8006e14 <HAL_UART_IRQHandler+0xec>
 8006df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2202      	movs	r2, #2
 8006e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e0a:	f043 0204 	orr.w	r2, r3, #4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d011      	beq.n	8006e44 <HAL_UART_IRQHandler+0x11c>
 8006e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00b      	beq.n	8006e44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2204      	movs	r2, #4
 8006e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e3a:	f043 0202 	orr.w	r2, r3, #2
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d017      	beq.n	8006e80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e54:	f003 0320 	and.w	r3, r3, #32
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d105      	bne.n	8006e68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00b      	beq.n	8006e80 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e76:	f043 0208 	orr.w	r2, r3, #8
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d012      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x18a>
 8006e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00c      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ea8:	f043 0220 	orr.w	r2, r3, #32
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 81fd 	beq.w	80072b8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00d      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d007      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d005      	beq.n	8006f0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d04f      	beq.n	8006faa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fec8 	bl	8007ca0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1a:	2b40      	cmp	r3, #64	; 0x40
 8006f1c:	d141      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3308      	adds	r3, #8
 8006f46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1d9      	bne.n	8006f1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d013      	beq.n	8006f9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f76:	4a13      	ldr	r2, [pc, #76]	; (8006fc4 <HAL_UART_IRQHandler+0x29c>)
 8006f78:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fc f8b9 	bl	80030f6 <HAL_DMA_Abort_IT>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d017      	beq.n	8006fba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f94:	4610      	mov	r0, r2
 8006f96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f98:	e00f      	b.n	8006fba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f9a0 	bl	80072e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa0:	e00b      	b.n	8006fba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f99c 	bl	80072e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa8:	e007      	b.n	8006fba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f998 	bl	80072e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006fb8:	e17e      	b.n	80072b8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fba:	bf00      	nop
    return;
 8006fbc:	e17c      	b.n	80072b8 <HAL_UART_IRQHandler+0x590>
 8006fbe:	bf00      	nop
 8006fc0:	04000120 	.word	0x04000120
 8006fc4:	08007d69 	.word	0x08007d69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	f040 814c 	bne.w	800726a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd6:	f003 0310 	and.w	r3, r3, #16
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8145 	beq.w	800726a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe4:	f003 0310 	and.w	r3, r3, #16
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 813e 	beq.w	800726a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2210      	movs	r2, #16
 8006ff4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	f040 80b6 	bne.w	8007172 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007012:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 8150 	beq.w	80072bc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007026:	429a      	cmp	r2, r3
 8007028:	f080 8148 	bcs.w	80072bc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007032:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007040:	f000 8086 	beq.w	8007150 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800705c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800706e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007072:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800707a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1da      	bne.n	8007044 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3308      	adds	r3, #8
 8007094:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800709e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e1      	bne.n	800708e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3308      	adds	r3, #8
 80070d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e3      	bne.n	80070ca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800711e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007120:	f023 0310 	bic.w	r3, r3, #16
 8007124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	461a      	mov	r2, r3
 800712e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007132:	65bb      	str	r3, [r7, #88]	; 0x58
 8007134:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007138:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e4      	bne.n	8007110 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800714a:	4618      	mov	r0, r3
 800714c:	f7fb ff63 	bl	8003016 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007162:	b29b      	uxth	r3, r3
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	b29b      	uxth	r3, r3
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f8c2 	bl	80072f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007170:	e0a4      	b.n	80072bc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800717e:	b29b      	uxth	r3, r3
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800718c:	b29b      	uxth	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 8096 	beq.w	80072c0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8091 	beq.w	80072c0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071c0:	647b      	str	r3, [r7, #68]	; 0x44
 80071c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e4      	bne.n	800719e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3308      	adds	r3, #8
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	623b      	str	r3, [r7, #32]
   return(result);
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	f023 0301 	bic.w	r3, r3, #1
 80071ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3308      	adds	r3, #8
 80071f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071f8:	633a      	str	r2, [r7, #48]	; 0x30
 80071fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e3      	bne.n	80071d4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	60fb      	str	r3, [r7, #12]
   return(result);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f023 0310 	bic.w	r3, r3, #16
 8007234:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	461a      	mov	r2, r3
 800723e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007242:	61fb      	str	r3, [r7, #28]
 8007244:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	69b9      	ldr	r1, [r7, #24]
 8007248:	69fa      	ldr	r2, [r7, #28]
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	617b      	str	r3, [r7, #20]
   return(result);
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e4      	bne.n	8007220 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2202      	movs	r2, #2
 800725a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800725c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f846 	bl	80072f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007268:	e02a      	b.n	80072c0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800727a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727e:	2b00      	cmp	r3, #0
 8007280:	d008      	beq.n	8007294 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01c      	beq.n	80072c4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	4798      	blx	r3
    }
    return;
 8007292:	e017      	b.n	80072c4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	d012      	beq.n	80072c6 <HAL_UART_IRQHandler+0x59e>
 80072a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00c      	beq.n	80072c6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fe2c 	bl	8007f0a <UART_EndTransmit_IT>
    return;
 80072b2:	e008      	b.n	80072c6 <HAL_UART_IRQHandler+0x59e>
      return;
 80072b4:	bf00      	nop
 80072b6:	e006      	b.n	80072c6 <HAL_UART_IRQHandler+0x59e>
    return;
 80072b8:	bf00      	nop
 80072ba:	e004      	b.n	80072c6 <HAL_UART_IRQHandler+0x59e>
      return;
 80072bc:	bf00      	nop
 80072be:	e002      	b.n	80072c6 <HAL_UART_IRQHandler+0x59e>
      return;
 80072c0:	bf00      	nop
 80072c2:	e000      	b.n	80072c6 <HAL_UART_IRQHandler+0x59e>
    return;
 80072c4:	bf00      	nop
  }

}
 80072c6:	37e8      	adds	r7, #232	; 0xe8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	4ba6      	ldr	r3, [pc, #664]	; (80075d0 <UART_SetConfig+0x2c4>)
 8007338:	4013      	ands	r3, r2
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	6812      	ldr	r2, [r2, #0]
 800733e:	6979      	ldr	r1, [r7, #20]
 8007340:	430b      	orrs	r3, r1
 8007342:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	430a      	orrs	r2, r1
 800737c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a94      	ldr	r2, [pc, #592]	; (80075d4 <UART_SetConfig+0x2c8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d120      	bne.n	80073ca <UART_SetConfig+0xbe>
 8007388:	4b93      	ldr	r3, [pc, #588]	; (80075d8 <UART_SetConfig+0x2cc>)
 800738a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	2b03      	cmp	r3, #3
 8007394:	d816      	bhi.n	80073c4 <UART_SetConfig+0xb8>
 8007396:	a201      	add	r2, pc, #4	; (adr r2, 800739c <UART_SetConfig+0x90>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	080073ad 	.word	0x080073ad
 80073a0:	080073b9 	.word	0x080073b9
 80073a4:	080073b3 	.word	0x080073b3
 80073a8:	080073bf 	.word	0x080073bf
 80073ac:	2301      	movs	r3, #1
 80073ae:	77fb      	strb	r3, [r7, #31]
 80073b0:	e150      	b.n	8007654 <UART_SetConfig+0x348>
 80073b2:	2302      	movs	r3, #2
 80073b4:	77fb      	strb	r3, [r7, #31]
 80073b6:	e14d      	b.n	8007654 <UART_SetConfig+0x348>
 80073b8:	2304      	movs	r3, #4
 80073ba:	77fb      	strb	r3, [r7, #31]
 80073bc:	e14a      	b.n	8007654 <UART_SetConfig+0x348>
 80073be:	2308      	movs	r3, #8
 80073c0:	77fb      	strb	r3, [r7, #31]
 80073c2:	e147      	b.n	8007654 <UART_SetConfig+0x348>
 80073c4:	2310      	movs	r3, #16
 80073c6:	77fb      	strb	r3, [r7, #31]
 80073c8:	e144      	b.n	8007654 <UART_SetConfig+0x348>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a83      	ldr	r2, [pc, #524]	; (80075dc <UART_SetConfig+0x2d0>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d132      	bne.n	800743a <UART_SetConfig+0x12e>
 80073d4:	4b80      	ldr	r3, [pc, #512]	; (80075d8 <UART_SetConfig+0x2cc>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073da:	f003 030c 	and.w	r3, r3, #12
 80073de:	2b0c      	cmp	r3, #12
 80073e0:	d828      	bhi.n	8007434 <UART_SetConfig+0x128>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <UART_SetConfig+0xdc>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	0800741d 	.word	0x0800741d
 80073ec:	08007435 	.word	0x08007435
 80073f0:	08007435 	.word	0x08007435
 80073f4:	08007435 	.word	0x08007435
 80073f8:	08007429 	.word	0x08007429
 80073fc:	08007435 	.word	0x08007435
 8007400:	08007435 	.word	0x08007435
 8007404:	08007435 	.word	0x08007435
 8007408:	08007423 	.word	0x08007423
 800740c:	08007435 	.word	0x08007435
 8007410:	08007435 	.word	0x08007435
 8007414:	08007435 	.word	0x08007435
 8007418:	0800742f 	.word	0x0800742f
 800741c:	2300      	movs	r3, #0
 800741e:	77fb      	strb	r3, [r7, #31]
 8007420:	e118      	b.n	8007654 <UART_SetConfig+0x348>
 8007422:	2302      	movs	r3, #2
 8007424:	77fb      	strb	r3, [r7, #31]
 8007426:	e115      	b.n	8007654 <UART_SetConfig+0x348>
 8007428:	2304      	movs	r3, #4
 800742a:	77fb      	strb	r3, [r7, #31]
 800742c:	e112      	b.n	8007654 <UART_SetConfig+0x348>
 800742e:	2308      	movs	r3, #8
 8007430:	77fb      	strb	r3, [r7, #31]
 8007432:	e10f      	b.n	8007654 <UART_SetConfig+0x348>
 8007434:	2310      	movs	r3, #16
 8007436:	77fb      	strb	r3, [r7, #31]
 8007438:	e10c      	b.n	8007654 <UART_SetConfig+0x348>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a68      	ldr	r2, [pc, #416]	; (80075e0 <UART_SetConfig+0x2d4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d120      	bne.n	8007486 <UART_SetConfig+0x17a>
 8007444:	4b64      	ldr	r3, [pc, #400]	; (80075d8 <UART_SetConfig+0x2cc>)
 8007446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800744e:	2b30      	cmp	r3, #48	; 0x30
 8007450:	d013      	beq.n	800747a <UART_SetConfig+0x16e>
 8007452:	2b30      	cmp	r3, #48	; 0x30
 8007454:	d814      	bhi.n	8007480 <UART_SetConfig+0x174>
 8007456:	2b20      	cmp	r3, #32
 8007458:	d009      	beq.n	800746e <UART_SetConfig+0x162>
 800745a:	2b20      	cmp	r3, #32
 800745c:	d810      	bhi.n	8007480 <UART_SetConfig+0x174>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <UART_SetConfig+0x15c>
 8007462:	2b10      	cmp	r3, #16
 8007464:	d006      	beq.n	8007474 <UART_SetConfig+0x168>
 8007466:	e00b      	b.n	8007480 <UART_SetConfig+0x174>
 8007468:	2300      	movs	r3, #0
 800746a:	77fb      	strb	r3, [r7, #31]
 800746c:	e0f2      	b.n	8007654 <UART_SetConfig+0x348>
 800746e:	2302      	movs	r3, #2
 8007470:	77fb      	strb	r3, [r7, #31]
 8007472:	e0ef      	b.n	8007654 <UART_SetConfig+0x348>
 8007474:	2304      	movs	r3, #4
 8007476:	77fb      	strb	r3, [r7, #31]
 8007478:	e0ec      	b.n	8007654 <UART_SetConfig+0x348>
 800747a:	2308      	movs	r3, #8
 800747c:	77fb      	strb	r3, [r7, #31]
 800747e:	e0e9      	b.n	8007654 <UART_SetConfig+0x348>
 8007480:	2310      	movs	r3, #16
 8007482:	77fb      	strb	r3, [r7, #31]
 8007484:	e0e6      	b.n	8007654 <UART_SetConfig+0x348>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a56      	ldr	r2, [pc, #344]	; (80075e4 <UART_SetConfig+0x2d8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d120      	bne.n	80074d2 <UART_SetConfig+0x1c6>
 8007490:	4b51      	ldr	r3, [pc, #324]	; (80075d8 <UART_SetConfig+0x2cc>)
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007496:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800749a:	2bc0      	cmp	r3, #192	; 0xc0
 800749c:	d013      	beq.n	80074c6 <UART_SetConfig+0x1ba>
 800749e:	2bc0      	cmp	r3, #192	; 0xc0
 80074a0:	d814      	bhi.n	80074cc <UART_SetConfig+0x1c0>
 80074a2:	2b80      	cmp	r3, #128	; 0x80
 80074a4:	d009      	beq.n	80074ba <UART_SetConfig+0x1ae>
 80074a6:	2b80      	cmp	r3, #128	; 0x80
 80074a8:	d810      	bhi.n	80074cc <UART_SetConfig+0x1c0>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <UART_SetConfig+0x1a8>
 80074ae:	2b40      	cmp	r3, #64	; 0x40
 80074b0:	d006      	beq.n	80074c0 <UART_SetConfig+0x1b4>
 80074b2:	e00b      	b.n	80074cc <UART_SetConfig+0x1c0>
 80074b4:	2300      	movs	r3, #0
 80074b6:	77fb      	strb	r3, [r7, #31]
 80074b8:	e0cc      	b.n	8007654 <UART_SetConfig+0x348>
 80074ba:	2302      	movs	r3, #2
 80074bc:	77fb      	strb	r3, [r7, #31]
 80074be:	e0c9      	b.n	8007654 <UART_SetConfig+0x348>
 80074c0:	2304      	movs	r3, #4
 80074c2:	77fb      	strb	r3, [r7, #31]
 80074c4:	e0c6      	b.n	8007654 <UART_SetConfig+0x348>
 80074c6:	2308      	movs	r3, #8
 80074c8:	77fb      	strb	r3, [r7, #31]
 80074ca:	e0c3      	b.n	8007654 <UART_SetConfig+0x348>
 80074cc:	2310      	movs	r3, #16
 80074ce:	77fb      	strb	r3, [r7, #31]
 80074d0:	e0c0      	b.n	8007654 <UART_SetConfig+0x348>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a44      	ldr	r2, [pc, #272]	; (80075e8 <UART_SetConfig+0x2dc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d125      	bne.n	8007528 <UART_SetConfig+0x21c>
 80074dc:	4b3e      	ldr	r3, [pc, #248]	; (80075d8 <UART_SetConfig+0x2cc>)
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ea:	d017      	beq.n	800751c <UART_SetConfig+0x210>
 80074ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074f0:	d817      	bhi.n	8007522 <UART_SetConfig+0x216>
 80074f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f6:	d00b      	beq.n	8007510 <UART_SetConfig+0x204>
 80074f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074fc:	d811      	bhi.n	8007522 <UART_SetConfig+0x216>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <UART_SetConfig+0x1fe>
 8007502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007506:	d006      	beq.n	8007516 <UART_SetConfig+0x20a>
 8007508:	e00b      	b.n	8007522 <UART_SetConfig+0x216>
 800750a:	2300      	movs	r3, #0
 800750c:	77fb      	strb	r3, [r7, #31]
 800750e:	e0a1      	b.n	8007654 <UART_SetConfig+0x348>
 8007510:	2302      	movs	r3, #2
 8007512:	77fb      	strb	r3, [r7, #31]
 8007514:	e09e      	b.n	8007654 <UART_SetConfig+0x348>
 8007516:	2304      	movs	r3, #4
 8007518:	77fb      	strb	r3, [r7, #31]
 800751a:	e09b      	b.n	8007654 <UART_SetConfig+0x348>
 800751c:	2308      	movs	r3, #8
 800751e:	77fb      	strb	r3, [r7, #31]
 8007520:	e098      	b.n	8007654 <UART_SetConfig+0x348>
 8007522:	2310      	movs	r3, #16
 8007524:	77fb      	strb	r3, [r7, #31]
 8007526:	e095      	b.n	8007654 <UART_SetConfig+0x348>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a2f      	ldr	r2, [pc, #188]	; (80075ec <UART_SetConfig+0x2e0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d125      	bne.n	800757e <UART_SetConfig+0x272>
 8007532:	4b29      	ldr	r3, [pc, #164]	; (80075d8 <UART_SetConfig+0x2cc>)
 8007534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007538:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800753c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007540:	d017      	beq.n	8007572 <UART_SetConfig+0x266>
 8007542:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007546:	d817      	bhi.n	8007578 <UART_SetConfig+0x26c>
 8007548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800754c:	d00b      	beq.n	8007566 <UART_SetConfig+0x25a>
 800754e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007552:	d811      	bhi.n	8007578 <UART_SetConfig+0x26c>
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <UART_SetConfig+0x254>
 8007558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800755c:	d006      	beq.n	800756c <UART_SetConfig+0x260>
 800755e:	e00b      	b.n	8007578 <UART_SetConfig+0x26c>
 8007560:	2301      	movs	r3, #1
 8007562:	77fb      	strb	r3, [r7, #31]
 8007564:	e076      	b.n	8007654 <UART_SetConfig+0x348>
 8007566:	2302      	movs	r3, #2
 8007568:	77fb      	strb	r3, [r7, #31]
 800756a:	e073      	b.n	8007654 <UART_SetConfig+0x348>
 800756c:	2304      	movs	r3, #4
 800756e:	77fb      	strb	r3, [r7, #31]
 8007570:	e070      	b.n	8007654 <UART_SetConfig+0x348>
 8007572:	2308      	movs	r3, #8
 8007574:	77fb      	strb	r3, [r7, #31]
 8007576:	e06d      	b.n	8007654 <UART_SetConfig+0x348>
 8007578:	2310      	movs	r3, #16
 800757a:	77fb      	strb	r3, [r7, #31]
 800757c:	e06a      	b.n	8007654 <UART_SetConfig+0x348>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a1b      	ldr	r2, [pc, #108]	; (80075f0 <UART_SetConfig+0x2e4>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d138      	bne.n	80075fa <UART_SetConfig+0x2ee>
 8007588:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <UART_SetConfig+0x2cc>)
 800758a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007592:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007596:	d017      	beq.n	80075c8 <UART_SetConfig+0x2bc>
 8007598:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800759c:	d82a      	bhi.n	80075f4 <UART_SetConfig+0x2e8>
 800759e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a2:	d00b      	beq.n	80075bc <UART_SetConfig+0x2b0>
 80075a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a8:	d824      	bhi.n	80075f4 <UART_SetConfig+0x2e8>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <UART_SetConfig+0x2aa>
 80075ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b2:	d006      	beq.n	80075c2 <UART_SetConfig+0x2b6>
 80075b4:	e01e      	b.n	80075f4 <UART_SetConfig+0x2e8>
 80075b6:	2300      	movs	r3, #0
 80075b8:	77fb      	strb	r3, [r7, #31]
 80075ba:	e04b      	b.n	8007654 <UART_SetConfig+0x348>
 80075bc:	2302      	movs	r3, #2
 80075be:	77fb      	strb	r3, [r7, #31]
 80075c0:	e048      	b.n	8007654 <UART_SetConfig+0x348>
 80075c2:	2304      	movs	r3, #4
 80075c4:	77fb      	strb	r3, [r7, #31]
 80075c6:	e045      	b.n	8007654 <UART_SetConfig+0x348>
 80075c8:	2308      	movs	r3, #8
 80075ca:	77fb      	strb	r3, [r7, #31]
 80075cc:	e042      	b.n	8007654 <UART_SetConfig+0x348>
 80075ce:	bf00      	nop
 80075d0:	efff69f3 	.word	0xefff69f3
 80075d4:	40011000 	.word	0x40011000
 80075d8:	40023800 	.word	0x40023800
 80075dc:	40004400 	.word	0x40004400
 80075e0:	40004800 	.word	0x40004800
 80075e4:	40004c00 	.word	0x40004c00
 80075e8:	40005000 	.word	0x40005000
 80075ec:	40011400 	.word	0x40011400
 80075f0:	40007800 	.word	0x40007800
 80075f4:	2310      	movs	r3, #16
 80075f6:	77fb      	strb	r3, [r7, #31]
 80075f8:	e02c      	b.n	8007654 <UART_SetConfig+0x348>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a72      	ldr	r2, [pc, #456]	; (80077c8 <UART_SetConfig+0x4bc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d125      	bne.n	8007650 <UART_SetConfig+0x344>
 8007604:	4b71      	ldr	r3, [pc, #452]	; (80077cc <UART_SetConfig+0x4c0>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800760e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007612:	d017      	beq.n	8007644 <UART_SetConfig+0x338>
 8007614:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007618:	d817      	bhi.n	800764a <UART_SetConfig+0x33e>
 800761a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800761e:	d00b      	beq.n	8007638 <UART_SetConfig+0x32c>
 8007620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007624:	d811      	bhi.n	800764a <UART_SetConfig+0x33e>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <UART_SetConfig+0x326>
 800762a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800762e:	d006      	beq.n	800763e <UART_SetConfig+0x332>
 8007630:	e00b      	b.n	800764a <UART_SetConfig+0x33e>
 8007632:	2300      	movs	r3, #0
 8007634:	77fb      	strb	r3, [r7, #31]
 8007636:	e00d      	b.n	8007654 <UART_SetConfig+0x348>
 8007638:	2302      	movs	r3, #2
 800763a:	77fb      	strb	r3, [r7, #31]
 800763c:	e00a      	b.n	8007654 <UART_SetConfig+0x348>
 800763e:	2304      	movs	r3, #4
 8007640:	77fb      	strb	r3, [r7, #31]
 8007642:	e007      	b.n	8007654 <UART_SetConfig+0x348>
 8007644:	2308      	movs	r3, #8
 8007646:	77fb      	strb	r3, [r7, #31]
 8007648:	e004      	b.n	8007654 <UART_SetConfig+0x348>
 800764a:	2310      	movs	r3, #16
 800764c:	77fb      	strb	r3, [r7, #31]
 800764e:	e001      	b.n	8007654 <UART_SetConfig+0x348>
 8007650:	2310      	movs	r3, #16
 8007652:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800765c:	d15b      	bne.n	8007716 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800765e:	7ffb      	ldrb	r3, [r7, #31]
 8007660:	2b08      	cmp	r3, #8
 8007662:	d828      	bhi.n	80076b6 <UART_SetConfig+0x3aa>
 8007664:	a201      	add	r2, pc, #4	; (adr r2, 800766c <UART_SetConfig+0x360>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	08007691 	.word	0x08007691
 8007670:	08007699 	.word	0x08007699
 8007674:	080076a1 	.word	0x080076a1
 8007678:	080076b7 	.word	0x080076b7
 800767c:	080076a7 	.word	0x080076a7
 8007680:	080076b7 	.word	0x080076b7
 8007684:	080076b7 	.word	0x080076b7
 8007688:	080076b7 	.word	0x080076b7
 800768c:	080076af 	.word	0x080076af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007690:	f7fc fc1c 	bl	8003ecc <HAL_RCC_GetPCLK1Freq>
 8007694:	61b8      	str	r0, [r7, #24]
        break;
 8007696:	e013      	b.n	80076c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007698:	f7fc fc2c 	bl	8003ef4 <HAL_RCC_GetPCLK2Freq>
 800769c:	61b8      	str	r0, [r7, #24]
        break;
 800769e:	e00f      	b.n	80076c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a0:	4b4b      	ldr	r3, [pc, #300]	; (80077d0 <UART_SetConfig+0x4c4>)
 80076a2:	61bb      	str	r3, [r7, #24]
        break;
 80076a4:	e00c      	b.n	80076c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076a6:	f7fc faff 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 80076aa:	61b8      	str	r0, [r7, #24]
        break;
 80076ac:	e008      	b.n	80076c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076b2:	61bb      	str	r3, [r7, #24]
        break;
 80076b4:	e004      	b.n	80076c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	77bb      	strb	r3, [r7, #30]
        break;
 80076be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d074      	beq.n	80077b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	005a      	lsls	r2, r3, #1
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	441a      	add	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	2b0f      	cmp	r3, #15
 80076e0:	d916      	bls.n	8007710 <UART_SetConfig+0x404>
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e8:	d212      	bcs.n	8007710 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f023 030f 	bic.w	r3, r3, #15
 80076f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	085b      	lsrs	r3, r3, #1
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	b29a      	uxth	r2, r3
 8007700:	89fb      	ldrh	r3, [r7, #14]
 8007702:	4313      	orrs	r3, r2
 8007704:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	89fa      	ldrh	r2, [r7, #14]
 800770c:	60da      	str	r2, [r3, #12]
 800770e:	e04f      	b.n	80077b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	77bb      	strb	r3, [r7, #30]
 8007714:	e04c      	b.n	80077b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007716:	7ffb      	ldrb	r3, [r7, #31]
 8007718:	2b08      	cmp	r3, #8
 800771a:	d828      	bhi.n	800776e <UART_SetConfig+0x462>
 800771c:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <UART_SetConfig+0x418>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	08007749 	.word	0x08007749
 8007728:	08007751 	.word	0x08007751
 800772c:	08007759 	.word	0x08007759
 8007730:	0800776f 	.word	0x0800776f
 8007734:	0800775f 	.word	0x0800775f
 8007738:	0800776f 	.word	0x0800776f
 800773c:	0800776f 	.word	0x0800776f
 8007740:	0800776f 	.word	0x0800776f
 8007744:	08007767 	.word	0x08007767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007748:	f7fc fbc0 	bl	8003ecc <HAL_RCC_GetPCLK1Freq>
 800774c:	61b8      	str	r0, [r7, #24]
        break;
 800774e:	e013      	b.n	8007778 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007750:	f7fc fbd0 	bl	8003ef4 <HAL_RCC_GetPCLK2Freq>
 8007754:	61b8      	str	r0, [r7, #24]
        break;
 8007756:	e00f      	b.n	8007778 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007758:	4b1d      	ldr	r3, [pc, #116]	; (80077d0 <UART_SetConfig+0x4c4>)
 800775a:	61bb      	str	r3, [r7, #24]
        break;
 800775c:	e00c      	b.n	8007778 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800775e:	f7fc faa3 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8007762:	61b8      	str	r0, [r7, #24]
        break;
 8007764:	e008      	b.n	8007778 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800776a:	61bb      	str	r3, [r7, #24]
        break;
 800776c:	e004      	b.n	8007778 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	77bb      	strb	r3, [r7, #30]
        break;
 8007776:	bf00      	nop
    }

    if (pclk != 0U)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d018      	beq.n	80077b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	085a      	lsrs	r2, r3, #1
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	441a      	add	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007790:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b0f      	cmp	r3, #15
 8007796:	d909      	bls.n	80077ac <UART_SetConfig+0x4a0>
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800779e:	d205      	bcs.n	80077ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60da      	str	r2, [r3, #12]
 80077aa:	e001      	b.n	80077b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80077bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3720      	adds	r7, #32
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40007c00 	.word	0x40007c00
 80077cc:	40023800 	.word	0x40023800
 80077d0:	00f42400 	.word	0x00f42400

080077d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00a      	beq.n	8007886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	f003 0320 	and.w	r3, r3, #32
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00a      	beq.n	80078a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01a      	beq.n	80078ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078d2:	d10a      	bne.n	80078ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	605a      	str	r2, [r3, #4]
  }
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af02      	add	r7, sp, #8
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007928:	f7fb fa34 	bl	8002d94 <HAL_GetTick>
 800792c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b08      	cmp	r3, #8
 800793a:	d10e      	bne.n	800795a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800793c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f81b 	bl	8007986 <UART_WaitOnFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e011      	b.n	800797e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b09c      	sub	sp, #112	; 0x70
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	603b      	str	r3, [r7, #0]
 8007992:	4613      	mov	r3, r2
 8007994:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007996:	e0a7      	b.n	8007ae8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800799a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799e:	f000 80a3 	beq.w	8007ae8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079a2:	f7fb f9f7 	bl	8002d94 <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d302      	bcc.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80079b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d13f      	bne.n	8007a38 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079cc:	667b      	str	r3, [r7, #100]	; 0x64
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	663b      	str	r3, [r7, #96]	; 0x60
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2220      	movs	r2, #32
 8007a22:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e068      	b.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0304 	and.w	r3, r3, #4
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d050      	beq.n	8007ae8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a54:	d148      	bne.n	8007ae8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a5e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a80:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e6      	bne.n	8007a60 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3308      	adds	r3, #8
 8007a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f023 0301 	bic.w	r3, r3, #1
 8007aa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3308      	adds	r3, #8
 8007ab0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ab2:	623a      	str	r2, [r7, #32]
 8007ab4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	69f9      	ldr	r1, [r7, #28]
 8007ab8:	6a3a      	ldr	r2, [r7, #32]
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e5      	bne.n	8007a92 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e010      	b.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69da      	ldr	r2, [r3, #28]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	4013      	ands	r3, r2
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	bf0c      	ite	eq
 8007af8:	2301      	moveq	r3, #1
 8007afa:	2300      	movne	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	f43f af48 	beq.w	8007998 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3770      	adds	r7, #112	; 0x70
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b097      	sub	sp, #92	; 0x5c
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	88fa      	ldrh	r2, [r7, #6]
 8007b2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	88fa      	ldrh	r2, [r7, #6]
 8007b34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b46:	d10e      	bne.n	8007b66 <UART_Start_Receive_IT+0x52>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d105      	bne.n	8007b5c <UART_Start_Receive_IT+0x48>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b5a:	e02d      	b.n	8007bb8 <UART_Start_Receive_IT+0xa4>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	22ff      	movs	r2, #255	; 0xff
 8007b60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b64:	e028      	b.n	8007bb8 <UART_Start_Receive_IT+0xa4>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10d      	bne.n	8007b8a <UART_Start_Receive_IT+0x76>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <UART_Start_Receive_IT+0x6c>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	22ff      	movs	r2, #255	; 0xff
 8007b7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b7e:	e01b      	b.n	8007bb8 <UART_Start_Receive_IT+0xa4>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	227f      	movs	r2, #127	; 0x7f
 8007b84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b88:	e016      	b.n	8007bb8 <UART_Start_Receive_IT+0xa4>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b92:	d10d      	bne.n	8007bb0 <UART_Start_Receive_IT+0x9c>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d104      	bne.n	8007ba6 <UART_Start_Receive_IT+0x92>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	227f      	movs	r2, #127	; 0x7f
 8007ba0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ba4:	e008      	b.n	8007bb8 <UART_Start_Receive_IT+0xa4>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	223f      	movs	r2, #63	; 0x3f
 8007baa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bae:	e003      	b.n	8007bb8 <UART_Start_Receive_IT+0xa4>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2222      	movs	r2, #34	; 0x22
 8007bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3308      	adds	r3, #8
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	f043 0301 	orr.w	r3, r3, #1
 8007bde:	657b      	str	r3, [r7, #84]	; 0x54
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3308      	adds	r3, #8
 8007be6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007be8:	64ba      	str	r2, [r7, #72]	; 0x48
 8007bea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bf0:	e841 2300 	strex	r3, r2, [r1]
 8007bf4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e5      	bne.n	8007bc8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c04:	d107      	bne.n	8007c16 <UART_Start_Receive_IT+0x102>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d103      	bne.n	8007c16 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4a21      	ldr	r2, [pc, #132]	; (8007c98 <UART_Start_Receive_IT+0x184>)
 8007c12:	669a      	str	r2, [r3, #104]	; 0x68
 8007c14:	e002      	b.n	8007c1c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4a20      	ldr	r2, [pc, #128]	; (8007c9c <UART_Start_Receive_IT+0x188>)
 8007c1a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d019      	beq.n	8007c58 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c42:	637b      	str	r3, [r7, #52]	; 0x34
 8007c44:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e6      	bne.n	8007c24 <UART_Start_Receive_IT+0x110>
 8007c56:	e018      	b.n	8007c8a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	613b      	str	r3, [r7, #16]
   return(result);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f043 0320 	orr.w	r3, r3, #32
 8007c6c:	653b      	str	r3, [r7, #80]	; 0x50
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c76:	623b      	str	r3, [r7, #32]
 8007c78:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	69f9      	ldr	r1, [r7, #28]
 8007c7c:	6a3a      	ldr	r2, [r7, #32]
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e6      	bne.n	8007c58 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	375c      	adds	r7, #92	; 0x5c
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	080080c5 	.word	0x080080c5
 8007c9c:	08007f5f 	.word	0x08007f5f

08007ca0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b095      	sub	sp, #84	; 0x54
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8007cc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ccc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e6      	bne.n	8007ca8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3308      	adds	r3, #8
 8007ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	f023 0301 	bic.w	r3, r3, #1
 8007cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e5      	bne.n	8007cda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d118      	bne.n	8007d48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f023 0310 	bic.w	r3, r3, #16
 8007d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d34:	61bb      	str	r3, [r7, #24]
 8007d36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6979      	ldr	r1, [r7, #20]
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	613b      	str	r3, [r7, #16]
   return(result);
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e6      	bne.n	8007d16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d5c:	bf00      	nop
 8007d5e:	3754      	adds	r7, #84	; 0x54
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff faaa 	bl	80072e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d8c:	bf00      	nop
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b08f      	sub	sp, #60	; 0x3c
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da0:	2b21      	cmp	r3, #33	; 0x21
 8007da2:	d14c      	bne.n	8007e3e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d132      	bne.n	8007e16 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dd0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e6      	bne.n	8007db0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	e853 3f00 	ldrex	r3, [r3]
 8007dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df6:	633b      	str	r3, [r7, #48]	; 0x30
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	61bb      	str	r3, [r7, #24]
 8007e02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e04:	6979      	ldr	r1, [r7, #20]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	e841 2300 	strex	r3, r2, [r1]
 8007e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1e6      	bne.n	8007de2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007e14:	e013      	b.n	8007e3e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1a:	781a      	ldrb	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007e3e:	bf00      	nop
 8007e40:	373c      	adds	r7, #60	; 0x3c
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b091      	sub	sp, #68	; 0x44
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e56:	2b21      	cmp	r3, #33	; 0x21
 8007e58:	d151      	bne.n	8007efe <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d132      	bne.n	8007ecc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	623b      	str	r3, [r7, #32]
   return(result);
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	461a      	mov	r2, r3
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	633b      	str	r3, [r7, #48]	; 0x30
 8007e86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e8c:	e841 2300 	strex	r3, r2, [r1]
 8007e90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e6      	bne.n	8007e66 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eac:	637b      	str	r3, [r7, #52]	; 0x34
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb6:	61fb      	str	r3, [r7, #28]
 8007eb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	69b9      	ldr	r1, [r7, #24]
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e6      	bne.n	8007e98 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007eca:	e018      	b.n	8007efe <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ee0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee6:	1c9a      	adds	r2, r3, #2
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007efe:	bf00      	nop
 8007f00:	3744      	adds	r7, #68	; 0x44
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b088      	sub	sp, #32
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	e853 3f00 	ldrex	r3, [r3]
 8007f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	61bb      	str	r3, [r7, #24]
 8007f32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f34:	6979      	ldr	r1, [r7, #20]
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	e841 2300 	strex	r3, r2, [r1]
 8007f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e6      	bne.n	8007f12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2220      	movs	r2, #32
 8007f48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff f9bb 	bl	80072cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f56:	bf00      	nop
 8007f58:	3720      	adds	r7, #32
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b096      	sub	sp, #88	; 0x58
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f76:	2b22      	cmp	r3, #34	; 0x22
 8007f78:	f040 8098 	bne.w	80080ac <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f86:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007f8a:	b2d9      	uxtb	r1, r3
 8007f8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f96:	400a      	ands	r2, r1
 8007f98:	b2d2      	uxtb	r2, r2
 8007f9a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d17b      	bne.n	80080bc <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fd8:	653b      	str	r3, [r7, #80]	; 0x50
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8007fe4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e6      	bne.n	8007fc4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	623b      	str	r3, [r7, #32]
   return(result);
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	f023 0301 	bic.w	r3, r3, #1
 800800c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3308      	adds	r3, #8
 8008014:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008016:	633a      	str	r2, [r7, #48]	; 0x30
 8008018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800801c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801e:	e841 2300 	strex	r3, r2, [r1]
 8008022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1e5      	bne.n	8007ff6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2220      	movs	r2, #32
 800802e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008042:	2b01      	cmp	r3, #1
 8008044:	d12e      	bne.n	80080a4 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	60fb      	str	r3, [r7, #12]
   return(result);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f023 0310 	bic.w	r3, r3, #16
 8008060:	64bb      	str	r3, [r7, #72]	; 0x48
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800806a:	61fb      	str	r3, [r7, #28]
 800806c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	69b9      	ldr	r1, [r7, #24]
 8008070:	69fa      	ldr	r2, [r7, #28]
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	617b      	str	r3, [r7, #20]
   return(result);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e6      	bne.n	800804c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	f003 0310 	and.w	r3, r3, #16
 8008088:	2b10      	cmp	r3, #16
 800808a:	d103      	bne.n	8008094 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2210      	movs	r2, #16
 8008092:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7ff f929 	bl	80072f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080a2:	e00b      	b.n	80080bc <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7fa fa29 	bl	80024fc <HAL_UART_RxCpltCallback>
}
 80080aa:	e007      	b.n	80080bc <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699a      	ldr	r2, [r3, #24]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0208 	orr.w	r2, r2, #8
 80080ba:	619a      	str	r2, [r3, #24]
}
 80080bc:	bf00      	nop
 80080be:	3758      	adds	r7, #88	; 0x58
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b096      	sub	sp, #88	; 0x58
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080d2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080dc:	2b22      	cmp	r3, #34	; 0x22
 80080de:	f040 8098 	bne.w	8008212 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80080f2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80080f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80080fa:	4013      	ands	r3, r2
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008100:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008106:	1c9a      	adds	r2, r3, #2
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008112:	b29b      	uxth	r3, r3
 8008114:	3b01      	subs	r3, #1
 8008116:	b29a      	uxth	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008124:	b29b      	uxth	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d17b      	bne.n	8008222 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008132:	e853 3f00 	ldrex	r3, [r3]
 8008136:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800813e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008148:	643b      	str	r3, [r7, #64]	; 0x40
 800814a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800814e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e6      	bne.n	800812a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3308      	adds	r3, #8
 8008162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	e853 3f00 	ldrex	r3, [r3]
 800816a:	61fb      	str	r3, [r7, #28]
   return(result);
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	f023 0301 	bic.w	r3, r3, #1
 8008172:	64bb      	str	r3, [r7, #72]	; 0x48
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3308      	adds	r3, #8
 800817a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800817c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800817e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008184:	e841 2300 	strex	r3, r2, [r1]
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e5      	bne.n	800815c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2220      	movs	r2, #32
 8008194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d12e      	bne.n	800820a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	e853 3f00 	ldrex	r3, [r3]
 80081be:	60bb      	str	r3, [r7, #8]
   return(result);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f023 0310 	bic.w	r3, r3, #16
 80081c6:	647b      	str	r3, [r7, #68]	; 0x44
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	461a      	mov	r2, r3
 80081ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d0:	61bb      	str	r3, [r7, #24]
 80081d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	6979      	ldr	r1, [r7, #20]
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	e841 2300 	strex	r3, r2, [r1]
 80081dc:	613b      	str	r3, [r7, #16]
   return(result);
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e6      	bne.n	80081b2 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	f003 0310 	and.w	r3, r3, #16
 80081ee:	2b10      	cmp	r3, #16
 80081f0:	d103      	bne.n	80081fa <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2210      	movs	r2, #16
 80081f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff f876 	bl	80072f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008208:	e00b      	b.n	8008222 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fa f976 	bl	80024fc <HAL_UART_RxCpltCallback>
}
 8008210:	e007      	b.n	8008222 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	699a      	ldr	r2, [r3, #24]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f042 0208 	orr.w	r2, r2, #8
 8008220:	619a      	str	r2, [r3, #24]
}
 8008222:	bf00      	nop
 8008224:	3758      	adds	r7, #88	; 0x58
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <_strtol_l.constprop.0>:
 800822c:	2b01      	cmp	r3, #1
 800822e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008232:	d001      	beq.n	8008238 <_strtol_l.constprop.0+0xc>
 8008234:	2b24      	cmp	r3, #36	; 0x24
 8008236:	d906      	bls.n	8008246 <_strtol_l.constprop.0+0x1a>
 8008238:	f000 f8ac 	bl	8008394 <__errno>
 800823c:	2316      	movs	r3, #22
 800823e:	6003      	str	r3, [r0, #0]
 8008240:	2000      	movs	r0, #0
 8008242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008246:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800832c <_strtol_l.constprop.0+0x100>
 800824a:	460d      	mov	r5, r1
 800824c:	462e      	mov	r6, r5
 800824e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008252:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008256:	f017 0708 	ands.w	r7, r7, #8
 800825a:	d1f7      	bne.n	800824c <_strtol_l.constprop.0+0x20>
 800825c:	2c2d      	cmp	r4, #45	; 0x2d
 800825e:	d132      	bne.n	80082c6 <_strtol_l.constprop.0+0x9a>
 8008260:	782c      	ldrb	r4, [r5, #0]
 8008262:	2701      	movs	r7, #1
 8008264:	1cb5      	adds	r5, r6, #2
 8008266:	2b00      	cmp	r3, #0
 8008268:	d05b      	beq.n	8008322 <_strtol_l.constprop.0+0xf6>
 800826a:	2b10      	cmp	r3, #16
 800826c:	d109      	bne.n	8008282 <_strtol_l.constprop.0+0x56>
 800826e:	2c30      	cmp	r4, #48	; 0x30
 8008270:	d107      	bne.n	8008282 <_strtol_l.constprop.0+0x56>
 8008272:	782c      	ldrb	r4, [r5, #0]
 8008274:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008278:	2c58      	cmp	r4, #88	; 0x58
 800827a:	d14d      	bne.n	8008318 <_strtol_l.constprop.0+0xec>
 800827c:	786c      	ldrb	r4, [r5, #1]
 800827e:	2310      	movs	r3, #16
 8008280:	3502      	adds	r5, #2
 8008282:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008286:	f108 38ff 	add.w	r8, r8, #4294967295
 800828a:	f04f 0e00 	mov.w	lr, #0
 800828e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008292:	4676      	mov	r6, lr
 8008294:	fb03 8a19 	mls	sl, r3, r9, r8
 8008298:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800829c:	f1bc 0f09 	cmp.w	ip, #9
 80082a0:	d816      	bhi.n	80082d0 <_strtol_l.constprop.0+0xa4>
 80082a2:	4664      	mov	r4, ip
 80082a4:	42a3      	cmp	r3, r4
 80082a6:	dd24      	ble.n	80082f2 <_strtol_l.constprop.0+0xc6>
 80082a8:	f1be 3fff 	cmp.w	lr, #4294967295
 80082ac:	d008      	beq.n	80082c0 <_strtol_l.constprop.0+0x94>
 80082ae:	45b1      	cmp	r9, r6
 80082b0:	d31c      	bcc.n	80082ec <_strtol_l.constprop.0+0xc0>
 80082b2:	d101      	bne.n	80082b8 <_strtol_l.constprop.0+0x8c>
 80082b4:	45a2      	cmp	sl, r4
 80082b6:	db19      	blt.n	80082ec <_strtol_l.constprop.0+0xc0>
 80082b8:	fb06 4603 	mla	r6, r6, r3, r4
 80082bc:	f04f 0e01 	mov.w	lr, #1
 80082c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082c4:	e7e8      	b.n	8008298 <_strtol_l.constprop.0+0x6c>
 80082c6:	2c2b      	cmp	r4, #43	; 0x2b
 80082c8:	bf04      	itt	eq
 80082ca:	782c      	ldrbeq	r4, [r5, #0]
 80082cc:	1cb5      	addeq	r5, r6, #2
 80082ce:	e7ca      	b.n	8008266 <_strtol_l.constprop.0+0x3a>
 80082d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80082d4:	f1bc 0f19 	cmp.w	ip, #25
 80082d8:	d801      	bhi.n	80082de <_strtol_l.constprop.0+0xb2>
 80082da:	3c37      	subs	r4, #55	; 0x37
 80082dc:	e7e2      	b.n	80082a4 <_strtol_l.constprop.0+0x78>
 80082de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80082e2:	f1bc 0f19 	cmp.w	ip, #25
 80082e6:	d804      	bhi.n	80082f2 <_strtol_l.constprop.0+0xc6>
 80082e8:	3c57      	subs	r4, #87	; 0x57
 80082ea:	e7db      	b.n	80082a4 <_strtol_l.constprop.0+0x78>
 80082ec:	f04f 3eff 	mov.w	lr, #4294967295
 80082f0:	e7e6      	b.n	80082c0 <_strtol_l.constprop.0+0x94>
 80082f2:	f1be 3fff 	cmp.w	lr, #4294967295
 80082f6:	d105      	bne.n	8008304 <_strtol_l.constprop.0+0xd8>
 80082f8:	2322      	movs	r3, #34	; 0x22
 80082fa:	6003      	str	r3, [r0, #0]
 80082fc:	4646      	mov	r6, r8
 80082fe:	b942      	cbnz	r2, 8008312 <_strtol_l.constprop.0+0xe6>
 8008300:	4630      	mov	r0, r6
 8008302:	e79e      	b.n	8008242 <_strtol_l.constprop.0+0x16>
 8008304:	b107      	cbz	r7, 8008308 <_strtol_l.constprop.0+0xdc>
 8008306:	4276      	negs	r6, r6
 8008308:	2a00      	cmp	r2, #0
 800830a:	d0f9      	beq.n	8008300 <_strtol_l.constprop.0+0xd4>
 800830c:	f1be 0f00 	cmp.w	lr, #0
 8008310:	d000      	beq.n	8008314 <_strtol_l.constprop.0+0xe8>
 8008312:	1e69      	subs	r1, r5, #1
 8008314:	6011      	str	r1, [r2, #0]
 8008316:	e7f3      	b.n	8008300 <_strtol_l.constprop.0+0xd4>
 8008318:	2430      	movs	r4, #48	; 0x30
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1b1      	bne.n	8008282 <_strtol_l.constprop.0+0x56>
 800831e:	2308      	movs	r3, #8
 8008320:	e7af      	b.n	8008282 <_strtol_l.constprop.0+0x56>
 8008322:	2c30      	cmp	r4, #48	; 0x30
 8008324:	d0a5      	beq.n	8008272 <_strtol_l.constprop.0+0x46>
 8008326:	230a      	movs	r3, #10
 8008328:	e7ab      	b.n	8008282 <_strtol_l.constprop.0+0x56>
 800832a:	bf00      	nop
 800832c:	08008cf9 	.word	0x08008cf9

08008330 <strtol>:
 8008330:	4613      	mov	r3, r2
 8008332:	460a      	mov	r2, r1
 8008334:	4601      	mov	r1, r0
 8008336:	4802      	ldr	r0, [pc, #8]	; (8008340 <strtol+0x10>)
 8008338:	6800      	ldr	r0, [r0, #0]
 800833a:	f7ff bf77 	b.w	800822c <_strtol_l.constprop.0>
 800833e:	bf00      	nop
 8008340:	200000ac 	.word	0x200000ac

08008344 <siprintf>:
 8008344:	b40e      	push	{r1, r2, r3}
 8008346:	b500      	push	{lr}
 8008348:	b09c      	sub	sp, #112	; 0x70
 800834a:	ab1d      	add	r3, sp, #116	; 0x74
 800834c:	9002      	str	r0, [sp, #8]
 800834e:	9006      	str	r0, [sp, #24]
 8008350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008354:	4809      	ldr	r0, [pc, #36]	; (800837c <siprintf+0x38>)
 8008356:	9107      	str	r1, [sp, #28]
 8008358:	9104      	str	r1, [sp, #16]
 800835a:	4909      	ldr	r1, [pc, #36]	; (8008380 <siprintf+0x3c>)
 800835c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008360:	9105      	str	r1, [sp, #20]
 8008362:	6800      	ldr	r0, [r0, #0]
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	a902      	add	r1, sp, #8
 8008368:	f000 f992 	bl	8008690 <_svfiprintf_r>
 800836c:	9b02      	ldr	r3, [sp, #8]
 800836e:	2200      	movs	r2, #0
 8008370:	701a      	strb	r2, [r3, #0]
 8008372:	b01c      	add	sp, #112	; 0x70
 8008374:	f85d eb04 	ldr.w	lr, [sp], #4
 8008378:	b003      	add	sp, #12
 800837a:	4770      	bx	lr
 800837c:	200000ac 	.word	0x200000ac
 8008380:	ffff0208 	.word	0xffff0208

08008384 <memset>:
 8008384:	4402      	add	r2, r0
 8008386:	4603      	mov	r3, r0
 8008388:	4293      	cmp	r3, r2
 800838a:	d100      	bne.n	800838e <memset+0xa>
 800838c:	4770      	bx	lr
 800838e:	f803 1b01 	strb.w	r1, [r3], #1
 8008392:	e7f9      	b.n	8008388 <memset+0x4>

08008394 <__errno>:
 8008394:	4b01      	ldr	r3, [pc, #4]	; (800839c <__errno+0x8>)
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	200000ac 	.word	0x200000ac

080083a0 <__libc_init_array>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4d0d      	ldr	r5, [pc, #52]	; (80083d8 <__libc_init_array+0x38>)
 80083a4:	4c0d      	ldr	r4, [pc, #52]	; (80083dc <__libc_init_array+0x3c>)
 80083a6:	1b64      	subs	r4, r4, r5
 80083a8:	10a4      	asrs	r4, r4, #2
 80083aa:	2600      	movs	r6, #0
 80083ac:	42a6      	cmp	r6, r4
 80083ae:	d109      	bne.n	80083c4 <__libc_init_array+0x24>
 80083b0:	4d0b      	ldr	r5, [pc, #44]	; (80083e0 <__libc_init_array+0x40>)
 80083b2:	4c0c      	ldr	r4, [pc, #48]	; (80083e4 <__libc_init_array+0x44>)
 80083b4:	f000 fc6a 	bl	8008c8c <_init>
 80083b8:	1b64      	subs	r4, r4, r5
 80083ba:	10a4      	asrs	r4, r4, #2
 80083bc:	2600      	movs	r6, #0
 80083be:	42a6      	cmp	r6, r4
 80083c0:	d105      	bne.n	80083ce <__libc_init_array+0x2e>
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c8:	4798      	blx	r3
 80083ca:	3601      	adds	r6, #1
 80083cc:	e7ee      	b.n	80083ac <__libc_init_array+0xc>
 80083ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d2:	4798      	blx	r3
 80083d4:	3601      	adds	r6, #1
 80083d6:	e7f2      	b.n	80083be <__libc_init_array+0x1e>
 80083d8:	08008e34 	.word	0x08008e34
 80083dc:	08008e34 	.word	0x08008e34
 80083e0:	08008e34 	.word	0x08008e34
 80083e4:	08008e38 	.word	0x08008e38

080083e8 <__retarget_lock_acquire_recursive>:
 80083e8:	4770      	bx	lr

080083ea <__retarget_lock_release_recursive>:
 80083ea:	4770      	bx	lr

080083ec <_free_r>:
 80083ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ee:	2900      	cmp	r1, #0
 80083f0:	d044      	beq.n	800847c <_free_r+0x90>
 80083f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f6:	9001      	str	r0, [sp, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f1a1 0404 	sub.w	r4, r1, #4
 80083fe:	bfb8      	it	lt
 8008400:	18e4      	addlt	r4, r4, r3
 8008402:	f000 f8df 	bl	80085c4 <__malloc_lock>
 8008406:	4a1e      	ldr	r2, [pc, #120]	; (8008480 <_free_r+0x94>)
 8008408:	9801      	ldr	r0, [sp, #4]
 800840a:	6813      	ldr	r3, [r2, #0]
 800840c:	b933      	cbnz	r3, 800841c <_free_r+0x30>
 800840e:	6063      	str	r3, [r4, #4]
 8008410:	6014      	str	r4, [r2, #0]
 8008412:	b003      	add	sp, #12
 8008414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008418:	f000 b8da 	b.w	80085d0 <__malloc_unlock>
 800841c:	42a3      	cmp	r3, r4
 800841e:	d908      	bls.n	8008432 <_free_r+0x46>
 8008420:	6825      	ldr	r5, [r4, #0]
 8008422:	1961      	adds	r1, r4, r5
 8008424:	428b      	cmp	r3, r1
 8008426:	bf01      	itttt	eq
 8008428:	6819      	ldreq	r1, [r3, #0]
 800842a:	685b      	ldreq	r3, [r3, #4]
 800842c:	1949      	addeq	r1, r1, r5
 800842e:	6021      	streq	r1, [r4, #0]
 8008430:	e7ed      	b.n	800840e <_free_r+0x22>
 8008432:	461a      	mov	r2, r3
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	b10b      	cbz	r3, 800843c <_free_r+0x50>
 8008438:	42a3      	cmp	r3, r4
 800843a:	d9fa      	bls.n	8008432 <_free_r+0x46>
 800843c:	6811      	ldr	r1, [r2, #0]
 800843e:	1855      	adds	r5, r2, r1
 8008440:	42a5      	cmp	r5, r4
 8008442:	d10b      	bne.n	800845c <_free_r+0x70>
 8008444:	6824      	ldr	r4, [r4, #0]
 8008446:	4421      	add	r1, r4
 8008448:	1854      	adds	r4, r2, r1
 800844a:	42a3      	cmp	r3, r4
 800844c:	6011      	str	r1, [r2, #0]
 800844e:	d1e0      	bne.n	8008412 <_free_r+0x26>
 8008450:	681c      	ldr	r4, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	6053      	str	r3, [r2, #4]
 8008456:	440c      	add	r4, r1
 8008458:	6014      	str	r4, [r2, #0]
 800845a:	e7da      	b.n	8008412 <_free_r+0x26>
 800845c:	d902      	bls.n	8008464 <_free_r+0x78>
 800845e:	230c      	movs	r3, #12
 8008460:	6003      	str	r3, [r0, #0]
 8008462:	e7d6      	b.n	8008412 <_free_r+0x26>
 8008464:	6825      	ldr	r5, [r4, #0]
 8008466:	1961      	adds	r1, r4, r5
 8008468:	428b      	cmp	r3, r1
 800846a:	bf04      	itt	eq
 800846c:	6819      	ldreq	r1, [r3, #0]
 800846e:	685b      	ldreq	r3, [r3, #4]
 8008470:	6063      	str	r3, [r4, #4]
 8008472:	bf04      	itt	eq
 8008474:	1949      	addeq	r1, r1, r5
 8008476:	6021      	streq	r1, [r4, #0]
 8008478:	6054      	str	r4, [r2, #4]
 800847a:	e7ca      	b.n	8008412 <_free_r+0x26>
 800847c:	b003      	add	sp, #12
 800847e:	bd30      	pop	{r4, r5, pc}
 8008480:	20000434 	.word	0x20000434

08008484 <sbrk_aligned>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	4e0e      	ldr	r6, [pc, #56]	; (80084c0 <sbrk_aligned+0x3c>)
 8008488:	460c      	mov	r4, r1
 800848a:	6831      	ldr	r1, [r6, #0]
 800848c:	4605      	mov	r5, r0
 800848e:	b911      	cbnz	r1, 8008496 <sbrk_aligned+0x12>
 8008490:	f000 fba6 	bl	8008be0 <_sbrk_r>
 8008494:	6030      	str	r0, [r6, #0]
 8008496:	4621      	mov	r1, r4
 8008498:	4628      	mov	r0, r5
 800849a:	f000 fba1 	bl	8008be0 <_sbrk_r>
 800849e:	1c43      	adds	r3, r0, #1
 80084a0:	d00a      	beq.n	80084b8 <sbrk_aligned+0x34>
 80084a2:	1cc4      	adds	r4, r0, #3
 80084a4:	f024 0403 	bic.w	r4, r4, #3
 80084a8:	42a0      	cmp	r0, r4
 80084aa:	d007      	beq.n	80084bc <sbrk_aligned+0x38>
 80084ac:	1a21      	subs	r1, r4, r0
 80084ae:	4628      	mov	r0, r5
 80084b0:	f000 fb96 	bl	8008be0 <_sbrk_r>
 80084b4:	3001      	adds	r0, #1
 80084b6:	d101      	bne.n	80084bc <sbrk_aligned+0x38>
 80084b8:	f04f 34ff 	mov.w	r4, #4294967295
 80084bc:	4620      	mov	r0, r4
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	20000438 	.word	0x20000438

080084c4 <_malloc_r>:
 80084c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c8:	1ccd      	adds	r5, r1, #3
 80084ca:	f025 0503 	bic.w	r5, r5, #3
 80084ce:	3508      	adds	r5, #8
 80084d0:	2d0c      	cmp	r5, #12
 80084d2:	bf38      	it	cc
 80084d4:	250c      	movcc	r5, #12
 80084d6:	2d00      	cmp	r5, #0
 80084d8:	4607      	mov	r7, r0
 80084da:	db01      	blt.n	80084e0 <_malloc_r+0x1c>
 80084dc:	42a9      	cmp	r1, r5
 80084de:	d905      	bls.n	80084ec <_malloc_r+0x28>
 80084e0:	230c      	movs	r3, #12
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	2600      	movs	r6, #0
 80084e6:	4630      	mov	r0, r6
 80084e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80085c0 <_malloc_r+0xfc>
 80084f0:	f000 f868 	bl	80085c4 <__malloc_lock>
 80084f4:	f8d8 3000 	ldr.w	r3, [r8]
 80084f8:	461c      	mov	r4, r3
 80084fa:	bb5c      	cbnz	r4, 8008554 <_malloc_r+0x90>
 80084fc:	4629      	mov	r1, r5
 80084fe:	4638      	mov	r0, r7
 8008500:	f7ff ffc0 	bl	8008484 <sbrk_aligned>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	4604      	mov	r4, r0
 8008508:	d155      	bne.n	80085b6 <_malloc_r+0xf2>
 800850a:	f8d8 4000 	ldr.w	r4, [r8]
 800850e:	4626      	mov	r6, r4
 8008510:	2e00      	cmp	r6, #0
 8008512:	d145      	bne.n	80085a0 <_malloc_r+0xdc>
 8008514:	2c00      	cmp	r4, #0
 8008516:	d048      	beq.n	80085aa <_malloc_r+0xe6>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	4631      	mov	r1, r6
 800851c:	4638      	mov	r0, r7
 800851e:	eb04 0903 	add.w	r9, r4, r3
 8008522:	f000 fb5d 	bl	8008be0 <_sbrk_r>
 8008526:	4581      	cmp	r9, r0
 8008528:	d13f      	bne.n	80085aa <_malloc_r+0xe6>
 800852a:	6821      	ldr	r1, [r4, #0]
 800852c:	1a6d      	subs	r5, r5, r1
 800852e:	4629      	mov	r1, r5
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff ffa7 	bl	8008484 <sbrk_aligned>
 8008536:	3001      	adds	r0, #1
 8008538:	d037      	beq.n	80085aa <_malloc_r+0xe6>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	442b      	add	r3, r5
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	f8d8 3000 	ldr.w	r3, [r8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d038      	beq.n	80085ba <_malloc_r+0xf6>
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	42a2      	cmp	r2, r4
 800854c:	d12b      	bne.n	80085a6 <_malloc_r+0xe2>
 800854e:	2200      	movs	r2, #0
 8008550:	605a      	str	r2, [r3, #4]
 8008552:	e00f      	b.n	8008574 <_malloc_r+0xb0>
 8008554:	6822      	ldr	r2, [r4, #0]
 8008556:	1b52      	subs	r2, r2, r5
 8008558:	d41f      	bmi.n	800859a <_malloc_r+0xd6>
 800855a:	2a0b      	cmp	r2, #11
 800855c:	d917      	bls.n	800858e <_malloc_r+0xca>
 800855e:	1961      	adds	r1, r4, r5
 8008560:	42a3      	cmp	r3, r4
 8008562:	6025      	str	r5, [r4, #0]
 8008564:	bf18      	it	ne
 8008566:	6059      	strne	r1, [r3, #4]
 8008568:	6863      	ldr	r3, [r4, #4]
 800856a:	bf08      	it	eq
 800856c:	f8c8 1000 	streq.w	r1, [r8]
 8008570:	5162      	str	r2, [r4, r5]
 8008572:	604b      	str	r3, [r1, #4]
 8008574:	4638      	mov	r0, r7
 8008576:	f104 060b 	add.w	r6, r4, #11
 800857a:	f000 f829 	bl	80085d0 <__malloc_unlock>
 800857e:	f026 0607 	bic.w	r6, r6, #7
 8008582:	1d23      	adds	r3, r4, #4
 8008584:	1af2      	subs	r2, r6, r3
 8008586:	d0ae      	beq.n	80084e6 <_malloc_r+0x22>
 8008588:	1b9b      	subs	r3, r3, r6
 800858a:	50a3      	str	r3, [r4, r2]
 800858c:	e7ab      	b.n	80084e6 <_malloc_r+0x22>
 800858e:	42a3      	cmp	r3, r4
 8008590:	6862      	ldr	r2, [r4, #4]
 8008592:	d1dd      	bne.n	8008550 <_malloc_r+0x8c>
 8008594:	f8c8 2000 	str.w	r2, [r8]
 8008598:	e7ec      	b.n	8008574 <_malloc_r+0xb0>
 800859a:	4623      	mov	r3, r4
 800859c:	6864      	ldr	r4, [r4, #4]
 800859e:	e7ac      	b.n	80084fa <_malloc_r+0x36>
 80085a0:	4634      	mov	r4, r6
 80085a2:	6876      	ldr	r6, [r6, #4]
 80085a4:	e7b4      	b.n	8008510 <_malloc_r+0x4c>
 80085a6:	4613      	mov	r3, r2
 80085a8:	e7cc      	b.n	8008544 <_malloc_r+0x80>
 80085aa:	230c      	movs	r3, #12
 80085ac:	603b      	str	r3, [r7, #0]
 80085ae:	4638      	mov	r0, r7
 80085b0:	f000 f80e 	bl	80085d0 <__malloc_unlock>
 80085b4:	e797      	b.n	80084e6 <_malloc_r+0x22>
 80085b6:	6025      	str	r5, [r4, #0]
 80085b8:	e7dc      	b.n	8008574 <_malloc_r+0xb0>
 80085ba:	605b      	str	r3, [r3, #4]
 80085bc:	deff      	udf	#255	; 0xff
 80085be:	bf00      	nop
 80085c0:	20000434 	.word	0x20000434

080085c4 <__malloc_lock>:
 80085c4:	4801      	ldr	r0, [pc, #4]	; (80085cc <__malloc_lock+0x8>)
 80085c6:	f7ff bf0f 	b.w	80083e8 <__retarget_lock_acquire_recursive>
 80085ca:	bf00      	nop
 80085cc:	20000430 	.word	0x20000430

080085d0 <__malloc_unlock>:
 80085d0:	4801      	ldr	r0, [pc, #4]	; (80085d8 <__malloc_unlock+0x8>)
 80085d2:	f7ff bf0a 	b.w	80083ea <__retarget_lock_release_recursive>
 80085d6:	bf00      	nop
 80085d8:	20000430 	.word	0x20000430

080085dc <__ssputs_r>:
 80085dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	688e      	ldr	r6, [r1, #8]
 80085e2:	461f      	mov	r7, r3
 80085e4:	42be      	cmp	r6, r7
 80085e6:	680b      	ldr	r3, [r1, #0]
 80085e8:	4682      	mov	sl, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	4690      	mov	r8, r2
 80085ee:	d82c      	bhi.n	800864a <__ssputs_r+0x6e>
 80085f0:	898a      	ldrh	r2, [r1, #12]
 80085f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085f6:	d026      	beq.n	8008646 <__ssputs_r+0x6a>
 80085f8:	6965      	ldr	r5, [r4, #20]
 80085fa:	6909      	ldr	r1, [r1, #16]
 80085fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008600:	eba3 0901 	sub.w	r9, r3, r1
 8008604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008608:	1c7b      	adds	r3, r7, #1
 800860a:	444b      	add	r3, r9
 800860c:	106d      	asrs	r5, r5, #1
 800860e:	429d      	cmp	r5, r3
 8008610:	bf38      	it	cc
 8008612:	461d      	movcc	r5, r3
 8008614:	0553      	lsls	r3, r2, #21
 8008616:	d527      	bpl.n	8008668 <__ssputs_r+0x8c>
 8008618:	4629      	mov	r1, r5
 800861a:	f7ff ff53 	bl	80084c4 <_malloc_r>
 800861e:	4606      	mov	r6, r0
 8008620:	b360      	cbz	r0, 800867c <__ssputs_r+0xa0>
 8008622:	6921      	ldr	r1, [r4, #16]
 8008624:	464a      	mov	r2, r9
 8008626:	f000 faeb 	bl	8008c00 <memcpy>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008634:	81a3      	strh	r3, [r4, #12]
 8008636:	6126      	str	r6, [r4, #16]
 8008638:	6165      	str	r5, [r4, #20]
 800863a:	444e      	add	r6, r9
 800863c:	eba5 0509 	sub.w	r5, r5, r9
 8008640:	6026      	str	r6, [r4, #0]
 8008642:	60a5      	str	r5, [r4, #8]
 8008644:	463e      	mov	r6, r7
 8008646:	42be      	cmp	r6, r7
 8008648:	d900      	bls.n	800864c <__ssputs_r+0x70>
 800864a:	463e      	mov	r6, r7
 800864c:	6820      	ldr	r0, [r4, #0]
 800864e:	4632      	mov	r2, r6
 8008650:	4641      	mov	r1, r8
 8008652:	f000 faab 	bl	8008bac <memmove>
 8008656:	68a3      	ldr	r3, [r4, #8]
 8008658:	1b9b      	subs	r3, r3, r6
 800865a:	60a3      	str	r3, [r4, #8]
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	4433      	add	r3, r6
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	2000      	movs	r0, #0
 8008664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008668:	462a      	mov	r2, r5
 800866a:	f000 fad7 	bl	8008c1c <_realloc_r>
 800866e:	4606      	mov	r6, r0
 8008670:	2800      	cmp	r0, #0
 8008672:	d1e0      	bne.n	8008636 <__ssputs_r+0x5a>
 8008674:	6921      	ldr	r1, [r4, #16]
 8008676:	4650      	mov	r0, sl
 8008678:	f7ff feb8 	bl	80083ec <_free_r>
 800867c:	230c      	movs	r3, #12
 800867e:	f8ca 3000 	str.w	r3, [sl]
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008688:	81a3      	strh	r3, [r4, #12]
 800868a:	f04f 30ff 	mov.w	r0, #4294967295
 800868e:	e7e9      	b.n	8008664 <__ssputs_r+0x88>

08008690 <_svfiprintf_r>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	4698      	mov	r8, r3
 8008696:	898b      	ldrh	r3, [r1, #12]
 8008698:	061b      	lsls	r3, r3, #24
 800869a:	b09d      	sub	sp, #116	; 0x74
 800869c:	4607      	mov	r7, r0
 800869e:	460d      	mov	r5, r1
 80086a0:	4614      	mov	r4, r2
 80086a2:	d50e      	bpl.n	80086c2 <_svfiprintf_r+0x32>
 80086a4:	690b      	ldr	r3, [r1, #16]
 80086a6:	b963      	cbnz	r3, 80086c2 <_svfiprintf_r+0x32>
 80086a8:	2140      	movs	r1, #64	; 0x40
 80086aa:	f7ff ff0b 	bl	80084c4 <_malloc_r>
 80086ae:	6028      	str	r0, [r5, #0]
 80086b0:	6128      	str	r0, [r5, #16]
 80086b2:	b920      	cbnz	r0, 80086be <_svfiprintf_r+0x2e>
 80086b4:	230c      	movs	r3, #12
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295
 80086bc:	e0d0      	b.n	8008860 <_svfiprintf_r+0x1d0>
 80086be:	2340      	movs	r3, #64	; 0x40
 80086c0:	616b      	str	r3, [r5, #20]
 80086c2:	2300      	movs	r3, #0
 80086c4:	9309      	str	r3, [sp, #36]	; 0x24
 80086c6:	2320      	movs	r3, #32
 80086c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80086d0:	2330      	movs	r3, #48	; 0x30
 80086d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008878 <_svfiprintf_r+0x1e8>
 80086d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086da:	f04f 0901 	mov.w	r9, #1
 80086de:	4623      	mov	r3, r4
 80086e0:	469a      	mov	sl, r3
 80086e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e6:	b10a      	cbz	r2, 80086ec <_svfiprintf_r+0x5c>
 80086e8:	2a25      	cmp	r2, #37	; 0x25
 80086ea:	d1f9      	bne.n	80086e0 <_svfiprintf_r+0x50>
 80086ec:	ebba 0b04 	subs.w	fp, sl, r4
 80086f0:	d00b      	beq.n	800870a <_svfiprintf_r+0x7a>
 80086f2:	465b      	mov	r3, fp
 80086f4:	4622      	mov	r2, r4
 80086f6:	4629      	mov	r1, r5
 80086f8:	4638      	mov	r0, r7
 80086fa:	f7ff ff6f 	bl	80085dc <__ssputs_r>
 80086fe:	3001      	adds	r0, #1
 8008700:	f000 80a9 	beq.w	8008856 <_svfiprintf_r+0x1c6>
 8008704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008706:	445a      	add	r2, fp
 8008708:	9209      	str	r2, [sp, #36]	; 0x24
 800870a:	f89a 3000 	ldrb.w	r3, [sl]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80a1 	beq.w	8008856 <_svfiprintf_r+0x1c6>
 8008714:	2300      	movs	r3, #0
 8008716:	f04f 32ff 	mov.w	r2, #4294967295
 800871a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800871e:	f10a 0a01 	add.w	sl, sl, #1
 8008722:	9304      	str	r3, [sp, #16]
 8008724:	9307      	str	r3, [sp, #28]
 8008726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800872a:	931a      	str	r3, [sp, #104]	; 0x68
 800872c:	4654      	mov	r4, sl
 800872e:	2205      	movs	r2, #5
 8008730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008734:	4850      	ldr	r0, [pc, #320]	; (8008878 <_svfiprintf_r+0x1e8>)
 8008736:	f7f7 fd6b 	bl	8000210 <memchr>
 800873a:	9a04      	ldr	r2, [sp, #16]
 800873c:	b9d8      	cbnz	r0, 8008776 <_svfiprintf_r+0xe6>
 800873e:	06d0      	lsls	r0, r2, #27
 8008740:	bf44      	itt	mi
 8008742:	2320      	movmi	r3, #32
 8008744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008748:	0711      	lsls	r1, r2, #28
 800874a:	bf44      	itt	mi
 800874c:	232b      	movmi	r3, #43	; 0x2b
 800874e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008752:	f89a 3000 	ldrb.w	r3, [sl]
 8008756:	2b2a      	cmp	r3, #42	; 0x2a
 8008758:	d015      	beq.n	8008786 <_svfiprintf_r+0xf6>
 800875a:	9a07      	ldr	r2, [sp, #28]
 800875c:	4654      	mov	r4, sl
 800875e:	2000      	movs	r0, #0
 8008760:	f04f 0c0a 	mov.w	ip, #10
 8008764:	4621      	mov	r1, r4
 8008766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800876a:	3b30      	subs	r3, #48	; 0x30
 800876c:	2b09      	cmp	r3, #9
 800876e:	d94d      	bls.n	800880c <_svfiprintf_r+0x17c>
 8008770:	b1b0      	cbz	r0, 80087a0 <_svfiprintf_r+0x110>
 8008772:	9207      	str	r2, [sp, #28]
 8008774:	e014      	b.n	80087a0 <_svfiprintf_r+0x110>
 8008776:	eba0 0308 	sub.w	r3, r0, r8
 800877a:	fa09 f303 	lsl.w	r3, r9, r3
 800877e:	4313      	orrs	r3, r2
 8008780:	9304      	str	r3, [sp, #16]
 8008782:	46a2      	mov	sl, r4
 8008784:	e7d2      	b.n	800872c <_svfiprintf_r+0x9c>
 8008786:	9b03      	ldr	r3, [sp, #12]
 8008788:	1d19      	adds	r1, r3, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	9103      	str	r1, [sp, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	bfbb      	ittet	lt
 8008792:	425b      	neglt	r3, r3
 8008794:	f042 0202 	orrlt.w	r2, r2, #2
 8008798:	9307      	strge	r3, [sp, #28]
 800879a:	9307      	strlt	r3, [sp, #28]
 800879c:	bfb8      	it	lt
 800879e:	9204      	strlt	r2, [sp, #16]
 80087a0:	7823      	ldrb	r3, [r4, #0]
 80087a2:	2b2e      	cmp	r3, #46	; 0x2e
 80087a4:	d10c      	bne.n	80087c0 <_svfiprintf_r+0x130>
 80087a6:	7863      	ldrb	r3, [r4, #1]
 80087a8:	2b2a      	cmp	r3, #42	; 0x2a
 80087aa:	d134      	bne.n	8008816 <_svfiprintf_r+0x186>
 80087ac:	9b03      	ldr	r3, [sp, #12]
 80087ae:	1d1a      	adds	r2, r3, #4
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	9203      	str	r2, [sp, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bfb8      	it	lt
 80087b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80087bc:	3402      	adds	r4, #2
 80087be:	9305      	str	r3, [sp, #20]
 80087c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008888 <_svfiprintf_r+0x1f8>
 80087c4:	7821      	ldrb	r1, [r4, #0]
 80087c6:	2203      	movs	r2, #3
 80087c8:	4650      	mov	r0, sl
 80087ca:	f7f7 fd21 	bl	8000210 <memchr>
 80087ce:	b138      	cbz	r0, 80087e0 <_svfiprintf_r+0x150>
 80087d0:	9b04      	ldr	r3, [sp, #16]
 80087d2:	eba0 000a 	sub.w	r0, r0, sl
 80087d6:	2240      	movs	r2, #64	; 0x40
 80087d8:	4082      	lsls	r2, r0
 80087da:	4313      	orrs	r3, r2
 80087dc:	3401      	adds	r4, #1
 80087de:	9304      	str	r3, [sp, #16]
 80087e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e4:	4825      	ldr	r0, [pc, #148]	; (800887c <_svfiprintf_r+0x1ec>)
 80087e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087ea:	2206      	movs	r2, #6
 80087ec:	f7f7 fd10 	bl	8000210 <memchr>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d038      	beq.n	8008866 <_svfiprintf_r+0x1d6>
 80087f4:	4b22      	ldr	r3, [pc, #136]	; (8008880 <_svfiprintf_r+0x1f0>)
 80087f6:	bb1b      	cbnz	r3, 8008840 <_svfiprintf_r+0x1b0>
 80087f8:	9b03      	ldr	r3, [sp, #12]
 80087fa:	3307      	adds	r3, #7
 80087fc:	f023 0307 	bic.w	r3, r3, #7
 8008800:	3308      	adds	r3, #8
 8008802:	9303      	str	r3, [sp, #12]
 8008804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008806:	4433      	add	r3, r6
 8008808:	9309      	str	r3, [sp, #36]	; 0x24
 800880a:	e768      	b.n	80086de <_svfiprintf_r+0x4e>
 800880c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008810:	460c      	mov	r4, r1
 8008812:	2001      	movs	r0, #1
 8008814:	e7a6      	b.n	8008764 <_svfiprintf_r+0xd4>
 8008816:	2300      	movs	r3, #0
 8008818:	3401      	adds	r4, #1
 800881a:	9305      	str	r3, [sp, #20]
 800881c:	4619      	mov	r1, r3
 800881e:	f04f 0c0a 	mov.w	ip, #10
 8008822:	4620      	mov	r0, r4
 8008824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008828:	3a30      	subs	r2, #48	; 0x30
 800882a:	2a09      	cmp	r2, #9
 800882c:	d903      	bls.n	8008836 <_svfiprintf_r+0x1a6>
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0c6      	beq.n	80087c0 <_svfiprintf_r+0x130>
 8008832:	9105      	str	r1, [sp, #20]
 8008834:	e7c4      	b.n	80087c0 <_svfiprintf_r+0x130>
 8008836:	fb0c 2101 	mla	r1, ip, r1, r2
 800883a:	4604      	mov	r4, r0
 800883c:	2301      	movs	r3, #1
 800883e:	e7f0      	b.n	8008822 <_svfiprintf_r+0x192>
 8008840:	ab03      	add	r3, sp, #12
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	462a      	mov	r2, r5
 8008846:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <_svfiprintf_r+0x1f4>)
 8008848:	a904      	add	r1, sp, #16
 800884a:	4638      	mov	r0, r7
 800884c:	f3af 8000 	nop.w
 8008850:	1c42      	adds	r2, r0, #1
 8008852:	4606      	mov	r6, r0
 8008854:	d1d6      	bne.n	8008804 <_svfiprintf_r+0x174>
 8008856:	89ab      	ldrh	r3, [r5, #12]
 8008858:	065b      	lsls	r3, r3, #25
 800885a:	f53f af2d 	bmi.w	80086b8 <_svfiprintf_r+0x28>
 800885e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008860:	b01d      	add	sp, #116	; 0x74
 8008862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008866:	ab03      	add	r3, sp, #12
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	462a      	mov	r2, r5
 800886c:	4b05      	ldr	r3, [pc, #20]	; (8008884 <_svfiprintf_r+0x1f4>)
 800886e:	a904      	add	r1, sp, #16
 8008870:	4638      	mov	r0, r7
 8008872:	f000 f879 	bl	8008968 <_printf_i>
 8008876:	e7eb      	b.n	8008850 <_svfiprintf_r+0x1c0>
 8008878:	08008df9 	.word	0x08008df9
 800887c:	08008e03 	.word	0x08008e03
 8008880:	00000000 	.word	0x00000000
 8008884:	080085dd 	.word	0x080085dd
 8008888:	08008dff 	.word	0x08008dff

0800888c <_printf_common>:
 800888c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008890:	4616      	mov	r6, r2
 8008892:	4699      	mov	r9, r3
 8008894:	688a      	ldr	r2, [r1, #8]
 8008896:	690b      	ldr	r3, [r1, #16]
 8008898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800889c:	4293      	cmp	r3, r2
 800889e:	bfb8      	it	lt
 80088a0:	4613      	movlt	r3, r2
 80088a2:	6033      	str	r3, [r6, #0]
 80088a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088a8:	4607      	mov	r7, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	b10a      	cbz	r2, 80088b2 <_printf_common+0x26>
 80088ae:	3301      	adds	r3, #1
 80088b0:	6033      	str	r3, [r6, #0]
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	0699      	lsls	r1, r3, #26
 80088b6:	bf42      	ittt	mi
 80088b8:	6833      	ldrmi	r3, [r6, #0]
 80088ba:	3302      	addmi	r3, #2
 80088bc:	6033      	strmi	r3, [r6, #0]
 80088be:	6825      	ldr	r5, [r4, #0]
 80088c0:	f015 0506 	ands.w	r5, r5, #6
 80088c4:	d106      	bne.n	80088d4 <_printf_common+0x48>
 80088c6:	f104 0a19 	add.w	sl, r4, #25
 80088ca:	68e3      	ldr	r3, [r4, #12]
 80088cc:	6832      	ldr	r2, [r6, #0]
 80088ce:	1a9b      	subs	r3, r3, r2
 80088d0:	42ab      	cmp	r3, r5
 80088d2:	dc26      	bgt.n	8008922 <_printf_common+0x96>
 80088d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088d8:	1e13      	subs	r3, r2, #0
 80088da:	6822      	ldr	r2, [r4, #0]
 80088dc:	bf18      	it	ne
 80088de:	2301      	movne	r3, #1
 80088e0:	0692      	lsls	r2, r2, #26
 80088e2:	d42b      	bmi.n	800893c <_printf_common+0xb0>
 80088e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088e8:	4649      	mov	r1, r9
 80088ea:	4638      	mov	r0, r7
 80088ec:	47c0      	blx	r8
 80088ee:	3001      	adds	r0, #1
 80088f0:	d01e      	beq.n	8008930 <_printf_common+0xa4>
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	6922      	ldr	r2, [r4, #16]
 80088f6:	f003 0306 	and.w	r3, r3, #6
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	bf02      	ittt	eq
 80088fe:	68e5      	ldreq	r5, [r4, #12]
 8008900:	6833      	ldreq	r3, [r6, #0]
 8008902:	1aed      	subeq	r5, r5, r3
 8008904:	68a3      	ldr	r3, [r4, #8]
 8008906:	bf0c      	ite	eq
 8008908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800890c:	2500      	movne	r5, #0
 800890e:	4293      	cmp	r3, r2
 8008910:	bfc4      	itt	gt
 8008912:	1a9b      	subgt	r3, r3, r2
 8008914:	18ed      	addgt	r5, r5, r3
 8008916:	2600      	movs	r6, #0
 8008918:	341a      	adds	r4, #26
 800891a:	42b5      	cmp	r5, r6
 800891c:	d11a      	bne.n	8008954 <_printf_common+0xc8>
 800891e:	2000      	movs	r0, #0
 8008920:	e008      	b.n	8008934 <_printf_common+0xa8>
 8008922:	2301      	movs	r3, #1
 8008924:	4652      	mov	r2, sl
 8008926:	4649      	mov	r1, r9
 8008928:	4638      	mov	r0, r7
 800892a:	47c0      	blx	r8
 800892c:	3001      	adds	r0, #1
 800892e:	d103      	bne.n	8008938 <_printf_common+0xac>
 8008930:	f04f 30ff 	mov.w	r0, #4294967295
 8008934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008938:	3501      	adds	r5, #1
 800893a:	e7c6      	b.n	80088ca <_printf_common+0x3e>
 800893c:	18e1      	adds	r1, r4, r3
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	2030      	movs	r0, #48	; 0x30
 8008942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008946:	4422      	add	r2, r4
 8008948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800894c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008950:	3302      	adds	r3, #2
 8008952:	e7c7      	b.n	80088e4 <_printf_common+0x58>
 8008954:	2301      	movs	r3, #1
 8008956:	4622      	mov	r2, r4
 8008958:	4649      	mov	r1, r9
 800895a:	4638      	mov	r0, r7
 800895c:	47c0      	blx	r8
 800895e:	3001      	adds	r0, #1
 8008960:	d0e6      	beq.n	8008930 <_printf_common+0xa4>
 8008962:	3601      	adds	r6, #1
 8008964:	e7d9      	b.n	800891a <_printf_common+0x8e>
	...

08008968 <_printf_i>:
 8008968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800896c:	7e0f      	ldrb	r7, [r1, #24]
 800896e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008970:	2f78      	cmp	r7, #120	; 0x78
 8008972:	4691      	mov	r9, r2
 8008974:	4680      	mov	r8, r0
 8008976:	460c      	mov	r4, r1
 8008978:	469a      	mov	sl, r3
 800897a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800897e:	d807      	bhi.n	8008990 <_printf_i+0x28>
 8008980:	2f62      	cmp	r7, #98	; 0x62
 8008982:	d80a      	bhi.n	800899a <_printf_i+0x32>
 8008984:	2f00      	cmp	r7, #0
 8008986:	f000 80d4 	beq.w	8008b32 <_printf_i+0x1ca>
 800898a:	2f58      	cmp	r7, #88	; 0x58
 800898c:	f000 80c0 	beq.w	8008b10 <_printf_i+0x1a8>
 8008990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008998:	e03a      	b.n	8008a10 <_printf_i+0xa8>
 800899a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800899e:	2b15      	cmp	r3, #21
 80089a0:	d8f6      	bhi.n	8008990 <_printf_i+0x28>
 80089a2:	a101      	add	r1, pc, #4	; (adr r1, 80089a8 <_printf_i+0x40>)
 80089a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089a8:	08008a01 	.word	0x08008a01
 80089ac:	08008a15 	.word	0x08008a15
 80089b0:	08008991 	.word	0x08008991
 80089b4:	08008991 	.word	0x08008991
 80089b8:	08008991 	.word	0x08008991
 80089bc:	08008991 	.word	0x08008991
 80089c0:	08008a15 	.word	0x08008a15
 80089c4:	08008991 	.word	0x08008991
 80089c8:	08008991 	.word	0x08008991
 80089cc:	08008991 	.word	0x08008991
 80089d0:	08008991 	.word	0x08008991
 80089d4:	08008b19 	.word	0x08008b19
 80089d8:	08008a41 	.word	0x08008a41
 80089dc:	08008ad3 	.word	0x08008ad3
 80089e0:	08008991 	.word	0x08008991
 80089e4:	08008991 	.word	0x08008991
 80089e8:	08008b3b 	.word	0x08008b3b
 80089ec:	08008991 	.word	0x08008991
 80089f0:	08008a41 	.word	0x08008a41
 80089f4:	08008991 	.word	0x08008991
 80089f8:	08008991 	.word	0x08008991
 80089fc:	08008adb 	.word	0x08008adb
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	1d1a      	adds	r2, r3, #4
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	602a      	str	r2, [r5, #0]
 8008a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a10:	2301      	movs	r3, #1
 8008a12:	e09f      	b.n	8008b54 <_printf_i+0x1ec>
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	682b      	ldr	r3, [r5, #0]
 8008a18:	0607      	lsls	r7, r0, #24
 8008a1a:	f103 0104 	add.w	r1, r3, #4
 8008a1e:	6029      	str	r1, [r5, #0]
 8008a20:	d501      	bpl.n	8008a26 <_printf_i+0xbe>
 8008a22:	681e      	ldr	r6, [r3, #0]
 8008a24:	e003      	b.n	8008a2e <_printf_i+0xc6>
 8008a26:	0646      	lsls	r6, r0, #25
 8008a28:	d5fb      	bpl.n	8008a22 <_printf_i+0xba>
 8008a2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008a2e:	2e00      	cmp	r6, #0
 8008a30:	da03      	bge.n	8008a3a <_printf_i+0xd2>
 8008a32:	232d      	movs	r3, #45	; 0x2d
 8008a34:	4276      	negs	r6, r6
 8008a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a3a:	485a      	ldr	r0, [pc, #360]	; (8008ba4 <_printf_i+0x23c>)
 8008a3c:	230a      	movs	r3, #10
 8008a3e:	e012      	b.n	8008a66 <_printf_i+0xfe>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	6820      	ldr	r0, [r4, #0]
 8008a44:	1d19      	adds	r1, r3, #4
 8008a46:	6029      	str	r1, [r5, #0]
 8008a48:	0605      	lsls	r5, r0, #24
 8008a4a:	d501      	bpl.n	8008a50 <_printf_i+0xe8>
 8008a4c:	681e      	ldr	r6, [r3, #0]
 8008a4e:	e002      	b.n	8008a56 <_printf_i+0xee>
 8008a50:	0641      	lsls	r1, r0, #25
 8008a52:	d5fb      	bpl.n	8008a4c <_printf_i+0xe4>
 8008a54:	881e      	ldrh	r6, [r3, #0]
 8008a56:	4853      	ldr	r0, [pc, #332]	; (8008ba4 <_printf_i+0x23c>)
 8008a58:	2f6f      	cmp	r7, #111	; 0x6f
 8008a5a:	bf0c      	ite	eq
 8008a5c:	2308      	moveq	r3, #8
 8008a5e:	230a      	movne	r3, #10
 8008a60:	2100      	movs	r1, #0
 8008a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a66:	6865      	ldr	r5, [r4, #4]
 8008a68:	60a5      	str	r5, [r4, #8]
 8008a6a:	2d00      	cmp	r5, #0
 8008a6c:	bfa2      	ittt	ge
 8008a6e:	6821      	ldrge	r1, [r4, #0]
 8008a70:	f021 0104 	bicge.w	r1, r1, #4
 8008a74:	6021      	strge	r1, [r4, #0]
 8008a76:	b90e      	cbnz	r6, 8008a7c <_printf_i+0x114>
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	d04b      	beq.n	8008b14 <_printf_i+0x1ac>
 8008a7c:	4615      	mov	r5, r2
 8008a7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a82:	fb03 6711 	mls	r7, r3, r1, r6
 8008a86:	5dc7      	ldrb	r7, [r0, r7]
 8008a88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a8c:	4637      	mov	r7, r6
 8008a8e:	42bb      	cmp	r3, r7
 8008a90:	460e      	mov	r6, r1
 8008a92:	d9f4      	bls.n	8008a7e <_printf_i+0x116>
 8008a94:	2b08      	cmp	r3, #8
 8008a96:	d10b      	bne.n	8008ab0 <_printf_i+0x148>
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	07de      	lsls	r6, r3, #31
 8008a9c:	d508      	bpl.n	8008ab0 <_printf_i+0x148>
 8008a9e:	6923      	ldr	r3, [r4, #16]
 8008aa0:	6861      	ldr	r1, [r4, #4]
 8008aa2:	4299      	cmp	r1, r3
 8008aa4:	bfde      	ittt	le
 8008aa6:	2330      	movle	r3, #48	; 0x30
 8008aa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008aac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ab0:	1b52      	subs	r2, r2, r5
 8008ab2:	6122      	str	r2, [r4, #16]
 8008ab4:	f8cd a000 	str.w	sl, [sp]
 8008ab8:	464b      	mov	r3, r9
 8008aba:	aa03      	add	r2, sp, #12
 8008abc:	4621      	mov	r1, r4
 8008abe:	4640      	mov	r0, r8
 8008ac0:	f7ff fee4 	bl	800888c <_printf_common>
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	d14a      	bne.n	8008b5e <_printf_i+0x1f6>
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	b004      	add	sp, #16
 8008ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	f043 0320 	orr.w	r3, r3, #32
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	4833      	ldr	r0, [pc, #204]	; (8008ba8 <_printf_i+0x240>)
 8008adc:	2778      	movs	r7, #120	; 0x78
 8008ade:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	6829      	ldr	r1, [r5, #0]
 8008ae6:	061f      	lsls	r7, r3, #24
 8008ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008aec:	d402      	bmi.n	8008af4 <_printf_i+0x18c>
 8008aee:	065f      	lsls	r7, r3, #25
 8008af0:	bf48      	it	mi
 8008af2:	b2b6      	uxthmi	r6, r6
 8008af4:	07df      	lsls	r7, r3, #31
 8008af6:	bf48      	it	mi
 8008af8:	f043 0320 	orrmi.w	r3, r3, #32
 8008afc:	6029      	str	r1, [r5, #0]
 8008afe:	bf48      	it	mi
 8008b00:	6023      	strmi	r3, [r4, #0]
 8008b02:	b91e      	cbnz	r6, 8008b0c <_printf_i+0x1a4>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	f023 0320 	bic.w	r3, r3, #32
 8008b0a:	6023      	str	r3, [r4, #0]
 8008b0c:	2310      	movs	r3, #16
 8008b0e:	e7a7      	b.n	8008a60 <_printf_i+0xf8>
 8008b10:	4824      	ldr	r0, [pc, #144]	; (8008ba4 <_printf_i+0x23c>)
 8008b12:	e7e4      	b.n	8008ade <_printf_i+0x176>
 8008b14:	4615      	mov	r5, r2
 8008b16:	e7bd      	b.n	8008a94 <_printf_i+0x12c>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	6826      	ldr	r6, [r4, #0]
 8008b1c:	6961      	ldr	r1, [r4, #20]
 8008b1e:	1d18      	adds	r0, r3, #4
 8008b20:	6028      	str	r0, [r5, #0]
 8008b22:	0635      	lsls	r5, r6, #24
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	d501      	bpl.n	8008b2c <_printf_i+0x1c4>
 8008b28:	6019      	str	r1, [r3, #0]
 8008b2a:	e002      	b.n	8008b32 <_printf_i+0x1ca>
 8008b2c:	0670      	lsls	r0, r6, #25
 8008b2e:	d5fb      	bpl.n	8008b28 <_printf_i+0x1c0>
 8008b30:	8019      	strh	r1, [r3, #0]
 8008b32:	2300      	movs	r3, #0
 8008b34:	6123      	str	r3, [r4, #16]
 8008b36:	4615      	mov	r5, r2
 8008b38:	e7bc      	b.n	8008ab4 <_printf_i+0x14c>
 8008b3a:	682b      	ldr	r3, [r5, #0]
 8008b3c:	1d1a      	adds	r2, r3, #4
 8008b3e:	602a      	str	r2, [r5, #0]
 8008b40:	681d      	ldr	r5, [r3, #0]
 8008b42:	6862      	ldr	r2, [r4, #4]
 8008b44:	2100      	movs	r1, #0
 8008b46:	4628      	mov	r0, r5
 8008b48:	f7f7 fb62 	bl	8000210 <memchr>
 8008b4c:	b108      	cbz	r0, 8008b52 <_printf_i+0x1ea>
 8008b4e:	1b40      	subs	r0, r0, r5
 8008b50:	6060      	str	r0, [r4, #4]
 8008b52:	6863      	ldr	r3, [r4, #4]
 8008b54:	6123      	str	r3, [r4, #16]
 8008b56:	2300      	movs	r3, #0
 8008b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b5c:	e7aa      	b.n	8008ab4 <_printf_i+0x14c>
 8008b5e:	6923      	ldr	r3, [r4, #16]
 8008b60:	462a      	mov	r2, r5
 8008b62:	4649      	mov	r1, r9
 8008b64:	4640      	mov	r0, r8
 8008b66:	47d0      	blx	sl
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d0ad      	beq.n	8008ac8 <_printf_i+0x160>
 8008b6c:	6823      	ldr	r3, [r4, #0]
 8008b6e:	079b      	lsls	r3, r3, #30
 8008b70:	d413      	bmi.n	8008b9a <_printf_i+0x232>
 8008b72:	68e0      	ldr	r0, [r4, #12]
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	4298      	cmp	r0, r3
 8008b78:	bfb8      	it	lt
 8008b7a:	4618      	movlt	r0, r3
 8008b7c:	e7a6      	b.n	8008acc <_printf_i+0x164>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	4632      	mov	r2, r6
 8008b82:	4649      	mov	r1, r9
 8008b84:	4640      	mov	r0, r8
 8008b86:	47d0      	blx	sl
 8008b88:	3001      	adds	r0, #1
 8008b8a:	d09d      	beq.n	8008ac8 <_printf_i+0x160>
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	68e3      	ldr	r3, [r4, #12]
 8008b90:	9903      	ldr	r1, [sp, #12]
 8008b92:	1a5b      	subs	r3, r3, r1
 8008b94:	42ab      	cmp	r3, r5
 8008b96:	dcf2      	bgt.n	8008b7e <_printf_i+0x216>
 8008b98:	e7eb      	b.n	8008b72 <_printf_i+0x20a>
 8008b9a:	2500      	movs	r5, #0
 8008b9c:	f104 0619 	add.w	r6, r4, #25
 8008ba0:	e7f5      	b.n	8008b8e <_printf_i+0x226>
 8008ba2:	bf00      	nop
 8008ba4:	08008e0a 	.word	0x08008e0a
 8008ba8:	08008e1b 	.word	0x08008e1b

08008bac <memmove>:
 8008bac:	4288      	cmp	r0, r1
 8008bae:	b510      	push	{r4, lr}
 8008bb0:	eb01 0402 	add.w	r4, r1, r2
 8008bb4:	d902      	bls.n	8008bbc <memmove+0x10>
 8008bb6:	4284      	cmp	r4, r0
 8008bb8:	4623      	mov	r3, r4
 8008bba:	d807      	bhi.n	8008bcc <memmove+0x20>
 8008bbc:	1e43      	subs	r3, r0, #1
 8008bbe:	42a1      	cmp	r1, r4
 8008bc0:	d008      	beq.n	8008bd4 <memmove+0x28>
 8008bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bca:	e7f8      	b.n	8008bbe <memmove+0x12>
 8008bcc:	4402      	add	r2, r0
 8008bce:	4601      	mov	r1, r0
 8008bd0:	428a      	cmp	r2, r1
 8008bd2:	d100      	bne.n	8008bd6 <memmove+0x2a>
 8008bd4:	bd10      	pop	{r4, pc}
 8008bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bde:	e7f7      	b.n	8008bd0 <memmove+0x24>

08008be0 <_sbrk_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4d06      	ldr	r5, [pc, #24]	; (8008bfc <_sbrk_r+0x1c>)
 8008be4:	2300      	movs	r3, #0
 8008be6:	4604      	mov	r4, r0
 8008be8:	4608      	mov	r0, r1
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	f7f9 fe4e 	bl	800288c <_sbrk>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d102      	bne.n	8008bfa <_sbrk_r+0x1a>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	b103      	cbz	r3, 8008bfa <_sbrk_r+0x1a>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	2000042c 	.word	0x2000042c

08008c00 <memcpy>:
 8008c00:	440a      	add	r2, r1
 8008c02:	4291      	cmp	r1, r2
 8008c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c08:	d100      	bne.n	8008c0c <memcpy+0xc>
 8008c0a:	4770      	bx	lr
 8008c0c:	b510      	push	{r4, lr}
 8008c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c16:	4291      	cmp	r1, r2
 8008c18:	d1f9      	bne.n	8008c0e <memcpy+0xe>
 8008c1a:	bd10      	pop	{r4, pc}

08008c1c <_realloc_r>:
 8008c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c20:	4680      	mov	r8, r0
 8008c22:	4614      	mov	r4, r2
 8008c24:	460e      	mov	r6, r1
 8008c26:	b921      	cbnz	r1, 8008c32 <_realloc_r+0x16>
 8008c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	f7ff bc49 	b.w	80084c4 <_malloc_r>
 8008c32:	b92a      	cbnz	r2, 8008c40 <_realloc_r+0x24>
 8008c34:	f7ff fbda 	bl	80083ec <_free_r>
 8008c38:	4625      	mov	r5, r4
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c40:	f000 f81b 	bl	8008c7a <_malloc_usable_size_r>
 8008c44:	4284      	cmp	r4, r0
 8008c46:	4607      	mov	r7, r0
 8008c48:	d802      	bhi.n	8008c50 <_realloc_r+0x34>
 8008c4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c4e:	d812      	bhi.n	8008c76 <_realloc_r+0x5a>
 8008c50:	4621      	mov	r1, r4
 8008c52:	4640      	mov	r0, r8
 8008c54:	f7ff fc36 	bl	80084c4 <_malloc_r>
 8008c58:	4605      	mov	r5, r0
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d0ed      	beq.n	8008c3a <_realloc_r+0x1e>
 8008c5e:	42bc      	cmp	r4, r7
 8008c60:	4622      	mov	r2, r4
 8008c62:	4631      	mov	r1, r6
 8008c64:	bf28      	it	cs
 8008c66:	463a      	movcs	r2, r7
 8008c68:	f7ff ffca 	bl	8008c00 <memcpy>
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	4640      	mov	r0, r8
 8008c70:	f7ff fbbc 	bl	80083ec <_free_r>
 8008c74:	e7e1      	b.n	8008c3a <_realloc_r+0x1e>
 8008c76:	4635      	mov	r5, r6
 8008c78:	e7df      	b.n	8008c3a <_realloc_r+0x1e>

08008c7a <_malloc_usable_size_r>:
 8008c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c7e:	1f18      	subs	r0, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	bfbc      	itt	lt
 8008c84:	580b      	ldrlt	r3, [r1, r0]
 8008c86:	18c0      	addlt	r0, r0, r3
 8008c88:	4770      	bx	lr
	...

08008c8c <_init>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	bf00      	nop
 8008c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c92:	bc08      	pop	{r3}
 8008c94:	469e      	mov	lr, r3
 8008c96:	4770      	bx	lr

08008c98 <_fini>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	bf00      	nop
 8008c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9e:	bc08      	pop	{r3}
 8008ca0:	469e      	mov	lr, r3
 8008ca2:	4770      	bx	lr
