
TCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b24c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800b420  0800b420  0001b420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b82c  0800b82c  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800b82c  0800b82c  0001b82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b834  0800b834  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b834  0800b834  0001b834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b838  0800b838  0001b838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800b83c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000248  0800ba84  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800ba84  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159b0  00000000  00000000  000202bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003108  00000000  00000000  00035c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  00038d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e11  00000000  00000000  00039fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a2f  00000000  00000000  0003adb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000179a7  00000000  00000000  000637e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6e56  00000000  00000000  0007b187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005de4  00000000  00000000  00171fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00177dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b404 	.word	0x0800b404

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	0800b404 	.word	0x0800b404

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b9a6 	b.w	8000ff0 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9e08      	ldr	r6, [sp, #32]
 8000d2e:	460d      	mov	r5, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0xe2>
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	b143      	cbz	r3, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d48:	f1c3 0220 	rsb	r2, r3, #32
 8000d4c:	409f      	lsls	r7, r3
 8000d4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d52:	4317      	orrs	r7, r2
 8000d54:	409c      	lsls	r4, r3
 8000d56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d5a:	fa1f f58c 	uxth.w	r5, ip
 8000d5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d62:	0c22      	lsrs	r2, r4, #16
 8000d64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d6c:	fb01 f005 	mul.w	r0, r1, r5
 8000d70:	4290      	cmp	r0, r2
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d7c:	f080 811c 	bcs.w	8000fb8 <__udivmoddi4+0x290>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f240 8119 	bls.w	8000fb8 <__udivmoddi4+0x290>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4462      	add	r2, ip
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	b2a4      	uxth	r4, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9a:	fb00 f505 	mul.w	r5, r0, r5
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x90>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000daa:	f080 8107 	bcs.w	8000fbc <__udivmoddi4+0x294>
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	f240 8104 	bls.w	8000fbc <__udivmoddi4+0x294>
 8000db4:	4464      	add	r4, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11e      	cbz	r6, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40dc      	lsrs	r4, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0xbc>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f000 80ed 	beq.w	8000fb2 <__udivmoddi4+0x28a>
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e9c6 0500 	strd	r0, r5, [r6]
 8000dde:	4608      	mov	r0, r1
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d149      	bne.n	8000e80 <__udivmoddi4+0x158>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0xce>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f200 80f8 	bhi.w	8000fe6 <__udivmoddi4+0x2be>
 8000df6:	1a84      	subs	r4, r0, r2
 8000df8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4617      	mov	r7, r2
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d0e2      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	e9c6 4700 	strd	r4, r7, [r6]
 8000e08:	e7df      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xe6>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f382 	clz	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x210>
 8000e18:	1a8a      	subs	r2, r1, r2
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	2101      	movs	r1, #1
 8000e24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e28:	fb07 2015 	mls	r0, r7, r5, r2
 8000e2c:	0c22      	lsrs	r2, r4, #16
 8000e2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e32:	fb0e f005 	mul.w	r0, lr, r5
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x124>
 8000e3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x122>
 8000e44:	4290      	cmp	r0, r2
 8000e46:	f200 80cb 	bhi.w	8000fe0 <__udivmoddi4+0x2b8>
 8000e4a:	4645      	mov	r5, r8
 8000e4c:	1a12      	subs	r2, r2, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e54:	fb07 2210 	mls	r2, r7, r0, r2
 8000e58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e60:	45a6      	cmp	lr, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x14e>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x14c>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f200 80bb 	bhi.w	8000fea <__udivmoddi4+0x2c2>
 8000e74:	4610      	mov	r0, r2
 8000e76:	eba4 040e 	sub.w	r4, r4, lr
 8000e7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7e:	e79f      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e80:	f1c1 0720 	rsb	r7, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e92:	fa20 f307 	lsr.w	r3, r0, r7
 8000e96:	40fd      	lsrs	r5, r7
 8000e98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eb0:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb4:	42a5      	cmp	r5, r4
 8000eb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eba:	fa00 f001 	lsl.w	r0, r0, r1
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b0>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec8:	f080 8088 	bcs.w	8000fdc <__udivmoddi4+0x2b4>
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	f240 8085 	bls.w	8000fdc <__udivmoddi4+0x2b4>
 8000ed2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed6:	4464      	add	r4, ip
 8000ed8:	1b64      	subs	r4, r4, r5
 8000eda:	b29d      	uxth	r5, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1da>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef8:	d26c      	bcs.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	d96a      	bls.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f06:	fba3 9502 	umull	r9, r5, r3, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	42ac      	cmp	r4, r5
 8000f10:	46c8      	mov	r8, r9
 8000f12:	46ae      	mov	lr, r5
 8000f14:	d356      	bcc.n	8000fc4 <__udivmoddi4+0x29c>
 8000f16:	d053      	beq.n	8000fc0 <__udivmoddi4+0x298>
 8000f18:	b156      	cbz	r6, 8000f30 <__udivmoddi4+0x208>
 8000f1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f22:	fa04 f707 	lsl.w	r7, r4, r7
 8000f26:	40ca      	lsrs	r2, r1
 8000f28:	40cc      	lsrs	r4, r1
 8000f2a:	4317      	orrs	r7, r2
 8000f2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f30:	4618      	mov	r0, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f38:	f1c3 0120 	rsb	r1, r3, #32
 8000f3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f40:	fa20 f201 	lsr.w	r2, r0, r1
 8000f44:	fa25 f101 	lsr.w	r1, r5, r1
 8000f48:	409d      	lsls	r5, r3
 8000f4a:	432a      	orrs	r2, r5
 8000f4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f50:	fa1f fe8c 	uxth.w	lr, ip
 8000f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f58:	fb07 1510 	mls	r5, r7, r0, r1
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f62:	fb00 f50e 	mul.w	r5, r0, lr
 8000f66:	428d      	cmp	r5, r1
 8000f68:	fa04 f403 	lsl.w	r4, r4, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x258>
 8000f6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f76:	d22f      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f78:	428d      	cmp	r5, r1
 8000f7a:	d92d      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4461      	add	r1, ip
 8000f80:	1b49      	subs	r1, r1, r5
 8000f82:	b292      	uxth	r2, r2
 8000f84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f88:	fb07 1115 	mls	r1, r7, r5, r1
 8000f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f90:	fb05 f10e 	mul.w	r1, r5, lr
 8000f94:	4291      	cmp	r1, r2
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x282>
 8000f98:	eb1c 0202 	adds.w	r2, ip, r2
 8000f9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fa0:	d216      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa2:	4291      	cmp	r1, r2
 8000fa4:	d914      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa6:	3d02      	subs	r5, #2
 8000fa8:	4462      	add	r2, ip
 8000faa:	1a52      	subs	r2, r2, r1
 8000fac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fb0:	e738      	b.n	8000e24 <__udivmoddi4+0xfc>
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e708      	b.n	8000dca <__udivmoddi4+0xa2>
 8000fb8:	4639      	mov	r1, r7
 8000fba:	e6e6      	b.n	8000d8a <__udivmoddi4+0x62>
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	e6fb      	b.n	8000db8 <__udivmoddi4+0x90>
 8000fc0:	4548      	cmp	r0, r9
 8000fc2:	d2a9      	bcs.n	8000f18 <__udivmoddi4+0x1f0>
 8000fc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	e7a3      	b.n	8000f18 <__udivmoddi4+0x1f0>
 8000fd0:	4645      	mov	r5, r8
 8000fd2:	e7ea      	b.n	8000faa <__udivmoddi4+0x282>
 8000fd4:	462b      	mov	r3, r5
 8000fd6:	e794      	b.n	8000f02 <__udivmoddi4+0x1da>
 8000fd8:	4640      	mov	r0, r8
 8000fda:	e7d1      	b.n	8000f80 <__udivmoddi4+0x258>
 8000fdc:	46d0      	mov	r8, sl
 8000fde:	e77b      	b.n	8000ed8 <__udivmoddi4+0x1b0>
 8000fe0:	3d02      	subs	r5, #2
 8000fe2:	4462      	add	r2, ip
 8000fe4:	e732      	b.n	8000e4c <__udivmoddi4+0x124>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e70a      	b.n	8000e00 <__udivmoddi4+0xd8>
 8000fea:	4464      	add	r4, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e742      	b.n	8000e76 <__udivmoddi4+0x14e>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 fa47 	bl	8001490 <null_ptr_check>
 8001002:	4603      	mov	r3, r0
 8001004:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d117      	bne.n	800103e <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	20d0      	movs	r0, #208	; 0xd0
 8001016:	f000 f818 	bl	800104a <bmp2_get_regs>
 800101a:	4603      	mov	r3, r0
 800101c:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10b      	bne.n	800103e <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b58      	cmp	r3, #88	; 0x58
 800102c:	d105      	bne.n	800103a <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 fa79 	bl	8001526 <get_calib_param>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e001      	b.n	800103e <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 800103a:	23fc      	movs	r3, #252	; 0xfc
 800103c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800104a:	b590      	push	{r4, r7, lr}
 800104c:	b087      	sub	sp, #28
 800104e:	af00      	add	r7, sp, #0
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f000 fa18 	bl	8001490 <null_ptr_check>
 8001060:	4603      	mov	r3, r0
 8001062:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8001064:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d11e      	bne.n	80010aa <bmp2_get_regs+0x60>
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d01b      	beq.n	80010aa <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d103      	bne.n	8001082 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001080:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68dc      	ldr	r4, [r3, #12]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	7bf8      	ldrb	r0, [r7, #15]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	47a0      	blx	r4
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80010a4:	23fe      	movs	r3, #254	; 0xfe
 80010a6:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010a8:	e001      	b.n	80010ae <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010aa:	23ff      	movs	r3, #255	; 0xff
 80010ac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}

080010ba <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80010ba:	b590      	push	{r4, r7, lr}
 80010bc:	b08b      	sub	sp, #44	; 0x2c
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d901      	bls.n	80010d2 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 80010ce:	2304      	movs	r3, #4
 80010d0:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 80010d2:	6838      	ldr	r0, [r7, #0]
 80010d4:	f000 f9dc 	bl	8001490 <null_ptr_check>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80010de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d150      	bne.n	8001188 <bmp2_set_regs+0xce>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d04d      	beq.n	8001188 <bmp2_set_regs+0xce>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d04a      	beq.n	8001188 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d043      	beq.n	8001180 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d114      	bne.n	8001130 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001106:	2300      	movs	r3, #0
 8001108:	77fb      	strb	r3, [r7, #31]
 800110a:	e00d      	b.n	8001128 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 800110c:	7ffb      	ldrb	r3, [r7, #31]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	4413      	add	r3, r2
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	7ffb      	ldrb	r3, [r7, #31]
 8001116:	68f9      	ldr	r1, [r7, #12]
 8001118:	440b      	add	r3, r1
 800111a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001122:	7ffb      	ldrb	r3, [r7, #31]
 8001124:	3301      	adds	r3, #1
 8001126:	77fb      	strb	r3, [r7, #31]
 8001128:	7ffb      	ldrb	r3, [r7, #31]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8ed      	bhi.n	800110c <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d90b      	bls.n	800114e <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8001136:	f107 0114 	add.w	r1, r7, #20
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f9c6 	bl	80014d0 <interleave_data>
                temp_len = ((len * 2) - 1);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	3b01      	subs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
 800114c:	e001      	b.n	8001152 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	691c      	ldr	r4, [r3, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	7818      	ldrb	r0, [r3, #0]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f107 0114 	add.w	r1, r7, #20
 8001162:	6a3a      	ldr	r2, [r7, #32]
 8001164:	47a0      	blx	r4
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00b      	beq.n	8001190 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8001178:	23fe      	movs	r3, #254	; 0xfe
 800117a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 800117e:	e007      	b.n	8001190 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001180:	23fd      	movs	r3, #253	; 0xfd
 8001182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001186:	e003      	b.n	8001190 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001188:	23ff      	movs	r3, #255	; 0xff
 800118a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800118e:	e000      	b.n	8001192 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001190:	bf00      	nop
    }

    return rslt;
 8001192:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001196:	4618      	mov	r0, r3
 8001198:	372c      	adds	r7, #44	; 0x2c
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}

0800119e <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80011a6:	23e0      	movs	r3, #224	; 0xe0
 80011a8:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80011aa:	23b6      	movs	r3, #182	; 0xb6
 80011ac:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011ae:	f107 010d 	add.w	r1, r7, #13
 80011b2:	f107 000e 	add.w	r0, r7, #14
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f7ff ff7e 	bl	80010ba <bmp2_set_regs>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80011d8:	2300      	movs	r3, #0
 80011da:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d02d      	beq.n	800123e <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80011e2:	f107 010c 	add.w	r1, r7, #12
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2202      	movs	r2, #2
 80011ea:	20f4      	movs	r0, #244	; 0xf4
 80011ec:	f7ff ff2d 	bl	800104a <bmp2_get_regs>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80011f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d122      	bne.n	8001242 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 80011fc:	7b3b      	ldrb	r3, [r7, #12]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	b2da      	uxtb	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8001206:	7b3b      	ldrb	r3, [r7, #12]
 8001208:	109b      	asrs	r3, r3, #2
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	b2da      	uxtb	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8001216:	7b7b      	ldrb	r3, [r7, #13]
 8001218:	095b      	lsrs	r3, r3, #5
 800121a:	b2da      	uxtb	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001220:	7b7b      	ldrb	r3, [r7, #13]
 8001222:	109b      	asrs	r3, r3, #2
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	b2da      	uxtb	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001230:	7b7b      	ldrb	r3, [r7, #13]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	715a      	strb	r2, [r3, #5]
 800123c:	e001      	b.n	8001242 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800123e:	23ff      	movs	r3, #255	; 0xff
 8001240:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f9fd 	bl	800165c <conf_sensor>
 8001262:	4603      	mov	r3, r0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d01b      	beq.n	80012b4 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 800127c:	f107 010e 	add.w	r1, r7, #14
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2201      	movs	r2, #1
 8001284:	20f3      	movs	r0, #243	; 0xf3
 8001286:	f7ff fee0 	bl	800104a <bmp2_get_regs>
 800128a:	4603      	mov	r3, r0
 800128c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d110      	bne.n	80012b8 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	10db      	asrs	r3, r3, #3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	705a      	strb	r2, [r3, #1]
 80012b2:	e001      	b.n	80012b8 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012b4:	23ff      	movs	r3, #255	; 0xff
 80012b6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	68b9      	ldr	r1, [r7, #8]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f9bf 	bl	800165c <conf_sensor>
 80012de:	4603      	mov	r3, r0
 80012e0:	75fb      	strb	r3, [r7, #23]

    return rslt;
 80012e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	2300      	movs	r3, #0
 80012fe:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d024      	beq.n	800135a <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001310:	f107 0110 	add.w	r1, r7, #16
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2206      	movs	r2, #6
 8001318:	20f7      	movs	r0, #247	; 0xf7
 800131a:	f7ff fe96 	bl	800104a <bmp2_get_regs>
 800131e:	4603      	mov	r3, r0
 8001320:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001322:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d119      	bne.n	800135e <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 800132a:	f107 0208 	add.w	r2, r7, #8
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fab9 	bl	80018ac <parse_sensor_data>
 800133a:	4603      	mov	r3, r0
 800133c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 800133e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10b      	bne.n	800135e <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f80b 	bl	800136a <bmp2_compensate_data>
 8001354:	4603      	mov	r3, r0
 8001356:	75fb      	strb	r3, [r7, #23]
 8001358:	e001      	b.n	800135e <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800135a:	23ff      	movs	r3, #255	; 0xff
 800135c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800135e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f88a 	bl	8001490 <null_ptr_check>
 800137c:	4603      	mov	r3, r0
 800137e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001380:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d129      	bne.n	80013dc <bmp2_compensate_data+0x72>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d026      	beq.n	80013dc <bmp2_compensate_data+0x72>
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d023      	beq.n	80013dc <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3308      	adds	r3, #8
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	68f9      	ldr	r1, [r7, #12]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fabb 	bl	8001934 <compensate_temperature>
 80013be:	4603      	mov	r3, r0
 80013c0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80013c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10a      	bne.n	80013e0 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	68f9      	ldr	r1, [r7, #12]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fba5 	bl	8001b20 <compensate_pressure>
 80013d6:	4603      	mov	r3, r0
 80013d8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 80013da:	e001      	b.n	80013e0 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013dc:	23ff      	movs	r3, #255	; 0xff
 80013de:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80013e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 80013ec:	b5b0      	push	{r4, r5, r7, lr}
 80013ee:	b092      	sub	sp, #72	; 0x48
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <bmp2_compute_meas_time+0x9c>)
 80013fa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80013fe:	461d      	mov	r5, r3
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001408:	4b20      	ldr	r3, [pc, #128]	; (800148c <bmp2_compute_meas_time+0xa0>)
 800140a:	f107 0410 	add.w	r4, r7, #16
 800140e:	461d      	mov	r5, r3
 8001410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001414:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f837 	bl	8001490 <null_ptr_check>
 8001422:	4603      	mov	r3, r0
 8001424:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001428:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800142c:	2b00      	cmp	r3, #0
 800142e:	d122      	bne.n	8001476 <bmp2_compute_meas_time+0x8a>
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01f      	beq.n	8001476 <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7e1b      	ldrb	r3, [r3, #24]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d111      	bne.n	8001462 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	78db      	ldrb	r3, [r3, #3]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	3348      	adds	r3, #72	; 0x48
 8001446:	443b      	add	r3, r7
 8001448:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	789b      	ldrb	r3, [r3, #2]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	3348      	adds	r3, #72	; 0x48
 8001454:	443b      	add	r3, r7
 8001456:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800145a:	441a      	add	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001460:	e00c      	b.n	800147c <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	78db      	ldrb	r3, [r3, #3]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	3348      	adds	r3, #72	; 0x48
 800146a:	443b      	add	r3, r7
 800146c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001474:	e002      	b.n	800147c <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001476:	23ff      	movs	r3, #255	; 0xff
 8001478:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 800147c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001480:	4618      	mov	r0, r3
 8001482:	3748      	adds	r7, #72	; 0x48
 8001484:	46bd      	mov	sp, r7
 8001486:	bdb0      	pop	{r4, r5, r7, pc}
 8001488:	0800b420 	.word	0x0800b420
 800148c:	0800b434 	.word	0x0800b434

08001490 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <null_ptr_check+0x26>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <null_ptr_check+0x26>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <null_ptr_check+0x26>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80014b6:	23ff      	movs	r3, #255	; 0xff
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e001      	b.n	80014c0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80014de:	2301      	movs	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e015      	b.n	8001510 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	441a      	add	r2, r3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	3b01      	subs	r3, #1
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	440b      	add	r3, r1
 80014f4:	7812      	ldrb	r2, [r2, #0]
 80014f6:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	441a      	add	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	440b      	add	r3, r1
 8001506:	7812      	ldrb	r2, [r2, #0]
 8001508:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d3e5      	bcc.n	80014e4 <interleave_data+0x14>
    }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b08a      	sub	sp, #40	; 0x28
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001544:	f107 010c 	add.w	r1, r7, #12
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2219      	movs	r2, #25
 800154c:	2088      	movs	r0, #136	; 0x88
 800154e:	f7ff fd7c 	bl	800104a <bmp2_get_regs>
 8001552:	4603      	mov	r3, r0
 8001554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 8001558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800155c:	2b00      	cmp	r3, #0
 800155e:	d177      	bne.n	8001650 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001560:	7b7b      	ldrb	r3, [r7, #13]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	7b3b      	ldrb	r3, [r7, #12]
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b21b      	sxth	r3, r3
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7bbb      	ldrb	r3, [r7, #14]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21a      	sxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 8001586:	7c7b      	ldrb	r3, [r7, #17]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	7c3b      	ldrb	r3, [r7, #16]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21a      	sxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7cbb      	ldrb	r3, [r7, #18]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80015ac:	7d7b      	ldrb	r3, [r7, #21]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	7d3b      	ldrb	r3, [r7, #20]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	7dbb      	ldrb	r3, [r7, #22]
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 80015d0:	7e7b      	ldrb	r3, [r7, #25]
 80015d2:	021b      	lsls	r3, r3, #8
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	7e3b      	ldrb	r3, [r7, #24]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b21a      	sxth	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 80015e2:	7efb      	ldrb	r3, [r7, #27]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	7ebb      	ldrb	r3, [r7, #26]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 80015f4:	7f7b      	ldrb	r3, [r7, #29]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	7f3b      	ldrb	r3, [r7, #28]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b21a      	sxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001606:	7ffb      	ldrb	r3, [r7, #31]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	b21a      	sxth	r2, r3
 800160c:	7fbb      	ldrb	r3, [r7, #30]
 800160e:	b21b      	sxth	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b21a      	sxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001618:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21a      	sxth	r2, r3
 8001620:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21a      	sxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 800162e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21a      	sxth	r2, r3
 8001636:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800163a:	b21b      	sxth	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b21a      	sxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001644:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001648:	b25a      	sxtb	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001650:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001654:	4618      	mov	r0, r3
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800166a:	2300      	movs	r3, #0
 800166c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 800166e:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8001672:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d074      	beq.n	8001764 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800167a:	f107 0114 	add.w	r1, r7, #20
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2202      	movs	r2, #2
 8001682:	20f4      	movs	r0, #244	; 0xf4
 8001684:	f7ff fce1 	bl	800104a <bmp2_get_regs>
 8001688:	4603      	mov	r3, r0
 800168a:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800168c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d169      	bne.n	8001768 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fd82 	bl	800119e <bmp2_soft_reset>
 800169a:	4603      	mov	r3, r0
 800169c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 800169e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d160      	bne.n	8001768 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f861 	bl	8001774 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80016b2:	7d7b      	ldrb	r3, [r7, #21]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80016cc:	7d7b      	ldrb	r3, [r7, #21]
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	f023 031c 	bic.w	r3, r3, #28
 80016d4:	b25a      	sxtb	r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	791b      	ldrb	r3, [r3, #4]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	f003 031c 	and.w	r3, r3, #28
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 80016ec:	7d7b      	ldrb	r3, [r7, #21]
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	795b      	ldrb	r3, [r3, #5]
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	b25b      	sxtb	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800170a:	f107 0114 	add.w	r1, r7, #20
 800170e:	f107 0010 	add.w	r0, r7, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2202      	movs	r2, #2
 8001716:	f7ff fcd0 	bl	80010ba <bmp2_set_regs>
 800171a:	4603      	mov	r3, r0
 800171c:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 800171e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d120      	bne.n	8001768 <conf_sensor+0x10c>
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d01d      	beq.n	8001768 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001732:	7d3b      	ldrb	r3, [r7, #20]
 8001734:	b25b      	sxtb	r3, r3
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	b25a      	sxtb	r2, r3
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	b25b      	sxtb	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b25b      	sxtb	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 800174e:	f107 0114 	add.w	r1, r7, #20
 8001752:	f107 0010 	add.w	r0, r7, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f7ff fcae 	bl	80010ba <bmp2_set_regs>
 800175e:	4603      	mov	r3, r0
 8001760:	75fb      	strb	r3, [r7, #23]
 8001762:	e001      	b.n	8001768 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001764:	23ff      	movs	r3, #255	; 0xff
 8001766:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	78db      	ldrb	r3, [r3, #3]
 8001782:	2b04      	cmp	r3, #4
 8001784:	f200 808b 	bhi.w	800189e <set_os_mode+0x12a>
 8001788:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <set_os_mode+0x1c>)
 800178a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178e:	bf00      	nop
 8001790:	080017a5 	.word	0x080017a5
 8001794:	080017d7 	.word	0x080017d7
 8001798:	08001809 	.word	0x08001809
 800179c:	0800183b 	.word	0x0800183b
 80017a0:	0800186d 	.word	0x0800186d
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	f043 0320 	orr.w	r3, r3, #32
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	f023 031c 	bic.w	r3, r3, #28
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	701a      	strb	r2, [r3, #0]
            break;
 80017d4:	e064      	b.n	80018a0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	f043 0320 	orr.w	r3, r3, #32
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	f023 031c 	bic.w	r3, r3, #28
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	b2da      	uxtb	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	701a      	strb	r2, [r3, #0]
            break;
 8001806:	e04b      	b.n	80018a0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b25b      	sxtb	r3, r3
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f043 0320 	orr.w	r3, r3, #32
 8001818:	b25b      	sxtb	r3, r3
 800181a:	b2da      	uxtb	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b25b      	sxtb	r3, r3
 8001826:	f023 031c 	bic.w	r3, r3, #28
 800182a:	b25b      	sxtb	r3, r3
 800182c:	f043 030c 	orr.w	r3, r3, #12
 8001830:	b25b      	sxtb	r3, r3
 8001832:	b2da      	uxtb	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	701a      	strb	r2, [r3, #0]
            break;
 8001838:	e032      	b.n	80018a0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b25b      	sxtb	r3, r3
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	b25b      	sxtb	r3, r3
 8001846:	f043 0320 	orr.w	r3, r3, #32
 800184a:	b25b      	sxtb	r3, r3
 800184c:	b2da      	uxtb	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	f023 031c 	bic.w	r3, r3, #28
 800185c:	b25b      	sxtb	r3, r3
 800185e:	f043 0310 	orr.w	r3, r3, #16
 8001862:	b25b      	sxtb	r3, r3
 8001864:	b2da      	uxtb	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	701a      	strb	r2, [r3, #0]
            break;
 800186a:	e019      	b.n	80018a0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b25b      	sxtb	r3, r3
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	b25b      	sxtb	r3, r3
 8001878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800187c:	b25b      	sxtb	r3, r3
 800187e:	b2da      	uxtb	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b25b      	sxtb	r3, r3
 800188a:	f023 031c 	bic.w	r3, r3, #28
 800188e:	b25b      	sxtb	r3, r3
 8001890:	f043 0314 	orr.w	r3, r3, #20
 8001894:	b25b      	sxtb	r3, r3
 8001896:	b2da      	uxtb	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	701a      	strb	r2, [r3, #0]
            break;
 800189c:	e000      	b.n	80018a0 <set_os_mode+0x12c>
        default:
            break;
 800189e:	bf00      	nop
    }
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	031b      	lsls	r3, r3, #12
 80018bc:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3301      	adds	r3, #1
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3302      	adds	r3, #2
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	431a      	orrs	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	431a      	orrs	r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3303      	adds	r3, #3
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	031b      	lsls	r3, r3, #12
 80018ea:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3305      	adds	r3, #5
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	431a      	orrs	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	461a      	mov	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4619      	mov	r1, r3
 800191c:	4610      	mov	r0, r2
 800191e:	f000 fae3 	bl	8001ee8 <st_check_boundaries>
 8001922:	4603      	mov	r3, r0
 8001924:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001926:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001934:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001938:	b08c      	sub	sp, #48	; 0x30
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe01 	bl	8000554 <__aeabi_i2d>
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b6c      	ldr	r3, [pc, #432]	; (8001b08 <compensate_temperature+0x1d4>)
 8001958:	f7fe ff90 	bl	800087c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	8b9b      	ldrh	r3, [r3, #28]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fde3 	bl	8000534 <__aeabi_ui2d>
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <compensate_temperature+0x1d8>)
 8001974:	f7fe ff82 	bl	800087c <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fc9a 	bl	80002b8 <__aeabi_dsub>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdde 	bl	8000554 <__aeabi_i2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800199c:	4620      	mov	r0, r4
 800199e:	4629      	mov	r1, r5
 80019a0:	f7fe fe42 	bl	8000628 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdcf 	bl	8000554 <__aeabi_i2d>
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80019be:	f7fe ff5d 	bl	800087c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4614      	mov	r4, r2
 80019c8:	461d      	mov	r5, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	8b9b      	ldrh	r3, [r3, #28]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdb0 	bl	8000534 <__aeabi_ui2d>
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4b4d      	ldr	r3, [pc, #308]	; (8001b10 <compensate_temperature+0x1dc>)
 80019da:	f7fe ff4f 	bl	800087c <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4620      	mov	r0, r4
 80019e4:	4629      	mov	r1, r5
 80019e6:	f7fe fc67 	bl	80002b8 <__aeabi_dsub>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fdac 	bl	8000554 <__aeabi_i2d>
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001a04:	f7fe ff3a 	bl	800087c <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4690      	mov	r8, r2
 8001a0e:	4699      	mov	r9, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	8b9b      	ldrh	r3, [r3, #28]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd8d 	bl	8000534 <__aeabi_ui2d>
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <compensate_temperature+0x1dc>)
 8001a20:	f7fe ff2c 	bl	800087c <__aeabi_ddiv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4640      	mov	r0, r8
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	f7fe fc44 	bl	80002b8 <__aeabi_dsub>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001a34:	4620      	mov	r0, r4
 8001a36:	4629      	mov	r1, r5
 8001a38:	f7fe fdf6 	bl	8000628 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4614      	mov	r4, r2
 8001a42:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd82 	bl	8000554 <__aeabi_i2d>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
    var2 =
 8001a54:	4620      	mov	r0, r4
 8001a56:	4629      	mov	r1, r5
 8001a58:	f7fe fde6 	bl	8000628 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a68:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a6c:	f7fe fc26 	bl	80002bc <__adddf3>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7ff f870 	bl	8000b5c <__aeabi_d2iz>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001a82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a8a:	f7fe fc17 	bl	80002bc <__adddf3>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <compensate_temperature+0x1e0>)
 8001a9c:	f7fe feee 	bl	800087c <__aeabi_ddiv>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <compensate_temperature+0x1e4>)
 8001aae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ab2:	f7ff f82b 	bl	8000b0c <__aeabi_dcmplt>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <compensate_temperature+0x1e4>)
 8001ac2:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <compensate_temperature+0x1e8>)
 8001ad2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ad6:	f7ff f837 	bl	8000b48 <__aeabi_dcmpgt>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <compensate_temperature+0x1e8>)
 8001ae6:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001af6:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001afa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3730      	adds	r7, #48	; 0x30
 8001b02:	46bd      	mov	sp, r7
 8001b04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b08:	40d00000 	.word	0x40d00000
 8001b0c:	40900000 	.word	0x40900000
 8001b10:	40c00000 	.word	0x40c00000
 8001b14:	40b40000 	.word	0x40b40000
 8001b18:	c0440000 	.word	0xc0440000
 8001b1c:	40554000 	.word	0x40554000

08001b20 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b08c      	sub	sp, #48	; 0x30
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd06 	bl	8000554 <__aeabi_i2d>
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b50:	f7fe fe94 	bl	800087c <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4bcb      	ldr	r3, [pc, #812]	; (8001e90 <compensate_pressure+0x370>)
 8001b62:	f7fe fba9 	bl	80002b8 <__aeabi_dsub>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b76:	f7fe fd57 	bl	8000628 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4614      	mov	r4, r2
 8001b80:	461d      	mov	r5, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fce3 	bl	8000554 <__aeabi_i2d>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4620      	mov	r0, r4
 8001b94:	4629      	mov	r1, r5
 8001b96:	f7fe fd47 	bl	8000628 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	4bbb      	ldr	r3, [pc, #748]	; (8001e94 <compensate_pressure+0x374>)
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fcca 	bl	8000554 <__aeabi_i2d>
 8001bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc4:	f7fe fd30 	bl	8000628 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	f7fe fb72 	bl	80002bc <__adddf3>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001be0:	f7fe fb6c 	bl	80002bc <__adddf3>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4ba9      	ldr	r3, [pc, #676]	; (8001e98 <compensate_pressure+0x378>)
 8001bf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bf6:	f7fe fe41 	bl	800087c <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4614      	mov	r4, r2
 8001c00:	461d      	mov	r5, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fca3 	bl	8000554 <__aeabi_i2d>
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	4ba2      	ldr	r3, [pc, #648]	; (8001e9c <compensate_pressure+0x37c>)
 8001c14:	f7fe fd08 	bl	8000628 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	4629      	mov	r1, r5
 8001c20:	f7fe fb4c 	bl	80002bc <__adddf3>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc8e 	bl	8000554 <__aeabi_i2d>
 8001c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c3c:	f7fe fcf4 	bl	8000628 <__aeabi_dmul>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c4c:	f7fe fcec 	bl	8000628 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b90      	ldr	r3, [pc, #576]	; (8001ea0 <compensate_pressure+0x380>)
 8001c5e:	f7fe fe0d 	bl	800087c <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4614      	mov	r4, r2
 8001c68:	461d      	mov	r5, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc6f 	bl	8000554 <__aeabi_i2d>
 8001c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7a:	f7fe fcd5 	bl	8000628 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4620      	mov	r0, r4
 8001c84:	4629      	mov	r1, r5
 8001c86:	f7fe fb19 	bl	80002bc <__adddf3>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	4b82      	ldr	r3, [pc, #520]	; (8001ea0 <compensate_pressure+0x380>)
 8001c98:	f7fe fdf0 	bl	800087c <__aeabi_ddiv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	4b7a      	ldr	r3, [pc, #488]	; (8001e94 <compensate_pressure+0x374>)
 8001caa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cae:	f7fe fde5 	bl	800087c <__aeabi_ddiv>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	4b79      	ldr	r3, [pc, #484]	; (8001ea4 <compensate_pressure+0x384>)
 8001cc0:	f7fe fafc 	bl	80002bc <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4614      	mov	r4, r2
 8001cca:	461d      	mov	r5, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fc2f 	bl	8000534 <__aeabi_ui2d>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4620      	mov	r0, r4
 8001cdc:	4629      	mov	r1, r5
 8001cde:	f7fe fca3 	bl	8000628 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cf6:	f7fe ff09 	bl	8000b0c <__aeabi_dcmplt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10b      	bne.n	8001d18 <compensate_pressure+0x1f8>
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d0c:	f7fe ff1c 	bl	8000b48 <__aeabi_dcmpgt>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80de 	beq.w	8001ed4 <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fc09 	bl	8000534 <__aeabi_ui2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	495f      	ldr	r1, [pc, #380]	; (8001ea8 <compensate_pressure+0x388>)
 8001d2c:	f7fe fac4 	bl	80002b8 <__aeabi_dsub>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <compensate_pressure+0x38c>)
 8001d3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d42:	f7fe fd9b 	bl	800087c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d4e:	f7fe fab3 	bl	80002b8 <__aeabi_dsub>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	a347      	add	r3, pc, #284	; (adr r3, 8001e78 <compensate_pressure+0x358>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fc62 	bl	8000628 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d70:	f7fe fd84 	bl	800087c <__aeabi_ddiv>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fbe6 	bl	8000554 <__aeabi_i2d>
 8001d88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d8c:	f7fe fc4c 	bl	8000628 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d9c:	f7fe fc44 	bl	8000628 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <compensate_pressure+0x390>)
 8001dae:	f7fe fd65 	bl	800087c <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbc7 	bl	8000554 <__aeabi_i2d>
 8001dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dca:	f7fe fc2d 	bl	8000628 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <compensate_pressure+0x374>)
 8001ddc:	f7fe fd4e 	bl	800087c <__aeabi_ddiv>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001de8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001df0:	f7fe fa64 	bl	80002bc <__adddf3>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fba6 	bl	8000554 <__aeabi_i2d>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	4629      	mov	r1, r5
 8001e10:	f7fe fa54 	bl	80002bc <__adddf3>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <compensate_pressure+0x394>)
 8001e22:	f7fe fd2b 	bl	800087c <__aeabi_ddiv>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e2e:	f7fe fa45 	bl	80002bc <__adddf3>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001e3a:	a311      	add	r3, pc, #68	; (adr r3, 8001e80 <compensate_pressure+0x360>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e44:	f7fe fe62 	bl	8000b0c <__aeabi_dcmplt>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001e4e:	a30c      	add	r3, pc, #48	; (adr r3, 8001e80 <compensate_pressure+0x360>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001e5e:	a30a      	add	r3, pc, #40	; (adr r3, 8001e88 <compensate_pressure+0x368>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e68:	f7fe fe6e 	bl	8000b48 <__aeabi_dcmpgt>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	e022      	b.n	8001eb8 <compensate_pressure+0x398>
 8001e72:	bf00      	nop
 8001e74:	f3af 8000 	nop.w
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	40b86a00 	.word	0x40b86a00
 8001e80:	00000000 	.word	0x00000000
 8001e84:	40dd4c00 	.word	0x40dd4c00
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	40fadb00 	.word	0x40fadb00
 8001e90:	40ef4000 	.word	0x40ef4000
 8001e94:	40e00000 	.word	0x40e00000
 8001e98:	40100000 	.word	0x40100000
 8001e9c:	40f00000 	.word	0x40f00000
 8001ea0:	41200000 	.word	0x41200000
 8001ea4:	3ff00000 	.word	0x3ff00000
 8001ea8:	41300000 	.word	0x41300000
 8001eac:	40b00000 	.word	0x40b00000
 8001eb0:	41e00000 	.word	0x41e00000
 8001eb4:	40300000 	.word	0x40300000
 8001eb8:	d007      	beq.n	8001eca <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001eba:	a309      	add	r3, pc, #36	; (adr r3, 8001ee0 <compensate_pressure+0x3c0>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001eca:	68f9      	ldr	r1, [r7, #12]
 8001ecc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ed0:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001ed4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3730      	adds	r7, #48	; 0x30
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee0:	00000000 	.word	0x00000000
 8001ee4:	40fadb00 	.word	0x40fadb00

08001ee8 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db03      	blt.n	8001f04 <st_check_boundaries+0x1c>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <st_check_boundaries+0x88>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	dd09      	ble.n	8001f18 <st_check_boundaries+0x30>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db06      	blt.n	8001f18 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <st_check_boundaries+0x88>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	dc02      	bgt.n	8001f18 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001f12:	23fa      	movs	r3, #250	; 0xfa
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e023      	b.n	8001f60 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db03      	blt.n	8001f26 <st_check_boundaries+0x3e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a13      	ldr	r2, [pc, #76]	; (8001f70 <st_check_boundaries+0x88>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	dd09      	ble.n	8001f3a <st_check_boundaries+0x52>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db06      	blt.n	8001f3a <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <st_check_boundaries+0x88>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	dc02      	bgt.n	8001f3a <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001f34:	23fb      	movs	r3, #251	; 0xfb
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	e012      	b.n	8001f60 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db03      	blt.n	8001f48 <st_check_boundaries+0x60>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <st_check_boundaries+0x88>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	dd09      	ble.n	8001f5c <st_check_boundaries+0x74>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db03      	blt.n	8001f56 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <st_check_boundaries+0x88>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	dd02      	ble.n	8001f5c <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001f56:	23f9      	movs	r3, #249	; 0xf9
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	e001      	b.n	8001f60 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	000ffff0 	.word	0x000ffff0

08001f74 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff f839 	bl	8000ff4 <bmp2_init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f91e 	bl	80011ce <bmp2_get_config>
 8001f92:	4603      	mov	r3, r0
 8001f94:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f96:	2303      	movs	r3, #3
 8001f98:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f950 	bl	800124e <bmp2_set_config>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001fb2:	f107 0308 	add.w	r3, r7, #8
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	2003      	movs	r0, #3
 8001fbc:	f7ff f982 	bl	80012c4 <bmp2_set_power_mode>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001fc4:	f107 0108 	add.w	r1, r7, #8
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fa0c 	bl	80013ec <bmp2_compute_meas_time>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	6858      	ldr	r0, [r3, #4]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	891b      	ldrh	r3, [r3, #8]
 8002008:	2200      	movs	r2, #0
 800200a:	4619      	mov	r1, r3
 800200c:	f001 fb3c 	bl	8003688 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	f107 010f 	add.w	r1, r7, #15
 8002018:	2305      	movs	r3, #5
 800201a:	2201      	movs	r2, #1
 800201c:	f002 fd13 	bl	8004a46 <HAL_SPI_Transmit>
 8002020:	4603      	mov	r3, r0
 8002022:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2305      	movs	r3, #5
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	f002 fe77 	bl	8004d22 <HAL_SPI_Receive>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	7dbb      	ldrb	r3, [r7, #22]
 800203a:	4413      	add	r3, r2
 800203c:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	6858      	ldr	r0, [r3, #4]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	891b      	ldrh	r3, [r3, #8]
 8002046:	2201      	movs	r2, #1
 8002048:	4619      	mov	r1, r3
 800204a:	f001 fb1d 	bl	8003688 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 800204e:	7dbb      	ldrb	r3, [r7, #22]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <bmp2_spi_read+0x74>
    iError = -1;
 8002054:	23ff      	movs	r3, #255	; 0xff
 8002056:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002058:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002078:	2300      	movs	r3, #0
 800207a:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	6858      	ldr	r0, [r3, #4]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	891b      	ldrh	r3, [r3, #8]
 8002088:	2200      	movs	r2, #0
 800208a:	4619      	mov	r1, r3
 800208c:	f001 fafc 	bl	8003688 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	f107 010f 	add.w	r1, r7, #15
 8002098:	2305      	movs	r3, #5
 800209a:	2201      	movs	r2, #1
 800209c:	f002 fcd3 	bl	8004a46 <HAL_SPI_Transmit>
 80020a0:	4603      	mov	r3, r0
 80020a2:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	2305      	movs	r3, #5
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	f002 fcc9 	bl	8004a46 <HAL_SPI_Transmit>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	7dbb      	ldrb	r3, [r7, #22]
 80020ba:	4413      	add	r3, r2
 80020bc:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6858      	ldr	r0, [r3, #4]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	891b      	ldrh	r3, [r3, #8]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4619      	mov	r1, r3
 80020ca:	f001 fadd 	bl	8003688 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80020ce:	7dbb      	ldrb	r3, [r7, #22]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <bmp2_spi_write+0x74>
    iError = -1;
 80020d4:	23ff      	movs	r3, #255	; 0xff
 80020d6:	75fb      	strb	r3, [r7, #23]

  return iError;
 80020d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a05      	ldr	r2, [pc, #20]	; (8002108 <bmp2_delay_us+0x24>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	099b      	lsrs	r3, r3, #6
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 ff51 	bl	8002fa0 <HAL_Delay>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	10624dd3 	.word	0x10624dd3

0800210c <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b08d      	sub	sp, #52	; 0x34
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002114:	23ff      	movs	r3, #255	; 0xff
 8002116:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double temp = NAN;
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <BMP2_ReadTemperature_degC+0x9c>)
 8002120:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	899b      	ldrh	r3, [r3, #12]
 800212a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff f899 	bl	800126c <bmp2_get_status>
 800213a:	4603      	mov	r3, r0
 800213c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002140:	f107 0308 	add.w	r3, r7, #8
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff f8d1 	bl	80012ee <bmp2_get_sensor_data>
 800214c:	4603      	mov	r3, r0
 800214e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    temp = comp_data.temperature;
 8002152:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002156:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 800215a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002168:	7f3b      	ldrb	r3, [r7, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <BMP2_ReadTemperature_degC+0x6a>
 800216e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002172:	2b00      	cmp	r3, #0
 8002174:	dcdb      	bgt.n	800212e <BMP2_ReadTemperature_degC+0x22>

  /* Save reading result in sensor handler */
  BMP2_GET_TEMP(dev) = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685c      	ldr	r4, [r3, #4]
 800217a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800217e:	f7fe fd35 	bl	8000bec <__aeabi_d2f>
 8002182:	4603      	mov	r3, r0
 8002184:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800218e:	729a      	strb	r2, [r3, #10]

  return temp;
 8002190:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002194:	ec43 2b17 	vmov	d7, r2, r3
}
 8002198:	eeb0 0a47 	vmov.f32	s0, s14
 800219c:	eef0 0a67 	vmov.f32	s1, s15
 80021a0:	3734      	adds	r7, #52	; 0x34
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	7ff80000 	.word	0x7ff80000

080021ac <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08c      	sub	sp, #48	; 0x30
 80021b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
 80021c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021c2:	4b86      	ldr	r3, [pc, #536]	; (80023dc <MX_GPIO_Init+0x230>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a85      	ldr	r2, [pc, #532]	; (80023dc <MX_GPIO_Init+0x230>)
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b83      	ldr	r3, [pc, #524]	; (80023dc <MX_GPIO_Init+0x230>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021da:	4b80      	ldr	r3, [pc, #512]	; (80023dc <MX_GPIO_Init+0x230>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a7f      	ldr	r2, [pc, #508]	; (80023dc <MX_GPIO_Init+0x230>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b7d      	ldr	r3, [pc, #500]	; (80023dc <MX_GPIO_Init+0x230>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021f2:	4b7a      	ldr	r3, [pc, #488]	; (80023dc <MX_GPIO_Init+0x230>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a79      	ldr	r2, [pc, #484]	; (80023dc <MX_GPIO_Init+0x230>)
 80021f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b77      	ldr	r3, [pc, #476]	; (80023dc <MX_GPIO_Init+0x230>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	4b74      	ldr	r3, [pc, #464]	; (80023dc <MX_GPIO_Init+0x230>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a73      	ldr	r2, [pc, #460]	; (80023dc <MX_GPIO_Init+0x230>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b71      	ldr	r3, [pc, #452]	; (80023dc <MX_GPIO_Init+0x230>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	4b6e      	ldr	r3, [pc, #440]	; (80023dc <MX_GPIO_Init+0x230>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a6d      	ldr	r2, [pc, #436]	; (80023dc <MX_GPIO_Init+0x230>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <MX_GPIO_Init+0x230>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800223a:	4b68      	ldr	r3, [pc, #416]	; (80023dc <MX_GPIO_Init+0x230>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a67      	ldr	r2, [pc, #412]	; (80023dc <MX_GPIO_Init+0x230>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b65      	ldr	r3, [pc, #404]	; (80023dc <MX_GPIO_Init+0x230>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002252:	4b62      	ldr	r3, [pc, #392]	; (80023dc <MX_GPIO_Init+0x230>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a61      	ldr	r2, [pc, #388]	; (80023dc <MX_GPIO_Init+0x230>)
 8002258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b5f      	ldr	r3, [pc, #380]	; (80023dc <MX_GPIO_Init+0x230>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	2110      	movs	r1, #16
 800226e:	485c      	ldr	r0, [pc, #368]	; (80023e0 <MX_GPIO_Init+0x234>)
 8002270:	f001 fa0a 	bl	8003688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	f244 0181 	movw	r1, #16513	; 0x4081
 800227a:	485a      	ldr	r0, [pc, #360]	; (80023e4 <MX_GPIO_Init+0x238>)
 800227c:	f001 fa04 	bl	8003688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002280:	2200      	movs	r2, #0
 8002282:	2140      	movs	r1, #64	; 0x40
 8002284:	4858      	ldr	r0, [pc, #352]	; (80023e8 <MX_GPIO_Init+0x23c>)
 8002286:	f001 f9ff 	bl	8003688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800228a:	2310      	movs	r3, #16
 800228c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228e:	2301      	movs	r3, #1
 8002290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 031c 	add.w	r3, r7, #28
 800229e:	4619      	mov	r1, r3
 80022a0:	484f      	ldr	r0, [pc, #316]	; (80023e0 <MX_GPIO_Init+0x234>)
 80022a2:	f001 f845 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80022a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	4619      	mov	r1, r3
 80022bc:	484b      	ldr	r0, [pc, #300]	; (80023ec <MX_GPIO_Init+0x240>)
 80022be:	f001 f837 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80022c2:	2332      	movs	r3, #50	; 0x32
 80022c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022d2:	230b      	movs	r3, #11
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	4843      	ldr	r0, [pc, #268]	; (80023ec <MX_GPIO_Init+0x240>)
 80022de:	f001 f827 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80022e2:	2386      	movs	r3, #134	; 0x86
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ee:	2303      	movs	r3, #3
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022f2:	230b      	movs	r3, #11
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 031c 	add.w	r3, r7, #28
 80022fa:	4619      	mov	r1, r3
 80022fc:	483c      	ldr	r0, [pc, #240]	; (80023f0 <MX_GPIO_Init+0x244>)
 80022fe:	f001 f817 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002302:	f244 0381 	movw	r3, #16513	; 0x4081
 8002306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	2301      	movs	r3, #1
 800230a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4619      	mov	r1, r3
 800231a:	4832      	ldr	r0, [pc, #200]	; (80023e4 <MX_GPIO_Init+0x238>)
 800231c:	f001 f808 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002332:	230b      	movs	r3, #11
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	4619      	mov	r1, r3
 800233c:	4829      	ldr	r0, [pc, #164]	; (80023e4 <MX_GPIO_Init+0x238>)
 800233e:	f000 fff7 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002342:	2340      	movs	r3, #64	; 0x40
 8002344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002346:	2301      	movs	r3, #1
 8002348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	4823      	ldr	r0, [pc, #140]	; (80023e8 <MX_GPIO_Init+0x23c>)
 800235a:	f000 ffe9 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	4619      	mov	r1, r3
 8002370:	481d      	ldr	r0, [pc, #116]	; (80023e8 <MX_GPIO_Init+0x23c>)
 8002372:	f000 ffdd 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002376:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800237a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002388:	230a      	movs	r3, #10
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	4619      	mov	r1, r3
 8002392:	4817      	ldr	r0, [pc, #92]	; (80023f0 <MX_GPIO_Init+0x244>)
 8002394:	f000 ffcc 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800239c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	4810      	ldr	r0, [pc, #64]	; (80023f0 <MX_GPIO_Init+0x244>)
 80023ae:	f000 ffbf 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80023b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80023b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c0:	2303      	movs	r3, #3
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023c4:	230b      	movs	r3, #11
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	4806      	ldr	r0, [pc, #24]	; (80023e8 <MX_GPIO_Init+0x23c>)
 80023d0:	f000 ffae 	bl	8003330 <HAL_GPIO_Init>

}
 80023d4:	bf00      	nop
 80023d6:	3730      	adds	r7, #48	; 0x30
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40020400 	.word	0x40020400
 80023e8:	40021800 	.word	0x40021800
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40020000 	.word	0x40020000

080023f4 <HAL_TIM_PeriodElapsedCallback>:

float PWMValue = 0;
float error = 0;
char message[] = "%d, %d, %d\r\n";
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f4:	b5b0      	push	{r4, r5, r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	6078      	str	r0, [r7, #4]
  if(htim==&htim2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a63      	ldr	r2, [pc, #396]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002400:	4293      	cmp	r3, r2
 8002402:	f040 80be 	bne.w	8002582 <HAL_TIM_PeriodElapsedCallback+0x18e>
  {
//	  preassure = BMP2_ReadPressure_hPa(&bmp2dev_1);
	  temp = BMP2_ReadTemperature_degC(&bmp2dev_1);
 8002406:	4862      	ldr	r0, [pc, #392]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002408:	f7ff fe80 	bl	800210c <BMP2_ReadTemperature_degC>
 800240c:	ec53 2b10 	vmov	r2, r3, d0
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fbea 	bl	8000bec <__aeabi_d2f>
 8002418:	4603      	mov	r3, r0
 800241a:	4a5e      	ldr	r2, [pc, #376]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800241c:	6013      	str	r3, [r2, #0]
	  newTemp = (int)(temp*1000);
 800241e:	4b5d      	ldr	r3, [pc, #372]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002598 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8002428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002430:	ee17 2a90 	vmov	r2, s15
 8002434:	4b59      	ldr	r3, [pc, #356]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002436:	601a      	str	r2, [r3, #0]
	  error = set_point - temp;
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800243a:	ed93 7a00 	vldr	s14, [r3]
 800243e:	4b55      	ldr	r3, [pc, #340]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002448:	4b56      	ldr	r3, [pc, #344]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800244a:	edc3 7a00 	vstr	s15, [r3]
	  I += error+prev_error;
 800244e:	4b55      	ldr	r3, [pc, #340]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	4b54      	ldr	r3, [pc, #336]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245e:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002468:	4b50      	ldr	r3, [pc, #320]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800246a:	edc3 7a00 	vstr	s15, [r3]
	  pwm_i = I*ki*(dt/2.0);
 800246e:	4b4f      	ldr	r3, [pc, #316]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002470:	ed93 7a00 	vldr	s14, [r3]
 8002474:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247e:	ee17 0a90 	vmov	r0, s15
 8002482:	f7fe f879 	bl	8000578 <__aeabi_f2d>
 8002486:	4604      	mov	r4, r0
 8002488:	460d      	mov	r5, r1
 800248a:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f872 	bl	8000578 <__aeabi_f2d>
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800249c:	f7fe f9ee 	bl	800087c <__aeabi_ddiv>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4620      	mov	r0, r4
 80024a6:	4629      	mov	r1, r5
 80024a8:	f7fe f8be 	bl	8000628 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	f7fe fb9a 	bl	8000bec <__aeabi_d2f>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4a3f      	ldr	r2, [pc, #252]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80024bc:	6013      	str	r3, [r2, #0]
	  prev_error = error;
 80024be:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a39      	ldr	r2, [pc, #228]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80024c4:	6013      	str	r3, [r2, #0]
	  pwm_p = kp*error;
 80024c6:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80024c8:	ed93 7a00 	vldr	s14, [r3]
 80024cc:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d6:	4b3a      	ldr	r3, [pc, #232]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80024d8:	edc3 7a00 	vstr	s15, [r3]
	  PWMValue = 100*(pwm_p + pwm_i);
 80024dc:	4b38      	ldr	r3, [pc, #224]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80024de:	ed93 7a00 	vldr	s14, [r3]
 80024e2:	4b35      	ldr	r3, [pc, #212]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ec:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80025c4 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 80024f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f4:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80024f6:	edc3 7a00 	vstr	s15, [r3]
	  if (PWMValue > 999) {
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80025cc <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8002504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	dd02      	ble.n	8002514 <HAL_TIM_PeriodElapsedCallback+0x120>
		  PWMValue = 1000;
 800250e:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002510:	4a2f      	ldr	r2, [pc, #188]	; (80025d0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002512:	601a      	str	r2, [r3, #0]
	  }
	  if(PWMValue < 0){
 8002514:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	d503      	bpl.n	800252c <HAL_TIM_PeriodElapsedCallback+0x138>
		  PWMValue = 0;
 8002524:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWMValue);
 800252c:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002536:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	ee17 2a90 	vmov	r2, s15
 800253e:	635a      	str	r2, [r3, #52]	; 0x34
	  int daneD=sprintf(&dane,&message,newTemp, (int)PWMValue, (int)(error*1000));
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002546:	edd3 7a00 	vldr	s15, [r3]
 800254a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002598 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8002558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002560:	ee17 3a90 	vmov	r3, s15
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	ee16 3a90 	vmov	r3, s13
 800256a:	491b      	ldr	r1, [pc, #108]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800256c:	481b      	ldr	r0, [pc, #108]	; (80025dc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800256e:	f006 fe35 	bl	80091dc <siprintf>
 8002572:	60f8      	str	r0, [r7, #12]
	  HAL_UART_Transmit_IT(&huart3,(uint8_t*)dane , daneD);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	b29b      	uxth	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	4918      	ldr	r1, [pc, #96]	; (80025dc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800257c:	4818      	ldr	r0, [pc, #96]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800257e:	f004 fc2b 	bl	8006dd8 <HAL_UART_Transmit_IT>
  }
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bdb0      	pop	{r4, r5, r7, pc}
 800258a:	bf00      	nop
 800258c:	20000370 	.word	0x20000370
 8002590:	20000018 	.word	0x20000018
 8002594:	20000264 	.word	0x20000264
 8002598:	447a0000 	.word	0x447a0000
 800259c:	20000268 	.word	0x20000268
 80025a0:	20000054 	.word	0x20000054
 80025a4:	200002f0 	.word	0x200002f0
 80025a8:	200002f4 	.word	0x200002f4
 80025ac:	200002ec 	.word	0x200002ec
 80025b0:	2000005c 	.word	0x2000005c
 80025b4:	20000060 	.word	0x20000060
 80025b8:	200002f8 	.word	0x200002f8
 80025bc:	20000058 	.word	0x20000058
 80025c0:	200002fc 	.word	0x200002fc
 80025c4:	42c80000 	.word	0x42c80000
 80025c8:	20000300 	.word	0x20000300
 80025cc:	4479c000 	.word	0x4479c000
 80025d0:	447a0000 	.word	0x447a0000
 80025d4:	200003bc 	.word	0x200003bc
 80025d8:	20000064 	.word	0x20000064
 80025dc:	2000026c 	.word	0x2000026c
 80025e0:	20000408 	.word	0x20000408

080025e4 <HAL_UART_RxCpltCallback>:

//unsigned char PWM[6];
float testValue = 0.0;
uint8_t userSettings[4];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
//    duty = strtol((unsigned char*)&PWM[3], NULL, 10);
//    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty*10);
	set_point = atof((char *)userSettings);
 80025ec:	480a      	ldr	r0, [pc, #40]	; (8002618 <HAL_UART_RxCpltCallback+0x34>)
 80025ee:	f005 ff16 	bl	800841e <atof>
 80025f2:	ec53 2b10 	vmov	r2, r3, d0
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f7fe faf7 	bl	8000bec <__aeabi_d2f>
 80025fe:	4603      	mov	r3, r0
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <HAL_UART_RxCpltCallback+0x38>)
 8002602:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart3,&userSettings ,4);
 8002604:	2204      	movs	r2, #4
 8002606:	4904      	ldr	r1, [pc, #16]	; (8002618 <HAL_UART_RxCpltCallback+0x34>)
 8002608:	4805      	ldr	r0, [pc, #20]	; (8002620 <HAL_UART_RxCpltCallback+0x3c>)
 800260a:	f004 fc43 	bl	8006e94 <HAL_UART_Receive_IT>

}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000304 	.word	0x20000304
 800261c:	20000054 	.word	0x20000054
 8002620:	20000408 	.word	0x20000408

08002624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002628:	f000 fc5d 	bl	8002ee6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800262c:	f000 f824 	bl	8002678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002630:	f7ff fdbc 	bl	80021ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002634:	f000 fb96 	bl	8002d64 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8002638:	f000 f892 	bl	8002760 <MX_SPI4_Init>
  MX_TIM2_Init();
 800263c:	f000 fa68 	bl	8002b10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002640:	f000 fab4 	bl	8002bac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev_1);
 8002644:	4807      	ldr	r0, [pc, #28]	; (8002664 <main+0x40>)
 8002646:	f7ff fc95 	bl	8001f74 <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800264a:	4807      	ldr	r0, [pc, #28]	; (8002668 <main+0x44>)
 800264c:	f003 fa1c 	bl	8005a88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002650:	2100      	movs	r1, #0
 8002652:	4806      	ldr	r0, [pc, #24]	; (800266c <main+0x48>)
 8002654:	f003 fae8 	bl	8005c28 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3,&userSettings,4);
 8002658:	2204      	movs	r2, #4
 800265a:	4905      	ldr	r1, [pc, #20]	; (8002670 <main+0x4c>)
 800265c:	4805      	ldr	r0, [pc, #20]	; (8002674 <main+0x50>)
 800265e:	f004 fc19 	bl	8006e94 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002662:	e7fe      	b.n	8002662 <main+0x3e>
 8002664:	20000018 	.word	0x20000018
 8002668:	20000370 	.word	0x20000370
 800266c:	200003bc 	.word	0x200003bc
 8002670:	20000304 	.word	0x20000304
 8002674:	20000408 	.word	0x20000408

08002678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b094      	sub	sp, #80	; 0x50
 800267c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800267e:	f107 0320 	add.w	r3, r7, #32
 8002682:	2230      	movs	r2, #48	; 0x30
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f006 fe0b 	bl	80092a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800269c:	f001 f80e 	bl	80036bc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	4b2a      	ldr	r3, [pc, #168]	; (800274c <SystemClock_Config+0xd4>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	4a29      	ldr	r2, [pc, #164]	; (800274c <SystemClock_Config+0xd4>)
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6413      	str	r3, [r2, #64]	; 0x40
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <SystemClock_Config+0xd4>)
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <SystemClock_Config+0xd8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a24      	ldr	r2, [pc, #144]	; (8002750 <SystemClock_Config+0xd8>)
 80026be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <SystemClock_Config+0xd8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026d0:	2301      	movs	r3, #1
 80026d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026da:	2302      	movs	r3, #2
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026e4:	2304      	movs	r3, #4
 80026e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80026e8:	23d8      	movs	r3, #216	; 0xd8
 80026ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026ec:	2302      	movs	r3, #2
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80026f0:	2303      	movs	r3, #3
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026f4:	f107 0320 	add.w	r3, r7, #32
 80026f8:	4618      	mov	r0, r3
 80026fa:	f001 f83f 	bl	800377c <HAL_RCC_OscConfig>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002704:	f000 f826 	bl	8002754 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002708:	f000 ffe8 	bl	80036dc <HAL_PWREx_EnableOverDrive>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002712:	f000 f81f 	bl	8002754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002716:	230f      	movs	r3, #15
 8002718:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800271a:	2302      	movs	r3, #2
 800271c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002722:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800272c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	2107      	movs	r1, #7
 8002734:	4618      	mov	r0, r3
 8002736:	f001 fac5 	bl	8003cc4 <HAL_RCC_ClockConfig>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002740:	f000 f808 	bl	8002754 <Error_Handler>
  }
}
 8002744:	bf00      	nop
 8002746:	3750      	adds	r7, #80	; 0x50
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	40007000 	.word	0x40007000

08002754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002758:	b672      	cpsid	i
}
 800275a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800275c:	e7fe      	b.n	800275c <Error_Handler+0x8>
	...

08002760 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <MX_SPI4_Init+0x74>)
 8002766:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <MX_SPI4_Init+0x78>)
 8002768:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800276a:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <MX_SPI4_Init+0x74>)
 800276c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002770:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002772:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <MX_SPI4_Init+0x74>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <MX_SPI4_Init+0x74>)
 800277a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800277e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <MX_SPI4_Init+0x74>)
 8002782:	2202      	movs	r2, #2
 8002784:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <MX_SPI4_Init+0x74>)
 8002788:	2201      	movs	r2, #1
 800278a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <MX_SPI4_Init+0x74>)
 800278e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002792:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002794:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <MX_SPI4_Init+0x74>)
 8002796:	2210      	movs	r2, #16
 8002798:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <MX_SPI4_Init+0x74>)
 800279c:	2200      	movs	r2, #0
 800279e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <MX_SPI4_Init+0x74>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <MX_SPI4_Init+0x74>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <MX_SPI4_Init+0x74>)
 80027ae:	2207      	movs	r2, #7
 80027b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <MX_SPI4_Init+0x74>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <MX_SPI4_Init+0x74>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80027be:	4805      	ldr	r0, [pc, #20]	; (80027d4 <MX_SPI4_Init+0x74>)
 80027c0:	f002 f896 	bl	80048f0 <HAL_SPI_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80027ca:	f7ff ffc3 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000308 	.word	0x20000308
 80027d8:	40013400 	.word	0x40013400

080027dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_SPI_MspInit+0x8c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d12f      	bne.n	800285e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80027fe:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_SPI_MspInit+0x90>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a1a      	ldr	r2, [pc, #104]	; (800286c <HAL_SPI_MspInit+0x90>)
 8002804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_SPI_MspInit+0x90>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_SPI_MspInit+0x90>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_SPI_MspInit+0x90>)
 800281c:	f043 0310 	orr.w	r3, r3, #16
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_SPI_MspInit+0x90>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800282e:	2364      	movs	r3, #100	; 0x64
 8002830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800283e:	2305      	movs	r3, #5
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	4619      	mov	r1, r3
 8002848:	4809      	ldr	r0, [pc, #36]	; (8002870 <HAL_SPI_MspInit+0x94>)
 800284a:	f000 fd71 	bl	8003330 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	2054      	movs	r0, #84	; 0x54
 8002854:	f000 fca3 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002858:	2054      	movs	r0, #84	; 0x54
 800285a:	f000 fcbc 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800285e:	bf00      	nop
 8002860:	3728      	adds	r7, #40	; 0x28
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40013400 	.word	0x40013400
 800286c:	40023800 	.word	0x40023800
 8002870:	40021000 	.word	0x40021000

08002874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_MspInit+0x44>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_MspInit+0x44>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_MspInit+0x44>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_MspInit+0x44>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <HAL_MspInit+0x44>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_MspInit+0x44>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <NMI_Handler+0x4>

080028c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <HardFault_Handler+0x4>

080028c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <MemManage_Handler+0x4>

080028ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <BusFault_Handler+0x4>

080028d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <UsageFault_Handler+0x4>

080028da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002908:	f000 fb2a 	bl	8002f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}

08002910 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002914:	4802      	ldr	r0, [pc, #8]	; (8002920 <TIM2_IRQHandler+0x10>)
 8002916:	f003 fa81 	bl	8005e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000370 	.word	0x20000370

08002924 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <TIM3_IRQHandler+0x10>)
 800292a:	f003 fa77 	bl	8005e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200003bc 	.word	0x200003bc

08002938 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <USART3_IRQHandler+0x10>)
 800293e:	f004 faed 	bl	8006f1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000408 	.word	0x20000408

0800294c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002950:	4802      	ldr	r0, [pc, #8]	; (800295c <SPI4_IRQHandler+0x10>)
 8002952:	f002 fd29 	bl	80053a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000308 	.word	0x20000308

08002960 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return 1;
 8002964:	2301      	movs	r3, #1
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <_kill>:

int _kill(int pid, int sig)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800297a:	f006 fcf3 	bl	8009364 <__errno>
 800297e:	4603      	mov	r3, r0
 8002980:	2216      	movs	r2, #22
 8002982:	601a      	str	r2, [r3, #0]
  return -1;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_exit>:

void _exit (int status)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ffe7 	bl	8002970 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029a2:	e7fe      	b.n	80029a2 <_exit+0x12>

080029a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e00a      	b.n	80029cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029b6:	f3af 8000 	nop.w
 80029ba:	4601      	mov	r1, r0
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	60ba      	str	r2, [r7, #8]
 80029c2:	b2ca      	uxtb	r2, r1
 80029c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3301      	adds	r3, #1
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	dbf0      	blt.n	80029b6 <_read+0x12>
  }

  return len;
 80029d4:	687b      	ldr	r3, [r7, #4]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	e009      	b.n	8002a04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	60ba      	str	r2, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3301      	adds	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	dbf1      	blt.n	80029f0 <_write+0x12>
  }
  return len;
 8002a0c:	687b      	ldr	r3, [r7, #4]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_close>:

int _close(int file)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a3e:	605a      	str	r2, [r3, #4]
  return 0;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <_isatty>:

int _isatty(int file)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a88:	4a14      	ldr	r2, [pc, #80]	; (8002adc <_sbrk+0x5c>)
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <_sbrk+0x60>)
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <_sbrk+0x64>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d102      	bne.n	8002aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <_sbrk+0x64>)
 8002a9e:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <_sbrk+0x68>)
 8002aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <_sbrk+0x64>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d207      	bcs.n	8002ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ab0:	f006 fc58 	bl	8009364 <__errno>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	e009      	b.n	8002ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <_sbrk+0x64>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ac6:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <_sbrk+0x64>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	4a05      	ldr	r2, [pc, #20]	; (8002ae4 <_sbrk+0x64>)
 8002ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20050000 	.word	0x20050000
 8002ae0:	00000400 	.word	0x00000400
 8002ae4:	2000036c 	.word	0x2000036c
 8002ae8:	200005e0 	.word	0x200005e0

08002aec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <SystemInit+0x20>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <SystemInit+0x20>)
 8002af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b16:	f107 0310 	add.w	r3, r7, #16
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <MX_TIM2_Init+0x94>)
 8002b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <MX_TIM2_Init+0x94>)
 8002b38:	226b      	movs	r2, #107	; 0x6b
 8002b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <MX_TIM2_Init+0x94>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8002b42:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <MX_TIM2_Init+0x94>)
 8002b44:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <MX_TIM2_Init+0x98>)
 8002b46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <MX_TIM2_Init+0x94>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <MX_TIM2_Init+0x94>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b54:	4813      	ldr	r0, [pc, #76]	; (8002ba4 <MX_TIM2_Init+0x94>)
 8002b56:	f002 ff3f 	bl	80059d8 <HAL_TIM_Base_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b60:	f7ff fdf8 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b6a:	f107 0310 	add.w	r3, r7, #16
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480c      	ldr	r0, [pc, #48]	; (8002ba4 <MX_TIM2_Init+0x94>)
 8002b72:	f003 fb87 	bl	8006284 <HAL_TIM_ConfigClockSource>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002b7c:	f7ff fdea 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b80:	2300      	movs	r3, #0
 8002b82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <MX_TIM2_Init+0x94>)
 8002b8e:	f004 f829 	bl	8006be4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002b98:	f7ff fddc 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	3720      	adds	r7, #32
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000370 	.word	0x20000370
 8002ba8:	0001869f 	.word	0x0001869f

08002bac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb2:	f107 031c 	add.w	r3, r7, #28
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
 8002bcc:	615a      	str	r2, [r3, #20]
 8002bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bd0:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <MX_TIM3_Init+0xac>)
 8002bd2:	4a22      	ldr	r2, [pc, #136]	; (8002c5c <MX_TIM3_Init+0xb0>)
 8002bd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8002bd6:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <MX_TIM3_Init+0xac>)
 8002bd8:	226b      	movs	r2, #107	; 0x6b
 8002bda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <MX_TIM3_Init+0xac>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <MX_TIM3_Init+0xac>)
 8002be4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002be8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bea:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <MX_TIM3_Init+0xac>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <MX_TIM3_Init+0xac>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bf6:	4818      	ldr	r0, [pc, #96]	; (8002c58 <MX_TIM3_Init+0xac>)
 8002bf8:	f002 ffbe 	bl	8005b78 <HAL_TIM_PWM_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002c02:	f7ff fda7 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c0e:	f107 031c 	add.w	r3, r7, #28
 8002c12:	4619      	mov	r1, r3
 8002c14:	4810      	ldr	r0, [pc, #64]	; (8002c58 <MX_TIM3_Init+0xac>)
 8002c16:	f003 ffe5 	bl	8006be4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002c20:	f7ff fd98 	bl	8002754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c24:	2360      	movs	r3, #96	; 0x60
 8002c26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c34:	463b      	mov	r3, r7
 8002c36:	2200      	movs	r2, #0
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4807      	ldr	r0, [pc, #28]	; (8002c58 <MX_TIM3_Init+0xac>)
 8002c3c:	f003 fa0e 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002c46:	f7ff fd85 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c4a:	4803      	ldr	r0, [pc, #12]	; (8002c58 <MX_TIM3_Init+0xac>)
 8002c4c:	f000 f852 	bl	8002cf4 <HAL_TIM_MspPostInit>

}
 8002c50:	bf00      	nop
 8002c52:	3728      	adds	r7, #40	; 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	200003bc 	.word	0x200003bc
 8002c5c:	40000400 	.word	0x40000400

08002c60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c70:	d113      	bne.n	8002c9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c72:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_TIM_Base_MspInit+0x44>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a0b      	ldr	r2, [pc, #44]	; (8002ca4 <HAL_TIM_Base_MspInit+0x44>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_TIM_Base_MspInit+0x44>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	201c      	movs	r0, #28
 8002c90:	f000 fa85 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c94:	201c      	movs	r0, #28
 8002c96:	f000 fa9e 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800

08002ca8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <HAL_TIM_PWM_MspInit+0x44>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d113      	bne.n	8002ce2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_TIM_PWM_MspInit+0x48>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <HAL_TIM_PWM_MspInit+0x48>)
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_TIM_PWM_MspInit+0x48>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	201d      	movs	r0, #29
 8002cd8:	f000 fa61 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cdc:	201d      	movs	r0, #29
 8002cde:	f000 fa7a 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <HAL_TIM_MspPostInit+0x64>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d11b      	bne.n	8002d4e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <HAL_TIM_MspPostInit+0x68>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <HAL_TIM_MspPostInit+0x68>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6313      	str	r3, [r2, #48]	; 0x30
 8002d22:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <HAL_TIM_MspPostInit+0x68>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	2302      	movs	r3, #2
 8002d34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d42:	f107 030c 	add.w	r3, r7, #12
 8002d46:	4619      	mov	r1, r3
 8002d48:	4805      	ldr	r0, [pc, #20]	; (8002d60 <HAL_TIM_MspPostInit+0x6c>)
 8002d4a:	f000 faf1 	bl	8003330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d4e:	bf00      	nop
 8002d50:	3720      	adds	r7, #32
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020000 	.word	0x40020000

08002d64 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <MX_USART3_UART_Init+0x58>)
 8002d6a:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <MX_USART3_UART_Init+0x5c>)
 8002d6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <MX_USART3_UART_Init+0x58>)
 8002d70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <MX_USART3_UART_Init+0x58>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <MX_USART3_UART_Init+0x58>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <MX_USART3_UART_Init+0x58>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <MX_USART3_UART_Init+0x58>)
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <MX_USART3_UART_Init+0x58>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <MX_USART3_UART_Init+0x58>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <MX_USART3_UART_Init+0x58>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <MX_USART3_UART_Init+0x58>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002da6:	4805      	ldr	r0, [pc, #20]	; (8002dbc <MX_USART3_UART_Init+0x58>)
 8002da8:	f003 ffc8 	bl	8006d3c <HAL_UART_Init>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002db2:	f7ff fccf 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000408 	.word	0x20000408
 8002dc0:	40004800 	.word	0x40004800

08002dc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b0aa      	sub	sp, #168	; 0xa8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ddc:	f107 0310 	add.w	r3, r7, #16
 8002de0:	2284      	movs	r2, #132	; 0x84
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f006 fa5c 	bl	80092a2 <memset>
  if(uartHandle->Instance==USART3)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a26      	ldr	r2, [pc, #152]	; (8002e88 <HAL_UART_MspInit+0xc4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d144      	bne.n	8002e7e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dfe:	f107 0310 	add.w	r3, r7, #16
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 f984 	bl	8004110 <HAL_RCCEx_PeriphCLKConfig>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e0e:	f7ff fca1 	bl	8002754 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_UART_MspInit+0xc8>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <HAL_UART_MspInit+0xc8>)
 8002e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1e:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_UART_MspInit+0xc8>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e2a:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <HAL_UART_MspInit+0xc8>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <HAL_UART_MspInit+0xc8>)
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_UART_MspInit+0xc8>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e5c:	2307      	movs	r3, #7
 8002e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e62:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e66:	4619      	mov	r1, r3
 8002e68:	4809      	ldr	r0, [pc, #36]	; (8002e90 <HAL_UART_MspInit+0xcc>)
 8002e6a:	f000 fa61 	bl	8003330 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2100      	movs	r1, #0
 8002e72:	2027      	movs	r0, #39	; 0x27
 8002e74:	f000 f993 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e78:	2027      	movs	r0, #39	; 0x27
 8002e7a:	f000 f9ac 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e7e:	bf00      	nop
 8002e80:	37a8      	adds	r7, #168	; 0xa8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40004800 	.word	0x40004800
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40020c00 	.word	0x40020c00

08002e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ecc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e98:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e9a:	490e      	ldr	r1, [pc, #56]	; (8002ed4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ed8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea0:	e002      	b.n	8002ea8 <LoopCopyDataInit>

08002ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea6:	3304      	adds	r3, #4

08002ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eac:	d3f9      	bcc.n	8002ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eae:	4a0b      	ldr	r2, [pc, #44]	; (8002edc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002eb0:	4c0b      	ldr	r4, [pc, #44]	; (8002ee0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb4:	e001      	b.n	8002eba <LoopFillZerobss>

08002eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb8:	3204      	adds	r2, #4

08002eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ebc:	d3fb      	bcc.n	8002eb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ebe:	f7ff fe15 	bl	8002aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ec2:	f006 fa55 	bl	8009370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ec6:	f7ff fbad 	bl	8002624 <main>
  bx  lr    
 8002eca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ecc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed4:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8002ed8:	0800b83c 	.word	0x0800b83c
  ldr r2, =_sbss
 8002edc:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8002ee0:	200005e0 	.word	0x200005e0

08002ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ee4:	e7fe      	b.n	8002ee4 <ADC_IRQHandler>

08002ee6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eea:	2003      	movs	r0, #3
 8002eec:	f000 f94c 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f000 f805 	bl	8002f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef6:	f7ff fcbd 	bl	8002874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f08:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_InitTick+0x54>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_InitTick+0x58>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f967 	bl	80031f2 <HAL_SYSTICK_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00e      	b.n	8002f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d80a      	bhi.n	8002f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f34:	2200      	movs	r2, #0
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	f000 f92f 	bl	800319e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <HAL_InitTick+0x5c>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000074 	.word	0x20000074
 8002f58:	2000007c 	.word	0x2000007c
 8002f5c:	20000078 	.word	0x20000078

08002f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_IncTick+0x20>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_IncTick+0x24>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_IncTick+0x24>)
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	2000007c 	.word	0x2000007c
 8002f84:	20000490 	.word	0x20000490

08002f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <HAL_GetTick+0x14>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	20000490 	.word	0x20000490

08002fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7ff ffee 	bl	8002f88 <HAL_GetTick>
 8002fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d005      	beq.n	8002fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_Delay+0x44>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fc6:	bf00      	nop
 8002fc8:	f7ff ffde 	bl	8002f88 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d8f7      	bhi.n	8002fc8 <HAL_Delay+0x28>
  {
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000007c 	.word	0x2000007c

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <__NVIC_SetPriorityGrouping+0x40>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8003012:	4313      	orrs	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	; (8003028 <__NVIC_SetPriorityGrouping+0x40>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00
 800302c:	05fa0000 	.word	0x05fa0000

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	; (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003154:	d301      	bcc.n	800315a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003156:	2301      	movs	r3, #1
 8003158:	e00f      	b.n	800317a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <SysTick_Config+0x40>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003162:	210f      	movs	r1, #15
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	f7ff ff8e 	bl	8003088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <SysTick_Config+0x40>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <SysTick_Config+0x40>)
 8003174:	2207      	movs	r2, #7
 8003176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000e010 	.word	0xe000e010

08003188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff29 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b0:	f7ff ff3e 	bl	8003030 <__NVIC_GetPriorityGrouping>
 80031b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff ff8e 	bl	80030dc <NVIC_EncodePriority>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5d 	bl	8003088 <__NVIC_SetPriority>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff31 	bl	800304c <__NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffa2 	bl	8003144 <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff feb6 	bl	8002f88 <HAL_GetTick>
 800321c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d008      	beq.n	800323c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2280      	movs	r2, #128	; 0x80
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e052      	b.n	80032e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0216 	bic.w	r2, r2, #22
 800324a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800325a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d103      	bne.n	800326c <HAL_DMA_Abort+0x62>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0208 	bic.w	r2, r2, #8
 800327a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328c:	e013      	b.n	80032b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800328e:	f7ff fe7b 	bl	8002f88 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b05      	cmp	r3, #5
 800329a:	d90c      	bls.n	80032b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2203      	movs	r2, #3
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e015      	b.n	80032e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e4      	bne.n	800328e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	223f      	movs	r2, #63	; 0x3f
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d004      	beq.n	8003308 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2280      	movs	r2, #128	; 0x80
 8003302:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e00c      	b.n	8003322 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2205      	movs	r2, #5
 800330c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	e175      	b.n	800363c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003350:	2201      	movs	r2, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	429a      	cmp	r2, r3
 800336a:	f040 8164 	bne.w	8003636 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d005      	beq.n	8003386 <HAL_GPIO_Init+0x56>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d130      	bne.n	80033e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	2203      	movs	r2, #3
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033bc:	2201      	movs	r2, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 0201 	and.w	r2, r3, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d017      	beq.n	8003424 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d123      	bne.n	8003478 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	08da      	lsrs	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3208      	adds	r2, #8
 8003438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	08da      	lsrs	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3208      	adds	r2, #8
 8003472:	69b9      	ldr	r1, [r7, #24]
 8003474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0203 	and.w	r2, r3, #3
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80be 	beq.w	8003636 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ba:	4b66      	ldr	r3, [pc, #408]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	4a65      	ldr	r2, [pc, #404]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c4:	6453      	str	r3, [r2, #68]	; 0x44
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034d2:	4a61      	ldr	r2, [pc, #388]	; (8003658 <HAL_GPIO_Init+0x328>)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3302      	adds	r3, #2
 80034da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	220f      	movs	r2, #15
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a58      	ldr	r2, [pc, #352]	; (800365c <HAL_GPIO_Init+0x32c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d037      	beq.n	800356e <HAL_GPIO_Init+0x23e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a57      	ldr	r2, [pc, #348]	; (8003660 <HAL_GPIO_Init+0x330>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d031      	beq.n	800356a <HAL_GPIO_Init+0x23a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a56      	ldr	r2, [pc, #344]	; (8003664 <HAL_GPIO_Init+0x334>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d02b      	beq.n	8003566 <HAL_GPIO_Init+0x236>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a55      	ldr	r2, [pc, #340]	; (8003668 <HAL_GPIO_Init+0x338>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d025      	beq.n	8003562 <HAL_GPIO_Init+0x232>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a54      	ldr	r2, [pc, #336]	; (800366c <HAL_GPIO_Init+0x33c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01f      	beq.n	800355e <HAL_GPIO_Init+0x22e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a53      	ldr	r2, [pc, #332]	; (8003670 <HAL_GPIO_Init+0x340>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d019      	beq.n	800355a <HAL_GPIO_Init+0x22a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_GPIO_Init+0x344>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_GPIO_Init+0x226>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a51      	ldr	r2, [pc, #324]	; (8003678 <HAL_GPIO_Init+0x348>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00d      	beq.n	8003552 <HAL_GPIO_Init+0x222>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a50      	ldr	r2, [pc, #320]	; (800367c <HAL_GPIO_Init+0x34c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <HAL_GPIO_Init+0x21e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4f      	ldr	r2, [pc, #316]	; (8003680 <HAL_GPIO_Init+0x350>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_GPIO_Init+0x21a>
 8003546:	2309      	movs	r3, #9
 8003548:	e012      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800354a:	230a      	movs	r3, #10
 800354c:	e010      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800354e:	2308      	movs	r3, #8
 8003550:	e00e      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003552:	2307      	movs	r3, #7
 8003554:	e00c      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003556:	2306      	movs	r3, #6
 8003558:	e00a      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800355a:	2305      	movs	r3, #5
 800355c:	e008      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800355e:	2304      	movs	r3, #4
 8003560:	e006      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003562:	2303      	movs	r3, #3
 8003564:	e004      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003566:	2302      	movs	r3, #2
 8003568:	e002      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800356e:	2300      	movs	r3, #0
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	f002 0203 	and.w	r2, r2, #3
 8003576:	0092      	lsls	r2, r2, #2
 8003578:	4093      	lsls	r3, r2
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003580:	4935      	ldr	r1, [pc, #212]	; (8003658 <HAL_GPIO_Init+0x328>)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_GPIO_Init+0x354>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035b2:	4a34      	ldr	r2, [pc, #208]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035dc:	4a29      	ldr	r2, [pc, #164]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035e2:	4b28      	ldr	r3, [pc, #160]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003606:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <HAL_GPIO_Init+0x354>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800360c:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_GPIO_Init+0x354>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003630:	4a14      	ldr	r2, [pc, #80]	; (8003684 <HAL_GPIO_Init+0x354>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3301      	adds	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b0f      	cmp	r3, #15
 8003640:	f67f ae86 	bls.w	8003350 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	40013800 	.word	0x40013800
 800365c:	40020000 	.word	0x40020000
 8003660:	40020400 	.word	0x40020400
 8003664:	40020800 	.word	0x40020800
 8003668:	40020c00 	.word	0x40020c00
 800366c:	40021000 	.word	0x40021000
 8003670:	40021400 	.word	0x40021400
 8003674:	40021800 	.word	0x40021800
 8003678:	40021c00 	.word	0x40021c00
 800367c:	40022000 	.word	0x40022000
 8003680:	40022400 	.word	0x40022400
 8003684:	40013c00 	.word	0x40013c00

08003688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	807b      	strh	r3, [r7, #2]
 8003694:	4613      	mov	r3, r2
 8003696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003698:	787b      	ldrb	r3, [r7, #1]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800369e:	887a      	ldrh	r2, [r7, #2]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036a4:	e003      	b.n	80036ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036a6:	887b      	ldrh	r3, [r7, #2]
 80036a8:	041a      	lsls	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	619a      	str	r2, [r3, #24]
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40007000 	.word	0x40007000

080036dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	4b23      	ldr	r3, [pc, #140]	; (8003774 <HAL_PWREx_EnableOverDrive+0x98>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a22      	ldr	r2, [pc, #136]	; (8003774 <HAL_PWREx_EnableOverDrive+0x98>)
 80036ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6413      	str	r3, [r2, #64]	; 0x40
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_PWREx_EnableOverDrive+0x98>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036fe:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800370a:	f7ff fc3d 	bl	8002f88 <HAL_GetTick>
 800370e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003710:	e009      	b.n	8003726 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003712:	f7ff fc39 	bl	8002f88 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003720:	d901      	bls.n	8003726 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e022      	b.n	800376c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003732:	d1ee      	bne.n	8003712 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003734:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 800373a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003740:	f7ff fc22 	bl	8002f88 <HAL_GetTick>
 8003744:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003746:	e009      	b.n	800375c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003748:	f7ff fc1e 	bl	8002f88 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003756:	d901      	bls.n	800375c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e007      	b.n	800376c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_PWREx_EnableOverDrive+0x9c>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003768:	d1ee      	bne.n	8003748 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40023800 	.word	0x40023800
 8003778:	40007000 	.word	0x40007000

0800377c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003784:	2300      	movs	r3, #0
 8003786:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e291      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8087 	beq.w	80038ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037a0:	4b96      	ldr	r3, [pc, #600]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d00c      	beq.n	80037c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ac:	4b93      	ldr	r3, [pc, #588]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d112      	bne.n	80037de <HAL_RCC_OscConfig+0x62>
 80037b8:	4b90      	ldr	r3, [pc, #576]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c4:	d10b      	bne.n	80037de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c6:	4b8d      	ldr	r3, [pc, #564]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d06c      	beq.n	80038ac <HAL_RCC_OscConfig+0x130>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d168      	bne.n	80038ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e26b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x7a>
 80037e8:	4b84      	ldr	r3, [pc, #528]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a83      	ldr	r2, [pc, #524]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	e02e      	b.n	8003854 <HAL_RCC_OscConfig+0xd8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x9c>
 80037fe:	4b7f      	ldr	r3, [pc, #508]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a7e      	ldr	r2, [pc, #504]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b7c      	ldr	r3, [pc, #496]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7b      	ldr	r2, [pc, #492]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e01d      	b.n	8003854 <HAL_RCC_OscConfig+0xd8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0xc0>
 8003822:	4b76      	ldr	r3, [pc, #472]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a75      	ldr	r2, [pc, #468]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b73      	ldr	r3, [pc, #460]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a72      	ldr	r2, [pc, #456]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e00b      	b.n	8003854 <HAL_RCC_OscConfig+0xd8>
 800383c:	4b6f      	ldr	r3, [pc, #444]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6e      	ldr	r2, [pc, #440]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	4b6c      	ldr	r3, [pc, #432]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a6b      	ldr	r2, [pc, #428]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800384e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d013      	beq.n	8003884 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7ff fb94 	bl	8002f88 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7ff fb90 	bl	8002f88 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e21f      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003876:	4b61      	ldr	r3, [pc, #388]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0xe8>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7ff fb80 	bl	8002f88 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388c:	f7ff fb7c 	bl	8002f88 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e20b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389e:	4b57      	ldr	r3, [pc, #348]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x110>
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d069      	beq.n	800398e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ba:	4b50      	ldr	r3, [pc, #320]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00b      	beq.n	80038de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c6:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d11c      	bne.n	800390c <HAL_RCC_OscConfig+0x190>
 80038d2:	4b4a      	ldr	r3, [pc, #296]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d116      	bne.n	800390c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_RCC_OscConfig+0x17a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e1df      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f6:	4b41      	ldr	r3, [pc, #260]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	493d      	ldr	r1, [pc, #244]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390a:	e040      	b.n	800398e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d023      	beq.n	800395c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003914:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a38      	ldr	r2, [pc, #224]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7ff fb32 	bl	8002f88 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003928:	f7ff fb2e 	bl	8002f88 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1bd      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393a:	4b30      	ldr	r3, [pc, #192]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4929      	ldr	r1, [pc, #164]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]
 800395a:	e018      	b.n	800398e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395c:	4b27      	ldr	r3, [pc, #156]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7ff fb0e 	bl	8002f88 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003970:	f7ff fb0a 	bl	8002f88 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e199      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d038      	beq.n	8003a0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d019      	beq.n	80039d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a2:	4b16      	ldr	r3, [pc, #88]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80039a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a6:	4a15      	ldr	r2, [pc, #84]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7ff faeb 	bl	8002f88 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b6:	f7ff fae7 	bl	8002f88 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e176      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80039ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x23a>
 80039d4:	e01a      	b.n	8003a0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d6:	4b09      	ldr	r3, [pc, #36]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80039d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039da:	4a08      	ldr	r2, [pc, #32]	; (80039fc <HAL_RCC_OscConfig+0x280>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7ff fad1 	bl	8002f88 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ea:	f7ff facd 	bl	8002f88 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d903      	bls.n	8003a00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e15c      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
 80039fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a00:	4b91      	ldr	r3, [pc, #580]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1ee      	bne.n	80039ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a4 	beq.w	8003b62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1a:	4b8b      	ldr	r3, [pc, #556]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10d      	bne.n	8003a42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	4b88      	ldr	r3, [pc, #544]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a87      	ldr	r2, [pc, #540]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
 8003a32:	4b85      	ldr	r3, [pc, #532]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a42:	4b82      	ldr	r3, [pc, #520]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d118      	bne.n	8003a80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a4e:	4b7f      	ldr	r3, [pc, #508]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a7e      	ldr	r2, [pc, #504]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5a:	f7ff fa95 	bl	8002f88 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a62:	f7ff fa91 	bl	8002f88 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b64      	cmp	r3, #100	; 0x64
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e120      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a74:	4b75      	ldr	r3, [pc, #468]	; (8003c4c <HAL_RCC_OscConfig+0x4d0>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x31a>
 8003a88:	4b6f      	ldr	r3, [pc, #444]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a6e      	ldr	r2, [pc, #440]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
 8003a94:	e02d      	b.n	8003af2 <HAL_RCC_OscConfig+0x376>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x33c>
 8003a9e:	4b6a      	ldr	r3, [pc, #424]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	4a69      	ldr	r2, [pc, #420]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aaa:	4b67      	ldr	r3, [pc, #412]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	4a66      	ldr	r2, [pc, #408]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003ab0:	f023 0304 	bic.w	r3, r3, #4
 8003ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab6:	e01c      	b.n	8003af2 <HAL_RCC_OscConfig+0x376>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b05      	cmp	r3, #5
 8003abe:	d10c      	bne.n	8003ada <HAL_RCC_OscConfig+0x35e>
 8003ac0:	4b61      	ldr	r3, [pc, #388]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a60      	ldr	r2, [pc, #384]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003ac6:	f043 0304 	orr.w	r3, r3, #4
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
 8003acc:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4a5d      	ldr	r2, [pc, #372]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad8:	e00b      	b.n	8003af2 <HAL_RCC_OscConfig+0x376>
 8003ada:	4b5b      	ldr	r3, [pc, #364]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	4a5a      	ldr	r2, [pc, #360]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae6:	4b58      	ldr	r3, [pc, #352]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	4a57      	ldr	r2, [pc, #348]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d015      	beq.n	8003b26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afa:	f7ff fa45 	bl	8002f88 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7ff fa41 	bl	8002f88 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e0ce      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b18:	4b4b      	ldr	r3, [pc, #300]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ee      	beq.n	8003b02 <HAL_RCC_OscConfig+0x386>
 8003b24:	e014      	b.n	8003b50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b26:	f7ff fa2f 	bl	8002f88 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2e:	f7ff fa2b 	bl	8002f88 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e0b8      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b44:	4b40      	ldr	r3, [pc, #256]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ee      	bne.n	8003b2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b56:	4b3c      	ldr	r3, [pc, #240]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	4a3b      	ldr	r2, [pc, #236]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80a4 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b6c:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d06b      	beq.n	8003c50 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d149      	bne.n	8003c14 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b80:	4b31      	ldr	r3, [pc, #196]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a30      	ldr	r2, [pc, #192]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7ff f9fc 	bl	8002f88 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b94:	f7ff f9f8 	bl	8002f88 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e087      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	4b28      	ldr	r3, [pc, #160]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69da      	ldr	r2, [r3, #28]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	019b      	lsls	r3, r3, #6
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	041b      	lsls	r3, r3, #16
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	061b      	lsls	r3, r3, #24
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003bda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bde:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be0:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7ff f9cc 	bl	8002f88 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7ff f9c8 	bl	8002f88 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e057      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x478>
 8003c12:	e04f      	b.n	8003cb4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0b      	ldr	r2, [pc, #44]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7ff f9b2 	bl	8002f88 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7ff f9ae 	bl	8002f88 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e03d      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4ac>
 8003c46:	e035      	b.n	8003cb4 <HAL_RCC_OscConfig+0x538>
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c50:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <HAL_RCC_OscConfig+0x544>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d028      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d121      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d11a      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c80:	4013      	ands	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d111      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d107      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800

08003cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0d0      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b6a      	ldr	r3, [pc, #424]	; (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d910      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b67      	ldr	r3, [pc, #412]	; (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 020f 	bic.w	r2, r3, #15
 8003cf2:	4965      	ldr	r1, [pc, #404]	; (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b63      	ldr	r3, [pc, #396]	; (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0b8      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d020      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d24:	4b59      	ldr	r3, [pc, #356]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a58      	ldr	r2, [pc, #352]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d3c:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a52      	ldr	r2, [pc, #328]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d48:	4b50      	ldr	r3, [pc, #320]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	494d      	ldr	r1, [pc, #308]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d040      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d115      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e07f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d86:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e073      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	4b3d      	ldr	r3, [pc, #244]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e06b      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4936      	ldr	r1, [pc, #216]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db8:	f7ff f8e6 	bl	8002f88 <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7ff f8e2 	bl	8002f88 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e053      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b2d      	ldr	r3, [pc, #180]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003de8:	4b27      	ldr	r3, [pc, #156]	; (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d210      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 020f 	bic.w	r2, r3, #15
 8003dfe:	4922      	ldr	r1, [pc, #136]	; (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e032      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4916      	ldr	r1, [pc, #88]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	490e      	ldr	r1, [pc, #56]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e56:	f000 f821 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	490a      	ldr	r1, [pc, #40]	; (8003e90 <HAL_RCC_ClockConfig+0x1cc>)
 8003e68:	5ccb      	ldrb	r3, [r1, r3]
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <HAL_RCC_ClockConfig+0x1d0>)
 8003e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_ClockConfig+0x1d4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff f842 	bl	8002f00 <HAL_InitTick>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023c00 	.word	0x40023c00
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	0800b454 	.word	0x0800b454
 8003e94:	20000074 	.word	0x20000074
 8003e98:	20000078 	.word	0x20000078

08003e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea0:	b094      	sub	sp, #80	; 0x50
 8003ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eac:	2300      	movs	r3, #0
 8003eae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003eb4:	4b79      	ldr	r3, [pc, #484]	; (800409c <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d00d      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x40>
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	f200 80e1 	bhi.w	8004088 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ece:	e0db      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ed0:	4b73      	ldr	r3, [pc, #460]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ed2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ed4:	e0db      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ed6:	4b73      	ldr	r3, [pc, #460]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ed8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eda:	e0d8      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003edc:	4b6f      	ldr	r3, [pc, #444]	; (800409c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ee4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ee6:	4b6d      	ldr	r3, [pc, #436]	; (800409c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d063      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef2:	4b6a      	ldr	r3, [pc, #424]	; (800409c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	099b      	lsrs	r3, r3, #6
 8003ef8:	2200      	movs	r2, #0
 8003efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003efc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f04:	633b      	str	r3, [r7, #48]	; 0x30
 8003f06:	2300      	movs	r3, #0
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f0e:	4622      	mov	r2, r4
 8003f10:	462b      	mov	r3, r5
 8003f12:	f04f 0000 	mov.w	r0, #0
 8003f16:	f04f 0100 	mov.w	r1, #0
 8003f1a:	0159      	lsls	r1, r3, #5
 8003f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f20:	0150      	lsls	r0, r2, #5
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4621      	mov	r1, r4
 8003f28:	1a51      	subs	r1, r2, r1
 8003f2a:	6139      	str	r1, [r7, #16]
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f40:	4659      	mov	r1, fp
 8003f42:	018b      	lsls	r3, r1, #6
 8003f44:	4651      	mov	r1, sl
 8003f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f4a:	4651      	mov	r1, sl
 8003f4c:	018a      	lsls	r2, r1, #6
 8003f4e:	4651      	mov	r1, sl
 8003f50:	ebb2 0801 	subs.w	r8, r2, r1
 8003f54:	4659      	mov	r1, fp
 8003f56:	eb63 0901 	sbc.w	r9, r3, r1
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f6e:	4690      	mov	r8, r2
 8003f70:	4699      	mov	r9, r3
 8003f72:	4623      	mov	r3, r4
 8003f74:	eb18 0303 	adds.w	r3, r8, r3
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	462b      	mov	r3, r5
 8003f7c:	eb49 0303 	adc.w	r3, r9, r3
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f8e:	4629      	mov	r1, r5
 8003f90:	024b      	lsls	r3, r1, #9
 8003f92:	4621      	mov	r1, r4
 8003f94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f98:	4621      	mov	r1, r4
 8003f9a:	024a      	lsls	r2, r1, #9
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fac:	f7fc fe6e 	bl	8000c8c <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb8:	e058      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fba:	4b38      	ldr	r3, [pc, #224]	; (800409c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	099b      	lsrs	r3, r3, #6
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fca:	623b      	str	r3, [r7, #32]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	f04f 0000 	mov.w	r0, #0
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	0159      	lsls	r1, r3, #5
 8003fe2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe6:	0150      	lsls	r0, r2, #5
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4641      	mov	r1, r8
 8003fee:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004004:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004008:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800400c:	ebb2 040a 	subs.w	r4, r2, sl
 8004010:	eb63 050b 	sbc.w	r5, r3, fp
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	00eb      	lsls	r3, r5, #3
 800401e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004022:	00e2      	lsls	r2, r4, #3
 8004024:	4614      	mov	r4, r2
 8004026:	461d      	mov	r5, r3
 8004028:	4643      	mov	r3, r8
 800402a:	18e3      	adds	r3, r4, r3
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	464b      	mov	r3, r9
 8004030:	eb45 0303 	adc.w	r3, r5, r3
 8004034:	607b      	str	r3, [r7, #4]
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004042:	4629      	mov	r1, r5
 8004044:	028b      	lsls	r3, r1, #10
 8004046:	4621      	mov	r1, r4
 8004048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800404c:	4621      	mov	r1, r4
 800404e:	028a      	lsls	r2, r1, #10
 8004050:	4610      	mov	r0, r2
 8004052:	4619      	mov	r1, r3
 8004054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004056:	2200      	movs	r2, #0
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	61fa      	str	r2, [r7, #28]
 800405c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004060:	f7fc fe14 	bl	8000c8c <__aeabi_uldivmod>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4613      	mov	r3, r2
 800406a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_RCC_GetSysClockFreq+0x200>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	3301      	adds	r3, #1
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800407c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800407e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004086:	e002      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800408a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800408c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800408e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004090:	4618      	mov	r0, r3
 8004092:	3750      	adds	r7, #80	; 0x50
 8004094:	46bd      	mov	sp, r7
 8004096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800
 80040a0:	00f42400 	.word	0x00f42400
 80040a4:	007a1200 	.word	0x007a1200

080040a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ac:	4b03      	ldr	r3, [pc, #12]	; (80040bc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ae:	681b      	ldr	r3, [r3, #0]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20000074 	.word	0x20000074

080040c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040c4:	f7ff fff0 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	0a9b      	lsrs	r3, r3, #10
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	4903      	ldr	r1, [pc, #12]	; (80040e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40023800 	.word	0x40023800
 80040e4:	0800b464 	.word	0x0800b464

080040e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040ec:	f7ff ffdc 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	0b5b      	lsrs	r3, r3, #13
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4903      	ldr	r1, [pc, #12]	; (800410c <HAL_RCC_GetPCLK2Freq+0x24>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40023800 	.word	0x40023800
 800410c:	0800b464 	.word	0x0800b464

08004110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d012      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004138:	4b69      	ldr	r3, [pc, #420]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a68      	ldr	r2, [pc, #416]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004142:	6093      	str	r3, [r2, #8]
 8004144:	4b66      	ldr	r3, [pc, #408]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	4964      	ldr	r1, [pc, #400]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800415a:	2301      	movs	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d017      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800416a:	4b5d      	ldr	r3, [pc, #372]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004170:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004178:	4959      	ldr	r1, [pc, #356]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004188:	d101      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800418a:	2301      	movs	r3, #1
 800418c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d017      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041a6:	4b4e      	ldr	r3, [pc, #312]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	494a      	ldr	r1, [pc, #296]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c4:	d101      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041c6:	2301      	movs	r3, #1
 80041c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041d2:	2301      	movs	r3, #1
 80041d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 808b 	beq.w	800430a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041f4:	4b3a      	ldr	r3, [pc, #232]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	4a39      	ldr	r2, [pc, #228]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004200:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800420c:	4b35      	ldr	r3, [pc, #212]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a34      	ldr	r2, [pc, #208]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004218:	f7fe feb6 	bl	8002f88 <HAL_GetTick>
 800421c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004220:	f7fe feb2 	bl	8002f88 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b64      	cmp	r3, #100	; 0x64
 800422c:	d901      	bls.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e357      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004232:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800423e:	4b28      	ldr	r3, [pc, #160]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d035      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	429a      	cmp	r2, r3
 800425a:	d02e      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800425c:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004264:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004266:	4b1e      	ldr	r3, [pc, #120]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a1d      	ldr	r2, [pc, #116]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004272:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800427e:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004284:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d114      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fe fe7a 	bl	8002f88 <HAL_GetTick>
 8004294:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	e00a      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004298:	f7fe fe76 	bl	8002f88 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e319      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0ee      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c6:	d111      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042d6:	400b      	ands	r3, r1
 80042d8:	4901      	ldr	r1, [pc, #4]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
 80042de:	e00b      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40007000 	.word	0x40007000
 80042e8:	0ffffcff 	.word	0x0ffffcff
 80042ec:	4baa      	ldr	r3, [pc, #680]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4aa9      	ldr	r2, [pc, #676]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042f6:	6093      	str	r3, [r2, #8]
 80042f8:	4ba7      	ldr	r3, [pc, #668]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004304:	49a4      	ldr	r1, [pc, #656]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004306:	4313      	orrs	r3, r2
 8004308:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b00      	cmp	r3, #0
 8004314:	d010      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004316:	4ba0      	ldr	r3, [pc, #640]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800431c:	4a9e      	ldr	r2, [pc, #632]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004322:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004326:	4b9c      	ldr	r3, [pc, #624]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004328:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	4999      	ldr	r1, [pc, #612]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004344:	4b94      	ldr	r3, [pc, #592]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004352:	4991      	ldr	r1, [pc, #580]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004366:	4b8c      	ldr	r3, [pc, #560]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004374:	4988      	ldr	r1, [pc, #544]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004388:	4b83      	ldr	r3, [pc, #524]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004396:	4980      	ldr	r1, [pc, #512]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043aa:	4b7b      	ldr	r3, [pc, #492]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	4977      	ldr	r1, [pc, #476]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043cc:	4b72      	ldr	r3, [pc, #456]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f023 0203 	bic.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	496f      	ldr	r1, [pc, #444]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043ee:	4b6a      	ldr	r3, [pc, #424]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f023 020c 	bic.w	r2, r3, #12
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fc:	4966      	ldr	r1, [pc, #408]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004410:	4b61      	ldr	r3, [pc, #388]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004416:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441e:	495e      	ldr	r1, [pc, #376]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004432:	4b59      	ldr	r3, [pc, #356]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004440:	4955      	ldr	r1, [pc, #340]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004454:	4b50      	ldr	r3, [pc, #320]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	494d      	ldr	r1, [pc, #308]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004476:	4b48      	ldr	r3, [pc, #288]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	4944      	ldr	r1, [pc, #272]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004498:	4b3f      	ldr	r3, [pc, #252]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a6:	493c      	ldr	r1, [pc, #240]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044ba:	4b37      	ldr	r3, [pc, #220]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c8:	4933      	ldr	r1, [pc, #204]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044dc:	4b2e      	ldr	r3, [pc, #184]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ea:	492b      	ldr	r1, [pc, #172]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d011      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044fe:	4b26      	ldr	r3, [pc, #152]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800450c:	4922      	ldr	r1, [pc, #136]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800451c:	d101      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800451e:	2301      	movs	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800452e:	2301      	movs	r3, #1
 8004530:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800453e:	4b16      	ldr	r3, [pc, #88]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454c:	4912      	ldr	r1, [pc, #72]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004560:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004570:	4909      	ldr	r1, [pc, #36]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d006      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80d9 	beq.w	800473e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800458c:	4b02      	ldr	r3, [pc, #8]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a01      	ldr	r2, [pc, #4]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004596:	e001      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004598:	40023800 	.word	0x40023800
 800459c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459e:	f7fe fcf3 	bl	8002f88 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045a6:	f7fe fcef 	bl	8002f88 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b64      	cmp	r3, #100	; 0x64
 80045b2:	d901      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e194      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045b8:	4b6c      	ldr	r3, [pc, #432]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d021      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d11d      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045d8:	4b64      	ldr	r3, [pc, #400]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045e6:	4b61      	ldr	r3, [pc, #388]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ec:	0e1b      	lsrs	r3, r3, #24
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	019a      	lsls	r2, r3, #6
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	041b      	lsls	r3, r3, #16
 80045fe:	431a      	orrs	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	061b      	lsls	r3, r3, #24
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	071b      	lsls	r3, r3, #28
 800460c:	4957      	ldr	r1, [pc, #348]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d004      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004632:	2b00      	cmp	r3, #0
 8004634:	d02e      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463e:	d129      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004640:	4b4a      	ldr	r3, [pc, #296]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800464e:	4b47      	ldr	r3, [pc, #284]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004654:	0f1b      	lsrs	r3, r3, #28
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	019a      	lsls	r2, r3, #6
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	041b      	lsls	r3, r3, #16
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	061b      	lsls	r3, r3, #24
 800466e:	431a      	orrs	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	071b      	lsls	r3, r3, #28
 8004674:	493d      	ldr	r1, [pc, #244]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800467c:	4b3b      	ldr	r3, [pc, #236]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004682:	f023 021f 	bic.w	r2, r3, #31
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	3b01      	subs	r3, #1
 800468c:	4937      	ldr	r1, [pc, #220]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01d      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046a0:	4b32      	ldr	r3, [pc, #200]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a6:	0e1b      	lsrs	r3, r3, #24
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046ae:	4b2f      	ldr	r3, [pc, #188]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b4:	0f1b      	lsrs	r3, r3, #28
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	019a      	lsls	r2, r3, #6
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	431a      	orrs	r2, r3
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	061b      	lsls	r3, r3, #24
 80046ce:	431a      	orrs	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	071b      	lsls	r3, r3, #28
 80046d4:	4925      	ldr	r1, [pc, #148]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d011      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	019a      	lsls	r2, r3, #6
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	061b      	lsls	r3, r3, #24
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	071b      	lsls	r3, r3, #28
 8004704:	4919      	ldr	r1, [pc, #100]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a16      	ldr	r2, [pc, #88]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004712:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004718:	f7fe fc36 	bl	8002f88 <HAL_GetTick>
 800471c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004720:	f7fe fc32 	bl	8002f88 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b64      	cmp	r3, #100	; 0x64
 800472c:	d901      	bls.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e0d7      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004732:	4b0e      	ldr	r3, [pc, #56]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b01      	cmp	r3, #1
 8004742:	f040 80cd 	bne.w	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004746:	4b09      	ldr	r3, [pc, #36]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a08      	ldr	r2, [pc, #32]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800474c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004752:	f7fe fc19 	bl	8002f88 <HAL_GetTick>
 8004756:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004758:	e00a      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800475a:	f7fe fc15 	bl	8002f88 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b64      	cmp	r3, #100	; 0x64
 8004766:	d903      	bls.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e0ba      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800476c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004770:	4b5e      	ldr	r3, [pc, #376]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800477c:	d0ed      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800479a:	2b00      	cmp	r3, #0
 800479c:	d02e      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d12a      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047a6:	4b51      	ldr	r3, [pc, #324]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	0c1b      	lsrs	r3, r3, #16
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047b4:	4b4d      	ldr	r3, [pc, #308]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	0f1b      	lsrs	r3, r3, #28
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	019a      	lsls	r2, r3, #6
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	041b      	lsls	r3, r3, #16
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	061b      	lsls	r3, r3, #24
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	071b      	lsls	r3, r3, #28
 80047da:	4944      	ldr	r1, [pc, #272]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047e2:	4b42      	ldr	r3, [pc, #264]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	493d      	ldr	r1, [pc, #244]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d022      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800480c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004810:	d11d      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004812:	4b36      	ldr	r3, [pc, #216]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	0e1b      	lsrs	r3, r3, #24
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004820:	4b32      	ldr	r3, [pc, #200]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004826:	0f1b      	lsrs	r3, r3, #28
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	019a      	lsls	r2, r3, #6
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	041b      	lsls	r3, r3, #16
 800483a:	431a      	orrs	r2, r3
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	061b      	lsls	r3, r3, #24
 8004840:	431a      	orrs	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	071b      	lsls	r3, r3, #28
 8004846:	4929      	ldr	r1, [pc, #164]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d028      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800485a:	4b24      	ldr	r3, [pc, #144]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	0e1b      	lsrs	r3, r3, #24
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004868:	4b20      	ldr	r3, [pc, #128]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	0c1b      	lsrs	r3, r3, #16
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	019a      	lsls	r2, r3, #6
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	431a      	orrs	r2, r3
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	061b      	lsls	r3, r3, #24
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	071b      	lsls	r3, r3, #28
 800488e:	4917      	ldr	r1, [pc, #92]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004896:	4b15      	ldr	r3, [pc, #84]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800489c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	4911      	ldr	r1, [pc, #68]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a0e      	ldr	r2, [pc, #56]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b8:	f7fe fb66 	bl	8002f88 <HAL_GetTick>
 80048bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048c0:	f7fe fb62 	bl	8002f88 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	; 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e007      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048d2:	4b06      	ldr	r3, [pc, #24]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048de:	d1ef      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800

080048f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e09d      	b.n	8004a3e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d108      	bne.n	800491c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004912:	d009      	beq.n	8004928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	61da      	str	r2, [r3, #28]
 800491a:	e005      	b.n	8004928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd ff4a 	bl	80027dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004968:	d902      	bls.n	8004970 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	e002      	b.n	8004976 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004974:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800497e:	d007      	beq.n	8004990 <HAL_SPI_Init+0xa0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004988:	d002      	beq.n	8004990 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	ea42 0103 	orr.w	r1, r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	0c1b      	lsrs	r3, r3, #16
 80049ec:	f003 0204 	and.w	r2, r3, #4
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a0c:	ea42 0103 	orr.w	r1, r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b088      	sub	sp, #32
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	603b      	str	r3, [r7, #0]
 8004a52:	4613      	mov	r3, r2
 8004a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_SPI_Transmit+0x22>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e158      	b.n	8004d1a <HAL_SPI_Transmit+0x2d4>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a70:	f7fe fa8a 	bl	8002f88 <HAL_GetTick>
 8004a74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a86:	2302      	movs	r3, #2
 8004a88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a8a:	e13d      	b.n	8004d08 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_Transmit+0x52>
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a9c:	e134      	b.n	8004d08 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	88fa      	ldrh	r2, [r7, #6]
 8004ab6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae8:	d10f      	bne.n	8004b0a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d007      	beq.n	8004b28 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b30:	d94b      	bls.n	8004bca <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_SPI_Transmit+0xfa>
 8004b3a:	8afb      	ldrh	r3, [r7, #22]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d13e      	bne.n	8004bbe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	881a      	ldrh	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	1c9a      	adds	r2, r3, #2
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b64:	e02b      	b.n	8004bbe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d112      	bne.n	8004b9a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	881a      	ldrh	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	1c9a      	adds	r2, r3, #2
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b98:	e011      	b.n	8004bbe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b9a:	f7fe f9f5 	bl	8002f88 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d803      	bhi.n	8004bb2 <HAL_SPI_Transmit+0x16c>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d102      	bne.n	8004bb8 <HAL_SPI_Transmit+0x172>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bbc:	e0a4      	b.n	8004d08 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1ce      	bne.n	8004b66 <HAL_SPI_Transmit+0x120>
 8004bc8:	e07c      	b.n	8004cc4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_SPI_Transmit+0x192>
 8004bd2:	8afb      	ldrh	r3, [r7, #22]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d170      	bne.n	8004cba <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d912      	bls.n	8004c08 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	881a      	ldrh	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	1c9a      	adds	r2, r3, #2
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b02      	subs	r3, #2
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c06:	e058      	b.n	8004cba <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	7812      	ldrb	r2, [r2, #0]
 8004c14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c2e:	e044      	b.n	8004cba <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d12b      	bne.n	8004c96 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d912      	bls.n	8004c6e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	881a      	ldrh	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	1c9a      	adds	r2, r3, #2
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b02      	subs	r3, #2
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c6c:	e025      	b.n	8004cba <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	7812      	ldrb	r2, [r2, #0]
 8004c7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c94:	e011      	b.n	8004cba <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c96:	f7fe f977 	bl	8002f88 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d803      	bhi.n	8004cae <HAL_SPI_Transmit+0x268>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cac:	d102      	bne.n	8004cb4 <HAL_SPI_Transmit+0x26e>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cb8:	e026      	b.n	8004d08 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1b5      	bne.n	8004c30 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	6839      	ldr	r1, [r7, #0]
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 fe1b 	bl	8005904 <SPI_EndRxTxTransaction>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e000      	b.n	8004d08 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004d06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d18:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3720      	adds	r7, #32
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b088      	sub	sp, #32
 8004d26:	af02      	add	r7, sp, #8
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3e:	d112      	bne.n	8004d66 <HAL_SPI_Receive+0x44>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10e      	bne.n	8004d66 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d50:	88fa      	ldrh	r2, [r7, #6]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	4613      	mov	r3, r2
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f910 	bl	8004f82 <HAL_SPI_TransmitReceive>
 8004d62:	4603      	mov	r3, r0
 8004d64:	e109      	b.n	8004f7a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_SPI_Receive+0x52>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e102      	b.n	8004f7a <HAL_SPI_Receive+0x258>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d7c:	f7fe f904 	bl	8002f88 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d002      	beq.n	8004d94 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d92:	e0e9      	b.n	8004f68 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_SPI_Receive+0x7e>
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004da4:	e0e0      	b.n	8004f68 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2204      	movs	r2, #4
 8004daa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004df0:	d908      	bls.n	8004e04 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e00:	605a      	str	r2, [r3, #4]
 8004e02:	e007      	b.n	8004e14 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e12:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1c:	d10f      	bne.n	8004e3e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d007      	beq.n	8004e5c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e64:	d867      	bhi.n	8004f36 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e66:	e030      	b.n	8004eca <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d117      	bne.n	8004ea6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f103 020c 	add.w	r2, r3, #12
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	7812      	ldrb	r2, [r2, #0]
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004ea4:	e011      	b.n	8004eca <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ea6:	f7fe f86f 	bl	8002f88 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d803      	bhi.n	8004ebe <HAL_SPI_Receive+0x19c>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebc:	d102      	bne.n	8004ec4 <HAL_SPI_Receive+0x1a2>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ec8:	e04e      	b.n	8004f68 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1c8      	bne.n	8004e68 <HAL_SPI_Receive+0x146>
 8004ed6:	e034      	b.n	8004f42 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d115      	bne.n	8004f12 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	b292      	uxth	r2, r2
 8004ef2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	1c9a      	adds	r2, r3, #2
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f10:	e011      	b.n	8004f36 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f12:	f7fe f839 	bl	8002f88 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d803      	bhi.n	8004f2a <HAL_SPI_Receive+0x208>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d102      	bne.n	8004f30 <HAL_SPI_Receive+0x20e>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d102      	bne.n	8004f36 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f34:	e018      	b.n	8004f68 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1ca      	bne.n	8004ed8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	6839      	ldr	r1, [r7, #0]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 fc60 	bl	800580c <SPI_EndRxTransaction>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	75fb      	strb	r3, [r7, #23]
 8004f64:	e000      	b.n	8004f68 <HAL_SPI_Receive+0x246>
  }

error :
 8004f66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b08a      	sub	sp, #40	; 0x28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f90:	2301      	movs	r3, #1
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0x26>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e1fb      	b.n	80053a0 <HAL_SPI_TransmitReceive+0x41e>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fb0:	f7fd ffea 	bl	8002f88 <HAL_GetTick>
 8004fb4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fbc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004fc4:	887b      	ldrh	r3, [r7, #2]
 8004fc6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004fc8:	887b      	ldrh	r3, [r7, #2]
 8004fca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fcc:	7efb      	ldrb	r3, [r7, #27]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d00e      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x6e>
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd8:	d106      	bne.n	8004fe8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d102      	bne.n	8004fe8 <HAL_SPI_TransmitReceive+0x66>
 8004fe2:	7efb      	ldrb	r3, [r7, #27]
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d003      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fee:	e1cd      	b.n	800538c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_SPI_TransmitReceive+0x80>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_SPI_TransmitReceive+0x80>
 8004ffc:	887b      	ldrh	r3, [r7, #2]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005008:	e1c0      	b.n	800538c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b04      	cmp	r3, #4
 8005014:	d003      	beq.n	800501e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2205      	movs	r2, #5
 800501a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	887a      	ldrh	r2, [r7, #2]
 800502e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	887a      	ldrh	r2, [r7, #2]
 8005036:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	887a      	ldrh	r2, [r7, #2]
 8005044:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	887a      	ldrh	r2, [r7, #2]
 800504a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005060:	d802      	bhi.n	8005068 <HAL_SPI_TransmitReceive+0xe6>
 8005062:	8a3b      	ldrh	r3, [r7, #16]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d908      	bls.n	800507a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005076:	605a      	str	r2, [r3, #4]
 8005078:	e007      	b.n	800508a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005088:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d007      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050b0:	d97c      	bls.n	80051ac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <HAL_SPI_TransmitReceive+0x13e>
 80050ba:	8a7b      	ldrh	r3, [r7, #18]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d169      	bne.n	8005194 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	881a      	ldrh	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	1c9a      	adds	r2, r3, #2
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050e4:	e056      	b.n	8005194 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d11b      	bne.n	800512c <HAL_SPI_TransmitReceive+0x1aa>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d016      	beq.n	800512c <HAL_SPI_TransmitReceive+0x1aa>
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	2b01      	cmp	r3, #1
 8005102:	d113      	bne.n	800512c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	881a      	ldrh	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	1c9a      	adds	r2, r3, #2
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b01      	cmp	r3, #1
 8005138:	d11c      	bne.n	8005174 <HAL_SPI_TransmitReceive+0x1f2>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	b292      	uxth	r2, r2
 8005152:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	1c9a      	adds	r2, r3, #2
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005170:	2301      	movs	r3, #1
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005174:	f7fd ff08 	bl	8002f88 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005180:	429a      	cmp	r2, r3
 8005182:	d807      	bhi.n	8005194 <HAL_SPI_TransmitReceive+0x212>
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d003      	beq.n	8005194 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005192:	e0fb      	b.n	800538c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1a3      	bne.n	80050e6 <HAL_SPI_TransmitReceive+0x164>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d19d      	bne.n	80050e6 <HAL_SPI_TransmitReceive+0x164>
 80051aa:	e0df      	b.n	800536c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_SPI_TransmitReceive+0x23a>
 80051b4:	8a7b      	ldrh	r3, [r7, #18]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	f040 80cb 	bne.w	8005352 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d912      	bls.n	80051ec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	881a      	ldrh	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	1c9a      	adds	r2, r3, #2
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b02      	subs	r3, #2
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ea:	e0b2      	b.n	8005352 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	7812      	ldrb	r2, [r2, #0]
 80051f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005212:	e09e      	b.n	8005352 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b02      	cmp	r3, #2
 8005220:	d134      	bne.n	800528c <HAL_SPI_TransmitReceive+0x30a>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d02f      	beq.n	800528c <HAL_SPI_TransmitReceive+0x30a>
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	2b01      	cmp	r3, #1
 8005230:	d12c      	bne.n	800528c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	d912      	bls.n	8005262 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	881a      	ldrh	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	1c9a      	adds	r2, r3, #2
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b02      	subs	r3, #2
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005260:	e012      	b.n	8005288 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	330c      	adds	r3, #12
 800526c:	7812      	ldrb	r2, [r2, #0]
 800526e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b01      	cmp	r3, #1
 8005298:	d148      	bne.n	800532c <HAL_SPI_TransmitReceive+0x3aa>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d042      	beq.n	800532c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d923      	bls.n	80052fa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	b292      	uxth	r2, r2
 80052be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	1c9a      	adds	r2, r3, #2
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b02      	subs	r3, #2
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d81f      	bhi.n	8005328 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052f6:	605a      	str	r2, [r3, #4]
 80052f8:	e016      	b.n	8005328 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f103 020c 	add.w	r2, r3, #12
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	7812      	ldrb	r2, [r2, #0]
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005328:	2301      	movs	r3, #1
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800532c:	f7fd fe2c 	bl	8002f88 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005338:	429a      	cmp	r2, r3
 800533a:	d803      	bhi.n	8005344 <HAL_SPI_TransmitReceive+0x3c2>
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d102      	bne.n	800534a <HAL_SPI_TransmitReceive+0x3c8>
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2b00      	cmp	r3, #0
 8005348:	d103      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005350:	e01c      	b.n	800538c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	f47f af5b 	bne.w	8005214 <HAL_SPI_TransmitReceive+0x292>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	f47f af54 	bne.w	8005214 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 fac7 	bl	8005904 <SPI_EndRxTxTransaction>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d006      	beq.n	800538a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2220      	movs	r2, #32
 8005386:	661a      	str	r2, [r3, #96]	; 0x60
 8005388:	e000      	b.n	800538c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800538a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800539c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3728      	adds	r7, #40	; 0x28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10e      	bne.n	80053e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d009      	beq.n	80053e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	4798      	blx	r3
    return;
 80053e6:	e0ce      	b.n	8005586 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <HAL_SPI_IRQHandler+0x5e>
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d004      	beq.n	8005406 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	4798      	blx	r3
    return;
 8005404:	e0bf      	b.n	8005586 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <HAL_SPI_IRQHandler+0x7e>
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d105      	bne.n	8005426 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80b0 	beq.w	8005586 <HAL_SPI_IRQHandler+0x1de>
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 80aa 	beq.w	8005586 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d023      	beq.n	8005484 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b03      	cmp	r3, #3
 8005446:	d011      	beq.n	800546c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544c:	f043 0204 	orr.w	r2, r3, #4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	e00b      	b.n	8005484 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	693b      	ldr	r3, [r7, #16]
        return;
 8005482:	e080      	b.n	8005586 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d014      	beq.n	80054b8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005492:	f043 0201 	orr.w	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00c      	beq.n	80054dc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c6:	f043 0208 	orr.w	r2, r3, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80054ce:	2300      	movs	r3, #0
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d04f      	beq.n	8005584 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054f2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <HAL_SPI_IRQHandler+0x168>
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d034      	beq.n	800557a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0203 	bic.w	r2, r2, #3
 800551e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005524:	2b00      	cmp	r3, #0
 8005526:	d011      	beq.n	800554c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552c:	4a17      	ldr	r2, [pc, #92]	; (800558c <HAL_SPI_IRQHandler+0x1e4>)
 800552e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005534:	4618      	mov	r0, r3
 8005536:	f7fd fed8 	bl	80032ea <HAL_DMA_Abort_IT>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005544:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005550:	2b00      	cmp	r3, #0
 8005552:	d016      	beq.n	8005582 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005558:	4a0c      	ldr	r2, [pc, #48]	; (800558c <HAL_SPI_IRQHandler+0x1e4>)
 800555a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005560:	4618      	mov	r0, r3
 8005562:	f7fd fec2 	bl	80032ea <HAL_DMA_Abort_IT>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005570:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005578:	e003      	b.n	8005582 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f808 	bl	8005590 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005580:	e000      	b.n	8005584 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005582:	bf00      	nop
    return;
 8005584:	bf00      	nop
  }
}
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	080055a5 	.word	0x080055a5

08005590 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7ff ffe5 	bl	8005590 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055c6:	bf00      	nop
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4613      	mov	r3, r2
 80055de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055e0:	f7fd fcd2 	bl	8002f88 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	4413      	add	r3, r2
 80055ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055f0:	f7fd fcca 	bl	8002f88 <HAL_GetTick>
 80055f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055f6:	4b39      	ldr	r3, [pc, #228]	; (80056dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	015b      	lsls	r3, r3, #5
 80055fc:	0d1b      	lsrs	r3, r3, #20
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	fb02 f303 	mul.w	r3, r2, r3
 8005604:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005606:	e054      	b.n	80056b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d050      	beq.n	80056b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005610:	f7fd fcba 	bl	8002f88 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	429a      	cmp	r2, r3
 800561e:	d902      	bls.n	8005626 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d13d      	bne.n	80056a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005634:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800563e:	d111      	bne.n	8005664 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005648:	d004      	beq.n	8005654 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005652:	d107      	bne.n	8005664 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800566c:	d10f      	bne.n	800568e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800568c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e017      	b.n	80056d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4013      	ands	r3, r2
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	429a      	cmp	r2, r3
 80056c0:	bf0c      	ite	eq
 80056c2:	2301      	moveq	r3, #1
 80056c4:	2300      	movne	r3, #0
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d19b      	bne.n	8005608 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000074 	.word	0x20000074

080056e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	; 0x28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80056f2:	f7fd fc49 	bl	8002f88 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	4413      	add	r3, r2
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005702:	f7fd fc41 	bl	8002f88 <HAL_GetTick>
 8005706:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005710:	4b3d      	ldr	r3, [pc, #244]	; (8005808 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	00da      	lsls	r2, r3, #3
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	0d1b      	lsrs	r3, r3, #20
 8005720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005722:	fb02 f303 	mul.w	r3, r2, r3
 8005726:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005728:	e060      	b.n	80057ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005730:	d107      	bne.n	8005742 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005740:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005748:	d050      	beq.n	80057ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800574a:	f7fd fc1d 	bl	8002f88 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005756:	429a      	cmp	r2, r3
 8005758:	d902      	bls.n	8005760 <SPI_WaitFifoStateUntilTimeout+0x80>
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	2b00      	cmp	r3, #0
 800575e:	d13d      	bne.n	80057dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800576e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005778:	d111      	bne.n	800579e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005782:	d004      	beq.n	800578e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578c:	d107      	bne.n	800579e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800579c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a6:	d10f      	bne.n	80057c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e010      	b.n	80057fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4013      	ands	r3, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d196      	bne.n	800572a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3728      	adds	r7, #40	; 0x28
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000074 	.word	0x20000074

0800580c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005820:	d111      	bne.n	8005846 <SPI_EndRxTransaction+0x3a>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582a:	d004      	beq.n	8005836 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005834:	d107      	bne.n	8005846 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005844:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800584e:	d112      	bne.n	8005876 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2200      	movs	r2, #0
 8005858:	2180      	movs	r1, #128	; 0x80
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f7ff feb8 	bl	80055d0 <SPI_WaitFlagStateUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d021      	beq.n	80058aa <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586a:	f043 0220 	orr.w	r2, r3, #32
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e03d      	b.n	80058f2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005876:	4b21      	ldr	r3, [pc, #132]	; (80058fc <SPI_EndRxTransaction+0xf0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a21      	ldr	r2, [pc, #132]	; (8005900 <SPI_EndRxTransaction+0xf4>)
 800587c:	fba2 2303 	umull	r2, r3, r2, r3
 8005880:	0d5b      	lsrs	r3, r3, #21
 8005882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	3b01      	subs	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a2:	2b80      	cmp	r3, #128	; 0x80
 80058a4:	d0f2      	beq.n	800588c <SPI_EndRxTransaction+0x80>
 80058a6:	e000      	b.n	80058aa <SPI_EndRxTransaction+0x9e>
        break;
 80058a8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058b2:	d11d      	bne.n	80058f0 <SPI_EndRxTransaction+0xe4>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058bc:	d004      	beq.n	80058c8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c6:	d113      	bne.n	80058f0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff ff03 	bl	80056e0 <SPI_WaitFifoStateUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d007      	beq.n	80058f0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e4:	f043 0220 	orr.w	r2, r3, #32
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e000      	b.n	80058f2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000074 	.word	0x20000074
 8005900:	165e9f81 	.word	0x165e9f81

08005904 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f7ff fedf 	bl	80056e0 <SPI_WaitFifoStateUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592c:	f043 0220 	orr.w	r2, r3, #32
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e046      	b.n	80059c6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005938:	4b25      	ldr	r3, [pc, #148]	; (80059d0 <SPI_EndRxTxTransaction+0xcc>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a25      	ldr	r2, [pc, #148]	; (80059d4 <SPI_EndRxTxTransaction+0xd0>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	0d5b      	lsrs	r3, r3, #21
 8005944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005948:	fb02 f303 	mul.w	r3, r2, r3
 800594c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005956:	d112      	bne.n	800597e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2200      	movs	r2, #0
 8005960:	2180      	movs	r1, #128	; 0x80
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7ff fe34 	bl	80055d0 <SPI_WaitFlagStateUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005972:	f043 0220 	orr.w	r2, r3, #32
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e023      	b.n	80059c6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	3b01      	subs	r3, #1
 8005988:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005994:	2b80      	cmp	r3, #128	; 0x80
 8005996:	d0f2      	beq.n	800597e <SPI_EndRxTxTransaction+0x7a>
 8005998:	e000      	b.n	800599c <SPI_EndRxTxTransaction+0x98>
        break;
 800599a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7ff fe99 	bl	80056e0 <SPI_WaitFifoStateUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e000      	b.n	80059c6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000074 	.word	0x20000074
 80059d4:	165e9f81 	.word	0x165e9f81

080059d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e049      	b.n	8005a7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fd f92e 	bl	8002c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f000 fd26 	bl	8006468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d001      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e054      	b.n	8005b4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a26      	ldr	r2, [pc, #152]	; (8005b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d022      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aca:	d01d      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a22      	ldr	r2, [pc, #136]	; (8005b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d018      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a21      	ldr	r2, [pc, #132]	; (8005b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d013      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1f      	ldr	r2, [pc, #124]	; (8005b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00e      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1e      	ldr	r2, [pc, #120]	; (8005b68 <HAL_TIM_Base_Start_IT+0xe0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d009      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1c      	ldr	r2, [pc, #112]	; (8005b6c <HAL_TIM_Base_Start_IT+0xe4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <HAL_TIM_Base_Start_IT+0xe8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d115      	bne.n	8005b34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <HAL_TIM_Base_Start_IT+0xec>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b06      	cmp	r3, #6
 8005b18:	d015      	beq.n	8005b46 <HAL_TIM_Base_Start_IT+0xbe>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b20:	d011      	beq.n	8005b46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 0201 	orr.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b32:	e008      	b.n	8005b46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	e000      	b.n	8005b48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40000400 	.word	0x40000400
 8005b60:	40000800 	.word	0x40000800
 8005b64:	40000c00 	.word	0x40000c00
 8005b68:	40010400 	.word	0x40010400
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40001800 	.word	0x40001800
 8005b74:	00010007 	.word	0x00010007

08005b78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e049      	b.n	8005c1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fd f882 	bl	8002ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f000 fc56 	bl	8006468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d109      	bne.n	8005c4c <HAL_TIM_PWM_Start+0x24>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	bf14      	ite	ne
 8005c44:	2301      	movne	r3, #1
 8005c46:	2300      	moveq	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	e03c      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x9e>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d109      	bne.n	8005c66 <HAL_TIM_PWM_Start+0x3e>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	bf14      	ite	ne
 8005c5e:	2301      	movne	r3, #1
 8005c60:	2300      	moveq	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	e02f      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x9e>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d109      	bne.n	8005c80 <HAL_TIM_PWM_Start+0x58>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	bf14      	ite	ne
 8005c78:	2301      	movne	r3, #1
 8005c7a:	2300      	moveq	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	e022      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x9e>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b0c      	cmp	r3, #12
 8005c84:	d109      	bne.n	8005c9a <HAL_TIM_PWM_Start+0x72>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	bf14      	ite	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	2300      	moveq	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	e015      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x9e>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b10      	cmp	r3, #16
 8005c9e:	d109      	bne.n	8005cb4 <HAL_TIM_PWM_Start+0x8c>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	bf14      	ite	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	2300      	moveq	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	e008      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x9e>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	bf14      	ite	ne
 8005cc0:	2301      	movne	r3, #1
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e092      	b.n	8005df4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_PWM_Start+0xb6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cdc:	e023      	b.n	8005d26 <HAL_TIM_PWM_Start+0xfe>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_PWM_Start+0xc6>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cec:	e01b      	b.n	8005d26 <HAL_TIM_PWM_Start+0xfe>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d104      	bne.n	8005cfe <HAL_TIM_PWM_Start+0xd6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cfc:	e013      	b.n	8005d26 <HAL_TIM_PWM_Start+0xfe>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b0c      	cmp	r3, #12
 8005d02:	d104      	bne.n	8005d0e <HAL_TIM_PWM_Start+0xe6>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d0c:	e00b      	b.n	8005d26 <HAL_TIM_PWM_Start+0xfe>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b10      	cmp	r3, #16
 8005d12:	d104      	bne.n	8005d1e <HAL_TIM_PWM_Start+0xf6>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d1c:	e003      	b.n	8005d26 <HAL_TIM_PWM_Start+0xfe>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2202      	movs	r2, #2
 8005d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 ff32 	bl	8006b98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a30      	ldr	r2, [pc, #192]	; (8005dfc <HAL_TIM_PWM_Start+0x1d4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIM_PWM_Start+0x120>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2f      	ldr	r2, [pc, #188]	; (8005e00 <HAL_TIM_PWM_Start+0x1d8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d101      	bne.n	8005d4c <HAL_TIM_PWM_Start+0x124>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <HAL_TIM_PWM_Start+0x126>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a25      	ldr	r2, [pc, #148]	; (8005dfc <HAL_TIM_PWM_Start+0x1d4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d022      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x18a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d74:	d01d      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x18a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a22      	ldr	r2, [pc, #136]	; (8005e04 <HAL_TIM_PWM_Start+0x1dc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d018      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x18a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a20      	ldr	r2, [pc, #128]	; (8005e08 <HAL_TIM_PWM_Start+0x1e0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x18a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <HAL_TIM_PWM_Start+0x1e4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x18a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a19      	ldr	r2, [pc, #100]	; (8005e00 <HAL_TIM_PWM_Start+0x1d8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x18a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1b      	ldr	r2, [pc, #108]	; (8005e10 <HAL_TIM_PWM_Start+0x1e8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_TIM_PWM_Start+0x18a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a19      	ldr	r2, [pc, #100]	; (8005e14 <HAL_TIM_PWM_Start+0x1ec>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d115      	bne.n	8005dde <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	4b17      	ldr	r3, [pc, #92]	; (8005e18 <HAL_TIM_PWM_Start+0x1f0>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b06      	cmp	r3, #6
 8005dc2:	d015      	beq.n	8005df0 <HAL_TIM_PWM_Start+0x1c8>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dca:	d011      	beq.n	8005df0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ddc:	e008      	b.n	8005df0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0201 	orr.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e000      	b.n	8005df2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40010000 	.word	0x40010000
 8005e00:	40010400 	.word	0x40010400
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800
 8005e0c:	40000c00 	.word	0x40000c00
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40001800 	.word	0x40001800
 8005e18:	00010007 	.word	0x00010007

08005e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d122      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d11b      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0202 	mvn.w	r2, #2
 8005e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fae4 	bl	800642c <HAL_TIM_IC_CaptureCallback>
 8005e64:	e005      	b.n	8005e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fad6 	bl	8006418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fae7 	bl	8006440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d122      	bne.n	8005ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d11b      	bne.n	8005ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0204 	mvn.w	r2, #4
 8005e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 faba 	bl	800642c <HAL_TIM_IC_CaptureCallback>
 8005eb8:	e005      	b.n	8005ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 faac 	bl	8006418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fabd 	bl	8006440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	d122      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d11b      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0208 	mvn.w	r2, #8
 8005ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2204      	movs	r2, #4
 8005ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa90 	bl	800642c <HAL_TIM_IC_CaptureCallback>
 8005f0c:	e005      	b.n	8005f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fa82 	bl	8006418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fa93 	bl	8006440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0310 	and.w	r3, r3, #16
 8005f2a:	2b10      	cmp	r3, #16
 8005f2c:	d122      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d11b      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0210 	mvn.w	r2, #16
 8005f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2208      	movs	r2, #8
 8005f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa66 	bl	800642c <HAL_TIM_IC_CaptureCallback>
 8005f60:	e005      	b.n	8005f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa58 	bl	8006418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fa69 	bl	8006440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d10e      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d107      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0201 	mvn.w	r2, #1
 8005f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fc fa2a 	bl	80023f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005faa:	2b80      	cmp	r3, #128	; 0x80
 8005fac:	d10e      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb8:	2b80      	cmp	r3, #128	; 0x80
 8005fba:	d107      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fea4 	bl	8006d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fda:	d10e      	bne.n	8005ffa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe6:	2b80      	cmp	r3, #128	; 0x80
 8005fe8:	d107      	bne.n	8005ffa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fe97 	bl	8006d28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d10e      	bne.n	8006026 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d107      	bne.n	8006026 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800601e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fa17 	bl	8006454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b20      	cmp	r3, #32
 8006032:	d10e      	bne.n	8006052 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b20      	cmp	r3, #32
 8006040:	d107      	bne.n	8006052 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f06f 0220 	mvn.w	r2, #32
 800604a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fe57 	bl	8006d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006052:	bf00      	nop
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006076:	2302      	movs	r3, #2
 8006078:	e0ff      	b.n	800627a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b14      	cmp	r3, #20
 8006086:	f200 80f0 	bhi.w	800626a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060e5 	.word	0x080060e5
 8006094:	0800626b 	.word	0x0800626b
 8006098:	0800626b 	.word	0x0800626b
 800609c:	0800626b 	.word	0x0800626b
 80060a0:	08006125 	.word	0x08006125
 80060a4:	0800626b 	.word	0x0800626b
 80060a8:	0800626b 	.word	0x0800626b
 80060ac:	0800626b 	.word	0x0800626b
 80060b0:	08006167 	.word	0x08006167
 80060b4:	0800626b 	.word	0x0800626b
 80060b8:	0800626b 	.word	0x0800626b
 80060bc:	0800626b 	.word	0x0800626b
 80060c0:	080061a7 	.word	0x080061a7
 80060c4:	0800626b 	.word	0x0800626b
 80060c8:	0800626b 	.word	0x0800626b
 80060cc:	0800626b 	.word	0x0800626b
 80060d0:	080061e9 	.word	0x080061e9
 80060d4:	0800626b 	.word	0x0800626b
 80060d8:	0800626b 	.word	0x0800626b
 80060dc:	0800626b 	.word	0x0800626b
 80060e0:	08006229 	.word	0x08006229
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fa5c 	bl	80065a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0208 	orr.w	r2, r2, #8
 80060fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0204 	bic.w	r2, r2, #4
 800610e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6999      	ldr	r1, [r3, #24]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	619a      	str	r2, [r3, #24]
      break;
 8006122:	e0a5      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 faae 	bl	800668c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800613e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800614e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6999      	ldr	r1, [r3, #24]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	021a      	lsls	r2, r3, #8
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	619a      	str	r2, [r3, #24]
      break;
 8006164:	e084      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fb05 	bl	800677c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0208 	orr.w	r2, r2, #8
 8006180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0204 	bic.w	r2, r2, #4
 8006190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69d9      	ldr	r1, [r3, #28]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	61da      	str	r2, [r3, #28]
      break;
 80061a4:	e064      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fb5b 	bl	8006868 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69d9      	ldr	r1, [r3, #28]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	021a      	lsls	r2, r3, #8
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	61da      	str	r2, [r3, #28]
      break;
 80061e6:	e043      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fb92 	bl	8006918 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0208 	orr.w	r2, r2, #8
 8006202:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0204 	bic.w	r2, r2, #4
 8006212:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006226:	e023      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fbc4 	bl	80069bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006242:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006252:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	021a      	lsls	r2, r3, #8
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006268:	e002      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	75fb      	strb	r3, [r7, #23]
      break;
 800626e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006278:	7dfb      	ldrb	r3, [r7, #23]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop

08006284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_TIM_ConfigClockSource+0x1c>
 800629c:	2302      	movs	r3, #2
 800629e:	e0b4      	b.n	800640a <HAL_TIM_ConfigClockSource+0x186>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	4b56      	ldr	r3, [pc, #344]	; (8006414 <HAL_TIM_ConfigClockSource+0x190>)
 80062bc:	4013      	ands	r3, r2
 80062be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d8:	d03e      	beq.n	8006358 <HAL_TIM_ConfigClockSource+0xd4>
 80062da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062de:	f200 8087 	bhi.w	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e6:	f000 8086 	beq.w	80063f6 <HAL_TIM_ConfigClockSource+0x172>
 80062ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ee:	d87f      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f0:	2b70      	cmp	r3, #112	; 0x70
 80062f2:	d01a      	beq.n	800632a <HAL_TIM_ConfigClockSource+0xa6>
 80062f4:	2b70      	cmp	r3, #112	; 0x70
 80062f6:	d87b      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f8:	2b60      	cmp	r3, #96	; 0x60
 80062fa:	d050      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x11a>
 80062fc:	2b60      	cmp	r3, #96	; 0x60
 80062fe:	d877      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006300:	2b50      	cmp	r3, #80	; 0x50
 8006302:	d03c      	beq.n	800637e <HAL_TIM_ConfigClockSource+0xfa>
 8006304:	2b50      	cmp	r3, #80	; 0x50
 8006306:	d873      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006308:	2b40      	cmp	r3, #64	; 0x40
 800630a:	d058      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x13a>
 800630c:	2b40      	cmp	r3, #64	; 0x40
 800630e:	d86f      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006310:	2b30      	cmp	r3, #48	; 0x30
 8006312:	d064      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x15a>
 8006314:	2b30      	cmp	r3, #48	; 0x30
 8006316:	d86b      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006318:	2b20      	cmp	r3, #32
 800631a:	d060      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x15a>
 800631c:	2b20      	cmp	r3, #32
 800631e:	d867      	bhi.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d05c      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x15a>
 8006324:	2b10      	cmp	r3, #16
 8006326:	d05a      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x15a>
 8006328:	e062      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800633a:	f000 fc0d 	bl	8006b58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800634c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	609a      	str	r2, [r3, #8]
      break;
 8006356:	e04f      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006368:	f000 fbf6 	bl	8006b58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800637a:	609a      	str	r2, [r3, #8]
      break;
 800637c:	e03c      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800638a:	461a      	mov	r2, r3
 800638c:	f000 fb6a 	bl	8006a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2150      	movs	r1, #80	; 0x50
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fbc3 	bl	8006b22 <TIM_ITRx_SetConfig>
      break;
 800639c:	e02c      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063aa:	461a      	mov	r2, r3
 80063ac:	f000 fb89 	bl	8006ac2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2160      	movs	r1, #96	; 0x60
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fbb3 	bl	8006b22 <TIM_ITRx_SetConfig>
      break;
 80063bc:	e01c      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	461a      	mov	r2, r3
 80063cc:	f000 fb4a 	bl	8006a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2140      	movs	r1, #64	; 0x40
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fba3 	bl	8006b22 <TIM_ITRx_SetConfig>
      break;
 80063dc:	e00c      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f000 fb9a 	bl	8006b22 <TIM_ITRx_SetConfig>
      break;
 80063ee:	e003      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
      break;
 80063f4:	e000      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	fffeff88 	.word	0xfffeff88

08006418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a40      	ldr	r2, [pc, #256]	; (800657c <TIM_Base_SetConfig+0x114>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d013      	beq.n	80064a8 <TIM_Base_SetConfig+0x40>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006486:	d00f      	beq.n	80064a8 <TIM_Base_SetConfig+0x40>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a3d      	ldr	r2, [pc, #244]	; (8006580 <TIM_Base_SetConfig+0x118>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00b      	beq.n	80064a8 <TIM_Base_SetConfig+0x40>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a3c      	ldr	r2, [pc, #240]	; (8006584 <TIM_Base_SetConfig+0x11c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d007      	beq.n	80064a8 <TIM_Base_SetConfig+0x40>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a3b      	ldr	r2, [pc, #236]	; (8006588 <TIM_Base_SetConfig+0x120>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_Base_SetConfig+0x40>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a3a      	ldr	r2, [pc, #232]	; (800658c <TIM_Base_SetConfig+0x124>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d108      	bne.n	80064ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a2f      	ldr	r2, [pc, #188]	; (800657c <TIM_Base_SetConfig+0x114>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d02b      	beq.n	800651a <TIM_Base_SetConfig+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c8:	d027      	beq.n	800651a <TIM_Base_SetConfig+0xb2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a2c      	ldr	r2, [pc, #176]	; (8006580 <TIM_Base_SetConfig+0x118>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d023      	beq.n	800651a <TIM_Base_SetConfig+0xb2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a2b      	ldr	r2, [pc, #172]	; (8006584 <TIM_Base_SetConfig+0x11c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01f      	beq.n	800651a <TIM_Base_SetConfig+0xb2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a2a      	ldr	r2, [pc, #168]	; (8006588 <TIM_Base_SetConfig+0x120>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d01b      	beq.n	800651a <TIM_Base_SetConfig+0xb2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a29      	ldr	r2, [pc, #164]	; (800658c <TIM_Base_SetConfig+0x124>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d017      	beq.n	800651a <TIM_Base_SetConfig+0xb2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a28      	ldr	r2, [pc, #160]	; (8006590 <TIM_Base_SetConfig+0x128>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d013      	beq.n	800651a <TIM_Base_SetConfig+0xb2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a27      	ldr	r2, [pc, #156]	; (8006594 <TIM_Base_SetConfig+0x12c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00f      	beq.n	800651a <TIM_Base_SetConfig+0xb2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a26      	ldr	r2, [pc, #152]	; (8006598 <TIM_Base_SetConfig+0x130>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00b      	beq.n	800651a <TIM_Base_SetConfig+0xb2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a25      	ldr	r2, [pc, #148]	; (800659c <TIM_Base_SetConfig+0x134>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d007      	beq.n	800651a <TIM_Base_SetConfig+0xb2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a24      	ldr	r2, [pc, #144]	; (80065a0 <TIM_Base_SetConfig+0x138>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d003      	beq.n	800651a <TIM_Base_SetConfig+0xb2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a23      	ldr	r2, [pc, #140]	; (80065a4 <TIM_Base_SetConfig+0x13c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d108      	bne.n	800652c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a0a      	ldr	r2, [pc, #40]	; (800657c <TIM_Base_SetConfig+0x114>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_Base_SetConfig+0xf8>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a0c      	ldr	r2, [pc, #48]	; (800658c <TIM_Base_SetConfig+0x124>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d103      	bne.n	8006568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	615a      	str	r2, [r3, #20]
}
 800656e:	bf00      	nop
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40010000 	.word	0x40010000
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800
 8006588:	40000c00 	.word	0x40000c00
 800658c:	40010400 	.word	0x40010400
 8006590:	40014000 	.word	0x40014000
 8006594:	40014400 	.word	0x40014400
 8006598:	40014800 	.word	0x40014800
 800659c:	40001800 	.word	0x40001800
 80065a0:	40001c00 	.word	0x40001c00
 80065a4:	40002000 	.word	0x40002000

080065a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	f023 0201 	bic.w	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4b2b      	ldr	r3, [pc, #172]	; (8006680 <TIM_OC1_SetConfig+0xd8>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0303 	bic.w	r3, r3, #3
 80065de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f023 0302 	bic.w	r3, r3, #2
 80065f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a21      	ldr	r2, [pc, #132]	; (8006684 <TIM_OC1_SetConfig+0xdc>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_OC1_SetConfig+0x64>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a20      	ldr	r2, [pc, #128]	; (8006688 <TIM_OC1_SetConfig+0xe0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d10c      	bne.n	8006626 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f023 0308 	bic.w	r3, r3, #8
 8006612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f023 0304 	bic.w	r3, r3, #4
 8006624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a16      	ldr	r2, [pc, #88]	; (8006684 <TIM_OC1_SetConfig+0xdc>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d003      	beq.n	8006636 <TIM_OC1_SetConfig+0x8e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a15      	ldr	r2, [pc, #84]	; (8006688 <TIM_OC1_SetConfig+0xe0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d111      	bne.n	800665a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800663c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	621a      	str	r2, [r3, #32]
}
 8006674:	bf00      	nop
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	fffeff8f 	.word	0xfffeff8f
 8006684:	40010000 	.word	0x40010000
 8006688:	40010400 	.word	0x40010400

0800668c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f023 0210 	bic.w	r2, r3, #16
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4b2e      	ldr	r3, [pc, #184]	; (8006770 <TIM_OC2_SetConfig+0xe4>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f023 0320 	bic.w	r3, r3, #32
 80066d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a23      	ldr	r2, [pc, #140]	; (8006774 <TIM_OC2_SetConfig+0xe8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d003      	beq.n	80066f4 <TIM_OC2_SetConfig+0x68>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a22      	ldr	r2, [pc, #136]	; (8006778 <TIM_OC2_SetConfig+0xec>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d10d      	bne.n	8006710 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800670e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a18      	ldr	r2, [pc, #96]	; (8006774 <TIM_OC2_SetConfig+0xe8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d003      	beq.n	8006720 <TIM_OC2_SetConfig+0x94>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a17      	ldr	r2, [pc, #92]	; (8006778 <TIM_OC2_SetConfig+0xec>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d113      	bne.n	8006748 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800672e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	621a      	str	r2, [r3, #32]
}
 8006762:	bf00      	nop
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	feff8fff 	.word	0xfeff8fff
 8006774:	40010000 	.word	0x40010000
 8006778:	40010400 	.word	0x40010400

0800677c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4b2d      	ldr	r3, [pc, #180]	; (800685c <TIM_OC3_SetConfig+0xe0>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a22      	ldr	r2, [pc, #136]	; (8006860 <TIM_OC3_SetConfig+0xe4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d003      	beq.n	80067e2 <TIM_OC3_SetConfig+0x66>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a21      	ldr	r2, [pc, #132]	; (8006864 <TIM_OC3_SetConfig+0xe8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10d      	bne.n	80067fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a17      	ldr	r2, [pc, #92]	; (8006860 <TIM_OC3_SetConfig+0xe4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d003      	beq.n	800680e <TIM_OC3_SetConfig+0x92>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a16      	ldr	r2, [pc, #88]	; (8006864 <TIM_OC3_SetConfig+0xe8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d113      	bne.n	8006836 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800681c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	621a      	str	r2, [r3, #32]
}
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	fffeff8f 	.word	0xfffeff8f
 8006860:	40010000 	.word	0x40010000
 8006864:	40010400 	.word	0x40010400

08006868 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4b1e      	ldr	r3, [pc, #120]	; (800690c <TIM_OC4_SetConfig+0xa4>)
 8006894:	4013      	ands	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	021b      	lsls	r3, r3, #8
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	031b      	lsls	r3, r3, #12
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	4313      	orrs	r3, r2
 80068be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a13      	ldr	r2, [pc, #76]	; (8006910 <TIM_OC4_SetConfig+0xa8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d003      	beq.n	80068d0 <TIM_OC4_SetConfig+0x68>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a12      	ldr	r2, [pc, #72]	; (8006914 <TIM_OC4_SetConfig+0xac>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d109      	bne.n	80068e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	019b      	lsls	r3, r3, #6
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	621a      	str	r2, [r3, #32]
}
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	feff8fff 	.word	0xfeff8fff
 8006910:	40010000 	.word	0x40010000
 8006914:	40010400 	.word	0x40010400

08006918 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4b1b      	ldr	r3, [pc, #108]	; (80069b0 <TIM_OC5_SetConfig+0x98>)
 8006944:	4013      	ands	r3, r2
 8006946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006958:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	041b      	lsls	r3, r3, #16
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <TIM_OC5_SetConfig+0x9c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d003      	beq.n	8006976 <TIM_OC5_SetConfig+0x5e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a11      	ldr	r2, [pc, #68]	; (80069b8 <TIM_OC5_SetConfig+0xa0>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d109      	bne.n	800698a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800697c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	621a      	str	r2, [r3, #32]
}
 80069a4:	bf00      	nop
 80069a6:	371c      	adds	r7, #28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	fffeff8f 	.word	0xfffeff8f
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40010400 	.word	0x40010400

080069bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4b1c      	ldr	r3, [pc, #112]	; (8006a58 <TIM_OC6_SetConfig+0x9c>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	021b      	lsls	r3, r3, #8
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	051b      	lsls	r3, r3, #20
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a13      	ldr	r2, [pc, #76]	; (8006a5c <TIM_OC6_SetConfig+0xa0>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d003      	beq.n	8006a1c <TIM_OC6_SetConfig+0x60>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a12      	ldr	r2, [pc, #72]	; (8006a60 <TIM_OC6_SetConfig+0xa4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d109      	bne.n	8006a30 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	029b      	lsls	r3, r3, #10
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	621a      	str	r2, [r3, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	feff8fff 	.word	0xfeff8fff
 8006a5c:	40010000 	.word	0x40010000
 8006a60:	40010400 	.word	0x40010400

08006a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f023 0201 	bic.w	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f023 030a 	bic.w	r3, r3, #10
 8006aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	621a      	str	r2, [r3, #32]
}
 8006ab6:	bf00      	nop
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b087      	sub	sp, #28
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f023 0210 	bic.w	r2, r3, #16
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	031b      	lsls	r3, r3, #12
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006afe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	621a      	str	r2, [r3, #32]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b085      	sub	sp, #20
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f043 0307 	orr.w	r3, r3, #7
 8006b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	609a      	str	r2, [r3, #8]
}
 8006b4c:	bf00      	nop
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	021a      	lsls	r2, r3, #8
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	609a      	str	r2, [r3, #8]
}
 8006b8c:	bf00      	nop
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f003 031f 	and.w	r3, r3, #31
 8006baa:	2201      	movs	r2, #1
 8006bac:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a1a      	ldr	r2, [r3, #32]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	401a      	ands	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a1a      	ldr	r2, [r3, #32]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 031f 	and.w	r3, r3, #31
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	621a      	str	r2, [r3, #32]
}
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e06d      	b.n	8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a30      	ldr	r2, [pc, #192]	; (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d004      	beq.n	8006c30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a2f      	ldr	r2, [pc, #188]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d108      	bne.n	8006c42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a20      	ldr	r2, [pc, #128]	; (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d022      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6e:	d01d      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d018      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d013      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a1a      	ldr	r2, [pc, #104]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d00e      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a15      	ldr	r2, [pc, #84]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d009      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a16      	ldr	r2, [pc, #88]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d004      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d10c      	bne.n	8006cc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40010000 	.word	0x40010000
 8006ce8:	40010400 	.word	0x40010400
 8006cec:	40000400 	.word	0x40000400
 8006cf0:	40000800 	.word	0x40000800
 8006cf4:	40000c00 	.word	0x40000c00
 8006cf8:	40014000 	.word	0x40014000
 8006cfc:	40001800 	.word	0x40001800

08006d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e040      	b.n	8006dd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d106      	bne.n	8006d64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fc f830 	bl	8002dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2224      	movs	r2, #36	; 0x24
 8006d68:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0201 	bic.w	r2, r2, #1
 8006d78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fbc0 	bl	8007500 <UART_SetConfig>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e022      	b.n	8006dd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fe18 	bl	80079c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006da6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006db6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0201 	orr.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fe9f 	bl	8007b0c <UART_CheckIdleState>
 8006dce:	4603      	mov	r3, r0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b08b      	sub	sp, #44	; 0x2c
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d147      	bne.n	8006e7e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <HAL_UART_Transmit_IT+0x22>
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e040      	b.n	8006e80 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	88fa      	ldrh	r2, [r7, #6]
 8006e08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	88fa      	ldrh	r2, [r7, #6]
 8006e10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2221      	movs	r2, #33	; 0x21
 8006e26:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e30:	d107      	bne.n	8006e42 <HAL_UART_Transmit_IT+0x6a>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4a13      	ldr	r2, [pc, #76]	; (8006e8c <HAL_UART_Transmit_IT+0xb4>)
 8006e3e:	66da      	str	r2, [r3, #108]	; 0x6c
 8006e40:	e002      	b.n	8006e48 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4a12      	ldr	r2, [pc, #72]	; (8006e90 <HAL_UART_Transmit_IT+0xb8>)
 8006e46:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	613b      	str	r3, [r7, #16]
   return(result);
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	623b      	str	r3, [r7, #32]
 8006e68:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	69f9      	ldr	r1, [r7, #28]
 8006e6c:	6a3a      	ldr	r2, [r7, #32]
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e6      	bne.n	8006e48 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e000      	b.n	8006e80 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006e7e:	2302      	movs	r3, #2
  }
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	372c      	adds	r7, #44	; 0x2c
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	0800803f 	.word	0x0800803f
 8006e90:	08007f89 	.word	0x08007f89

08006e94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	; 0x28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	d132      	bne.n	8006f12 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <HAL_UART_Receive_IT+0x24>
 8006eb2:	88fb      	ldrh	r3, [r7, #6]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e02b      	b.n	8006f14 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d018      	beq.n	8006f02 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	623b      	str	r3, [r7, #32]
 8006ef0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	69f9      	ldr	r1, [r7, #28]
 8006ef4:	6a3a      	ldr	r2, [r7, #32]
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e6      	bne.n	8006ed0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f02:	88fb      	ldrh	r3, [r7, #6]
 8006f04:	461a      	mov	r2, r3
 8006f06:	68b9      	ldr	r1, [r7, #8]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 fefd 	bl	8007d08 <UART_Start_Receive_IT>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	e000      	b.n	8006f14 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006f12:	2302      	movs	r3, #2
  }
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3728      	adds	r7, #40	; 0x28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b0ba      	sub	sp, #232	; 0xe8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f46:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d115      	bne.n	8006f84 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f5c:	f003 0320 	and.w	r3, r3, #32
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00f      	beq.n	8006f84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d009      	beq.n	8006f84 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 8297 	beq.w	80074a8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
      }
      return;
 8006f82:	e291      	b.n	80074a8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 8117 	beq.w	80071bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d106      	bne.n	8006fa8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f9e:	4b85      	ldr	r3, [pc, #532]	; (80071b4 <HAL_UART_IRQHandler+0x298>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 810a 	beq.w	80071bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d011      	beq.n	8006fd8 <HAL_UART_IRQHandler+0xbc>
 8006fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fce:	f043 0201 	orr.w	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d011      	beq.n	8007008 <HAL_UART_IRQHandler+0xec>
 8006fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00b      	beq.n	8007008 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ffe:	f043 0204 	orr.w	r2, r3, #4
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d011      	beq.n	8007038 <HAL_UART_IRQHandler+0x11c>
 8007014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00b      	beq.n	8007038 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2204      	movs	r2, #4
 8007026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800702e:	f043 0202 	orr.w	r2, r3, #2
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703c:	f003 0308 	and.w	r3, r3, #8
 8007040:	2b00      	cmp	r3, #0
 8007042:	d017      	beq.n	8007074 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	2b00      	cmp	r3, #0
 800704e:	d105      	bne.n	800705c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007054:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00b      	beq.n	8007074 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2208      	movs	r2, #8
 8007062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800706a:	f043 0208 	orr.w	r2, r3, #8
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800707c:	2b00      	cmp	r3, #0
 800707e:	d012      	beq.n	80070a6 <HAL_UART_IRQHandler+0x18a>
 8007080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00c      	beq.n	80070a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800709c:	f043 0220 	orr.w	r2, r3, #32
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 81fd 	beq.w	80074ac <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00d      	beq.n	80070da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d007      	beq.n	80070da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ee:	2b40      	cmp	r3, #64	; 0x40
 80070f0:	d005      	beq.n	80070fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d04f      	beq.n	800719e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fec8 	bl	8007e94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d141      	bne.n	8007196 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3308      	adds	r3, #8
 8007118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800712c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3308      	adds	r3, #8
 800713a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800713e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800714a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1d9      	bne.n	8007112 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007162:	2b00      	cmp	r3, #0
 8007164:	d013      	beq.n	800718e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800716a:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <HAL_UART_IRQHandler+0x29c>)
 800716c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007172:	4618      	mov	r0, r3
 8007174:	f7fc f8b9 	bl	80032ea <HAL_DMA_Abort_IT>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d017      	beq.n	80071ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718c:	e00f      	b.n	80071ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f9a0 	bl	80074d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007194:	e00b      	b.n	80071ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f99c 	bl	80074d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800719c:	e007      	b.n	80071ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f998 	bl	80074d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80071ac:	e17e      	b.n	80074ac <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ae:	bf00      	nop
    return;
 80071b0:	e17c      	b.n	80074ac <HAL_UART_IRQHandler+0x590>
 80071b2:	bf00      	nop
 80071b4:	04000120 	.word	0x04000120
 80071b8:	08007f5d 	.word	0x08007f5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	f040 814c 	bne.w	800745e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ca:	f003 0310 	and.w	r3, r3, #16
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 8145 	beq.w	800745e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 813e 	beq.w	800745e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2210      	movs	r2, #16
 80071e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f4:	2b40      	cmp	r3, #64	; 0x40
 80071f6:	f040 80b6 	bne.w	8007366 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007206:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8150 	beq.w	80074b0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800721a:	429a      	cmp	r2, r3
 800721c:	f080 8148 	bcs.w	80074b0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007226:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007234:	f000 8086 	beq.w	8007344 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800724c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007262:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007266:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800726e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800727a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1da      	bne.n	8007238 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3308      	adds	r3, #8
 8007288:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007294:	f023 0301 	bic.w	r3, r3, #1
 8007298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3308      	adds	r3, #8
 80072a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e1      	bne.n	8007282 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3308      	adds	r3, #8
 80072c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3308      	adds	r3, #8
 80072de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e3      	bne.n	80072be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007314:	f023 0310 	bic.w	r3, r3, #16
 8007318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007326:	65bb      	str	r3, [r7, #88]	; 0x58
 8007328:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800732c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e4      	bne.n	8007304 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733e:	4618      	mov	r0, r3
 8007340:	f7fb ff63 	bl	800320a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007356:	b29b      	uxth	r3, r3
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	b29b      	uxth	r3, r3
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f8c2 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007364:	e0a4      	b.n	80074b0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007372:	b29b      	uxth	r3, r3
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007380:	b29b      	uxth	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 8096 	beq.w	80074b4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8091 	beq.w	80074b4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073b4:	647b      	str	r3, [r7, #68]	; 0x44
 80073b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e4      	bne.n	8007392 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3308      	adds	r3, #8
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	623b      	str	r3, [r7, #32]
   return(result);
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	f023 0301 	bic.w	r3, r3, #1
 80073de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073ec:	633a      	str	r2, [r7, #48]	; 0x30
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e3      	bne.n	80073c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	60fb      	str	r3, [r7, #12]
   return(result);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f023 0310 	bic.w	r3, r3, #16
 8007428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	461a      	mov	r2, r3
 8007432:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007436:	61fb      	str	r3, [r7, #28]
 8007438:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	69b9      	ldr	r1, [r7, #24]
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	617b      	str	r3, [r7, #20]
   return(result);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e4      	bne.n	8007414 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2202      	movs	r2, #2
 800744e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f846 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800745c:	e02a      	b.n	80074b4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800745e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00e      	beq.n	8007488 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800746a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800746e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007472:	2b00      	cmp	r3, #0
 8007474:	d008      	beq.n	8007488 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d01c      	beq.n	80074b8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	4798      	blx	r3
    }
    return;
 8007486:	e017      	b.n	80074b8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d012      	beq.n	80074ba <HAL_UART_IRQHandler+0x59e>
 8007494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00c      	beq.n	80074ba <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fe2c 	bl	80080fe <UART_EndTransmit_IT>
    return;
 80074a6:	e008      	b.n	80074ba <HAL_UART_IRQHandler+0x59e>
      return;
 80074a8:	bf00      	nop
 80074aa:	e006      	b.n	80074ba <HAL_UART_IRQHandler+0x59e>
    return;
 80074ac:	bf00      	nop
 80074ae:	e004      	b.n	80074ba <HAL_UART_IRQHandler+0x59e>
      return;
 80074b0:	bf00      	nop
 80074b2:	e002      	b.n	80074ba <HAL_UART_IRQHandler+0x59e>
      return;
 80074b4:	bf00      	nop
 80074b6:	e000      	b.n	80074ba <HAL_UART_IRQHandler+0x59e>
    return;
 80074b8:	bf00      	nop
  }

}
 80074ba:	37e8      	adds	r7, #232	; 0xe8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	4313      	orrs	r3, r2
 8007522:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	4ba6      	ldr	r3, [pc, #664]	; (80077c4 <UART_SetConfig+0x2c4>)
 800752c:	4013      	ands	r3, r2
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	6979      	ldr	r1, [r7, #20]
 8007534:	430b      	orrs	r3, r1
 8007536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	4313      	orrs	r3, r2
 800755c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	430a      	orrs	r2, r1
 8007570:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a94      	ldr	r2, [pc, #592]	; (80077c8 <UART_SetConfig+0x2c8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d120      	bne.n	80075be <UART_SetConfig+0xbe>
 800757c:	4b93      	ldr	r3, [pc, #588]	; (80077cc <UART_SetConfig+0x2cc>)
 800757e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	2b03      	cmp	r3, #3
 8007588:	d816      	bhi.n	80075b8 <UART_SetConfig+0xb8>
 800758a:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <UART_SetConfig+0x90>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	080075a1 	.word	0x080075a1
 8007594:	080075ad 	.word	0x080075ad
 8007598:	080075a7 	.word	0x080075a7
 800759c:	080075b3 	.word	0x080075b3
 80075a0:	2301      	movs	r3, #1
 80075a2:	77fb      	strb	r3, [r7, #31]
 80075a4:	e150      	b.n	8007848 <UART_SetConfig+0x348>
 80075a6:	2302      	movs	r3, #2
 80075a8:	77fb      	strb	r3, [r7, #31]
 80075aa:	e14d      	b.n	8007848 <UART_SetConfig+0x348>
 80075ac:	2304      	movs	r3, #4
 80075ae:	77fb      	strb	r3, [r7, #31]
 80075b0:	e14a      	b.n	8007848 <UART_SetConfig+0x348>
 80075b2:	2308      	movs	r3, #8
 80075b4:	77fb      	strb	r3, [r7, #31]
 80075b6:	e147      	b.n	8007848 <UART_SetConfig+0x348>
 80075b8:	2310      	movs	r3, #16
 80075ba:	77fb      	strb	r3, [r7, #31]
 80075bc:	e144      	b.n	8007848 <UART_SetConfig+0x348>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a83      	ldr	r2, [pc, #524]	; (80077d0 <UART_SetConfig+0x2d0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d132      	bne.n	800762e <UART_SetConfig+0x12e>
 80075c8:	4b80      	ldr	r3, [pc, #512]	; (80077cc <UART_SetConfig+0x2cc>)
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ce:	f003 030c 	and.w	r3, r3, #12
 80075d2:	2b0c      	cmp	r3, #12
 80075d4:	d828      	bhi.n	8007628 <UART_SetConfig+0x128>
 80075d6:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <UART_SetConfig+0xdc>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	08007611 	.word	0x08007611
 80075e0:	08007629 	.word	0x08007629
 80075e4:	08007629 	.word	0x08007629
 80075e8:	08007629 	.word	0x08007629
 80075ec:	0800761d 	.word	0x0800761d
 80075f0:	08007629 	.word	0x08007629
 80075f4:	08007629 	.word	0x08007629
 80075f8:	08007629 	.word	0x08007629
 80075fc:	08007617 	.word	0x08007617
 8007600:	08007629 	.word	0x08007629
 8007604:	08007629 	.word	0x08007629
 8007608:	08007629 	.word	0x08007629
 800760c:	08007623 	.word	0x08007623
 8007610:	2300      	movs	r3, #0
 8007612:	77fb      	strb	r3, [r7, #31]
 8007614:	e118      	b.n	8007848 <UART_SetConfig+0x348>
 8007616:	2302      	movs	r3, #2
 8007618:	77fb      	strb	r3, [r7, #31]
 800761a:	e115      	b.n	8007848 <UART_SetConfig+0x348>
 800761c:	2304      	movs	r3, #4
 800761e:	77fb      	strb	r3, [r7, #31]
 8007620:	e112      	b.n	8007848 <UART_SetConfig+0x348>
 8007622:	2308      	movs	r3, #8
 8007624:	77fb      	strb	r3, [r7, #31]
 8007626:	e10f      	b.n	8007848 <UART_SetConfig+0x348>
 8007628:	2310      	movs	r3, #16
 800762a:	77fb      	strb	r3, [r7, #31]
 800762c:	e10c      	b.n	8007848 <UART_SetConfig+0x348>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a68      	ldr	r2, [pc, #416]	; (80077d4 <UART_SetConfig+0x2d4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d120      	bne.n	800767a <UART_SetConfig+0x17a>
 8007638:	4b64      	ldr	r3, [pc, #400]	; (80077cc <UART_SetConfig+0x2cc>)
 800763a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007642:	2b30      	cmp	r3, #48	; 0x30
 8007644:	d013      	beq.n	800766e <UART_SetConfig+0x16e>
 8007646:	2b30      	cmp	r3, #48	; 0x30
 8007648:	d814      	bhi.n	8007674 <UART_SetConfig+0x174>
 800764a:	2b20      	cmp	r3, #32
 800764c:	d009      	beq.n	8007662 <UART_SetConfig+0x162>
 800764e:	2b20      	cmp	r3, #32
 8007650:	d810      	bhi.n	8007674 <UART_SetConfig+0x174>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <UART_SetConfig+0x15c>
 8007656:	2b10      	cmp	r3, #16
 8007658:	d006      	beq.n	8007668 <UART_SetConfig+0x168>
 800765a:	e00b      	b.n	8007674 <UART_SetConfig+0x174>
 800765c:	2300      	movs	r3, #0
 800765e:	77fb      	strb	r3, [r7, #31]
 8007660:	e0f2      	b.n	8007848 <UART_SetConfig+0x348>
 8007662:	2302      	movs	r3, #2
 8007664:	77fb      	strb	r3, [r7, #31]
 8007666:	e0ef      	b.n	8007848 <UART_SetConfig+0x348>
 8007668:	2304      	movs	r3, #4
 800766a:	77fb      	strb	r3, [r7, #31]
 800766c:	e0ec      	b.n	8007848 <UART_SetConfig+0x348>
 800766e:	2308      	movs	r3, #8
 8007670:	77fb      	strb	r3, [r7, #31]
 8007672:	e0e9      	b.n	8007848 <UART_SetConfig+0x348>
 8007674:	2310      	movs	r3, #16
 8007676:	77fb      	strb	r3, [r7, #31]
 8007678:	e0e6      	b.n	8007848 <UART_SetConfig+0x348>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a56      	ldr	r2, [pc, #344]	; (80077d8 <UART_SetConfig+0x2d8>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d120      	bne.n	80076c6 <UART_SetConfig+0x1c6>
 8007684:	4b51      	ldr	r3, [pc, #324]	; (80077cc <UART_SetConfig+0x2cc>)
 8007686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800768e:	2bc0      	cmp	r3, #192	; 0xc0
 8007690:	d013      	beq.n	80076ba <UART_SetConfig+0x1ba>
 8007692:	2bc0      	cmp	r3, #192	; 0xc0
 8007694:	d814      	bhi.n	80076c0 <UART_SetConfig+0x1c0>
 8007696:	2b80      	cmp	r3, #128	; 0x80
 8007698:	d009      	beq.n	80076ae <UART_SetConfig+0x1ae>
 800769a:	2b80      	cmp	r3, #128	; 0x80
 800769c:	d810      	bhi.n	80076c0 <UART_SetConfig+0x1c0>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <UART_SetConfig+0x1a8>
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d006      	beq.n	80076b4 <UART_SetConfig+0x1b4>
 80076a6:	e00b      	b.n	80076c0 <UART_SetConfig+0x1c0>
 80076a8:	2300      	movs	r3, #0
 80076aa:	77fb      	strb	r3, [r7, #31]
 80076ac:	e0cc      	b.n	8007848 <UART_SetConfig+0x348>
 80076ae:	2302      	movs	r3, #2
 80076b0:	77fb      	strb	r3, [r7, #31]
 80076b2:	e0c9      	b.n	8007848 <UART_SetConfig+0x348>
 80076b4:	2304      	movs	r3, #4
 80076b6:	77fb      	strb	r3, [r7, #31]
 80076b8:	e0c6      	b.n	8007848 <UART_SetConfig+0x348>
 80076ba:	2308      	movs	r3, #8
 80076bc:	77fb      	strb	r3, [r7, #31]
 80076be:	e0c3      	b.n	8007848 <UART_SetConfig+0x348>
 80076c0:	2310      	movs	r3, #16
 80076c2:	77fb      	strb	r3, [r7, #31]
 80076c4:	e0c0      	b.n	8007848 <UART_SetConfig+0x348>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a44      	ldr	r2, [pc, #272]	; (80077dc <UART_SetConfig+0x2dc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d125      	bne.n	800771c <UART_SetConfig+0x21c>
 80076d0:	4b3e      	ldr	r3, [pc, #248]	; (80077cc <UART_SetConfig+0x2cc>)
 80076d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076de:	d017      	beq.n	8007710 <UART_SetConfig+0x210>
 80076e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e4:	d817      	bhi.n	8007716 <UART_SetConfig+0x216>
 80076e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ea:	d00b      	beq.n	8007704 <UART_SetConfig+0x204>
 80076ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f0:	d811      	bhi.n	8007716 <UART_SetConfig+0x216>
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <UART_SetConfig+0x1fe>
 80076f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076fa:	d006      	beq.n	800770a <UART_SetConfig+0x20a>
 80076fc:	e00b      	b.n	8007716 <UART_SetConfig+0x216>
 80076fe:	2300      	movs	r3, #0
 8007700:	77fb      	strb	r3, [r7, #31]
 8007702:	e0a1      	b.n	8007848 <UART_SetConfig+0x348>
 8007704:	2302      	movs	r3, #2
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	e09e      	b.n	8007848 <UART_SetConfig+0x348>
 800770a:	2304      	movs	r3, #4
 800770c:	77fb      	strb	r3, [r7, #31]
 800770e:	e09b      	b.n	8007848 <UART_SetConfig+0x348>
 8007710:	2308      	movs	r3, #8
 8007712:	77fb      	strb	r3, [r7, #31]
 8007714:	e098      	b.n	8007848 <UART_SetConfig+0x348>
 8007716:	2310      	movs	r3, #16
 8007718:	77fb      	strb	r3, [r7, #31]
 800771a:	e095      	b.n	8007848 <UART_SetConfig+0x348>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a2f      	ldr	r2, [pc, #188]	; (80077e0 <UART_SetConfig+0x2e0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d125      	bne.n	8007772 <UART_SetConfig+0x272>
 8007726:	4b29      	ldr	r3, [pc, #164]	; (80077cc <UART_SetConfig+0x2cc>)
 8007728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007730:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007734:	d017      	beq.n	8007766 <UART_SetConfig+0x266>
 8007736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800773a:	d817      	bhi.n	800776c <UART_SetConfig+0x26c>
 800773c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007740:	d00b      	beq.n	800775a <UART_SetConfig+0x25a>
 8007742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007746:	d811      	bhi.n	800776c <UART_SetConfig+0x26c>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <UART_SetConfig+0x254>
 800774c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007750:	d006      	beq.n	8007760 <UART_SetConfig+0x260>
 8007752:	e00b      	b.n	800776c <UART_SetConfig+0x26c>
 8007754:	2301      	movs	r3, #1
 8007756:	77fb      	strb	r3, [r7, #31]
 8007758:	e076      	b.n	8007848 <UART_SetConfig+0x348>
 800775a:	2302      	movs	r3, #2
 800775c:	77fb      	strb	r3, [r7, #31]
 800775e:	e073      	b.n	8007848 <UART_SetConfig+0x348>
 8007760:	2304      	movs	r3, #4
 8007762:	77fb      	strb	r3, [r7, #31]
 8007764:	e070      	b.n	8007848 <UART_SetConfig+0x348>
 8007766:	2308      	movs	r3, #8
 8007768:	77fb      	strb	r3, [r7, #31]
 800776a:	e06d      	b.n	8007848 <UART_SetConfig+0x348>
 800776c:	2310      	movs	r3, #16
 800776e:	77fb      	strb	r3, [r7, #31]
 8007770:	e06a      	b.n	8007848 <UART_SetConfig+0x348>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a1b      	ldr	r2, [pc, #108]	; (80077e4 <UART_SetConfig+0x2e4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d138      	bne.n	80077ee <UART_SetConfig+0x2ee>
 800777c:	4b13      	ldr	r3, [pc, #76]	; (80077cc <UART_SetConfig+0x2cc>)
 800777e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007782:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007786:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800778a:	d017      	beq.n	80077bc <UART_SetConfig+0x2bc>
 800778c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007790:	d82a      	bhi.n	80077e8 <UART_SetConfig+0x2e8>
 8007792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007796:	d00b      	beq.n	80077b0 <UART_SetConfig+0x2b0>
 8007798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800779c:	d824      	bhi.n	80077e8 <UART_SetConfig+0x2e8>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <UART_SetConfig+0x2aa>
 80077a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a6:	d006      	beq.n	80077b6 <UART_SetConfig+0x2b6>
 80077a8:	e01e      	b.n	80077e8 <UART_SetConfig+0x2e8>
 80077aa:	2300      	movs	r3, #0
 80077ac:	77fb      	strb	r3, [r7, #31]
 80077ae:	e04b      	b.n	8007848 <UART_SetConfig+0x348>
 80077b0:	2302      	movs	r3, #2
 80077b2:	77fb      	strb	r3, [r7, #31]
 80077b4:	e048      	b.n	8007848 <UART_SetConfig+0x348>
 80077b6:	2304      	movs	r3, #4
 80077b8:	77fb      	strb	r3, [r7, #31]
 80077ba:	e045      	b.n	8007848 <UART_SetConfig+0x348>
 80077bc:	2308      	movs	r3, #8
 80077be:	77fb      	strb	r3, [r7, #31]
 80077c0:	e042      	b.n	8007848 <UART_SetConfig+0x348>
 80077c2:	bf00      	nop
 80077c4:	efff69f3 	.word	0xefff69f3
 80077c8:	40011000 	.word	0x40011000
 80077cc:	40023800 	.word	0x40023800
 80077d0:	40004400 	.word	0x40004400
 80077d4:	40004800 	.word	0x40004800
 80077d8:	40004c00 	.word	0x40004c00
 80077dc:	40005000 	.word	0x40005000
 80077e0:	40011400 	.word	0x40011400
 80077e4:	40007800 	.word	0x40007800
 80077e8:	2310      	movs	r3, #16
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e02c      	b.n	8007848 <UART_SetConfig+0x348>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a72      	ldr	r2, [pc, #456]	; (80079bc <UART_SetConfig+0x4bc>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d125      	bne.n	8007844 <UART_SetConfig+0x344>
 80077f8:	4b71      	ldr	r3, [pc, #452]	; (80079c0 <UART_SetConfig+0x4c0>)
 80077fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007802:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007806:	d017      	beq.n	8007838 <UART_SetConfig+0x338>
 8007808:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800780c:	d817      	bhi.n	800783e <UART_SetConfig+0x33e>
 800780e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007812:	d00b      	beq.n	800782c <UART_SetConfig+0x32c>
 8007814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007818:	d811      	bhi.n	800783e <UART_SetConfig+0x33e>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <UART_SetConfig+0x326>
 800781e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007822:	d006      	beq.n	8007832 <UART_SetConfig+0x332>
 8007824:	e00b      	b.n	800783e <UART_SetConfig+0x33e>
 8007826:	2300      	movs	r3, #0
 8007828:	77fb      	strb	r3, [r7, #31]
 800782a:	e00d      	b.n	8007848 <UART_SetConfig+0x348>
 800782c:	2302      	movs	r3, #2
 800782e:	77fb      	strb	r3, [r7, #31]
 8007830:	e00a      	b.n	8007848 <UART_SetConfig+0x348>
 8007832:	2304      	movs	r3, #4
 8007834:	77fb      	strb	r3, [r7, #31]
 8007836:	e007      	b.n	8007848 <UART_SetConfig+0x348>
 8007838:	2308      	movs	r3, #8
 800783a:	77fb      	strb	r3, [r7, #31]
 800783c:	e004      	b.n	8007848 <UART_SetConfig+0x348>
 800783e:	2310      	movs	r3, #16
 8007840:	77fb      	strb	r3, [r7, #31]
 8007842:	e001      	b.n	8007848 <UART_SetConfig+0x348>
 8007844:	2310      	movs	r3, #16
 8007846:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007850:	d15b      	bne.n	800790a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007852:	7ffb      	ldrb	r3, [r7, #31]
 8007854:	2b08      	cmp	r3, #8
 8007856:	d828      	bhi.n	80078aa <UART_SetConfig+0x3aa>
 8007858:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <UART_SetConfig+0x360>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	08007885 	.word	0x08007885
 8007864:	0800788d 	.word	0x0800788d
 8007868:	08007895 	.word	0x08007895
 800786c:	080078ab 	.word	0x080078ab
 8007870:	0800789b 	.word	0x0800789b
 8007874:	080078ab 	.word	0x080078ab
 8007878:	080078ab 	.word	0x080078ab
 800787c:	080078ab 	.word	0x080078ab
 8007880:	080078a3 	.word	0x080078a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007884:	f7fc fc1c 	bl	80040c0 <HAL_RCC_GetPCLK1Freq>
 8007888:	61b8      	str	r0, [r7, #24]
        break;
 800788a:	e013      	b.n	80078b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800788c:	f7fc fc2c 	bl	80040e8 <HAL_RCC_GetPCLK2Freq>
 8007890:	61b8      	str	r0, [r7, #24]
        break;
 8007892:	e00f      	b.n	80078b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007894:	4b4b      	ldr	r3, [pc, #300]	; (80079c4 <UART_SetConfig+0x4c4>)
 8007896:	61bb      	str	r3, [r7, #24]
        break;
 8007898:	e00c      	b.n	80078b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800789a:	f7fc faff 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 800789e:	61b8      	str	r0, [r7, #24]
        break;
 80078a0:	e008      	b.n	80078b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078a6:	61bb      	str	r3, [r7, #24]
        break;
 80078a8:	e004      	b.n	80078b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	77bb      	strb	r3, [r7, #30]
        break;
 80078b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d074      	beq.n	80079a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	005a      	lsls	r2, r3, #1
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	085b      	lsrs	r3, r3, #1
 80078c4:	441a      	add	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2b0f      	cmp	r3, #15
 80078d4:	d916      	bls.n	8007904 <UART_SetConfig+0x404>
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078dc:	d212      	bcs.n	8007904 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	f023 030f 	bic.w	r3, r3, #15
 80078e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	085b      	lsrs	r3, r3, #1
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f003 0307 	and.w	r3, r3, #7
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	89fb      	ldrh	r3, [r7, #14]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	89fa      	ldrh	r2, [r7, #14]
 8007900:	60da      	str	r2, [r3, #12]
 8007902:	e04f      	b.n	80079a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	77bb      	strb	r3, [r7, #30]
 8007908:	e04c      	b.n	80079a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800790a:	7ffb      	ldrb	r3, [r7, #31]
 800790c:	2b08      	cmp	r3, #8
 800790e:	d828      	bhi.n	8007962 <UART_SetConfig+0x462>
 8007910:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <UART_SetConfig+0x418>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	0800793d 	.word	0x0800793d
 800791c:	08007945 	.word	0x08007945
 8007920:	0800794d 	.word	0x0800794d
 8007924:	08007963 	.word	0x08007963
 8007928:	08007953 	.word	0x08007953
 800792c:	08007963 	.word	0x08007963
 8007930:	08007963 	.word	0x08007963
 8007934:	08007963 	.word	0x08007963
 8007938:	0800795b 	.word	0x0800795b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800793c:	f7fc fbc0 	bl	80040c0 <HAL_RCC_GetPCLK1Freq>
 8007940:	61b8      	str	r0, [r7, #24]
        break;
 8007942:	e013      	b.n	800796c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007944:	f7fc fbd0 	bl	80040e8 <HAL_RCC_GetPCLK2Freq>
 8007948:	61b8      	str	r0, [r7, #24]
        break;
 800794a:	e00f      	b.n	800796c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800794c:	4b1d      	ldr	r3, [pc, #116]	; (80079c4 <UART_SetConfig+0x4c4>)
 800794e:	61bb      	str	r3, [r7, #24]
        break;
 8007950:	e00c      	b.n	800796c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007952:	f7fc faa3 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8007956:	61b8      	str	r0, [r7, #24]
        break;
 8007958:	e008      	b.n	800796c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800795a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800795e:	61bb      	str	r3, [r7, #24]
        break;
 8007960:	e004      	b.n	800796c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	77bb      	strb	r3, [r7, #30]
        break;
 800796a:	bf00      	nop
    }

    if (pclk != 0U)
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d018      	beq.n	80079a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	085a      	lsrs	r2, r3, #1
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	441a      	add	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	fbb2 f3f3 	udiv	r3, r2, r3
 8007984:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2b0f      	cmp	r3, #15
 800798a:	d909      	bls.n	80079a0 <UART_SetConfig+0x4a0>
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007992:	d205      	bcs.n	80079a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	b29a      	uxth	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60da      	str	r2, [r3, #12]
 800799e:	e001      	b.n	80079a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80079b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3720      	adds	r7, #32
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	40007c00 	.word	0x40007c00
 80079c0:	40023800 	.word	0x40023800
 80079c4:	00f42400 	.word	0x00f42400

080079c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	f003 0310 	and.w	r3, r3, #16
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01a      	beq.n	8007ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ac6:	d10a      	bne.n	8007ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	605a      	str	r2, [r3, #4]
  }
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b1c:	f7fb fa34 	bl	8002f88 <HAL_GetTick>
 8007b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d10e      	bne.n	8007b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f81b 	bl	8007b7a <UART_WaitOnFlagUntilTimeout>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e011      	b.n	8007b72 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b09c      	sub	sp, #112	; 0x70
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	60f8      	str	r0, [r7, #12]
 8007b82:	60b9      	str	r1, [r7, #8]
 8007b84:	603b      	str	r3, [r7, #0]
 8007b86:	4613      	mov	r3, r2
 8007b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b8a:	e0a7      	b.n	8007cdc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b92:	f000 80a3 	beq.w	8007cdc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b96:	f7fb f9f7 	bl	8002f88 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d302      	bcc.n	8007bac <UART_WaitOnFlagUntilTimeout+0x32>
 8007ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d13f      	bne.n	8007c2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb4:	e853 3f00 	ldrex	r3, [r3]
 8007bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bc0:	667b      	str	r3, [r7, #100]	; 0x64
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bcc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1e6      	bne.n	8007bac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3308      	adds	r3, #8
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf0:	f023 0301 	bic.w	r3, r3, #1
 8007bf4:	663b      	str	r3, [r7, #96]	; 0x60
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e5      	bne.n	8007bde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2220      	movs	r2, #32
 8007c16:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e068      	b.n	8007cfe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d050      	beq.n	8007cdc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c48:	d148      	bne.n	8007cdc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
 8007c74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e6      	bne.n	8007c54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3308      	adds	r3, #8
 8007c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	613b      	str	r3, [r7, #16]
   return(result);
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f023 0301 	bic.w	r3, r3, #1
 8007c9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3308      	adds	r3, #8
 8007ca4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ca6:	623a      	str	r2, [r7, #32]
 8007ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	69f9      	ldr	r1, [r7, #28]
 8007cac:	6a3a      	ldr	r2, [r7, #32]
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e5      	bne.n	8007c86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e010      	b.n	8007cfe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69da      	ldr	r2, [r3, #28]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	bf0c      	ite	eq
 8007cec:	2301      	moveq	r3, #1
 8007cee:	2300      	movne	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	f43f af48 	beq.w	8007b8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3770      	adds	r7, #112	; 0x70
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b097      	sub	sp, #92	; 0x5c
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	4613      	mov	r3, r2
 8007d14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	88fa      	ldrh	r2, [r7, #6]
 8007d20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	88fa      	ldrh	r2, [r7, #6]
 8007d28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3a:	d10e      	bne.n	8007d5a <UART_Start_Receive_IT+0x52>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d105      	bne.n	8007d50 <UART_Start_Receive_IT+0x48>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d4e:	e02d      	b.n	8007dac <UART_Start_Receive_IT+0xa4>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	22ff      	movs	r2, #255	; 0xff
 8007d54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d58:	e028      	b.n	8007dac <UART_Start_Receive_IT+0xa4>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10d      	bne.n	8007d7e <UART_Start_Receive_IT+0x76>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <UART_Start_Receive_IT+0x6c>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	22ff      	movs	r2, #255	; 0xff
 8007d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d72:	e01b      	b.n	8007dac <UART_Start_Receive_IT+0xa4>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	227f      	movs	r2, #127	; 0x7f
 8007d78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d7c:	e016      	b.n	8007dac <UART_Start_Receive_IT+0xa4>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d86:	d10d      	bne.n	8007da4 <UART_Start_Receive_IT+0x9c>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d104      	bne.n	8007d9a <UART_Start_Receive_IT+0x92>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	227f      	movs	r2, #127	; 0x7f
 8007d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d98:	e008      	b.n	8007dac <UART_Start_Receive_IT+0xa4>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	223f      	movs	r2, #63	; 0x3f
 8007d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007da2:	e003      	b.n	8007dac <UART_Start_Receive_IT+0xa4>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2222      	movs	r2, #34	; 0x22
 8007db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3308      	adds	r3, #8
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	f043 0301 	orr.w	r3, r3, #1
 8007dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ddc:	64ba      	str	r2, [r7, #72]	; 0x48
 8007dde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e5      	bne.n	8007dbc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df8:	d107      	bne.n	8007e0a <UART_Start_Receive_IT+0x102>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d103      	bne.n	8007e0a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	4a21      	ldr	r2, [pc, #132]	; (8007e8c <UART_Start_Receive_IT+0x184>)
 8007e06:	669a      	str	r2, [r3, #104]	; 0x68
 8007e08:	e002      	b.n	8007e10 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4a20      	ldr	r2, [pc, #128]	; (8007e90 <UART_Start_Receive_IT+0x188>)
 8007e0e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d019      	beq.n	8007e4c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e36:	637b      	str	r3, [r7, #52]	; 0x34
 8007e38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e6      	bne.n	8007e18 <UART_Start_Receive_IT+0x110>
 8007e4a:	e018      	b.n	8007e7e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f043 0320 	orr.w	r3, r3, #32
 8007e60:	653b      	str	r3, [r7, #80]	; 0x50
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e6a:	623b      	str	r3, [r7, #32]
 8007e6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	69f9      	ldr	r1, [r7, #28]
 8007e70:	6a3a      	ldr	r2, [r7, #32]
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e6      	bne.n	8007e4c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	375c      	adds	r7, #92	; 0x5c
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	080082b9 	.word	0x080082b9
 8007e90:	08008153 	.word	0x08008153

08007e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b095      	sub	sp, #84	; 0x54
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eba:	643b      	str	r3, [r7, #64]	; 0x40
 8007ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e6      	bne.n	8007e9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	f023 0301 	bic.w	r3, r3, #1
 8007ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3308      	adds	r3, #8
 8007eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e5      	bne.n	8007ece <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d118      	bne.n	8007f3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f023 0310 	bic.w	r3, r3, #16
 8007f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f28:	61bb      	str	r3, [r7, #24]
 8007f2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	6979      	ldr	r1, [r7, #20]
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	e841 2300 	strex	r3, r2, [r1]
 8007f34:	613b      	str	r3, [r7, #16]
   return(result);
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e6      	bne.n	8007f0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f50:	bf00      	nop
 8007f52:	3754      	adds	r7, #84	; 0x54
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7ff faaa 	bl	80074d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b08f      	sub	sp, #60	; 0x3c
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f94:	2b21      	cmp	r3, #33	; 0x21
 8007f96:	d14c      	bne.n	8008032 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d132      	bne.n	800800a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fc4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e6      	bne.n	8007fa4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	e853 3f00 	ldrex	r3, [r3]
 8007fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fea:	633b      	str	r3, [r7, #48]	; 0x30
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	61bb      	str	r3, [r7, #24]
 8007ff6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	6979      	ldr	r1, [r7, #20]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	613b      	str	r3, [r7, #16]
   return(result);
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e6      	bne.n	8007fd6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008008:	e013      	b.n	8008032 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800e:	781a      	ldrb	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008026:	b29b      	uxth	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008032:	bf00      	nop
 8008034:	373c      	adds	r7, #60	; 0x3c
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800803e:	b480      	push	{r7}
 8008040:	b091      	sub	sp, #68	; 0x44
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800804a:	2b21      	cmp	r3, #33	; 0x21
 800804c:	d151      	bne.n	80080f2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008054:	b29b      	uxth	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d132      	bne.n	80080c0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	623b      	str	r3, [r7, #32]
   return(result);
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800806e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	633b      	str	r3, [r7, #48]	; 0x30
 800807a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800807e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	60fb      	str	r3, [r7, #12]
   return(result);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a0:	637b      	str	r3, [r7, #52]	; 0x34
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080aa:	61fb      	str	r3, [r7, #28]
 80080ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	69b9      	ldr	r1, [r7, #24]
 80080b0:	69fa      	ldr	r2, [r7, #28]
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	617b      	str	r3, [r7, #20]
   return(result);
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e6      	bne.n	800808c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80080be:	e018      	b.n	80080f2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80080c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080d4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080da:	1c9a      	adds	r2, r3, #2
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80080f2:	bf00      	nop
 80080f4:	3744      	adds	r7, #68	; 0x44
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b088      	sub	sp, #32
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	60bb      	str	r3, [r7, #8]
   return(result);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800811a:	61fb      	str	r3, [r7, #28]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	61bb      	str	r3, [r7, #24]
 8008126:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6979      	ldr	r1, [r7, #20]
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	613b      	str	r3, [r7, #16]
   return(result);
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e6      	bne.n	8008106 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff f9bb 	bl	80074c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800814a:	bf00      	nop
 800814c:	3720      	adds	r7, #32
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b096      	sub	sp, #88	; 0x58
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008160:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800816a:	2b22      	cmp	r3, #34	; 0x22
 800816c:	f040 8098 	bne.w	80082a0 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800817a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800817e:	b2d9      	uxtb	r1, r3
 8008180:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008184:	b2da      	uxtb	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818a:	400a      	ands	r2, r1
 800818c:	b2d2      	uxtb	r2, r2
 800818e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d17b      	bne.n	80082b0 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081cc:	653b      	str	r3, [r7, #80]	; 0x50
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081d6:	647b      	str	r3, [r7, #68]	; 0x44
 80081d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e6      	bne.n	80081b8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3308      	adds	r3, #8
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	623b      	str	r3, [r7, #32]
   return(result);
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	f023 0301 	bic.w	r3, r3, #1
 8008200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3308      	adds	r3, #8
 8008208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800820a:	633a      	str	r2, [r7, #48]	; 0x30
 800820c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e5      	bne.n	80081ea <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008236:	2b01      	cmp	r3, #1
 8008238:	d12e      	bne.n	8008298 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	60fb      	str	r3, [r7, #12]
   return(result);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f023 0310 	bic.w	r3, r3, #16
 8008254:	64bb      	str	r3, [r7, #72]	; 0x48
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	69b9      	ldr	r1, [r7, #24]
 8008264:	69fa      	ldr	r2, [r7, #28]
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	617b      	str	r3, [r7, #20]
   return(result);
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e6      	bne.n	8008240 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	f003 0310 	and.w	r3, r3, #16
 800827c:	2b10      	cmp	r3, #16
 800827e:	d103      	bne.n	8008288 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2210      	movs	r2, #16
 8008286:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff f929 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008296:	e00b      	b.n	80082b0 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7fa f9a3 	bl	80025e4 <HAL_UART_RxCpltCallback>
}
 800829e:	e007      	b.n	80082b0 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0208 	orr.w	r2, r2, #8
 80082ae:	619a      	str	r2, [r3, #24]
}
 80082b0:	bf00      	nop
 80082b2:	3758      	adds	r7, #88	; 0x58
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b096      	sub	sp, #88	; 0x58
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082d0:	2b22      	cmp	r3, #34	; 0x22
 80082d2:	f040 8098 	bne.w	8008406 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80082e6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80082ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80082ee:	4013      	ands	r3, r2
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fa:	1c9a      	adds	r2, r3, #2
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d17b      	bne.n	8008416 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008326:	e853 3f00 	ldrex	r3, [r3]
 800832a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800833c:	643b      	str	r3, [r7, #64]	; 0x40
 800833e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008344:	e841 2300 	strex	r3, r2, [r1]
 8008348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1e6      	bne.n	800831e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3308      	adds	r3, #8
 8008356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	e853 3f00 	ldrex	r3, [r3]
 800835e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	f023 0301 	bic.w	r3, r3, #1
 8008366:	64bb      	str	r3, [r7, #72]	; 0x48
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008370:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008378:	e841 2300 	strex	r3, r2, [r1]
 800837c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e5      	bne.n	8008350 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2220      	movs	r2, #32
 8008388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839c:	2b01      	cmp	r3, #1
 800839e:	d12e      	bne.n	80083fe <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	e853 3f00 	ldrex	r3, [r3]
 80083b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f023 0310 	bic.w	r3, r3, #16
 80083ba:	647b      	str	r3, [r7, #68]	; 0x44
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083c4:	61bb      	str	r3, [r7, #24]
 80083c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	6979      	ldr	r1, [r7, #20]
 80083ca:	69ba      	ldr	r2, [r7, #24]
 80083cc:	e841 2300 	strex	r3, r2, [r1]
 80083d0:	613b      	str	r3, [r7, #16]
   return(result);
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e6      	bne.n	80083a6 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	f003 0310 	and.w	r3, r3, #16
 80083e2:	2b10      	cmp	r3, #16
 80083e4:	d103      	bne.n	80083ee <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2210      	movs	r2, #16
 80083ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7ff f876 	bl	80074e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083fc:	e00b      	b.n	8008416 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7fa f8f0 	bl	80025e4 <HAL_UART_RxCpltCallback>
}
 8008404:	e007      	b.n	8008416 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699a      	ldr	r2, [r3, #24]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f042 0208 	orr.w	r2, r2, #8
 8008414:	619a      	str	r2, [r3, #24]
}
 8008416:	bf00      	nop
 8008418:	3758      	adds	r7, #88	; 0x58
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <atof>:
 800841e:	2100      	movs	r1, #0
 8008420:	f000 be0e 	b.w	8009040 <strtod>

08008424 <sulp>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	4604      	mov	r4, r0
 8008428:	460d      	mov	r5, r1
 800842a:	ec45 4b10 	vmov	d0, r4, r5
 800842e:	4616      	mov	r6, r2
 8008430:	f001 ffac 	bl	800a38c <__ulp>
 8008434:	ec51 0b10 	vmov	r0, r1, d0
 8008438:	b17e      	cbz	r6, 800845a <sulp+0x36>
 800843a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800843e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008442:	2b00      	cmp	r3, #0
 8008444:	dd09      	ble.n	800845a <sulp+0x36>
 8008446:	051b      	lsls	r3, r3, #20
 8008448:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800844c:	2400      	movs	r4, #0
 800844e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008452:	4622      	mov	r2, r4
 8008454:	462b      	mov	r3, r5
 8008456:	f7f8 f8e7 	bl	8000628 <__aeabi_dmul>
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	0000      	movs	r0, r0
	...

08008460 <_strtod_l>:
 8008460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008464:	ed2d 8b02 	vpush	{d8}
 8008468:	b09b      	sub	sp, #108	; 0x6c
 800846a:	4604      	mov	r4, r0
 800846c:	9213      	str	r2, [sp, #76]	; 0x4c
 800846e:	2200      	movs	r2, #0
 8008470:	9216      	str	r2, [sp, #88]	; 0x58
 8008472:	460d      	mov	r5, r1
 8008474:	f04f 0800 	mov.w	r8, #0
 8008478:	f04f 0900 	mov.w	r9, #0
 800847c:	460a      	mov	r2, r1
 800847e:	9215      	str	r2, [sp, #84]	; 0x54
 8008480:	7811      	ldrb	r1, [r2, #0]
 8008482:	292b      	cmp	r1, #43	; 0x2b
 8008484:	d04c      	beq.n	8008520 <_strtod_l+0xc0>
 8008486:	d83a      	bhi.n	80084fe <_strtod_l+0x9e>
 8008488:	290d      	cmp	r1, #13
 800848a:	d834      	bhi.n	80084f6 <_strtod_l+0x96>
 800848c:	2908      	cmp	r1, #8
 800848e:	d834      	bhi.n	80084fa <_strtod_l+0x9a>
 8008490:	2900      	cmp	r1, #0
 8008492:	d03d      	beq.n	8008510 <_strtod_l+0xb0>
 8008494:	2200      	movs	r2, #0
 8008496:	920a      	str	r2, [sp, #40]	; 0x28
 8008498:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800849a:	7832      	ldrb	r2, [r6, #0]
 800849c:	2a30      	cmp	r2, #48	; 0x30
 800849e:	f040 80b4 	bne.w	800860a <_strtod_l+0x1aa>
 80084a2:	7872      	ldrb	r2, [r6, #1]
 80084a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80084a8:	2a58      	cmp	r2, #88	; 0x58
 80084aa:	d170      	bne.n	800858e <_strtod_l+0x12e>
 80084ac:	9302      	str	r3, [sp, #8]
 80084ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	ab16      	add	r3, sp, #88	; 0x58
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	4a8e      	ldr	r2, [pc, #568]	; (80086f0 <_strtod_l+0x290>)
 80084b8:	ab17      	add	r3, sp, #92	; 0x5c
 80084ba:	a915      	add	r1, sp, #84	; 0x54
 80084bc:	4620      	mov	r0, r4
 80084be:	f001 f84b 	bl	8009558 <__gethex>
 80084c2:	f010 070f 	ands.w	r7, r0, #15
 80084c6:	4605      	mov	r5, r0
 80084c8:	d005      	beq.n	80084d6 <_strtod_l+0x76>
 80084ca:	2f06      	cmp	r7, #6
 80084cc:	d12a      	bne.n	8008524 <_strtod_l+0xc4>
 80084ce:	3601      	adds	r6, #1
 80084d0:	2300      	movs	r3, #0
 80084d2:	9615      	str	r6, [sp, #84]	; 0x54
 80084d4:	930a      	str	r3, [sp, #40]	; 0x28
 80084d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f040 857f 	bne.w	8008fdc <_strtod_l+0xb7c>
 80084de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e0:	b1db      	cbz	r3, 800851a <_strtod_l+0xba>
 80084e2:	4642      	mov	r2, r8
 80084e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80084e8:	ec43 2b10 	vmov	d0, r2, r3
 80084ec:	b01b      	add	sp, #108	; 0x6c
 80084ee:	ecbd 8b02 	vpop	{d8}
 80084f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f6:	2920      	cmp	r1, #32
 80084f8:	d1cc      	bne.n	8008494 <_strtod_l+0x34>
 80084fa:	3201      	adds	r2, #1
 80084fc:	e7bf      	b.n	800847e <_strtod_l+0x1e>
 80084fe:	292d      	cmp	r1, #45	; 0x2d
 8008500:	d1c8      	bne.n	8008494 <_strtod_l+0x34>
 8008502:	2101      	movs	r1, #1
 8008504:	910a      	str	r1, [sp, #40]	; 0x28
 8008506:	1c51      	adds	r1, r2, #1
 8008508:	9115      	str	r1, [sp, #84]	; 0x54
 800850a:	7852      	ldrb	r2, [r2, #1]
 800850c:	2a00      	cmp	r2, #0
 800850e:	d1c3      	bne.n	8008498 <_strtod_l+0x38>
 8008510:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008512:	9515      	str	r5, [sp, #84]	; 0x54
 8008514:	2b00      	cmp	r3, #0
 8008516:	f040 855f 	bne.w	8008fd8 <_strtod_l+0xb78>
 800851a:	4642      	mov	r2, r8
 800851c:	464b      	mov	r3, r9
 800851e:	e7e3      	b.n	80084e8 <_strtod_l+0x88>
 8008520:	2100      	movs	r1, #0
 8008522:	e7ef      	b.n	8008504 <_strtod_l+0xa4>
 8008524:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008526:	b13a      	cbz	r2, 8008538 <_strtod_l+0xd8>
 8008528:	2135      	movs	r1, #53	; 0x35
 800852a:	a818      	add	r0, sp, #96	; 0x60
 800852c:	f002 f82b 	bl	800a586 <__copybits>
 8008530:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008532:	4620      	mov	r0, r4
 8008534:	f001 fbfe 	bl	8009d34 <_Bfree>
 8008538:	3f01      	subs	r7, #1
 800853a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800853c:	2f04      	cmp	r7, #4
 800853e:	d806      	bhi.n	800854e <_strtod_l+0xee>
 8008540:	e8df f007 	tbb	[pc, r7]
 8008544:	201d0314 	.word	0x201d0314
 8008548:	14          	.byte	0x14
 8008549:	00          	.byte	0x00
 800854a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800854e:	05e9      	lsls	r1, r5, #23
 8008550:	bf48      	it	mi
 8008552:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008556:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800855a:	0d1b      	lsrs	r3, r3, #20
 800855c:	051b      	lsls	r3, r3, #20
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1b9      	bne.n	80084d6 <_strtod_l+0x76>
 8008562:	f000 feff 	bl	8009364 <__errno>
 8008566:	2322      	movs	r3, #34	; 0x22
 8008568:	6003      	str	r3, [r0, #0]
 800856a:	e7b4      	b.n	80084d6 <_strtod_l+0x76>
 800856c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008570:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008574:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008578:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800857c:	e7e7      	b.n	800854e <_strtod_l+0xee>
 800857e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80086f8 <_strtod_l+0x298>
 8008582:	e7e4      	b.n	800854e <_strtod_l+0xee>
 8008584:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008588:	f04f 38ff 	mov.w	r8, #4294967295
 800858c:	e7df      	b.n	800854e <_strtod_l+0xee>
 800858e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	9215      	str	r2, [sp, #84]	; 0x54
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	2b30      	cmp	r3, #48	; 0x30
 8008598:	d0f9      	beq.n	800858e <_strtod_l+0x12e>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d09b      	beq.n	80084d6 <_strtod_l+0x76>
 800859e:	2301      	movs	r3, #1
 80085a0:	f04f 0a00 	mov.w	sl, #0
 80085a4:	9304      	str	r3, [sp, #16]
 80085a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80085aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80085ae:	46d3      	mov	fp, sl
 80085b0:	220a      	movs	r2, #10
 80085b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80085b4:	7806      	ldrb	r6, [r0, #0]
 80085b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80085ba:	b2d9      	uxtb	r1, r3
 80085bc:	2909      	cmp	r1, #9
 80085be:	d926      	bls.n	800860e <_strtod_l+0x1ae>
 80085c0:	494c      	ldr	r1, [pc, #304]	; (80086f4 <_strtod_l+0x294>)
 80085c2:	2201      	movs	r2, #1
 80085c4:	f000 fe75 	bl	80092b2 <strncmp>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d030      	beq.n	800862e <_strtod_l+0x1ce>
 80085cc:	2000      	movs	r0, #0
 80085ce:	4632      	mov	r2, r6
 80085d0:	9005      	str	r0, [sp, #20]
 80085d2:	465e      	mov	r6, fp
 80085d4:	4603      	mov	r3, r0
 80085d6:	2a65      	cmp	r2, #101	; 0x65
 80085d8:	d001      	beq.n	80085de <_strtod_l+0x17e>
 80085da:	2a45      	cmp	r2, #69	; 0x45
 80085dc:	d113      	bne.n	8008606 <_strtod_l+0x1a6>
 80085de:	b91e      	cbnz	r6, 80085e8 <_strtod_l+0x188>
 80085e0:	9a04      	ldr	r2, [sp, #16]
 80085e2:	4302      	orrs	r2, r0
 80085e4:	d094      	beq.n	8008510 <_strtod_l+0xb0>
 80085e6:	2600      	movs	r6, #0
 80085e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80085ea:	1c6a      	adds	r2, r5, #1
 80085ec:	9215      	str	r2, [sp, #84]	; 0x54
 80085ee:	786a      	ldrb	r2, [r5, #1]
 80085f0:	2a2b      	cmp	r2, #43	; 0x2b
 80085f2:	d074      	beq.n	80086de <_strtod_l+0x27e>
 80085f4:	2a2d      	cmp	r2, #45	; 0x2d
 80085f6:	d078      	beq.n	80086ea <_strtod_l+0x28a>
 80085f8:	f04f 0c00 	mov.w	ip, #0
 80085fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008600:	2909      	cmp	r1, #9
 8008602:	d97f      	bls.n	8008704 <_strtod_l+0x2a4>
 8008604:	9515      	str	r5, [sp, #84]	; 0x54
 8008606:	2700      	movs	r7, #0
 8008608:	e09e      	b.n	8008748 <_strtod_l+0x2e8>
 800860a:	2300      	movs	r3, #0
 800860c:	e7c8      	b.n	80085a0 <_strtod_l+0x140>
 800860e:	f1bb 0f08 	cmp.w	fp, #8
 8008612:	bfd8      	it	le
 8008614:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008616:	f100 0001 	add.w	r0, r0, #1
 800861a:	bfda      	itte	le
 800861c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008620:	9309      	strle	r3, [sp, #36]	; 0x24
 8008622:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008626:	f10b 0b01 	add.w	fp, fp, #1
 800862a:	9015      	str	r0, [sp, #84]	; 0x54
 800862c:	e7c1      	b.n	80085b2 <_strtod_l+0x152>
 800862e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	9215      	str	r2, [sp, #84]	; 0x54
 8008634:	785a      	ldrb	r2, [r3, #1]
 8008636:	f1bb 0f00 	cmp.w	fp, #0
 800863a:	d037      	beq.n	80086ac <_strtod_l+0x24c>
 800863c:	9005      	str	r0, [sp, #20]
 800863e:	465e      	mov	r6, fp
 8008640:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008644:	2b09      	cmp	r3, #9
 8008646:	d912      	bls.n	800866e <_strtod_l+0x20e>
 8008648:	2301      	movs	r3, #1
 800864a:	e7c4      	b.n	80085d6 <_strtod_l+0x176>
 800864c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	9215      	str	r2, [sp, #84]	; 0x54
 8008652:	785a      	ldrb	r2, [r3, #1]
 8008654:	3001      	adds	r0, #1
 8008656:	2a30      	cmp	r2, #48	; 0x30
 8008658:	d0f8      	beq.n	800864c <_strtod_l+0x1ec>
 800865a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800865e:	2b08      	cmp	r3, #8
 8008660:	f200 84c1 	bhi.w	8008fe6 <_strtod_l+0xb86>
 8008664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008666:	9005      	str	r0, [sp, #20]
 8008668:	2000      	movs	r0, #0
 800866a:	930b      	str	r3, [sp, #44]	; 0x2c
 800866c:	4606      	mov	r6, r0
 800866e:	3a30      	subs	r2, #48	; 0x30
 8008670:	f100 0301 	add.w	r3, r0, #1
 8008674:	d014      	beq.n	80086a0 <_strtod_l+0x240>
 8008676:	9905      	ldr	r1, [sp, #20]
 8008678:	4419      	add	r1, r3
 800867a:	9105      	str	r1, [sp, #20]
 800867c:	4633      	mov	r3, r6
 800867e:	eb00 0c06 	add.w	ip, r0, r6
 8008682:	210a      	movs	r1, #10
 8008684:	4563      	cmp	r3, ip
 8008686:	d113      	bne.n	80086b0 <_strtod_l+0x250>
 8008688:	1833      	adds	r3, r6, r0
 800868a:	2b08      	cmp	r3, #8
 800868c:	f106 0601 	add.w	r6, r6, #1
 8008690:	4406      	add	r6, r0
 8008692:	dc1a      	bgt.n	80086ca <_strtod_l+0x26a>
 8008694:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008696:	230a      	movs	r3, #10
 8008698:	fb03 2301 	mla	r3, r3, r1, r2
 800869c:	9309      	str	r3, [sp, #36]	; 0x24
 800869e:	2300      	movs	r3, #0
 80086a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80086a2:	1c51      	adds	r1, r2, #1
 80086a4:	9115      	str	r1, [sp, #84]	; 0x54
 80086a6:	7852      	ldrb	r2, [r2, #1]
 80086a8:	4618      	mov	r0, r3
 80086aa:	e7c9      	b.n	8008640 <_strtod_l+0x1e0>
 80086ac:	4658      	mov	r0, fp
 80086ae:	e7d2      	b.n	8008656 <_strtod_l+0x1f6>
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	f103 0301 	add.w	r3, r3, #1
 80086b6:	dc03      	bgt.n	80086c0 <_strtod_l+0x260>
 80086b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80086ba:	434f      	muls	r7, r1
 80086bc:	9709      	str	r7, [sp, #36]	; 0x24
 80086be:	e7e1      	b.n	8008684 <_strtod_l+0x224>
 80086c0:	2b10      	cmp	r3, #16
 80086c2:	bfd8      	it	le
 80086c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80086c8:	e7dc      	b.n	8008684 <_strtod_l+0x224>
 80086ca:	2e10      	cmp	r6, #16
 80086cc:	bfdc      	itt	le
 80086ce:	230a      	movle	r3, #10
 80086d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80086d4:	e7e3      	b.n	800869e <_strtod_l+0x23e>
 80086d6:	2300      	movs	r3, #0
 80086d8:	9305      	str	r3, [sp, #20]
 80086da:	2301      	movs	r3, #1
 80086dc:	e780      	b.n	80085e0 <_strtod_l+0x180>
 80086de:	f04f 0c00 	mov.w	ip, #0
 80086e2:	1caa      	adds	r2, r5, #2
 80086e4:	9215      	str	r2, [sp, #84]	; 0x54
 80086e6:	78aa      	ldrb	r2, [r5, #2]
 80086e8:	e788      	b.n	80085fc <_strtod_l+0x19c>
 80086ea:	f04f 0c01 	mov.w	ip, #1
 80086ee:	e7f8      	b.n	80086e2 <_strtod_l+0x282>
 80086f0:	0800b47c 	.word	0x0800b47c
 80086f4:	0800b46c 	.word	0x0800b46c
 80086f8:	7ff00000 	.word	0x7ff00000
 80086fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80086fe:	1c51      	adds	r1, r2, #1
 8008700:	9115      	str	r1, [sp, #84]	; 0x54
 8008702:	7852      	ldrb	r2, [r2, #1]
 8008704:	2a30      	cmp	r2, #48	; 0x30
 8008706:	d0f9      	beq.n	80086fc <_strtod_l+0x29c>
 8008708:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800870c:	2908      	cmp	r1, #8
 800870e:	f63f af7a 	bhi.w	8008606 <_strtod_l+0x1a6>
 8008712:	3a30      	subs	r2, #48	; 0x30
 8008714:	9208      	str	r2, [sp, #32]
 8008716:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008718:	920c      	str	r2, [sp, #48]	; 0x30
 800871a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800871c:	1c57      	adds	r7, r2, #1
 800871e:	9715      	str	r7, [sp, #84]	; 0x54
 8008720:	7852      	ldrb	r2, [r2, #1]
 8008722:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008726:	f1be 0f09 	cmp.w	lr, #9
 800872a:	d938      	bls.n	800879e <_strtod_l+0x33e>
 800872c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800872e:	1a7f      	subs	r7, r7, r1
 8008730:	2f08      	cmp	r7, #8
 8008732:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008736:	dc03      	bgt.n	8008740 <_strtod_l+0x2e0>
 8008738:	9908      	ldr	r1, [sp, #32]
 800873a:	428f      	cmp	r7, r1
 800873c:	bfa8      	it	ge
 800873e:	460f      	movge	r7, r1
 8008740:	f1bc 0f00 	cmp.w	ip, #0
 8008744:	d000      	beq.n	8008748 <_strtod_l+0x2e8>
 8008746:	427f      	negs	r7, r7
 8008748:	2e00      	cmp	r6, #0
 800874a:	d14f      	bne.n	80087ec <_strtod_l+0x38c>
 800874c:	9904      	ldr	r1, [sp, #16]
 800874e:	4301      	orrs	r1, r0
 8008750:	f47f aec1 	bne.w	80084d6 <_strtod_l+0x76>
 8008754:	2b00      	cmp	r3, #0
 8008756:	f47f aedb 	bne.w	8008510 <_strtod_l+0xb0>
 800875a:	2a69      	cmp	r2, #105	; 0x69
 800875c:	d029      	beq.n	80087b2 <_strtod_l+0x352>
 800875e:	dc26      	bgt.n	80087ae <_strtod_l+0x34e>
 8008760:	2a49      	cmp	r2, #73	; 0x49
 8008762:	d026      	beq.n	80087b2 <_strtod_l+0x352>
 8008764:	2a4e      	cmp	r2, #78	; 0x4e
 8008766:	f47f aed3 	bne.w	8008510 <_strtod_l+0xb0>
 800876a:	499b      	ldr	r1, [pc, #620]	; (80089d8 <_strtod_l+0x578>)
 800876c:	a815      	add	r0, sp, #84	; 0x54
 800876e:	f001 f933 	bl	80099d8 <__match>
 8008772:	2800      	cmp	r0, #0
 8008774:	f43f aecc 	beq.w	8008510 <_strtod_l+0xb0>
 8008778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2b28      	cmp	r3, #40	; 0x28
 800877e:	d12f      	bne.n	80087e0 <_strtod_l+0x380>
 8008780:	4996      	ldr	r1, [pc, #600]	; (80089dc <_strtod_l+0x57c>)
 8008782:	aa18      	add	r2, sp, #96	; 0x60
 8008784:	a815      	add	r0, sp, #84	; 0x54
 8008786:	f001 f93b 	bl	8009a00 <__hexnan>
 800878a:	2805      	cmp	r0, #5
 800878c:	d128      	bne.n	80087e0 <_strtod_l+0x380>
 800878e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008790:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008794:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008798:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800879c:	e69b      	b.n	80084d6 <_strtod_l+0x76>
 800879e:	9f08      	ldr	r7, [sp, #32]
 80087a0:	210a      	movs	r1, #10
 80087a2:	fb01 2107 	mla	r1, r1, r7, r2
 80087a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80087aa:	9208      	str	r2, [sp, #32]
 80087ac:	e7b5      	b.n	800871a <_strtod_l+0x2ba>
 80087ae:	2a6e      	cmp	r2, #110	; 0x6e
 80087b0:	e7d9      	b.n	8008766 <_strtod_l+0x306>
 80087b2:	498b      	ldr	r1, [pc, #556]	; (80089e0 <_strtod_l+0x580>)
 80087b4:	a815      	add	r0, sp, #84	; 0x54
 80087b6:	f001 f90f 	bl	80099d8 <__match>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f43f aea8 	beq.w	8008510 <_strtod_l+0xb0>
 80087c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087c2:	4988      	ldr	r1, [pc, #544]	; (80089e4 <_strtod_l+0x584>)
 80087c4:	3b01      	subs	r3, #1
 80087c6:	a815      	add	r0, sp, #84	; 0x54
 80087c8:	9315      	str	r3, [sp, #84]	; 0x54
 80087ca:	f001 f905 	bl	80099d8 <__match>
 80087ce:	b910      	cbnz	r0, 80087d6 <_strtod_l+0x376>
 80087d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087d2:	3301      	adds	r3, #1
 80087d4:	9315      	str	r3, [sp, #84]	; 0x54
 80087d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80089f4 <_strtod_l+0x594>
 80087da:	f04f 0800 	mov.w	r8, #0
 80087de:	e67a      	b.n	80084d6 <_strtod_l+0x76>
 80087e0:	4881      	ldr	r0, [pc, #516]	; (80089e8 <_strtod_l+0x588>)
 80087e2:	f000 fdfd 	bl	80093e0 <nan>
 80087e6:	ec59 8b10 	vmov	r8, r9, d0
 80087ea:	e674      	b.n	80084d6 <_strtod_l+0x76>
 80087ec:	9b05      	ldr	r3, [sp, #20]
 80087ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087f0:	1afb      	subs	r3, r7, r3
 80087f2:	f1bb 0f00 	cmp.w	fp, #0
 80087f6:	bf08      	it	eq
 80087f8:	46b3      	moveq	fp, r6
 80087fa:	2e10      	cmp	r6, #16
 80087fc:	9308      	str	r3, [sp, #32]
 80087fe:	4635      	mov	r5, r6
 8008800:	bfa8      	it	ge
 8008802:	2510      	movge	r5, #16
 8008804:	f7f7 fe96 	bl	8000534 <__aeabi_ui2d>
 8008808:	2e09      	cmp	r6, #9
 800880a:	4680      	mov	r8, r0
 800880c:	4689      	mov	r9, r1
 800880e:	dd13      	ble.n	8008838 <_strtod_l+0x3d8>
 8008810:	4b76      	ldr	r3, [pc, #472]	; (80089ec <_strtod_l+0x58c>)
 8008812:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008816:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800881a:	f7f7 ff05 	bl	8000628 <__aeabi_dmul>
 800881e:	4680      	mov	r8, r0
 8008820:	4650      	mov	r0, sl
 8008822:	4689      	mov	r9, r1
 8008824:	f7f7 fe86 	bl	8000534 <__aeabi_ui2d>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4640      	mov	r0, r8
 800882e:	4649      	mov	r1, r9
 8008830:	f7f7 fd44 	bl	80002bc <__adddf3>
 8008834:	4680      	mov	r8, r0
 8008836:	4689      	mov	r9, r1
 8008838:	2e0f      	cmp	r6, #15
 800883a:	dc38      	bgt.n	80088ae <_strtod_l+0x44e>
 800883c:	9b08      	ldr	r3, [sp, #32]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f43f ae49 	beq.w	80084d6 <_strtod_l+0x76>
 8008844:	dd24      	ble.n	8008890 <_strtod_l+0x430>
 8008846:	2b16      	cmp	r3, #22
 8008848:	dc0b      	bgt.n	8008862 <_strtod_l+0x402>
 800884a:	4968      	ldr	r1, [pc, #416]	; (80089ec <_strtod_l+0x58c>)
 800884c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008854:	4642      	mov	r2, r8
 8008856:	464b      	mov	r3, r9
 8008858:	f7f7 fee6 	bl	8000628 <__aeabi_dmul>
 800885c:	4680      	mov	r8, r0
 800885e:	4689      	mov	r9, r1
 8008860:	e639      	b.n	80084d6 <_strtod_l+0x76>
 8008862:	9a08      	ldr	r2, [sp, #32]
 8008864:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008868:	4293      	cmp	r3, r2
 800886a:	db20      	blt.n	80088ae <_strtod_l+0x44e>
 800886c:	4c5f      	ldr	r4, [pc, #380]	; (80089ec <_strtod_l+0x58c>)
 800886e:	f1c6 060f 	rsb	r6, r6, #15
 8008872:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008876:	4642      	mov	r2, r8
 8008878:	464b      	mov	r3, r9
 800887a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800887e:	f7f7 fed3 	bl	8000628 <__aeabi_dmul>
 8008882:	9b08      	ldr	r3, [sp, #32]
 8008884:	1b9e      	subs	r6, r3, r6
 8008886:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800888a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800888e:	e7e3      	b.n	8008858 <_strtod_l+0x3f8>
 8008890:	9b08      	ldr	r3, [sp, #32]
 8008892:	3316      	adds	r3, #22
 8008894:	db0b      	blt.n	80088ae <_strtod_l+0x44e>
 8008896:	9b05      	ldr	r3, [sp, #20]
 8008898:	1bdf      	subs	r7, r3, r7
 800889a:	4b54      	ldr	r3, [pc, #336]	; (80089ec <_strtod_l+0x58c>)
 800889c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80088a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a4:	4640      	mov	r0, r8
 80088a6:	4649      	mov	r1, r9
 80088a8:	f7f7 ffe8 	bl	800087c <__aeabi_ddiv>
 80088ac:	e7d6      	b.n	800885c <_strtod_l+0x3fc>
 80088ae:	9b08      	ldr	r3, [sp, #32]
 80088b0:	1b75      	subs	r5, r6, r5
 80088b2:	441d      	add	r5, r3
 80088b4:	2d00      	cmp	r5, #0
 80088b6:	dd70      	ble.n	800899a <_strtod_l+0x53a>
 80088b8:	f015 030f 	ands.w	r3, r5, #15
 80088bc:	d00a      	beq.n	80088d4 <_strtod_l+0x474>
 80088be:	494b      	ldr	r1, [pc, #300]	; (80089ec <_strtod_l+0x58c>)
 80088c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80088c4:	4642      	mov	r2, r8
 80088c6:	464b      	mov	r3, r9
 80088c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088cc:	f7f7 feac 	bl	8000628 <__aeabi_dmul>
 80088d0:	4680      	mov	r8, r0
 80088d2:	4689      	mov	r9, r1
 80088d4:	f035 050f 	bics.w	r5, r5, #15
 80088d8:	d04d      	beq.n	8008976 <_strtod_l+0x516>
 80088da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80088de:	dd22      	ble.n	8008926 <_strtod_l+0x4c6>
 80088e0:	2500      	movs	r5, #0
 80088e2:	46ab      	mov	fp, r5
 80088e4:	9509      	str	r5, [sp, #36]	; 0x24
 80088e6:	9505      	str	r5, [sp, #20]
 80088e8:	2322      	movs	r3, #34	; 0x22
 80088ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80089f4 <_strtod_l+0x594>
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	f04f 0800 	mov.w	r8, #0
 80088f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f43f aded 	beq.w	80084d6 <_strtod_l+0x76>
 80088fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80088fe:	4620      	mov	r0, r4
 8008900:	f001 fa18 	bl	8009d34 <_Bfree>
 8008904:	9905      	ldr	r1, [sp, #20]
 8008906:	4620      	mov	r0, r4
 8008908:	f001 fa14 	bl	8009d34 <_Bfree>
 800890c:	4659      	mov	r1, fp
 800890e:	4620      	mov	r0, r4
 8008910:	f001 fa10 	bl	8009d34 <_Bfree>
 8008914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008916:	4620      	mov	r0, r4
 8008918:	f001 fa0c 	bl	8009d34 <_Bfree>
 800891c:	4629      	mov	r1, r5
 800891e:	4620      	mov	r0, r4
 8008920:	f001 fa08 	bl	8009d34 <_Bfree>
 8008924:	e5d7      	b.n	80084d6 <_strtod_l+0x76>
 8008926:	4b32      	ldr	r3, [pc, #200]	; (80089f0 <_strtod_l+0x590>)
 8008928:	9304      	str	r3, [sp, #16]
 800892a:	2300      	movs	r3, #0
 800892c:	112d      	asrs	r5, r5, #4
 800892e:	4640      	mov	r0, r8
 8008930:	4649      	mov	r1, r9
 8008932:	469a      	mov	sl, r3
 8008934:	2d01      	cmp	r5, #1
 8008936:	dc21      	bgt.n	800897c <_strtod_l+0x51c>
 8008938:	b10b      	cbz	r3, 800893e <_strtod_l+0x4de>
 800893a:	4680      	mov	r8, r0
 800893c:	4689      	mov	r9, r1
 800893e:	492c      	ldr	r1, [pc, #176]	; (80089f0 <_strtod_l+0x590>)
 8008940:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008944:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008948:	4642      	mov	r2, r8
 800894a:	464b      	mov	r3, r9
 800894c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008950:	f7f7 fe6a 	bl	8000628 <__aeabi_dmul>
 8008954:	4b27      	ldr	r3, [pc, #156]	; (80089f4 <_strtod_l+0x594>)
 8008956:	460a      	mov	r2, r1
 8008958:	400b      	ands	r3, r1
 800895a:	4927      	ldr	r1, [pc, #156]	; (80089f8 <_strtod_l+0x598>)
 800895c:	428b      	cmp	r3, r1
 800895e:	4680      	mov	r8, r0
 8008960:	d8be      	bhi.n	80088e0 <_strtod_l+0x480>
 8008962:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008966:	428b      	cmp	r3, r1
 8008968:	bf86      	itte	hi
 800896a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80089fc <_strtod_l+0x59c>
 800896e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008972:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008976:	2300      	movs	r3, #0
 8008978:	9304      	str	r3, [sp, #16]
 800897a:	e07b      	b.n	8008a74 <_strtod_l+0x614>
 800897c:	07ea      	lsls	r2, r5, #31
 800897e:	d505      	bpl.n	800898c <_strtod_l+0x52c>
 8008980:	9b04      	ldr	r3, [sp, #16]
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	f7f7 fe4f 	bl	8000628 <__aeabi_dmul>
 800898a:	2301      	movs	r3, #1
 800898c:	9a04      	ldr	r2, [sp, #16]
 800898e:	3208      	adds	r2, #8
 8008990:	f10a 0a01 	add.w	sl, sl, #1
 8008994:	106d      	asrs	r5, r5, #1
 8008996:	9204      	str	r2, [sp, #16]
 8008998:	e7cc      	b.n	8008934 <_strtod_l+0x4d4>
 800899a:	d0ec      	beq.n	8008976 <_strtod_l+0x516>
 800899c:	426d      	negs	r5, r5
 800899e:	f015 020f 	ands.w	r2, r5, #15
 80089a2:	d00a      	beq.n	80089ba <_strtod_l+0x55a>
 80089a4:	4b11      	ldr	r3, [pc, #68]	; (80089ec <_strtod_l+0x58c>)
 80089a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089aa:	4640      	mov	r0, r8
 80089ac:	4649      	mov	r1, r9
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	f7f7 ff63 	bl	800087c <__aeabi_ddiv>
 80089b6:	4680      	mov	r8, r0
 80089b8:	4689      	mov	r9, r1
 80089ba:	112d      	asrs	r5, r5, #4
 80089bc:	d0db      	beq.n	8008976 <_strtod_l+0x516>
 80089be:	2d1f      	cmp	r5, #31
 80089c0:	dd1e      	ble.n	8008a00 <_strtod_l+0x5a0>
 80089c2:	2500      	movs	r5, #0
 80089c4:	46ab      	mov	fp, r5
 80089c6:	9509      	str	r5, [sp, #36]	; 0x24
 80089c8:	9505      	str	r5, [sp, #20]
 80089ca:	2322      	movs	r3, #34	; 0x22
 80089cc:	f04f 0800 	mov.w	r8, #0
 80089d0:	f04f 0900 	mov.w	r9, #0
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	e78d      	b.n	80088f4 <_strtod_l+0x494>
 80089d8:	0800b477 	.word	0x0800b477
 80089dc:	0800b490 	.word	0x0800b490
 80089e0:	0800b46e 	.word	0x0800b46e
 80089e4:	0800b471 	.word	0x0800b471
 80089e8:	0800b82b 	.word	0x0800b82b
 80089ec:	0800b5e8 	.word	0x0800b5e8
 80089f0:	0800b5c0 	.word	0x0800b5c0
 80089f4:	7ff00000 	.word	0x7ff00000
 80089f8:	7ca00000 	.word	0x7ca00000
 80089fc:	7fefffff 	.word	0x7fefffff
 8008a00:	f015 0310 	ands.w	r3, r5, #16
 8008a04:	bf18      	it	ne
 8008a06:	236a      	movne	r3, #106	; 0x6a
 8008a08:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008dac <_strtod_l+0x94c>
 8008a0c:	9304      	str	r3, [sp, #16]
 8008a0e:	4640      	mov	r0, r8
 8008a10:	4649      	mov	r1, r9
 8008a12:	2300      	movs	r3, #0
 8008a14:	07ea      	lsls	r2, r5, #31
 8008a16:	d504      	bpl.n	8008a22 <_strtod_l+0x5c2>
 8008a18:	e9da 2300 	ldrd	r2, r3, [sl]
 8008a1c:	f7f7 fe04 	bl	8000628 <__aeabi_dmul>
 8008a20:	2301      	movs	r3, #1
 8008a22:	106d      	asrs	r5, r5, #1
 8008a24:	f10a 0a08 	add.w	sl, sl, #8
 8008a28:	d1f4      	bne.n	8008a14 <_strtod_l+0x5b4>
 8008a2a:	b10b      	cbz	r3, 8008a30 <_strtod_l+0x5d0>
 8008a2c:	4680      	mov	r8, r0
 8008a2e:	4689      	mov	r9, r1
 8008a30:	9b04      	ldr	r3, [sp, #16]
 8008a32:	b1bb      	cbz	r3, 8008a64 <_strtod_l+0x604>
 8008a34:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008a38:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	4649      	mov	r1, r9
 8008a40:	dd10      	ble.n	8008a64 <_strtod_l+0x604>
 8008a42:	2b1f      	cmp	r3, #31
 8008a44:	f340 811e 	ble.w	8008c84 <_strtod_l+0x824>
 8008a48:	2b34      	cmp	r3, #52	; 0x34
 8008a4a:	bfde      	ittt	le
 8008a4c:	f04f 33ff 	movle.w	r3, #4294967295
 8008a50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008a54:	4093      	lslle	r3, r2
 8008a56:	f04f 0800 	mov.w	r8, #0
 8008a5a:	bfcc      	ite	gt
 8008a5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008a60:	ea03 0901 	andle.w	r9, r3, r1
 8008a64:	2200      	movs	r2, #0
 8008a66:	2300      	movs	r3, #0
 8008a68:	4640      	mov	r0, r8
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	f7f8 f844 	bl	8000af8 <__aeabi_dcmpeq>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d1a6      	bne.n	80089c2 <_strtod_l+0x562>
 8008a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a7a:	4633      	mov	r3, r6
 8008a7c:	465a      	mov	r2, fp
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f001 f9c0 	bl	8009e04 <__s2b>
 8008a84:	9009      	str	r0, [sp, #36]	; 0x24
 8008a86:	2800      	cmp	r0, #0
 8008a88:	f43f af2a 	beq.w	80088e0 <_strtod_l+0x480>
 8008a8c:	9a08      	ldr	r2, [sp, #32]
 8008a8e:	9b05      	ldr	r3, [sp, #20]
 8008a90:	2a00      	cmp	r2, #0
 8008a92:	eba3 0307 	sub.w	r3, r3, r7
 8008a96:	bfa8      	it	ge
 8008a98:	2300      	movge	r3, #0
 8008a9a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a9c:	2500      	movs	r5, #0
 8008a9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008aa2:	9312      	str	r3, [sp, #72]	; 0x48
 8008aa4:	46ab      	mov	fp, r5
 8008aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	6859      	ldr	r1, [r3, #4]
 8008aac:	f001 f902 	bl	8009cb4 <_Balloc>
 8008ab0:	9005      	str	r0, [sp, #20]
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	f43f af18 	beq.w	80088e8 <_strtod_l+0x488>
 8008ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aba:	691a      	ldr	r2, [r3, #16]
 8008abc:	3202      	adds	r2, #2
 8008abe:	f103 010c 	add.w	r1, r3, #12
 8008ac2:	0092      	lsls	r2, r2, #2
 8008ac4:	300c      	adds	r0, #12
 8008ac6:	f000 fc7a 	bl	80093be <memcpy>
 8008aca:	ec49 8b10 	vmov	d0, r8, r9
 8008ace:	aa18      	add	r2, sp, #96	; 0x60
 8008ad0:	a917      	add	r1, sp, #92	; 0x5c
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f001 fcca 	bl	800a46c <__d2b>
 8008ad8:	ec49 8b18 	vmov	d8, r8, r9
 8008adc:	9016      	str	r0, [sp, #88]	; 0x58
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	f43f af02 	beq.w	80088e8 <_strtod_l+0x488>
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f001 fa24 	bl	8009f34 <__i2b>
 8008aec:	4683      	mov	fp, r0
 8008aee:	2800      	cmp	r0, #0
 8008af0:	f43f aefa 	beq.w	80088e8 <_strtod_l+0x488>
 8008af4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008af6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008af8:	2e00      	cmp	r6, #0
 8008afa:	bfab      	itete	ge
 8008afc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008afe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008b00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008b02:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008b06:	bfac      	ite	ge
 8008b08:	eb06 0a03 	addge.w	sl, r6, r3
 8008b0c:	1b9f      	sublt	r7, r3, r6
 8008b0e:	9b04      	ldr	r3, [sp, #16]
 8008b10:	1af6      	subs	r6, r6, r3
 8008b12:	4416      	add	r6, r2
 8008b14:	4ba0      	ldr	r3, [pc, #640]	; (8008d98 <_strtod_l+0x938>)
 8008b16:	3e01      	subs	r6, #1
 8008b18:	429e      	cmp	r6, r3
 8008b1a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008b1e:	f280 80c4 	bge.w	8008caa <_strtod_l+0x84a>
 8008b22:	1b9b      	subs	r3, r3, r6
 8008b24:	2b1f      	cmp	r3, #31
 8008b26:	eba2 0203 	sub.w	r2, r2, r3
 8008b2a:	f04f 0101 	mov.w	r1, #1
 8008b2e:	f300 80b0 	bgt.w	8008c92 <_strtod_l+0x832>
 8008b32:	fa01 f303 	lsl.w	r3, r1, r3
 8008b36:	930e      	str	r3, [sp, #56]	; 0x38
 8008b38:	2300      	movs	r3, #0
 8008b3a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b3c:	eb0a 0602 	add.w	r6, sl, r2
 8008b40:	9b04      	ldr	r3, [sp, #16]
 8008b42:	45b2      	cmp	sl, r6
 8008b44:	4417      	add	r7, r2
 8008b46:	441f      	add	r7, r3
 8008b48:	4653      	mov	r3, sl
 8008b4a:	bfa8      	it	ge
 8008b4c:	4633      	movge	r3, r6
 8008b4e:	42bb      	cmp	r3, r7
 8008b50:	bfa8      	it	ge
 8008b52:	463b      	movge	r3, r7
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bfc2      	ittt	gt
 8008b58:	1af6      	subgt	r6, r6, r3
 8008b5a:	1aff      	subgt	r7, r7, r3
 8008b5c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	dd17      	ble.n	8008b96 <_strtod_l+0x736>
 8008b66:	4659      	mov	r1, fp
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f001 faa2 	bl	800a0b4 <__pow5mult>
 8008b70:	4683      	mov	fp, r0
 8008b72:	2800      	cmp	r0, #0
 8008b74:	f43f aeb8 	beq.w	80088e8 <_strtod_l+0x488>
 8008b78:	4601      	mov	r1, r0
 8008b7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f001 f9ef 	bl	8009f60 <__multiply>
 8008b82:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f43f aeaf 	beq.w	80088e8 <_strtod_l+0x488>
 8008b8a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f001 f8d1 	bl	8009d34 <_Bfree>
 8008b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b94:	9316      	str	r3, [sp, #88]	; 0x58
 8008b96:	2e00      	cmp	r6, #0
 8008b98:	f300 808c 	bgt.w	8008cb4 <_strtod_l+0x854>
 8008b9c:	9b08      	ldr	r3, [sp, #32]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dd08      	ble.n	8008bb4 <_strtod_l+0x754>
 8008ba2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ba4:	9905      	ldr	r1, [sp, #20]
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f001 fa84 	bl	800a0b4 <__pow5mult>
 8008bac:	9005      	str	r0, [sp, #20]
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f43f ae9a 	beq.w	80088e8 <_strtod_l+0x488>
 8008bb4:	2f00      	cmp	r7, #0
 8008bb6:	dd08      	ble.n	8008bca <_strtod_l+0x76a>
 8008bb8:	9905      	ldr	r1, [sp, #20]
 8008bba:	463a      	mov	r2, r7
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f001 fad3 	bl	800a168 <__lshift>
 8008bc2:	9005      	str	r0, [sp, #20]
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	f43f ae8f 	beq.w	80088e8 <_strtod_l+0x488>
 8008bca:	f1ba 0f00 	cmp.w	sl, #0
 8008bce:	dd08      	ble.n	8008be2 <_strtod_l+0x782>
 8008bd0:	4659      	mov	r1, fp
 8008bd2:	4652      	mov	r2, sl
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f001 fac7 	bl	800a168 <__lshift>
 8008bda:	4683      	mov	fp, r0
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	f43f ae83 	beq.w	80088e8 <_strtod_l+0x488>
 8008be2:	9a05      	ldr	r2, [sp, #20]
 8008be4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008be6:	4620      	mov	r0, r4
 8008be8:	f001 fb46 	bl	800a278 <__mdiff>
 8008bec:	4605      	mov	r5, r0
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	f43f ae7a 	beq.w	80088e8 <_strtod_l+0x488>
 8008bf4:	68c3      	ldr	r3, [r0, #12]
 8008bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60c3      	str	r3, [r0, #12]
 8008bfc:	4659      	mov	r1, fp
 8008bfe:	f001 fb1f 	bl	800a240 <__mcmp>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	da60      	bge.n	8008cc8 <_strtod_l+0x868>
 8008c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c08:	ea53 0308 	orrs.w	r3, r3, r8
 8008c0c:	f040 8084 	bne.w	8008d18 <_strtod_l+0x8b8>
 8008c10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d17f      	bne.n	8008d18 <_strtod_l+0x8b8>
 8008c18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c1c:	0d1b      	lsrs	r3, r3, #20
 8008c1e:	051b      	lsls	r3, r3, #20
 8008c20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008c24:	d978      	bls.n	8008d18 <_strtod_l+0x8b8>
 8008c26:	696b      	ldr	r3, [r5, #20]
 8008c28:	b913      	cbnz	r3, 8008c30 <_strtod_l+0x7d0>
 8008c2a:	692b      	ldr	r3, [r5, #16]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	dd73      	ble.n	8008d18 <_strtod_l+0x8b8>
 8008c30:	4629      	mov	r1, r5
 8008c32:	2201      	movs	r2, #1
 8008c34:	4620      	mov	r0, r4
 8008c36:	f001 fa97 	bl	800a168 <__lshift>
 8008c3a:	4659      	mov	r1, fp
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	f001 faff 	bl	800a240 <__mcmp>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	dd68      	ble.n	8008d18 <_strtod_l+0x8b8>
 8008c46:	9904      	ldr	r1, [sp, #16]
 8008c48:	4a54      	ldr	r2, [pc, #336]	; (8008d9c <_strtod_l+0x93c>)
 8008c4a:	464b      	mov	r3, r9
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	f000 8084 	beq.w	8008d5a <_strtod_l+0x8fa>
 8008c52:	ea02 0109 	and.w	r1, r2, r9
 8008c56:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c5a:	dc7e      	bgt.n	8008d5a <_strtod_l+0x8fa>
 8008c5c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c60:	f77f aeb3 	ble.w	80089ca <_strtod_l+0x56a>
 8008c64:	4b4e      	ldr	r3, [pc, #312]	; (8008da0 <_strtod_l+0x940>)
 8008c66:	4640      	mov	r0, r8
 8008c68:	4649      	mov	r1, r9
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f7f7 fcdc 	bl	8000628 <__aeabi_dmul>
 8008c70:	4b4a      	ldr	r3, [pc, #296]	; (8008d9c <_strtod_l+0x93c>)
 8008c72:	400b      	ands	r3, r1
 8008c74:	4680      	mov	r8, r0
 8008c76:	4689      	mov	r9, r1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f47f ae3f 	bne.w	80088fc <_strtod_l+0x49c>
 8008c7e:	2322      	movs	r3, #34	; 0x22
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	e63b      	b.n	80088fc <_strtod_l+0x49c>
 8008c84:	f04f 32ff 	mov.w	r2, #4294967295
 8008c88:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8c:	ea03 0808 	and.w	r8, r3, r8
 8008c90:	e6e8      	b.n	8008a64 <_strtod_l+0x604>
 8008c92:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008c96:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008c9a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008c9e:	36e2      	adds	r6, #226	; 0xe2
 8008ca0:	fa01 f306 	lsl.w	r3, r1, r6
 8008ca4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008ca8:	e748      	b.n	8008b3c <_strtod_l+0x6dc>
 8008caa:	2100      	movs	r1, #0
 8008cac:	2301      	movs	r3, #1
 8008cae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008cb2:	e743      	b.n	8008b3c <_strtod_l+0x6dc>
 8008cb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008cb6:	4632      	mov	r2, r6
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f001 fa55 	bl	800a168 <__lshift>
 8008cbe:	9016      	str	r0, [sp, #88]	; 0x58
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	f47f af6b 	bne.w	8008b9c <_strtod_l+0x73c>
 8008cc6:	e60f      	b.n	80088e8 <_strtod_l+0x488>
 8008cc8:	46ca      	mov	sl, r9
 8008cca:	d171      	bne.n	8008db0 <_strtod_l+0x950>
 8008ccc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cd2:	b352      	cbz	r2, 8008d2a <_strtod_l+0x8ca>
 8008cd4:	4a33      	ldr	r2, [pc, #204]	; (8008da4 <_strtod_l+0x944>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d12a      	bne.n	8008d30 <_strtod_l+0x8d0>
 8008cda:	9b04      	ldr	r3, [sp, #16]
 8008cdc:	4641      	mov	r1, r8
 8008cde:	b1fb      	cbz	r3, 8008d20 <_strtod_l+0x8c0>
 8008ce0:	4b2e      	ldr	r3, [pc, #184]	; (8008d9c <_strtod_l+0x93c>)
 8008ce2:	ea09 0303 	and.w	r3, r9, r3
 8008ce6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008cea:	f04f 32ff 	mov.w	r2, #4294967295
 8008cee:	d81a      	bhi.n	8008d26 <_strtod_l+0x8c6>
 8008cf0:	0d1b      	lsrs	r3, r3, #20
 8008cf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfa:	4299      	cmp	r1, r3
 8008cfc:	d118      	bne.n	8008d30 <_strtod_l+0x8d0>
 8008cfe:	4b2a      	ldr	r3, [pc, #168]	; (8008da8 <_strtod_l+0x948>)
 8008d00:	459a      	cmp	sl, r3
 8008d02:	d102      	bne.n	8008d0a <_strtod_l+0x8aa>
 8008d04:	3101      	adds	r1, #1
 8008d06:	f43f adef 	beq.w	80088e8 <_strtod_l+0x488>
 8008d0a:	4b24      	ldr	r3, [pc, #144]	; (8008d9c <_strtod_l+0x93c>)
 8008d0c:	ea0a 0303 	and.w	r3, sl, r3
 8008d10:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008d14:	f04f 0800 	mov.w	r8, #0
 8008d18:	9b04      	ldr	r3, [sp, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1a2      	bne.n	8008c64 <_strtod_l+0x804>
 8008d1e:	e5ed      	b.n	80088fc <_strtod_l+0x49c>
 8008d20:	f04f 33ff 	mov.w	r3, #4294967295
 8008d24:	e7e9      	b.n	8008cfa <_strtod_l+0x89a>
 8008d26:	4613      	mov	r3, r2
 8008d28:	e7e7      	b.n	8008cfa <_strtod_l+0x89a>
 8008d2a:	ea53 0308 	orrs.w	r3, r3, r8
 8008d2e:	d08a      	beq.n	8008c46 <_strtod_l+0x7e6>
 8008d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d32:	b1e3      	cbz	r3, 8008d6e <_strtod_l+0x90e>
 8008d34:	ea13 0f0a 	tst.w	r3, sl
 8008d38:	d0ee      	beq.n	8008d18 <_strtod_l+0x8b8>
 8008d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d3c:	9a04      	ldr	r2, [sp, #16]
 8008d3e:	4640      	mov	r0, r8
 8008d40:	4649      	mov	r1, r9
 8008d42:	b1c3      	cbz	r3, 8008d76 <_strtod_l+0x916>
 8008d44:	f7ff fb6e 	bl	8008424 <sulp>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	ec51 0b18 	vmov	r0, r1, d8
 8008d50:	f7f7 fab4 	bl	80002bc <__adddf3>
 8008d54:	4680      	mov	r8, r0
 8008d56:	4689      	mov	r9, r1
 8008d58:	e7de      	b.n	8008d18 <_strtod_l+0x8b8>
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008d64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008d68:	f04f 38ff 	mov.w	r8, #4294967295
 8008d6c:	e7d4      	b.n	8008d18 <_strtod_l+0x8b8>
 8008d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d70:	ea13 0f08 	tst.w	r3, r8
 8008d74:	e7e0      	b.n	8008d38 <_strtod_l+0x8d8>
 8008d76:	f7ff fb55 	bl	8008424 <sulp>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	ec51 0b18 	vmov	r0, r1, d8
 8008d82:	f7f7 fa99 	bl	80002b8 <__aeabi_dsub>
 8008d86:	2200      	movs	r2, #0
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	4689      	mov	r9, r1
 8008d8e:	f7f7 feb3 	bl	8000af8 <__aeabi_dcmpeq>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d0c0      	beq.n	8008d18 <_strtod_l+0x8b8>
 8008d96:	e618      	b.n	80089ca <_strtod_l+0x56a>
 8008d98:	fffffc02 	.word	0xfffffc02
 8008d9c:	7ff00000 	.word	0x7ff00000
 8008da0:	39500000 	.word	0x39500000
 8008da4:	000fffff 	.word	0x000fffff
 8008da8:	7fefffff 	.word	0x7fefffff
 8008dac:	0800b4a8 	.word	0x0800b4a8
 8008db0:	4659      	mov	r1, fp
 8008db2:	4628      	mov	r0, r5
 8008db4:	f001 fbb4 	bl	800a520 <__ratio>
 8008db8:	ec57 6b10 	vmov	r6, r7, d0
 8008dbc:	ee10 0a10 	vmov	r0, s0
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	f7f7 feaa 	bl	8000b20 <__aeabi_dcmple>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d071      	beq.n	8008eb4 <_strtod_l+0xa54>
 8008dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d17c      	bne.n	8008ed0 <_strtod_l+0xa70>
 8008dd6:	f1b8 0f00 	cmp.w	r8, #0
 8008dda:	d15a      	bne.n	8008e92 <_strtod_l+0xa32>
 8008ddc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d15d      	bne.n	8008ea0 <_strtod_l+0xa40>
 8008de4:	4b90      	ldr	r3, [pc, #576]	; (8009028 <_strtod_l+0xbc8>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	4630      	mov	r0, r6
 8008dea:	4639      	mov	r1, r7
 8008dec:	f7f7 fe8e 	bl	8000b0c <__aeabi_dcmplt>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d15c      	bne.n	8008eae <_strtod_l+0xa4e>
 8008df4:	4630      	mov	r0, r6
 8008df6:	4639      	mov	r1, r7
 8008df8:	4b8c      	ldr	r3, [pc, #560]	; (800902c <_strtod_l+0xbcc>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f7f7 fc14 	bl	8000628 <__aeabi_dmul>
 8008e00:	4606      	mov	r6, r0
 8008e02:	460f      	mov	r7, r1
 8008e04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008e08:	9606      	str	r6, [sp, #24]
 8008e0a:	9307      	str	r3, [sp, #28]
 8008e0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008e14:	4b86      	ldr	r3, [pc, #536]	; (8009030 <_strtod_l+0xbd0>)
 8008e16:	ea0a 0303 	and.w	r3, sl, r3
 8008e1a:	930d      	str	r3, [sp, #52]	; 0x34
 8008e1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e1e:	4b85      	ldr	r3, [pc, #532]	; (8009034 <_strtod_l+0xbd4>)
 8008e20:	429a      	cmp	r2, r3
 8008e22:	f040 8090 	bne.w	8008f46 <_strtod_l+0xae6>
 8008e26:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008e2a:	ec49 8b10 	vmov	d0, r8, r9
 8008e2e:	f001 faad 	bl	800a38c <__ulp>
 8008e32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e36:	ec51 0b10 	vmov	r0, r1, d0
 8008e3a:	f7f7 fbf5 	bl	8000628 <__aeabi_dmul>
 8008e3e:	4642      	mov	r2, r8
 8008e40:	464b      	mov	r3, r9
 8008e42:	f7f7 fa3b 	bl	80002bc <__adddf3>
 8008e46:	460b      	mov	r3, r1
 8008e48:	4979      	ldr	r1, [pc, #484]	; (8009030 <_strtod_l+0xbd0>)
 8008e4a:	4a7b      	ldr	r2, [pc, #492]	; (8009038 <_strtod_l+0xbd8>)
 8008e4c:	4019      	ands	r1, r3
 8008e4e:	4291      	cmp	r1, r2
 8008e50:	4680      	mov	r8, r0
 8008e52:	d944      	bls.n	8008ede <_strtod_l+0xa7e>
 8008e54:	ee18 2a90 	vmov	r2, s17
 8008e58:	4b78      	ldr	r3, [pc, #480]	; (800903c <_strtod_l+0xbdc>)
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d104      	bne.n	8008e68 <_strtod_l+0xa08>
 8008e5e:	ee18 3a10 	vmov	r3, s16
 8008e62:	3301      	adds	r3, #1
 8008e64:	f43f ad40 	beq.w	80088e8 <_strtod_l+0x488>
 8008e68:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800903c <_strtod_l+0xbdc>
 8008e6c:	f04f 38ff 	mov.w	r8, #4294967295
 8008e70:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 ff5e 	bl	8009d34 <_Bfree>
 8008e78:	9905      	ldr	r1, [sp, #20]
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 ff5a 	bl	8009d34 <_Bfree>
 8008e80:	4659      	mov	r1, fp
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 ff56 	bl	8009d34 <_Bfree>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 ff52 	bl	8009d34 <_Bfree>
 8008e90:	e609      	b.n	8008aa6 <_strtod_l+0x646>
 8008e92:	f1b8 0f01 	cmp.w	r8, #1
 8008e96:	d103      	bne.n	8008ea0 <_strtod_l+0xa40>
 8008e98:	f1b9 0f00 	cmp.w	r9, #0
 8008e9c:	f43f ad95 	beq.w	80089ca <_strtod_l+0x56a>
 8008ea0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008ff8 <_strtod_l+0xb98>
 8008ea4:	4f60      	ldr	r7, [pc, #384]	; (8009028 <_strtod_l+0xbc8>)
 8008ea6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008eaa:	2600      	movs	r6, #0
 8008eac:	e7ae      	b.n	8008e0c <_strtod_l+0x9ac>
 8008eae:	4f5f      	ldr	r7, [pc, #380]	; (800902c <_strtod_l+0xbcc>)
 8008eb0:	2600      	movs	r6, #0
 8008eb2:	e7a7      	b.n	8008e04 <_strtod_l+0x9a4>
 8008eb4:	4b5d      	ldr	r3, [pc, #372]	; (800902c <_strtod_l+0xbcc>)
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	4639      	mov	r1, r7
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f7f7 fbb4 	bl	8000628 <__aeabi_dmul>
 8008ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	460f      	mov	r7, r1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d09c      	beq.n	8008e04 <_strtod_l+0x9a4>
 8008eca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008ece:	e79d      	b.n	8008e0c <_strtod_l+0x9ac>
 8008ed0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009000 <_strtod_l+0xba0>
 8008ed4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ed8:	ec57 6b17 	vmov	r6, r7, d7
 8008edc:	e796      	b.n	8008e0c <_strtod_l+0x9ac>
 8008ede:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008ee2:	9b04      	ldr	r3, [sp, #16]
 8008ee4:	46ca      	mov	sl, r9
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1c2      	bne.n	8008e70 <_strtod_l+0xa10>
 8008eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008eee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ef0:	0d1b      	lsrs	r3, r3, #20
 8008ef2:	051b      	lsls	r3, r3, #20
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d1bb      	bne.n	8008e70 <_strtod_l+0xa10>
 8008ef8:	4630      	mov	r0, r6
 8008efa:	4639      	mov	r1, r7
 8008efc:	f7f7 fede 	bl	8000cbc <__aeabi_d2lz>
 8008f00:	f7f7 fb64 	bl	80005cc <__aeabi_l2d>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	4630      	mov	r0, r6
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	f7f7 f9d4 	bl	80002b8 <__aeabi_dsub>
 8008f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f16:	ea43 0308 	orr.w	r3, r3, r8
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	460f      	mov	r7, r1
 8008f20:	d054      	beq.n	8008fcc <_strtod_l+0xb6c>
 8008f22:	a339      	add	r3, pc, #228	; (adr r3, 8009008 <_strtod_l+0xba8>)
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f7f7 fdf0 	bl	8000b0c <__aeabi_dcmplt>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f47f ace5 	bne.w	80088fc <_strtod_l+0x49c>
 8008f32:	a337      	add	r3, pc, #220	; (adr r3, 8009010 <_strtod_l+0xbb0>)
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	4630      	mov	r0, r6
 8008f3a:	4639      	mov	r1, r7
 8008f3c:	f7f7 fe04 	bl	8000b48 <__aeabi_dcmpgt>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d095      	beq.n	8008e70 <_strtod_l+0xa10>
 8008f44:	e4da      	b.n	80088fc <_strtod_l+0x49c>
 8008f46:	9b04      	ldr	r3, [sp, #16]
 8008f48:	b333      	cbz	r3, 8008f98 <_strtod_l+0xb38>
 8008f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f50:	d822      	bhi.n	8008f98 <_strtod_l+0xb38>
 8008f52:	a331      	add	r3, pc, #196	; (adr r3, 8009018 <_strtod_l+0xbb8>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	4630      	mov	r0, r6
 8008f5a:	4639      	mov	r1, r7
 8008f5c:	f7f7 fde0 	bl	8000b20 <__aeabi_dcmple>
 8008f60:	b1a0      	cbz	r0, 8008f8c <_strtod_l+0xb2c>
 8008f62:	4639      	mov	r1, r7
 8008f64:	4630      	mov	r0, r6
 8008f66:	f7f7 fe21 	bl	8000bac <__aeabi_d2uiz>
 8008f6a:	2801      	cmp	r0, #1
 8008f6c:	bf38      	it	cc
 8008f6e:	2001      	movcc	r0, #1
 8008f70:	f7f7 fae0 	bl	8000534 <__aeabi_ui2d>
 8008f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f76:	4606      	mov	r6, r0
 8008f78:	460f      	mov	r7, r1
 8008f7a:	bb23      	cbnz	r3, 8008fc6 <_strtod_l+0xb66>
 8008f7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f80:	9010      	str	r0, [sp, #64]	; 0x40
 8008f82:	9311      	str	r3, [sp, #68]	; 0x44
 8008f84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008f8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008f9c:	eeb0 0a48 	vmov.f32	s0, s16
 8008fa0:	eef0 0a68 	vmov.f32	s1, s17
 8008fa4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008fa8:	f001 f9f0 	bl	800a38c <__ulp>
 8008fac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008fb0:	ec53 2b10 	vmov	r2, r3, d0
 8008fb4:	f7f7 fb38 	bl	8000628 <__aeabi_dmul>
 8008fb8:	ec53 2b18 	vmov	r2, r3, d8
 8008fbc:	f7f7 f97e 	bl	80002bc <__adddf3>
 8008fc0:	4680      	mov	r8, r0
 8008fc2:	4689      	mov	r9, r1
 8008fc4:	e78d      	b.n	8008ee2 <_strtod_l+0xa82>
 8008fc6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008fca:	e7db      	b.n	8008f84 <_strtod_l+0xb24>
 8008fcc:	a314      	add	r3, pc, #80	; (adr r3, 8009020 <_strtod_l+0xbc0>)
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	f7f7 fd9b 	bl	8000b0c <__aeabi_dcmplt>
 8008fd6:	e7b3      	b.n	8008f40 <_strtod_l+0xae0>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	930a      	str	r3, [sp, #40]	; 0x28
 8008fdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008fde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	f7ff ba7c 	b.w	80084de <_strtod_l+0x7e>
 8008fe6:	2a65      	cmp	r2, #101	; 0x65
 8008fe8:	f43f ab75 	beq.w	80086d6 <_strtod_l+0x276>
 8008fec:	2a45      	cmp	r2, #69	; 0x45
 8008fee:	f43f ab72 	beq.w	80086d6 <_strtod_l+0x276>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	f7ff bbaa 	b.w	800874c <_strtod_l+0x2ec>
 8008ff8:	00000000 	.word	0x00000000
 8008ffc:	bff00000 	.word	0xbff00000
 8009000:	00000000 	.word	0x00000000
 8009004:	3ff00000 	.word	0x3ff00000
 8009008:	94a03595 	.word	0x94a03595
 800900c:	3fdfffff 	.word	0x3fdfffff
 8009010:	35afe535 	.word	0x35afe535
 8009014:	3fe00000 	.word	0x3fe00000
 8009018:	ffc00000 	.word	0xffc00000
 800901c:	41dfffff 	.word	0x41dfffff
 8009020:	94a03595 	.word	0x94a03595
 8009024:	3fcfffff 	.word	0x3fcfffff
 8009028:	3ff00000 	.word	0x3ff00000
 800902c:	3fe00000 	.word	0x3fe00000
 8009030:	7ff00000 	.word	0x7ff00000
 8009034:	7fe00000 	.word	0x7fe00000
 8009038:	7c9fffff 	.word	0x7c9fffff
 800903c:	7fefffff 	.word	0x7fefffff

08009040 <strtod>:
 8009040:	460a      	mov	r2, r1
 8009042:	4601      	mov	r1, r0
 8009044:	4802      	ldr	r0, [pc, #8]	; (8009050 <strtod+0x10>)
 8009046:	4b03      	ldr	r3, [pc, #12]	; (8009054 <strtod+0x14>)
 8009048:	6800      	ldr	r0, [r0, #0]
 800904a:	f7ff ba09 	b.w	8008460 <_strtod_l>
 800904e:	bf00      	nop
 8009050:	20000244 	.word	0x20000244
 8009054:	2000008c 	.word	0x2000008c

08009058 <std>:
 8009058:	2300      	movs	r3, #0
 800905a:	b510      	push	{r4, lr}
 800905c:	4604      	mov	r4, r0
 800905e:	e9c0 3300 	strd	r3, r3, [r0]
 8009062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009066:	6083      	str	r3, [r0, #8]
 8009068:	8181      	strh	r1, [r0, #12]
 800906a:	6643      	str	r3, [r0, #100]	; 0x64
 800906c:	81c2      	strh	r2, [r0, #14]
 800906e:	6183      	str	r3, [r0, #24]
 8009070:	4619      	mov	r1, r3
 8009072:	2208      	movs	r2, #8
 8009074:	305c      	adds	r0, #92	; 0x5c
 8009076:	f000 f914 	bl	80092a2 <memset>
 800907a:	4b0d      	ldr	r3, [pc, #52]	; (80090b0 <std+0x58>)
 800907c:	6263      	str	r3, [r4, #36]	; 0x24
 800907e:	4b0d      	ldr	r3, [pc, #52]	; (80090b4 <std+0x5c>)
 8009080:	62a3      	str	r3, [r4, #40]	; 0x28
 8009082:	4b0d      	ldr	r3, [pc, #52]	; (80090b8 <std+0x60>)
 8009084:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009086:	4b0d      	ldr	r3, [pc, #52]	; (80090bc <std+0x64>)
 8009088:	6323      	str	r3, [r4, #48]	; 0x30
 800908a:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <std+0x68>)
 800908c:	6224      	str	r4, [r4, #32]
 800908e:	429c      	cmp	r4, r3
 8009090:	d006      	beq.n	80090a0 <std+0x48>
 8009092:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009096:	4294      	cmp	r4, r2
 8009098:	d002      	beq.n	80090a0 <std+0x48>
 800909a:	33d0      	adds	r3, #208	; 0xd0
 800909c:	429c      	cmp	r4, r3
 800909e:	d105      	bne.n	80090ac <std+0x54>
 80090a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a8:	f000 b986 	b.w	80093b8 <__retarget_lock_init_recursive>
 80090ac:	bd10      	pop	{r4, pc}
 80090ae:	bf00      	nop
 80090b0:	0800921d 	.word	0x0800921d
 80090b4:	0800923f 	.word	0x0800923f
 80090b8:	08009277 	.word	0x08009277
 80090bc:	0800929b 	.word	0x0800929b
 80090c0:	20000494 	.word	0x20000494

080090c4 <stdio_exit_handler>:
 80090c4:	4a02      	ldr	r2, [pc, #8]	; (80090d0 <stdio_exit_handler+0xc>)
 80090c6:	4903      	ldr	r1, [pc, #12]	; (80090d4 <stdio_exit_handler+0x10>)
 80090c8:	4803      	ldr	r0, [pc, #12]	; (80090d8 <stdio_exit_handler+0x14>)
 80090ca:	f000 b869 	b.w	80091a0 <_fwalk_sglue>
 80090ce:	bf00      	nop
 80090d0:	20000080 	.word	0x20000080
 80090d4:	0800ad05 	.word	0x0800ad05
 80090d8:	200001f8 	.word	0x200001f8

080090dc <cleanup_stdio>:
 80090dc:	6841      	ldr	r1, [r0, #4]
 80090de:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <cleanup_stdio+0x34>)
 80090e0:	4299      	cmp	r1, r3
 80090e2:	b510      	push	{r4, lr}
 80090e4:	4604      	mov	r4, r0
 80090e6:	d001      	beq.n	80090ec <cleanup_stdio+0x10>
 80090e8:	f001 fe0c 	bl	800ad04 <_fflush_r>
 80090ec:	68a1      	ldr	r1, [r4, #8]
 80090ee:	4b09      	ldr	r3, [pc, #36]	; (8009114 <cleanup_stdio+0x38>)
 80090f0:	4299      	cmp	r1, r3
 80090f2:	d002      	beq.n	80090fa <cleanup_stdio+0x1e>
 80090f4:	4620      	mov	r0, r4
 80090f6:	f001 fe05 	bl	800ad04 <_fflush_r>
 80090fa:	68e1      	ldr	r1, [r4, #12]
 80090fc:	4b06      	ldr	r3, [pc, #24]	; (8009118 <cleanup_stdio+0x3c>)
 80090fe:	4299      	cmp	r1, r3
 8009100:	d004      	beq.n	800910c <cleanup_stdio+0x30>
 8009102:	4620      	mov	r0, r4
 8009104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009108:	f001 bdfc 	b.w	800ad04 <_fflush_r>
 800910c:	bd10      	pop	{r4, pc}
 800910e:	bf00      	nop
 8009110:	20000494 	.word	0x20000494
 8009114:	200004fc 	.word	0x200004fc
 8009118:	20000564 	.word	0x20000564

0800911c <global_stdio_init.part.0>:
 800911c:	b510      	push	{r4, lr}
 800911e:	4b0b      	ldr	r3, [pc, #44]	; (800914c <global_stdio_init.part.0+0x30>)
 8009120:	4c0b      	ldr	r4, [pc, #44]	; (8009150 <global_stdio_init.part.0+0x34>)
 8009122:	4a0c      	ldr	r2, [pc, #48]	; (8009154 <global_stdio_init.part.0+0x38>)
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	4620      	mov	r0, r4
 8009128:	2200      	movs	r2, #0
 800912a:	2104      	movs	r1, #4
 800912c:	f7ff ff94 	bl	8009058 <std>
 8009130:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009134:	2201      	movs	r2, #1
 8009136:	2109      	movs	r1, #9
 8009138:	f7ff ff8e 	bl	8009058 <std>
 800913c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009140:	2202      	movs	r2, #2
 8009142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009146:	2112      	movs	r1, #18
 8009148:	f7ff bf86 	b.w	8009058 <std>
 800914c:	200005cc 	.word	0x200005cc
 8009150:	20000494 	.word	0x20000494
 8009154:	080090c5 	.word	0x080090c5

08009158 <__sfp_lock_acquire>:
 8009158:	4801      	ldr	r0, [pc, #4]	; (8009160 <__sfp_lock_acquire+0x8>)
 800915a:	f000 b92e 	b.w	80093ba <__retarget_lock_acquire_recursive>
 800915e:	bf00      	nop
 8009160:	200005d5 	.word	0x200005d5

08009164 <__sfp_lock_release>:
 8009164:	4801      	ldr	r0, [pc, #4]	; (800916c <__sfp_lock_release+0x8>)
 8009166:	f000 b929 	b.w	80093bc <__retarget_lock_release_recursive>
 800916a:	bf00      	nop
 800916c:	200005d5 	.word	0x200005d5

08009170 <__sinit>:
 8009170:	b510      	push	{r4, lr}
 8009172:	4604      	mov	r4, r0
 8009174:	f7ff fff0 	bl	8009158 <__sfp_lock_acquire>
 8009178:	6a23      	ldr	r3, [r4, #32]
 800917a:	b11b      	cbz	r3, 8009184 <__sinit+0x14>
 800917c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009180:	f7ff bff0 	b.w	8009164 <__sfp_lock_release>
 8009184:	4b04      	ldr	r3, [pc, #16]	; (8009198 <__sinit+0x28>)
 8009186:	6223      	str	r3, [r4, #32]
 8009188:	4b04      	ldr	r3, [pc, #16]	; (800919c <__sinit+0x2c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1f5      	bne.n	800917c <__sinit+0xc>
 8009190:	f7ff ffc4 	bl	800911c <global_stdio_init.part.0>
 8009194:	e7f2      	b.n	800917c <__sinit+0xc>
 8009196:	bf00      	nop
 8009198:	080090dd 	.word	0x080090dd
 800919c:	200005cc 	.word	0x200005cc

080091a0 <_fwalk_sglue>:
 80091a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a4:	4607      	mov	r7, r0
 80091a6:	4688      	mov	r8, r1
 80091a8:	4614      	mov	r4, r2
 80091aa:	2600      	movs	r6, #0
 80091ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091b0:	f1b9 0901 	subs.w	r9, r9, #1
 80091b4:	d505      	bpl.n	80091c2 <_fwalk_sglue+0x22>
 80091b6:	6824      	ldr	r4, [r4, #0]
 80091b8:	2c00      	cmp	r4, #0
 80091ba:	d1f7      	bne.n	80091ac <_fwalk_sglue+0xc>
 80091bc:	4630      	mov	r0, r6
 80091be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091c2:	89ab      	ldrh	r3, [r5, #12]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d907      	bls.n	80091d8 <_fwalk_sglue+0x38>
 80091c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091cc:	3301      	adds	r3, #1
 80091ce:	d003      	beq.n	80091d8 <_fwalk_sglue+0x38>
 80091d0:	4629      	mov	r1, r5
 80091d2:	4638      	mov	r0, r7
 80091d4:	47c0      	blx	r8
 80091d6:	4306      	orrs	r6, r0
 80091d8:	3568      	adds	r5, #104	; 0x68
 80091da:	e7e9      	b.n	80091b0 <_fwalk_sglue+0x10>

080091dc <siprintf>:
 80091dc:	b40e      	push	{r1, r2, r3}
 80091de:	b500      	push	{lr}
 80091e0:	b09c      	sub	sp, #112	; 0x70
 80091e2:	ab1d      	add	r3, sp, #116	; 0x74
 80091e4:	9002      	str	r0, [sp, #8]
 80091e6:	9006      	str	r0, [sp, #24]
 80091e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091ec:	4809      	ldr	r0, [pc, #36]	; (8009214 <siprintf+0x38>)
 80091ee:	9107      	str	r1, [sp, #28]
 80091f0:	9104      	str	r1, [sp, #16]
 80091f2:	4909      	ldr	r1, [pc, #36]	; (8009218 <siprintf+0x3c>)
 80091f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f8:	9105      	str	r1, [sp, #20]
 80091fa:	6800      	ldr	r0, [r0, #0]
 80091fc:	9301      	str	r3, [sp, #4]
 80091fe:	a902      	add	r1, sp, #8
 8009200:	f001 fa6c 	bl	800a6dc <_svfiprintf_r>
 8009204:	9b02      	ldr	r3, [sp, #8]
 8009206:	2200      	movs	r2, #0
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	b01c      	add	sp, #112	; 0x70
 800920c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009210:	b003      	add	sp, #12
 8009212:	4770      	bx	lr
 8009214:	20000244 	.word	0x20000244
 8009218:	ffff0208 	.word	0xffff0208

0800921c <__sread>:
 800921c:	b510      	push	{r4, lr}
 800921e:	460c      	mov	r4, r1
 8009220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009224:	f000 f87a 	bl	800931c <_read_r>
 8009228:	2800      	cmp	r0, #0
 800922a:	bfab      	itete	ge
 800922c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800922e:	89a3      	ldrhlt	r3, [r4, #12]
 8009230:	181b      	addge	r3, r3, r0
 8009232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009236:	bfac      	ite	ge
 8009238:	6563      	strge	r3, [r4, #84]	; 0x54
 800923a:	81a3      	strhlt	r3, [r4, #12]
 800923c:	bd10      	pop	{r4, pc}

0800923e <__swrite>:
 800923e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009242:	461f      	mov	r7, r3
 8009244:	898b      	ldrh	r3, [r1, #12]
 8009246:	05db      	lsls	r3, r3, #23
 8009248:	4605      	mov	r5, r0
 800924a:	460c      	mov	r4, r1
 800924c:	4616      	mov	r6, r2
 800924e:	d505      	bpl.n	800925c <__swrite+0x1e>
 8009250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009254:	2302      	movs	r3, #2
 8009256:	2200      	movs	r2, #0
 8009258:	f000 f84e 	bl	80092f8 <_lseek_r>
 800925c:	89a3      	ldrh	r3, [r4, #12]
 800925e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009266:	81a3      	strh	r3, [r4, #12]
 8009268:	4632      	mov	r2, r6
 800926a:	463b      	mov	r3, r7
 800926c:	4628      	mov	r0, r5
 800926e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009272:	f000 b865 	b.w	8009340 <_write_r>

08009276 <__sseek>:
 8009276:	b510      	push	{r4, lr}
 8009278:	460c      	mov	r4, r1
 800927a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800927e:	f000 f83b 	bl	80092f8 <_lseek_r>
 8009282:	1c43      	adds	r3, r0, #1
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	bf15      	itete	ne
 8009288:	6560      	strne	r0, [r4, #84]	; 0x54
 800928a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800928e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009292:	81a3      	strheq	r3, [r4, #12]
 8009294:	bf18      	it	ne
 8009296:	81a3      	strhne	r3, [r4, #12]
 8009298:	bd10      	pop	{r4, pc}

0800929a <__sclose>:
 800929a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800929e:	f000 b81b 	b.w	80092d8 <_close_r>

080092a2 <memset>:
 80092a2:	4402      	add	r2, r0
 80092a4:	4603      	mov	r3, r0
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d100      	bne.n	80092ac <memset+0xa>
 80092aa:	4770      	bx	lr
 80092ac:	f803 1b01 	strb.w	r1, [r3], #1
 80092b0:	e7f9      	b.n	80092a6 <memset+0x4>

080092b2 <strncmp>:
 80092b2:	b510      	push	{r4, lr}
 80092b4:	b16a      	cbz	r2, 80092d2 <strncmp+0x20>
 80092b6:	3901      	subs	r1, #1
 80092b8:	1884      	adds	r4, r0, r2
 80092ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d103      	bne.n	80092ce <strncmp+0x1c>
 80092c6:	42a0      	cmp	r0, r4
 80092c8:	d001      	beq.n	80092ce <strncmp+0x1c>
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	d1f5      	bne.n	80092ba <strncmp+0x8>
 80092ce:	1ad0      	subs	r0, r2, r3
 80092d0:	bd10      	pop	{r4, pc}
 80092d2:	4610      	mov	r0, r2
 80092d4:	e7fc      	b.n	80092d0 <strncmp+0x1e>
	...

080092d8 <_close_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d06      	ldr	r5, [pc, #24]	; (80092f4 <_close_r+0x1c>)
 80092dc:	2300      	movs	r3, #0
 80092de:	4604      	mov	r4, r0
 80092e0:	4608      	mov	r0, r1
 80092e2:	602b      	str	r3, [r5, #0]
 80092e4:	f7f9 fb97 	bl	8002a16 <_close>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_close_r+0x1a>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_close_r+0x1a>
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	200005d0 	.word	0x200005d0

080092f8 <_lseek_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d07      	ldr	r5, [pc, #28]	; (8009318 <_lseek_r+0x20>)
 80092fc:	4604      	mov	r4, r0
 80092fe:	4608      	mov	r0, r1
 8009300:	4611      	mov	r1, r2
 8009302:	2200      	movs	r2, #0
 8009304:	602a      	str	r2, [r5, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	f7f9 fbac 	bl	8002a64 <_lseek>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d102      	bne.n	8009316 <_lseek_r+0x1e>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	b103      	cbz	r3, 8009316 <_lseek_r+0x1e>
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	200005d0 	.word	0x200005d0

0800931c <_read_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4d07      	ldr	r5, [pc, #28]	; (800933c <_read_r+0x20>)
 8009320:	4604      	mov	r4, r0
 8009322:	4608      	mov	r0, r1
 8009324:	4611      	mov	r1, r2
 8009326:	2200      	movs	r2, #0
 8009328:	602a      	str	r2, [r5, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	f7f9 fb3a 	bl	80029a4 <_read>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d102      	bne.n	800933a <_read_r+0x1e>
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	b103      	cbz	r3, 800933a <_read_r+0x1e>
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	200005d0 	.word	0x200005d0

08009340 <_write_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4d07      	ldr	r5, [pc, #28]	; (8009360 <_write_r+0x20>)
 8009344:	4604      	mov	r4, r0
 8009346:	4608      	mov	r0, r1
 8009348:	4611      	mov	r1, r2
 800934a:	2200      	movs	r2, #0
 800934c:	602a      	str	r2, [r5, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	f7f9 fb45 	bl	80029de <_write>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_write_r+0x1e>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_write_r+0x1e>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	200005d0 	.word	0x200005d0

08009364 <__errno>:
 8009364:	4b01      	ldr	r3, [pc, #4]	; (800936c <__errno+0x8>)
 8009366:	6818      	ldr	r0, [r3, #0]
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	20000244 	.word	0x20000244

08009370 <__libc_init_array>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	4d0d      	ldr	r5, [pc, #52]	; (80093a8 <__libc_init_array+0x38>)
 8009374:	4c0d      	ldr	r4, [pc, #52]	; (80093ac <__libc_init_array+0x3c>)
 8009376:	1b64      	subs	r4, r4, r5
 8009378:	10a4      	asrs	r4, r4, #2
 800937a:	2600      	movs	r6, #0
 800937c:	42a6      	cmp	r6, r4
 800937e:	d109      	bne.n	8009394 <__libc_init_array+0x24>
 8009380:	4d0b      	ldr	r5, [pc, #44]	; (80093b0 <__libc_init_array+0x40>)
 8009382:	4c0c      	ldr	r4, [pc, #48]	; (80093b4 <__libc_init_array+0x44>)
 8009384:	f002 f83e 	bl	800b404 <_init>
 8009388:	1b64      	subs	r4, r4, r5
 800938a:	10a4      	asrs	r4, r4, #2
 800938c:	2600      	movs	r6, #0
 800938e:	42a6      	cmp	r6, r4
 8009390:	d105      	bne.n	800939e <__libc_init_array+0x2e>
 8009392:	bd70      	pop	{r4, r5, r6, pc}
 8009394:	f855 3b04 	ldr.w	r3, [r5], #4
 8009398:	4798      	blx	r3
 800939a:	3601      	adds	r6, #1
 800939c:	e7ee      	b.n	800937c <__libc_init_array+0xc>
 800939e:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a2:	4798      	blx	r3
 80093a4:	3601      	adds	r6, #1
 80093a6:	e7f2      	b.n	800938e <__libc_init_array+0x1e>
 80093a8:	0800b834 	.word	0x0800b834
 80093ac:	0800b834 	.word	0x0800b834
 80093b0:	0800b834 	.word	0x0800b834
 80093b4:	0800b838 	.word	0x0800b838

080093b8 <__retarget_lock_init_recursive>:
 80093b8:	4770      	bx	lr

080093ba <__retarget_lock_acquire_recursive>:
 80093ba:	4770      	bx	lr

080093bc <__retarget_lock_release_recursive>:
 80093bc:	4770      	bx	lr

080093be <memcpy>:
 80093be:	440a      	add	r2, r1
 80093c0:	4291      	cmp	r1, r2
 80093c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80093c6:	d100      	bne.n	80093ca <memcpy+0xc>
 80093c8:	4770      	bx	lr
 80093ca:	b510      	push	{r4, lr}
 80093cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093d4:	4291      	cmp	r1, r2
 80093d6:	d1f9      	bne.n	80093cc <memcpy+0xe>
 80093d8:	bd10      	pop	{r4, pc}
 80093da:	0000      	movs	r0, r0
 80093dc:	0000      	movs	r0, r0
	...

080093e0 <nan>:
 80093e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80093e8 <nan+0x8>
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	00000000 	.word	0x00000000
 80093ec:	7ff80000 	.word	0x7ff80000

080093f0 <_free_r>:
 80093f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093f2:	2900      	cmp	r1, #0
 80093f4:	d044      	beq.n	8009480 <_free_r+0x90>
 80093f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fa:	9001      	str	r0, [sp, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f1a1 0404 	sub.w	r4, r1, #4
 8009402:	bfb8      	it	lt
 8009404:	18e4      	addlt	r4, r4, r3
 8009406:	f000 fc49 	bl	8009c9c <__malloc_lock>
 800940a:	4a1e      	ldr	r2, [pc, #120]	; (8009484 <_free_r+0x94>)
 800940c:	9801      	ldr	r0, [sp, #4]
 800940e:	6813      	ldr	r3, [r2, #0]
 8009410:	b933      	cbnz	r3, 8009420 <_free_r+0x30>
 8009412:	6063      	str	r3, [r4, #4]
 8009414:	6014      	str	r4, [r2, #0]
 8009416:	b003      	add	sp, #12
 8009418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800941c:	f000 bc44 	b.w	8009ca8 <__malloc_unlock>
 8009420:	42a3      	cmp	r3, r4
 8009422:	d908      	bls.n	8009436 <_free_r+0x46>
 8009424:	6825      	ldr	r5, [r4, #0]
 8009426:	1961      	adds	r1, r4, r5
 8009428:	428b      	cmp	r3, r1
 800942a:	bf01      	itttt	eq
 800942c:	6819      	ldreq	r1, [r3, #0]
 800942e:	685b      	ldreq	r3, [r3, #4]
 8009430:	1949      	addeq	r1, r1, r5
 8009432:	6021      	streq	r1, [r4, #0]
 8009434:	e7ed      	b.n	8009412 <_free_r+0x22>
 8009436:	461a      	mov	r2, r3
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	b10b      	cbz	r3, 8009440 <_free_r+0x50>
 800943c:	42a3      	cmp	r3, r4
 800943e:	d9fa      	bls.n	8009436 <_free_r+0x46>
 8009440:	6811      	ldr	r1, [r2, #0]
 8009442:	1855      	adds	r5, r2, r1
 8009444:	42a5      	cmp	r5, r4
 8009446:	d10b      	bne.n	8009460 <_free_r+0x70>
 8009448:	6824      	ldr	r4, [r4, #0]
 800944a:	4421      	add	r1, r4
 800944c:	1854      	adds	r4, r2, r1
 800944e:	42a3      	cmp	r3, r4
 8009450:	6011      	str	r1, [r2, #0]
 8009452:	d1e0      	bne.n	8009416 <_free_r+0x26>
 8009454:	681c      	ldr	r4, [r3, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	6053      	str	r3, [r2, #4]
 800945a:	440c      	add	r4, r1
 800945c:	6014      	str	r4, [r2, #0]
 800945e:	e7da      	b.n	8009416 <_free_r+0x26>
 8009460:	d902      	bls.n	8009468 <_free_r+0x78>
 8009462:	230c      	movs	r3, #12
 8009464:	6003      	str	r3, [r0, #0]
 8009466:	e7d6      	b.n	8009416 <_free_r+0x26>
 8009468:	6825      	ldr	r5, [r4, #0]
 800946a:	1961      	adds	r1, r4, r5
 800946c:	428b      	cmp	r3, r1
 800946e:	bf04      	itt	eq
 8009470:	6819      	ldreq	r1, [r3, #0]
 8009472:	685b      	ldreq	r3, [r3, #4]
 8009474:	6063      	str	r3, [r4, #4]
 8009476:	bf04      	itt	eq
 8009478:	1949      	addeq	r1, r1, r5
 800947a:	6021      	streq	r1, [r4, #0]
 800947c:	6054      	str	r4, [r2, #4]
 800947e:	e7ca      	b.n	8009416 <_free_r+0x26>
 8009480:	b003      	add	sp, #12
 8009482:	bd30      	pop	{r4, r5, pc}
 8009484:	200005d8 	.word	0x200005d8

08009488 <rshift>:
 8009488:	6903      	ldr	r3, [r0, #16]
 800948a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800948e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009492:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009496:	f100 0414 	add.w	r4, r0, #20
 800949a:	dd45      	ble.n	8009528 <rshift+0xa0>
 800949c:	f011 011f 	ands.w	r1, r1, #31
 80094a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80094a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80094a8:	d10c      	bne.n	80094c4 <rshift+0x3c>
 80094aa:	f100 0710 	add.w	r7, r0, #16
 80094ae:	4629      	mov	r1, r5
 80094b0:	42b1      	cmp	r1, r6
 80094b2:	d334      	bcc.n	800951e <rshift+0x96>
 80094b4:	1a9b      	subs	r3, r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	1eea      	subs	r2, r5, #3
 80094ba:	4296      	cmp	r6, r2
 80094bc:	bf38      	it	cc
 80094be:	2300      	movcc	r3, #0
 80094c0:	4423      	add	r3, r4
 80094c2:	e015      	b.n	80094f0 <rshift+0x68>
 80094c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80094c8:	f1c1 0820 	rsb	r8, r1, #32
 80094cc:	40cf      	lsrs	r7, r1
 80094ce:	f105 0e04 	add.w	lr, r5, #4
 80094d2:	46a1      	mov	r9, r4
 80094d4:	4576      	cmp	r6, lr
 80094d6:	46f4      	mov	ip, lr
 80094d8:	d815      	bhi.n	8009506 <rshift+0x7e>
 80094da:	1a9a      	subs	r2, r3, r2
 80094dc:	0092      	lsls	r2, r2, #2
 80094de:	3a04      	subs	r2, #4
 80094e0:	3501      	adds	r5, #1
 80094e2:	42ae      	cmp	r6, r5
 80094e4:	bf38      	it	cc
 80094e6:	2200      	movcc	r2, #0
 80094e8:	18a3      	adds	r3, r4, r2
 80094ea:	50a7      	str	r7, [r4, r2]
 80094ec:	b107      	cbz	r7, 80094f0 <rshift+0x68>
 80094ee:	3304      	adds	r3, #4
 80094f0:	1b1a      	subs	r2, r3, r4
 80094f2:	42a3      	cmp	r3, r4
 80094f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80094f8:	bf08      	it	eq
 80094fa:	2300      	moveq	r3, #0
 80094fc:	6102      	str	r2, [r0, #16]
 80094fe:	bf08      	it	eq
 8009500:	6143      	streq	r3, [r0, #20]
 8009502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009506:	f8dc c000 	ldr.w	ip, [ip]
 800950a:	fa0c fc08 	lsl.w	ip, ip, r8
 800950e:	ea4c 0707 	orr.w	r7, ip, r7
 8009512:	f849 7b04 	str.w	r7, [r9], #4
 8009516:	f85e 7b04 	ldr.w	r7, [lr], #4
 800951a:	40cf      	lsrs	r7, r1
 800951c:	e7da      	b.n	80094d4 <rshift+0x4c>
 800951e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009522:	f847 cf04 	str.w	ip, [r7, #4]!
 8009526:	e7c3      	b.n	80094b0 <rshift+0x28>
 8009528:	4623      	mov	r3, r4
 800952a:	e7e1      	b.n	80094f0 <rshift+0x68>

0800952c <__hexdig_fun>:
 800952c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009530:	2b09      	cmp	r3, #9
 8009532:	d802      	bhi.n	800953a <__hexdig_fun+0xe>
 8009534:	3820      	subs	r0, #32
 8009536:	b2c0      	uxtb	r0, r0
 8009538:	4770      	bx	lr
 800953a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800953e:	2b05      	cmp	r3, #5
 8009540:	d801      	bhi.n	8009546 <__hexdig_fun+0x1a>
 8009542:	3847      	subs	r0, #71	; 0x47
 8009544:	e7f7      	b.n	8009536 <__hexdig_fun+0xa>
 8009546:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800954a:	2b05      	cmp	r3, #5
 800954c:	d801      	bhi.n	8009552 <__hexdig_fun+0x26>
 800954e:	3827      	subs	r0, #39	; 0x27
 8009550:	e7f1      	b.n	8009536 <__hexdig_fun+0xa>
 8009552:	2000      	movs	r0, #0
 8009554:	4770      	bx	lr
	...

08009558 <__gethex>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	4617      	mov	r7, r2
 800955e:	680a      	ldr	r2, [r1, #0]
 8009560:	b085      	sub	sp, #20
 8009562:	f102 0b02 	add.w	fp, r2, #2
 8009566:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800956a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800956e:	4681      	mov	r9, r0
 8009570:	468a      	mov	sl, r1
 8009572:	9302      	str	r3, [sp, #8]
 8009574:	32fe      	adds	r2, #254	; 0xfe
 8009576:	eb02 030b 	add.w	r3, r2, fp
 800957a:	46d8      	mov	r8, fp
 800957c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	2830      	cmp	r0, #48	; 0x30
 8009584:	d0f7      	beq.n	8009576 <__gethex+0x1e>
 8009586:	f7ff ffd1 	bl	800952c <__hexdig_fun>
 800958a:	4604      	mov	r4, r0
 800958c:	2800      	cmp	r0, #0
 800958e:	d138      	bne.n	8009602 <__gethex+0xaa>
 8009590:	49a7      	ldr	r1, [pc, #668]	; (8009830 <__gethex+0x2d8>)
 8009592:	2201      	movs	r2, #1
 8009594:	4640      	mov	r0, r8
 8009596:	f7ff fe8c 	bl	80092b2 <strncmp>
 800959a:	4606      	mov	r6, r0
 800959c:	2800      	cmp	r0, #0
 800959e:	d169      	bne.n	8009674 <__gethex+0x11c>
 80095a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80095a4:	465d      	mov	r5, fp
 80095a6:	f7ff ffc1 	bl	800952c <__hexdig_fun>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d064      	beq.n	8009678 <__gethex+0x120>
 80095ae:	465a      	mov	r2, fp
 80095b0:	7810      	ldrb	r0, [r2, #0]
 80095b2:	2830      	cmp	r0, #48	; 0x30
 80095b4:	4690      	mov	r8, r2
 80095b6:	f102 0201 	add.w	r2, r2, #1
 80095ba:	d0f9      	beq.n	80095b0 <__gethex+0x58>
 80095bc:	f7ff ffb6 	bl	800952c <__hexdig_fun>
 80095c0:	2301      	movs	r3, #1
 80095c2:	fab0 f480 	clz	r4, r0
 80095c6:	0964      	lsrs	r4, r4, #5
 80095c8:	465e      	mov	r6, fp
 80095ca:	9301      	str	r3, [sp, #4]
 80095cc:	4642      	mov	r2, r8
 80095ce:	4615      	mov	r5, r2
 80095d0:	3201      	adds	r2, #1
 80095d2:	7828      	ldrb	r0, [r5, #0]
 80095d4:	f7ff ffaa 	bl	800952c <__hexdig_fun>
 80095d8:	2800      	cmp	r0, #0
 80095da:	d1f8      	bne.n	80095ce <__gethex+0x76>
 80095dc:	4994      	ldr	r1, [pc, #592]	; (8009830 <__gethex+0x2d8>)
 80095de:	2201      	movs	r2, #1
 80095e0:	4628      	mov	r0, r5
 80095e2:	f7ff fe66 	bl	80092b2 <strncmp>
 80095e6:	b978      	cbnz	r0, 8009608 <__gethex+0xb0>
 80095e8:	b946      	cbnz	r6, 80095fc <__gethex+0xa4>
 80095ea:	1c6e      	adds	r6, r5, #1
 80095ec:	4632      	mov	r2, r6
 80095ee:	4615      	mov	r5, r2
 80095f0:	3201      	adds	r2, #1
 80095f2:	7828      	ldrb	r0, [r5, #0]
 80095f4:	f7ff ff9a 	bl	800952c <__hexdig_fun>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d1f8      	bne.n	80095ee <__gethex+0x96>
 80095fc:	1b73      	subs	r3, r6, r5
 80095fe:	009e      	lsls	r6, r3, #2
 8009600:	e004      	b.n	800960c <__gethex+0xb4>
 8009602:	2400      	movs	r4, #0
 8009604:	4626      	mov	r6, r4
 8009606:	e7e1      	b.n	80095cc <__gethex+0x74>
 8009608:	2e00      	cmp	r6, #0
 800960a:	d1f7      	bne.n	80095fc <__gethex+0xa4>
 800960c:	782b      	ldrb	r3, [r5, #0]
 800960e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009612:	2b50      	cmp	r3, #80	; 0x50
 8009614:	d13d      	bne.n	8009692 <__gethex+0x13a>
 8009616:	786b      	ldrb	r3, [r5, #1]
 8009618:	2b2b      	cmp	r3, #43	; 0x2b
 800961a:	d02f      	beq.n	800967c <__gethex+0x124>
 800961c:	2b2d      	cmp	r3, #45	; 0x2d
 800961e:	d031      	beq.n	8009684 <__gethex+0x12c>
 8009620:	1c69      	adds	r1, r5, #1
 8009622:	f04f 0b00 	mov.w	fp, #0
 8009626:	7808      	ldrb	r0, [r1, #0]
 8009628:	f7ff ff80 	bl	800952c <__hexdig_fun>
 800962c:	1e42      	subs	r2, r0, #1
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	2a18      	cmp	r2, #24
 8009632:	d82e      	bhi.n	8009692 <__gethex+0x13a>
 8009634:	f1a0 0210 	sub.w	r2, r0, #16
 8009638:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800963c:	f7ff ff76 	bl	800952c <__hexdig_fun>
 8009640:	f100 3cff 	add.w	ip, r0, #4294967295
 8009644:	fa5f fc8c 	uxtb.w	ip, ip
 8009648:	f1bc 0f18 	cmp.w	ip, #24
 800964c:	d91d      	bls.n	800968a <__gethex+0x132>
 800964e:	f1bb 0f00 	cmp.w	fp, #0
 8009652:	d000      	beq.n	8009656 <__gethex+0xfe>
 8009654:	4252      	negs	r2, r2
 8009656:	4416      	add	r6, r2
 8009658:	f8ca 1000 	str.w	r1, [sl]
 800965c:	b1dc      	cbz	r4, 8009696 <__gethex+0x13e>
 800965e:	9b01      	ldr	r3, [sp, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	bf14      	ite	ne
 8009664:	f04f 0800 	movne.w	r8, #0
 8009668:	f04f 0806 	moveq.w	r8, #6
 800966c:	4640      	mov	r0, r8
 800966e:	b005      	add	sp, #20
 8009670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009674:	4645      	mov	r5, r8
 8009676:	4626      	mov	r6, r4
 8009678:	2401      	movs	r4, #1
 800967a:	e7c7      	b.n	800960c <__gethex+0xb4>
 800967c:	f04f 0b00 	mov.w	fp, #0
 8009680:	1ca9      	adds	r1, r5, #2
 8009682:	e7d0      	b.n	8009626 <__gethex+0xce>
 8009684:	f04f 0b01 	mov.w	fp, #1
 8009688:	e7fa      	b.n	8009680 <__gethex+0x128>
 800968a:	230a      	movs	r3, #10
 800968c:	fb03 0002 	mla	r0, r3, r2, r0
 8009690:	e7d0      	b.n	8009634 <__gethex+0xdc>
 8009692:	4629      	mov	r1, r5
 8009694:	e7e0      	b.n	8009658 <__gethex+0x100>
 8009696:	eba5 0308 	sub.w	r3, r5, r8
 800969a:	3b01      	subs	r3, #1
 800969c:	4621      	mov	r1, r4
 800969e:	2b07      	cmp	r3, #7
 80096a0:	dc0a      	bgt.n	80096b8 <__gethex+0x160>
 80096a2:	4648      	mov	r0, r9
 80096a4:	f000 fb06 	bl	8009cb4 <_Balloc>
 80096a8:	4604      	mov	r4, r0
 80096aa:	b940      	cbnz	r0, 80096be <__gethex+0x166>
 80096ac:	4b61      	ldr	r3, [pc, #388]	; (8009834 <__gethex+0x2dc>)
 80096ae:	4602      	mov	r2, r0
 80096b0:	21e4      	movs	r1, #228	; 0xe4
 80096b2:	4861      	ldr	r0, [pc, #388]	; (8009838 <__gethex+0x2e0>)
 80096b4:	f001 fb78 	bl	800ada8 <__assert_func>
 80096b8:	3101      	adds	r1, #1
 80096ba:	105b      	asrs	r3, r3, #1
 80096bc:	e7ef      	b.n	800969e <__gethex+0x146>
 80096be:	f100 0a14 	add.w	sl, r0, #20
 80096c2:	2300      	movs	r3, #0
 80096c4:	495a      	ldr	r1, [pc, #360]	; (8009830 <__gethex+0x2d8>)
 80096c6:	f8cd a004 	str.w	sl, [sp, #4]
 80096ca:	469b      	mov	fp, r3
 80096cc:	45a8      	cmp	r8, r5
 80096ce:	d342      	bcc.n	8009756 <__gethex+0x1fe>
 80096d0:	9801      	ldr	r0, [sp, #4]
 80096d2:	f840 bb04 	str.w	fp, [r0], #4
 80096d6:	eba0 000a 	sub.w	r0, r0, sl
 80096da:	1080      	asrs	r0, r0, #2
 80096dc:	6120      	str	r0, [r4, #16]
 80096de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80096e2:	4658      	mov	r0, fp
 80096e4:	f000 fbd8 	bl	8009e98 <__hi0bits>
 80096e8:	683d      	ldr	r5, [r7, #0]
 80096ea:	eba8 0000 	sub.w	r0, r8, r0
 80096ee:	42a8      	cmp	r0, r5
 80096f0:	dd59      	ble.n	80097a6 <__gethex+0x24e>
 80096f2:	eba0 0805 	sub.w	r8, r0, r5
 80096f6:	4641      	mov	r1, r8
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 ff67 	bl	800a5cc <__any_on>
 80096fe:	4683      	mov	fp, r0
 8009700:	b1b8      	cbz	r0, 8009732 <__gethex+0x1da>
 8009702:	f108 33ff 	add.w	r3, r8, #4294967295
 8009706:	1159      	asrs	r1, r3, #5
 8009708:	f003 021f 	and.w	r2, r3, #31
 800970c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009710:	f04f 0b01 	mov.w	fp, #1
 8009714:	fa0b f202 	lsl.w	r2, fp, r2
 8009718:	420a      	tst	r2, r1
 800971a:	d00a      	beq.n	8009732 <__gethex+0x1da>
 800971c:	455b      	cmp	r3, fp
 800971e:	dd06      	ble.n	800972e <__gethex+0x1d6>
 8009720:	f1a8 0102 	sub.w	r1, r8, #2
 8009724:	4620      	mov	r0, r4
 8009726:	f000 ff51 	bl	800a5cc <__any_on>
 800972a:	2800      	cmp	r0, #0
 800972c:	d138      	bne.n	80097a0 <__gethex+0x248>
 800972e:	f04f 0b02 	mov.w	fp, #2
 8009732:	4641      	mov	r1, r8
 8009734:	4620      	mov	r0, r4
 8009736:	f7ff fea7 	bl	8009488 <rshift>
 800973a:	4446      	add	r6, r8
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	42b3      	cmp	r3, r6
 8009740:	da41      	bge.n	80097c6 <__gethex+0x26e>
 8009742:	4621      	mov	r1, r4
 8009744:	4648      	mov	r0, r9
 8009746:	f000 faf5 	bl	8009d34 <_Bfree>
 800974a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800974c:	2300      	movs	r3, #0
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009754:	e78a      	b.n	800966c <__gethex+0x114>
 8009756:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800975a:	2a2e      	cmp	r2, #46	; 0x2e
 800975c:	d014      	beq.n	8009788 <__gethex+0x230>
 800975e:	2b20      	cmp	r3, #32
 8009760:	d106      	bne.n	8009770 <__gethex+0x218>
 8009762:	9b01      	ldr	r3, [sp, #4]
 8009764:	f843 bb04 	str.w	fp, [r3], #4
 8009768:	f04f 0b00 	mov.w	fp, #0
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	465b      	mov	r3, fp
 8009770:	7828      	ldrb	r0, [r5, #0]
 8009772:	9303      	str	r3, [sp, #12]
 8009774:	f7ff feda 	bl	800952c <__hexdig_fun>
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	f000 000f 	and.w	r0, r0, #15
 800977e:	4098      	lsls	r0, r3
 8009780:	ea4b 0b00 	orr.w	fp, fp, r0
 8009784:	3304      	adds	r3, #4
 8009786:	e7a1      	b.n	80096cc <__gethex+0x174>
 8009788:	45a8      	cmp	r8, r5
 800978a:	d8e8      	bhi.n	800975e <__gethex+0x206>
 800978c:	2201      	movs	r2, #1
 800978e:	4628      	mov	r0, r5
 8009790:	9303      	str	r3, [sp, #12]
 8009792:	f7ff fd8e 	bl	80092b2 <strncmp>
 8009796:	4926      	ldr	r1, [pc, #152]	; (8009830 <__gethex+0x2d8>)
 8009798:	9b03      	ldr	r3, [sp, #12]
 800979a:	2800      	cmp	r0, #0
 800979c:	d1df      	bne.n	800975e <__gethex+0x206>
 800979e:	e795      	b.n	80096cc <__gethex+0x174>
 80097a0:	f04f 0b03 	mov.w	fp, #3
 80097a4:	e7c5      	b.n	8009732 <__gethex+0x1da>
 80097a6:	da0b      	bge.n	80097c0 <__gethex+0x268>
 80097a8:	eba5 0800 	sub.w	r8, r5, r0
 80097ac:	4621      	mov	r1, r4
 80097ae:	4642      	mov	r2, r8
 80097b0:	4648      	mov	r0, r9
 80097b2:	f000 fcd9 	bl	800a168 <__lshift>
 80097b6:	eba6 0608 	sub.w	r6, r6, r8
 80097ba:	4604      	mov	r4, r0
 80097bc:	f100 0a14 	add.w	sl, r0, #20
 80097c0:	f04f 0b00 	mov.w	fp, #0
 80097c4:	e7ba      	b.n	800973c <__gethex+0x1e4>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	42b3      	cmp	r3, r6
 80097ca:	dd73      	ble.n	80098b4 <__gethex+0x35c>
 80097cc:	1b9e      	subs	r6, r3, r6
 80097ce:	42b5      	cmp	r5, r6
 80097d0:	dc34      	bgt.n	800983c <__gethex+0x2e4>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d023      	beq.n	8009820 <__gethex+0x2c8>
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d025      	beq.n	8009828 <__gethex+0x2d0>
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d115      	bne.n	800980c <__gethex+0x2b4>
 80097e0:	42b5      	cmp	r5, r6
 80097e2:	d113      	bne.n	800980c <__gethex+0x2b4>
 80097e4:	2d01      	cmp	r5, #1
 80097e6:	d10b      	bne.n	8009800 <__gethex+0x2a8>
 80097e8:	9a02      	ldr	r2, [sp, #8]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	2301      	movs	r3, #1
 80097f0:	6123      	str	r3, [r4, #16]
 80097f2:	f8ca 3000 	str.w	r3, [sl]
 80097f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80097fc:	601c      	str	r4, [r3, #0]
 80097fe:	e735      	b.n	800966c <__gethex+0x114>
 8009800:	1e69      	subs	r1, r5, #1
 8009802:	4620      	mov	r0, r4
 8009804:	f000 fee2 	bl	800a5cc <__any_on>
 8009808:	2800      	cmp	r0, #0
 800980a:	d1ed      	bne.n	80097e8 <__gethex+0x290>
 800980c:	4621      	mov	r1, r4
 800980e:	4648      	mov	r0, r9
 8009810:	f000 fa90 	bl	8009d34 <_Bfree>
 8009814:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009816:	2300      	movs	r3, #0
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800981e:	e725      	b.n	800966c <__gethex+0x114>
 8009820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1f2      	bne.n	800980c <__gethex+0x2b4>
 8009826:	e7df      	b.n	80097e8 <__gethex+0x290>
 8009828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1dc      	bne.n	80097e8 <__gethex+0x290>
 800982e:	e7ed      	b.n	800980c <__gethex+0x2b4>
 8009830:	0800b46c 	.word	0x0800b46c
 8009834:	0800b4d8 	.word	0x0800b4d8
 8009838:	0800b4e9 	.word	0x0800b4e9
 800983c:	f106 38ff 	add.w	r8, r6, #4294967295
 8009840:	f1bb 0f00 	cmp.w	fp, #0
 8009844:	d133      	bne.n	80098ae <__gethex+0x356>
 8009846:	f1b8 0f00 	cmp.w	r8, #0
 800984a:	d004      	beq.n	8009856 <__gethex+0x2fe>
 800984c:	4641      	mov	r1, r8
 800984e:	4620      	mov	r0, r4
 8009850:	f000 febc 	bl	800a5cc <__any_on>
 8009854:	4683      	mov	fp, r0
 8009856:	ea4f 1268 	mov.w	r2, r8, asr #5
 800985a:	2301      	movs	r3, #1
 800985c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009860:	f008 081f 	and.w	r8, r8, #31
 8009864:	fa03 f308 	lsl.w	r3, r3, r8
 8009868:	4213      	tst	r3, r2
 800986a:	4631      	mov	r1, r6
 800986c:	4620      	mov	r0, r4
 800986e:	bf18      	it	ne
 8009870:	f04b 0b02 	orrne.w	fp, fp, #2
 8009874:	1bad      	subs	r5, r5, r6
 8009876:	f7ff fe07 	bl	8009488 <rshift>
 800987a:	687e      	ldr	r6, [r7, #4]
 800987c:	f04f 0802 	mov.w	r8, #2
 8009880:	f1bb 0f00 	cmp.w	fp, #0
 8009884:	d04a      	beq.n	800991c <__gethex+0x3c4>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b02      	cmp	r3, #2
 800988a:	d016      	beq.n	80098ba <__gethex+0x362>
 800988c:	2b03      	cmp	r3, #3
 800988e:	d018      	beq.n	80098c2 <__gethex+0x36a>
 8009890:	2b01      	cmp	r3, #1
 8009892:	d109      	bne.n	80098a8 <__gethex+0x350>
 8009894:	f01b 0f02 	tst.w	fp, #2
 8009898:	d006      	beq.n	80098a8 <__gethex+0x350>
 800989a:	f8da 3000 	ldr.w	r3, [sl]
 800989e:	ea4b 0b03 	orr.w	fp, fp, r3
 80098a2:	f01b 0f01 	tst.w	fp, #1
 80098a6:	d10f      	bne.n	80098c8 <__gethex+0x370>
 80098a8:	f048 0810 	orr.w	r8, r8, #16
 80098ac:	e036      	b.n	800991c <__gethex+0x3c4>
 80098ae:	f04f 0b01 	mov.w	fp, #1
 80098b2:	e7d0      	b.n	8009856 <__gethex+0x2fe>
 80098b4:	f04f 0801 	mov.w	r8, #1
 80098b8:	e7e2      	b.n	8009880 <__gethex+0x328>
 80098ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098bc:	f1c3 0301 	rsb	r3, r3, #1
 80098c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80098c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d0ef      	beq.n	80098a8 <__gethex+0x350>
 80098c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80098cc:	f104 0214 	add.w	r2, r4, #20
 80098d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80098da:	2300      	movs	r3, #0
 80098dc:	4694      	mov	ip, r2
 80098de:	f852 1b04 	ldr.w	r1, [r2], #4
 80098e2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80098e6:	d01e      	beq.n	8009926 <__gethex+0x3ce>
 80098e8:	3101      	adds	r1, #1
 80098ea:	f8cc 1000 	str.w	r1, [ip]
 80098ee:	f1b8 0f02 	cmp.w	r8, #2
 80098f2:	f104 0214 	add.w	r2, r4, #20
 80098f6:	d13d      	bne.n	8009974 <__gethex+0x41c>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	42ab      	cmp	r3, r5
 80098fe:	d10b      	bne.n	8009918 <__gethex+0x3c0>
 8009900:	1169      	asrs	r1, r5, #5
 8009902:	2301      	movs	r3, #1
 8009904:	f005 051f 	and.w	r5, r5, #31
 8009908:	fa03 f505 	lsl.w	r5, r3, r5
 800990c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009910:	421d      	tst	r5, r3
 8009912:	bf18      	it	ne
 8009914:	f04f 0801 	movne.w	r8, #1
 8009918:	f048 0820 	orr.w	r8, r8, #32
 800991c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800991e:	601c      	str	r4, [r3, #0]
 8009920:	9b02      	ldr	r3, [sp, #8]
 8009922:	601e      	str	r6, [r3, #0]
 8009924:	e6a2      	b.n	800966c <__gethex+0x114>
 8009926:	4290      	cmp	r0, r2
 8009928:	f842 3c04 	str.w	r3, [r2, #-4]
 800992c:	d8d6      	bhi.n	80098dc <__gethex+0x384>
 800992e:	68a2      	ldr	r2, [r4, #8]
 8009930:	4593      	cmp	fp, r2
 8009932:	db17      	blt.n	8009964 <__gethex+0x40c>
 8009934:	6861      	ldr	r1, [r4, #4]
 8009936:	4648      	mov	r0, r9
 8009938:	3101      	adds	r1, #1
 800993a:	f000 f9bb 	bl	8009cb4 <_Balloc>
 800993e:	4682      	mov	sl, r0
 8009940:	b918      	cbnz	r0, 800994a <__gethex+0x3f2>
 8009942:	4b1b      	ldr	r3, [pc, #108]	; (80099b0 <__gethex+0x458>)
 8009944:	4602      	mov	r2, r0
 8009946:	2184      	movs	r1, #132	; 0x84
 8009948:	e6b3      	b.n	80096b2 <__gethex+0x15a>
 800994a:	6922      	ldr	r2, [r4, #16]
 800994c:	3202      	adds	r2, #2
 800994e:	f104 010c 	add.w	r1, r4, #12
 8009952:	0092      	lsls	r2, r2, #2
 8009954:	300c      	adds	r0, #12
 8009956:	f7ff fd32 	bl	80093be <memcpy>
 800995a:	4621      	mov	r1, r4
 800995c:	4648      	mov	r0, r9
 800995e:	f000 f9e9 	bl	8009d34 <_Bfree>
 8009962:	4654      	mov	r4, sl
 8009964:	6922      	ldr	r2, [r4, #16]
 8009966:	1c51      	adds	r1, r2, #1
 8009968:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800996c:	6121      	str	r1, [r4, #16]
 800996e:	2101      	movs	r1, #1
 8009970:	6151      	str	r1, [r2, #20]
 8009972:	e7bc      	b.n	80098ee <__gethex+0x396>
 8009974:	6921      	ldr	r1, [r4, #16]
 8009976:	4559      	cmp	r1, fp
 8009978:	dd0b      	ble.n	8009992 <__gethex+0x43a>
 800997a:	2101      	movs	r1, #1
 800997c:	4620      	mov	r0, r4
 800997e:	f7ff fd83 	bl	8009488 <rshift>
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	3601      	adds	r6, #1
 8009986:	42b3      	cmp	r3, r6
 8009988:	f6ff aedb 	blt.w	8009742 <__gethex+0x1ea>
 800998c:	f04f 0801 	mov.w	r8, #1
 8009990:	e7c2      	b.n	8009918 <__gethex+0x3c0>
 8009992:	f015 051f 	ands.w	r5, r5, #31
 8009996:	d0f9      	beq.n	800998c <__gethex+0x434>
 8009998:	9b01      	ldr	r3, [sp, #4]
 800999a:	441a      	add	r2, r3
 800999c:	f1c5 0520 	rsb	r5, r5, #32
 80099a0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80099a4:	f000 fa78 	bl	8009e98 <__hi0bits>
 80099a8:	42a8      	cmp	r0, r5
 80099aa:	dbe6      	blt.n	800997a <__gethex+0x422>
 80099ac:	e7ee      	b.n	800998c <__gethex+0x434>
 80099ae:	bf00      	nop
 80099b0:	0800b4d8 	.word	0x0800b4d8

080099b4 <L_shift>:
 80099b4:	f1c2 0208 	rsb	r2, r2, #8
 80099b8:	0092      	lsls	r2, r2, #2
 80099ba:	b570      	push	{r4, r5, r6, lr}
 80099bc:	f1c2 0620 	rsb	r6, r2, #32
 80099c0:	6843      	ldr	r3, [r0, #4]
 80099c2:	6804      	ldr	r4, [r0, #0]
 80099c4:	fa03 f506 	lsl.w	r5, r3, r6
 80099c8:	432c      	orrs	r4, r5
 80099ca:	40d3      	lsrs	r3, r2
 80099cc:	6004      	str	r4, [r0, #0]
 80099ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80099d2:	4288      	cmp	r0, r1
 80099d4:	d3f4      	bcc.n	80099c0 <L_shift+0xc>
 80099d6:	bd70      	pop	{r4, r5, r6, pc}

080099d8 <__match>:
 80099d8:	b530      	push	{r4, r5, lr}
 80099da:	6803      	ldr	r3, [r0, #0]
 80099dc:	3301      	adds	r3, #1
 80099de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099e2:	b914      	cbnz	r4, 80099ea <__match+0x12>
 80099e4:	6003      	str	r3, [r0, #0]
 80099e6:	2001      	movs	r0, #1
 80099e8:	bd30      	pop	{r4, r5, pc}
 80099ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80099f2:	2d19      	cmp	r5, #25
 80099f4:	bf98      	it	ls
 80099f6:	3220      	addls	r2, #32
 80099f8:	42a2      	cmp	r2, r4
 80099fa:	d0f0      	beq.n	80099de <__match+0x6>
 80099fc:	2000      	movs	r0, #0
 80099fe:	e7f3      	b.n	80099e8 <__match+0x10>

08009a00 <__hexnan>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	680b      	ldr	r3, [r1, #0]
 8009a06:	6801      	ldr	r1, [r0, #0]
 8009a08:	115e      	asrs	r6, r3, #5
 8009a0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a0e:	f013 031f 	ands.w	r3, r3, #31
 8009a12:	b087      	sub	sp, #28
 8009a14:	bf18      	it	ne
 8009a16:	3604      	addne	r6, #4
 8009a18:	2500      	movs	r5, #0
 8009a1a:	1f37      	subs	r7, r6, #4
 8009a1c:	4682      	mov	sl, r0
 8009a1e:	4690      	mov	r8, r2
 8009a20:	9301      	str	r3, [sp, #4]
 8009a22:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a26:	46b9      	mov	r9, r7
 8009a28:	463c      	mov	r4, r7
 8009a2a:	9502      	str	r5, [sp, #8]
 8009a2c:	46ab      	mov	fp, r5
 8009a2e:	784a      	ldrb	r2, [r1, #1]
 8009a30:	1c4b      	adds	r3, r1, #1
 8009a32:	9303      	str	r3, [sp, #12]
 8009a34:	b342      	cbz	r2, 8009a88 <__hexnan+0x88>
 8009a36:	4610      	mov	r0, r2
 8009a38:	9105      	str	r1, [sp, #20]
 8009a3a:	9204      	str	r2, [sp, #16]
 8009a3c:	f7ff fd76 	bl	800952c <__hexdig_fun>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d14f      	bne.n	8009ae4 <__hexnan+0xe4>
 8009a44:	9a04      	ldr	r2, [sp, #16]
 8009a46:	9905      	ldr	r1, [sp, #20]
 8009a48:	2a20      	cmp	r2, #32
 8009a4a:	d818      	bhi.n	8009a7e <__hexnan+0x7e>
 8009a4c:	9b02      	ldr	r3, [sp, #8]
 8009a4e:	459b      	cmp	fp, r3
 8009a50:	dd13      	ble.n	8009a7a <__hexnan+0x7a>
 8009a52:	454c      	cmp	r4, r9
 8009a54:	d206      	bcs.n	8009a64 <__hexnan+0x64>
 8009a56:	2d07      	cmp	r5, #7
 8009a58:	dc04      	bgt.n	8009a64 <__hexnan+0x64>
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f7ff ffa8 	bl	80099b4 <L_shift>
 8009a64:	4544      	cmp	r4, r8
 8009a66:	d950      	bls.n	8009b0a <__hexnan+0x10a>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f1a4 0904 	sub.w	r9, r4, #4
 8009a6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a72:	f8cd b008 	str.w	fp, [sp, #8]
 8009a76:	464c      	mov	r4, r9
 8009a78:	461d      	mov	r5, r3
 8009a7a:	9903      	ldr	r1, [sp, #12]
 8009a7c:	e7d7      	b.n	8009a2e <__hexnan+0x2e>
 8009a7e:	2a29      	cmp	r2, #41	; 0x29
 8009a80:	d155      	bne.n	8009b2e <__hexnan+0x12e>
 8009a82:	3102      	adds	r1, #2
 8009a84:	f8ca 1000 	str.w	r1, [sl]
 8009a88:	f1bb 0f00 	cmp.w	fp, #0
 8009a8c:	d04f      	beq.n	8009b2e <__hexnan+0x12e>
 8009a8e:	454c      	cmp	r4, r9
 8009a90:	d206      	bcs.n	8009aa0 <__hexnan+0xa0>
 8009a92:	2d07      	cmp	r5, #7
 8009a94:	dc04      	bgt.n	8009aa0 <__hexnan+0xa0>
 8009a96:	462a      	mov	r2, r5
 8009a98:	4649      	mov	r1, r9
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f7ff ff8a 	bl	80099b4 <L_shift>
 8009aa0:	4544      	cmp	r4, r8
 8009aa2:	d934      	bls.n	8009b0e <__hexnan+0x10e>
 8009aa4:	f1a8 0204 	sub.w	r2, r8, #4
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	f853 1b04 	ldr.w	r1, [r3], #4
 8009aae:	f842 1f04 	str.w	r1, [r2, #4]!
 8009ab2:	429f      	cmp	r7, r3
 8009ab4:	d2f9      	bcs.n	8009aaa <__hexnan+0xaa>
 8009ab6:	1b3b      	subs	r3, r7, r4
 8009ab8:	f023 0303 	bic.w	r3, r3, #3
 8009abc:	3304      	adds	r3, #4
 8009abe:	3e03      	subs	r6, #3
 8009ac0:	3401      	adds	r4, #1
 8009ac2:	42a6      	cmp	r6, r4
 8009ac4:	bf38      	it	cc
 8009ac6:	2304      	movcc	r3, #4
 8009ac8:	4443      	add	r3, r8
 8009aca:	2200      	movs	r2, #0
 8009acc:	f843 2b04 	str.w	r2, [r3], #4
 8009ad0:	429f      	cmp	r7, r3
 8009ad2:	d2fb      	bcs.n	8009acc <__hexnan+0xcc>
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	b91b      	cbnz	r3, 8009ae0 <__hexnan+0xe0>
 8009ad8:	4547      	cmp	r7, r8
 8009ada:	d126      	bne.n	8009b2a <__hexnan+0x12a>
 8009adc:	2301      	movs	r3, #1
 8009ade:	603b      	str	r3, [r7, #0]
 8009ae0:	2005      	movs	r0, #5
 8009ae2:	e025      	b.n	8009b30 <__hexnan+0x130>
 8009ae4:	3501      	adds	r5, #1
 8009ae6:	2d08      	cmp	r5, #8
 8009ae8:	f10b 0b01 	add.w	fp, fp, #1
 8009aec:	dd06      	ble.n	8009afc <__hexnan+0xfc>
 8009aee:	4544      	cmp	r4, r8
 8009af0:	d9c3      	bls.n	8009a7a <__hexnan+0x7a>
 8009af2:	2300      	movs	r3, #0
 8009af4:	f844 3c04 	str.w	r3, [r4, #-4]
 8009af8:	2501      	movs	r5, #1
 8009afa:	3c04      	subs	r4, #4
 8009afc:	6822      	ldr	r2, [r4, #0]
 8009afe:	f000 000f 	and.w	r0, r0, #15
 8009b02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009b06:	6020      	str	r0, [r4, #0]
 8009b08:	e7b7      	b.n	8009a7a <__hexnan+0x7a>
 8009b0a:	2508      	movs	r5, #8
 8009b0c:	e7b5      	b.n	8009a7a <__hexnan+0x7a>
 8009b0e:	9b01      	ldr	r3, [sp, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d0df      	beq.n	8009ad4 <__hexnan+0xd4>
 8009b14:	f1c3 0320 	rsb	r3, r3, #32
 8009b18:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1c:	40da      	lsrs	r2, r3
 8009b1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009b22:	4013      	ands	r3, r2
 8009b24:	f846 3c04 	str.w	r3, [r6, #-4]
 8009b28:	e7d4      	b.n	8009ad4 <__hexnan+0xd4>
 8009b2a:	3f04      	subs	r7, #4
 8009b2c:	e7d2      	b.n	8009ad4 <__hexnan+0xd4>
 8009b2e:	2004      	movs	r0, #4
 8009b30:	b007      	add	sp, #28
 8009b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009b38 <sbrk_aligned>:
 8009b38:	b570      	push	{r4, r5, r6, lr}
 8009b3a:	4e0e      	ldr	r6, [pc, #56]	; (8009b74 <sbrk_aligned+0x3c>)
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	6831      	ldr	r1, [r6, #0]
 8009b40:	4605      	mov	r5, r0
 8009b42:	b911      	cbnz	r1, 8009b4a <sbrk_aligned+0x12>
 8009b44:	f001 f920 	bl	800ad88 <_sbrk_r>
 8009b48:	6030      	str	r0, [r6, #0]
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	f001 f91b 	bl	800ad88 <_sbrk_r>
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	d00a      	beq.n	8009b6c <sbrk_aligned+0x34>
 8009b56:	1cc4      	adds	r4, r0, #3
 8009b58:	f024 0403 	bic.w	r4, r4, #3
 8009b5c:	42a0      	cmp	r0, r4
 8009b5e:	d007      	beq.n	8009b70 <sbrk_aligned+0x38>
 8009b60:	1a21      	subs	r1, r4, r0
 8009b62:	4628      	mov	r0, r5
 8009b64:	f001 f910 	bl	800ad88 <_sbrk_r>
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d101      	bne.n	8009b70 <sbrk_aligned+0x38>
 8009b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8009b70:	4620      	mov	r0, r4
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
 8009b74:	200005dc 	.word	0x200005dc

08009b78 <_malloc_r>:
 8009b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b7c:	1ccd      	adds	r5, r1, #3
 8009b7e:	f025 0503 	bic.w	r5, r5, #3
 8009b82:	3508      	adds	r5, #8
 8009b84:	2d0c      	cmp	r5, #12
 8009b86:	bf38      	it	cc
 8009b88:	250c      	movcc	r5, #12
 8009b8a:	2d00      	cmp	r5, #0
 8009b8c:	4607      	mov	r7, r0
 8009b8e:	db01      	blt.n	8009b94 <_malloc_r+0x1c>
 8009b90:	42a9      	cmp	r1, r5
 8009b92:	d905      	bls.n	8009ba0 <_malloc_r+0x28>
 8009b94:	230c      	movs	r3, #12
 8009b96:	603b      	str	r3, [r7, #0]
 8009b98:	2600      	movs	r6, #0
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c74 <_malloc_r+0xfc>
 8009ba4:	f000 f87a 	bl	8009c9c <__malloc_lock>
 8009ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8009bac:	461c      	mov	r4, r3
 8009bae:	bb5c      	cbnz	r4, 8009c08 <_malloc_r+0x90>
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	f7ff ffc0 	bl	8009b38 <sbrk_aligned>
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	4604      	mov	r4, r0
 8009bbc:	d155      	bne.n	8009c6a <_malloc_r+0xf2>
 8009bbe:	f8d8 4000 	ldr.w	r4, [r8]
 8009bc2:	4626      	mov	r6, r4
 8009bc4:	2e00      	cmp	r6, #0
 8009bc6:	d145      	bne.n	8009c54 <_malloc_r+0xdc>
 8009bc8:	2c00      	cmp	r4, #0
 8009bca:	d048      	beq.n	8009c5e <_malloc_r+0xe6>
 8009bcc:	6823      	ldr	r3, [r4, #0]
 8009bce:	4631      	mov	r1, r6
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	eb04 0903 	add.w	r9, r4, r3
 8009bd6:	f001 f8d7 	bl	800ad88 <_sbrk_r>
 8009bda:	4581      	cmp	r9, r0
 8009bdc:	d13f      	bne.n	8009c5e <_malloc_r+0xe6>
 8009bde:	6821      	ldr	r1, [r4, #0]
 8009be0:	1a6d      	subs	r5, r5, r1
 8009be2:	4629      	mov	r1, r5
 8009be4:	4638      	mov	r0, r7
 8009be6:	f7ff ffa7 	bl	8009b38 <sbrk_aligned>
 8009bea:	3001      	adds	r0, #1
 8009bec:	d037      	beq.n	8009c5e <_malloc_r+0xe6>
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	442b      	add	r3, r5
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d038      	beq.n	8009c6e <_malloc_r+0xf6>
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	42a2      	cmp	r2, r4
 8009c00:	d12b      	bne.n	8009c5a <_malloc_r+0xe2>
 8009c02:	2200      	movs	r2, #0
 8009c04:	605a      	str	r2, [r3, #4]
 8009c06:	e00f      	b.n	8009c28 <_malloc_r+0xb0>
 8009c08:	6822      	ldr	r2, [r4, #0]
 8009c0a:	1b52      	subs	r2, r2, r5
 8009c0c:	d41f      	bmi.n	8009c4e <_malloc_r+0xd6>
 8009c0e:	2a0b      	cmp	r2, #11
 8009c10:	d917      	bls.n	8009c42 <_malloc_r+0xca>
 8009c12:	1961      	adds	r1, r4, r5
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	6025      	str	r5, [r4, #0]
 8009c18:	bf18      	it	ne
 8009c1a:	6059      	strne	r1, [r3, #4]
 8009c1c:	6863      	ldr	r3, [r4, #4]
 8009c1e:	bf08      	it	eq
 8009c20:	f8c8 1000 	streq.w	r1, [r8]
 8009c24:	5162      	str	r2, [r4, r5]
 8009c26:	604b      	str	r3, [r1, #4]
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f104 060b 	add.w	r6, r4, #11
 8009c2e:	f000 f83b 	bl	8009ca8 <__malloc_unlock>
 8009c32:	f026 0607 	bic.w	r6, r6, #7
 8009c36:	1d23      	adds	r3, r4, #4
 8009c38:	1af2      	subs	r2, r6, r3
 8009c3a:	d0ae      	beq.n	8009b9a <_malloc_r+0x22>
 8009c3c:	1b9b      	subs	r3, r3, r6
 8009c3e:	50a3      	str	r3, [r4, r2]
 8009c40:	e7ab      	b.n	8009b9a <_malloc_r+0x22>
 8009c42:	42a3      	cmp	r3, r4
 8009c44:	6862      	ldr	r2, [r4, #4]
 8009c46:	d1dd      	bne.n	8009c04 <_malloc_r+0x8c>
 8009c48:	f8c8 2000 	str.w	r2, [r8]
 8009c4c:	e7ec      	b.n	8009c28 <_malloc_r+0xb0>
 8009c4e:	4623      	mov	r3, r4
 8009c50:	6864      	ldr	r4, [r4, #4]
 8009c52:	e7ac      	b.n	8009bae <_malloc_r+0x36>
 8009c54:	4634      	mov	r4, r6
 8009c56:	6876      	ldr	r6, [r6, #4]
 8009c58:	e7b4      	b.n	8009bc4 <_malloc_r+0x4c>
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	e7cc      	b.n	8009bf8 <_malloc_r+0x80>
 8009c5e:	230c      	movs	r3, #12
 8009c60:	603b      	str	r3, [r7, #0]
 8009c62:	4638      	mov	r0, r7
 8009c64:	f000 f820 	bl	8009ca8 <__malloc_unlock>
 8009c68:	e797      	b.n	8009b9a <_malloc_r+0x22>
 8009c6a:	6025      	str	r5, [r4, #0]
 8009c6c:	e7dc      	b.n	8009c28 <_malloc_r+0xb0>
 8009c6e:	605b      	str	r3, [r3, #4]
 8009c70:	deff      	udf	#255	; 0xff
 8009c72:	bf00      	nop
 8009c74:	200005d8 	.word	0x200005d8

08009c78 <__ascii_mbtowc>:
 8009c78:	b082      	sub	sp, #8
 8009c7a:	b901      	cbnz	r1, 8009c7e <__ascii_mbtowc+0x6>
 8009c7c:	a901      	add	r1, sp, #4
 8009c7e:	b142      	cbz	r2, 8009c92 <__ascii_mbtowc+0x1a>
 8009c80:	b14b      	cbz	r3, 8009c96 <__ascii_mbtowc+0x1e>
 8009c82:	7813      	ldrb	r3, [r2, #0]
 8009c84:	600b      	str	r3, [r1, #0]
 8009c86:	7812      	ldrb	r2, [r2, #0]
 8009c88:	1e10      	subs	r0, r2, #0
 8009c8a:	bf18      	it	ne
 8009c8c:	2001      	movne	r0, #1
 8009c8e:	b002      	add	sp, #8
 8009c90:	4770      	bx	lr
 8009c92:	4610      	mov	r0, r2
 8009c94:	e7fb      	b.n	8009c8e <__ascii_mbtowc+0x16>
 8009c96:	f06f 0001 	mvn.w	r0, #1
 8009c9a:	e7f8      	b.n	8009c8e <__ascii_mbtowc+0x16>

08009c9c <__malloc_lock>:
 8009c9c:	4801      	ldr	r0, [pc, #4]	; (8009ca4 <__malloc_lock+0x8>)
 8009c9e:	f7ff bb8c 	b.w	80093ba <__retarget_lock_acquire_recursive>
 8009ca2:	bf00      	nop
 8009ca4:	200005d4 	.word	0x200005d4

08009ca8 <__malloc_unlock>:
 8009ca8:	4801      	ldr	r0, [pc, #4]	; (8009cb0 <__malloc_unlock+0x8>)
 8009caa:	f7ff bb87 	b.w	80093bc <__retarget_lock_release_recursive>
 8009cae:	bf00      	nop
 8009cb0:	200005d4 	.word	0x200005d4

08009cb4 <_Balloc>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	69c6      	ldr	r6, [r0, #28]
 8009cb8:	4604      	mov	r4, r0
 8009cba:	460d      	mov	r5, r1
 8009cbc:	b976      	cbnz	r6, 8009cdc <_Balloc+0x28>
 8009cbe:	2010      	movs	r0, #16
 8009cc0:	f001 f8a6 	bl	800ae10 <malloc>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	61e0      	str	r0, [r4, #28]
 8009cc8:	b920      	cbnz	r0, 8009cd4 <_Balloc+0x20>
 8009cca:	4b18      	ldr	r3, [pc, #96]	; (8009d2c <_Balloc+0x78>)
 8009ccc:	4818      	ldr	r0, [pc, #96]	; (8009d30 <_Balloc+0x7c>)
 8009cce:	216b      	movs	r1, #107	; 0x6b
 8009cd0:	f001 f86a 	bl	800ada8 <__assert_func>
 8009cd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cd8:	6006      	str	r6, [r0, #0]
 8009cda:	60c6      	str	r6, [r0, #12]
 8009cdc:	69e6      	ldr	r6, [r4, #28]
 8009cde:	68f3      	ldr	r3, [r6, #12]
 8009ce0:	b183      	cbz	r3, 8009d04 <_Balloc+0x50>
 8009ce2:	69e3      	ldr	r3, [r4, #28]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cea:	b9b8      	cbnz	r0, 8009d1c <_Balloc+0x68>
 8009cec:	2101      	movs	r1, #1
 8009cee:	fa01 f605 	lsl.w	r6, r1, r5
 8009cf2:	1d72      	adds	r2, r6, #5
 8009cf4:	0092      	lsls	r2, r2, #2
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f001 f874 	bl	800ade4 <_calloc_r>
 8009cfc:	b160      	cbz	r0, 8009d18 <_Balloc+0x64>
 8009cfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d02:	e00e      	b.n	8009d22 <_Balloc+0x6e>
 8009d04:	2221      	movs	r2, #33	; 0x21
 8009d06:	2104      	movs	r1, #4
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f001 f86b 	bl	800ade4 <_calloc_r>
 8009d0e:	69e3      	ldr	r3, [r4, #28]
 8009d10:	60f0      	str	r0, [r6, #12]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e4      	bne.n	8009ce2 <_Balloc+0x2e>
 8009d18:	2000      	movs	r0, #0
 8009d1a:	bd70      	pop	{r4, r5, r6, pc}
 8009d1c:	6802      	ldr	r2, [r0, #0]
 8009d1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d22:	2300      	movs	r3, #0
 8009d24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d28:	e7f7      	b.n	8009d1a <_Balloc+0x66>
 8009d2a:	bf00      	nop
 8009d2c:	0800b549 	.word	0x0800b549
 8009d30:	0800b560 	.word	0x0800b560

08009d34 <_Bfree>:
 8009d34:	b570      	push	{r4, r5, r6, lr}
 8009d36:	69c6      	ldr	r6, [r0, #28]
 8009d38:	4605      	mov	r5, r0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	b976      	cbnz	r6, 8009d5c <_Bfree+0x28>
 8009d3e:	2010      	movs	r0, #16
 8009d40:	f001 f866 	bl	800ae10 <malloc>
 8009d44:	4602      	mov	r2, r0
 8009d46:	61e8      	str	r0, [r5, #28]
 8009d48:	b920      	cbnz	r0, 8009d54 <_Bfree+0x20>
 8009d4a:	4b09      	ldr	r3, [pc, #36]	; (8009d70 <_Bfree+0x3c>)
 8009d4c:	4809      	ldr	r0, [pc, #36]	; (8009d74 <_Bfree+0x40>)
 8009d4e:	218f      	movs	r1, #143	; 0x8f
 8009d50:	f001 f82a 	bl	800ada8 <__assert_func>
 8009d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d58:	6006      	str	r6, [r0, #0]
 8009d5a:	60c6      	str	r6, [r0, #12]
 8009d5c:	b13c      	cbz	r4, 8009d6e <_Bfree+0x3a>
 8009d5e:	69eb      	ldr	r3, [r5, #28]
 8009d60:	6862      	ldr	r2, [r4, #4]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d68:	6021      	str	r1, [r4, #0]
 8009d6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d6e:	bd70      	pop	{r4, r5, r6, pc}
 8009d70:	0800b549 	.word	0x0800b549
 8009d74:	0800b560 	.word	0x0800b560

08009d78 <__multadd>:
 8009d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7c:	690d      	ldr	r5, [r1, #16]
 8009d7e:	4607      	mov	r7, r0
 8009d80:	460c      	mov	r4, r1
 8009d82:	461e      	mov	r6, r3
 8009d84:	f101 0c14 	add.w	ip, r1, #20
 8009d88:	2000      	movs	r0, #0
 8009d8a:	f8dc 3000 	ldr.w	r3, [ip]
 8009d8e:	b299      	uxth	r1, r3
 8009d90:	fb02 6101 	mla	r1, r2, r1, r6
 8009d94:	0c1e      	lsrs	r6, r3, #16
 8009d96:	0c0b      	lsrs	r3, r1, #16
 8009d98:	fb02 3306 	mla	r3, r2, r6, r3
 8009d9c:	b289      	uxth	r1, r1
 8009d9e:	3001      	adds	r0, #1
 8009da0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009da4:	4285      	cmp	r5, r0
 8009da6:	f84c 1b04 	str.w	r1, [ip], #4
 8009daa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009dae:	dcec      	bgt.n	8009d8a <__multadd+0x12>
 8009db0:	b30e      	cbz	r6, 8009df6 <__multadd+0x7e>
 8009db2:	68a3      	ldr	r3, [r4, #8]
 8009db4:	42ab      	cmp	r3, r5
 8009db6:	dc19      	bgt.n	8009dec <__multadd+0x74>
 8009db8:	6861      	ldr	r1, [r4, #4]
 8009dba:	4638      	mov	r0, r7
 8009dbc:	3101      	adds	r1, #1
 8009dbe:	f7ff ff79 	bl	8009cb4 <_Balloc>
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	b928      	cbnz	r0, 8009dd2 <__multadd+0x5a>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	4b0c      	ldr	r3, [pc, #48]	; (8009dfc <__multadd+0x84>)
 8009dca:	480d      	ldr	r0, [pc, #52]	; (8009e00 <__multadd+0x88>)
 8009dcc:	21ba      	movs	r1, #186	; 0xba
 8009dce:	f000 ffeb 	bl	800ada8 <__assert_func>
 8009dd2:	6922      	ldr	r2, [r4, #16]
 8009dd4:	3202      	adds	r2, #2
 8009dd6:	f104 010c 	add.w	r1, r4, #12
 8009dda:	0092      	lsls	r2, r2, #2
 8009ddc:	300c      	adds	r0, #12
 8009dde:	f7ff faee 	bl	80093be <memcpy>
 8009de2:	4621      	mov	r1, r4
 8009de4:	4638      	mov	r0, r7
 8009de6:	f7ff ffa5 	bl	8009d34 <_Bfree>
 8009dea:	4644      	mov	r4, r8
 8009dec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009df0:	3501      	adds	r5, #1
 8009df2:	615e      	str	r6, [r3, #20]
 8009df4:	6125      	str	r5, [r4, #16]
 8009df6:	4620      	mov	r0, r4
 8009df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dfc:	0800b4d8 	.word	0x0800b4d8
 8009e00:	0800b560 	.word	0x0800b560

08009e04 <__s2b>:
 8009e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e08:	460c      	mov	r4, r1
 8009e0a:	4615      	mov	r5, r2
 8009e0c:	461f      	mov	r7, r3
 8009e0e:	2209      	movs	r2, #9
 8009e10:	3308      	adds	r3, #8
 8009e12:	4606      	mov	r6, r0
 8009e14:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e18:	2100      	movs	r1, #0
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	db09      	blt.n	8009e34 <__s2b+0x30>
 8009e20:	4630      	mov	r0, r6
 8009e22:	f7ff ff47 	bl	8009cb4 <_Balloc>
 8009e26:	b940      	cbnz	r0, 8009e3a <__s2b+0x36>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	4b19      	ldr	r3, [pc, #100]	; (8009e90 <__s2b+0x8c>)
 8009e2c:	4819      	ldr	r0, [pc, #100]	; (8009e94 <__s2b+0x90>)
 8009e2e:	21d3      	movs	r1, #211	; 0xd3
 8009e30:	f000 ffba 	bl	800ada8 <__assert_func>
 8009e34:	0052      	lsls	r2, r2, #1
 8009e36:	3101      	adds	r1, #1
 8009e38:	e7f0      	b.n	8009e1c <__s2b+0x18>
 8009e3a:	9b08      	ldr	r3, [sp, #32]
 8009e3c:	6143      	str	r3, [r0, #20]
 8009e3e:	2d09      	cmp	r5, #9
 8009e40:	f04f 0301 	mov.w	r3, #1
 8009e44:	6103      	str	r3, [r0, #16]
 8009e46:	dd16      	ble.n	8009e76 <__s2b+0x72>
 8009e48:	f104 0909 	add.w	r9, r4, #9
 8009e4c:	46c8      	mov	r8, r9
 8009e4e:	442c      	add	r4, r5
 8009e50:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e54:	4601      	mov	r1, r0
 8009e56:	3b30      	subs	r3, #48	; 0x30
 8009e58:	220a      	movs	r2, #10
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	f7ff ff8c 	bl	8009d78 <__multadd>
 8009e60:	45a0      	cmp	r8, r4
 8009e62:	d1f5      	bne.n	8009e50 <__s2b+0x4c>
 8009e64:	f1a5 0408 	sub.w	r4, r5, #8
 8009e68:	444c      	add	r4, r9
 8009e6a:	1b2d      	subs	r5, r5, r4
 8009e6c:	1963      	adds	r3, r4, r5
 8009e6e:	42bb      	cmp	r3, r7
 8009e70:	db04      	blt.n	8009e7c <__s2b+0x78>
 8009e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e76:	340a      	adds	r4, #10
 8009e78:	2509      	movs	r5, #9
 8009e7a:	e7f6      	b.n	8009e6a <__s2b+0x66>
 8009e7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e80:	4601      	mov	r1, r0
 8009e82:	3b30      	subs	r3, #48	; 0x30
 8009e84:	220a      	movs	r2, #10
 8009e86:	4630      	mov	r0, r6
 8009e88:	f7ff ff76 	bl	8009d78 <__multadd>
 8009e8c:	e7ee      	b.n	8009e6c <__s2b+0x68>
 8009e8e:	bf00      	nop
 8009e90:	0800b4d8 	.word	0x0800b4d8
 8009e94:	0800b560 	.word	0x0800b560

08009e98 <__hi0bits>:
 8009e98:	0c03      	lsrs	r3, r0, #16
 8009e9a:	041b      	lsls	r3, r3, #16
 8009e9c:	b9d3      	cbnz	r3, 8009ed4 <__hi0bits+0x3c>
 8009e9e:	0400      	lsls	r0, r0, #16
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ea6:	bf04      	itt	eq
 8009ea8:	0200      	lsleq	r0, r0, #8
 8009eaa:	3308      	addeq	r3, #8
 8009eac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009eb0:	bf04      	itt	eq
 8009eb2:	0100      	lsleq	r0, r0, #4
 8009eb4:	3304      	addeq	r3, #4
 8009eb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009eba:	bf04      	itt	eq
 8009ebc:	0080      	lsleq	r0, r0, #2
 8009ebe:	3302      	addeq	r3, #2
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	db05      	blt.n	8009ed0 <__hi0bits+0x38>
 8009ec4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ec8:	f103 0301 	add.w	r3, r3, #1
 8009ecc:	bf08      	it	eq
 8009ece:	2320      	moveq	r3, #32
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	4770      	bx	lr
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	e7e4      	b.n	8009ea2 <__hi0bits+0xa>

08009ed8 <__lo0bits>:
 8009ed8:	6803      	ldr	r3, [r0, #0]
 8009eda:	f013 0207 	ands.w	r2, r3, #7
 8009ede:	d00c      	beq.n	8009efa <__lo0bits+0x22>
 8009ee0:	07d9      	lsls	r1, r3, #31
 8009ee2:	d422      	bmi.n	8009f2a <__lo0bits+0x52>
 8009ee4:	079a      	lsls	r2, r3, #30
 8009ee6:	bf49      	itett	mi
 8009ee8:	085b      	lsrmi	r3, r3, #1
 8009eea:	089b      	lsrpl	r3, r3, #2
 8009eec:	6003      	strmi	r3, [r0, #0]
 8009eee:	2201      	movmi	r2, #1
 8009ef0:	bf5c      	itt	pl
 8009ef2:	6003      	strpl	r3, [r0, #0]
 8009ef4:	2202      	movpl	r2, #2
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	4770      	bx	lr
 8009efa:	b299      	uxth	r1, r3
 8009efc:	b909      	cbnz	r1, 8009f02 <__lo0bits+0x2a>
 8009efe:	0c1b      	lsrs	r3, r3, #16
 8009f00:	2210      	movs	r2, #16
 8009f02:	b2d9      	uxtb	r1, r3
 8009f04:	b909      	cbnz	r1, 8009f0a <__lo0bits+0x32>
 8009f06:	3208      	adds	r2, #8
 8009f08:	0a1b      	lsrs	r3, r3, #8
 8009f0a:	0719      	lsls	r1, r3, #28
 8009f0c:	bf04      	itt	eq
 8009f0e:	091b      	lsreq	r3, r3, #4
 8009f10:	3204      	addeq	r2, #4
 8009f12:	0799      	lsls	r1, r3, #30
 8009f14:	bf04      	itt	eq
 8009f16:	089b      	lsreq	r3, r3, #2
 8009f18:	3202      	addeq	r2, #2
 8009f1a:	07d9      	lsls	r1, r3, #31
 8009f1c:	d403      	bmi.n	8009f26 <__lo0bits+0x4e>
 8009f1e:	085b      	lsrs	r3, r3, #1
 8009f20:	f102 0201 	add.w	r2, r2, #1
 8009f24:	d003      	beq.n	8009f2e <__lo0bits+0x56>
 8009f26:	6003      	str	r3, [r0, #0]
 8009f28:	e7e5      	b.n	8009ef6 <__lo0bits+0x1e>
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	e7e3      	b.n	8009ef6 <__lo0bits+0x1e>
 8009f2e:	2220      	movs	r2, #32
 8009f30:	e7e1      	b.n	8009ef6 <__lo0bits+0x1e>
	...

08009f34 <__i2b>:
 8009f34:	b510      	push	{r4, lr}
 8009f36:	460c      	mov	r4, r1
 8009f38:	2101      	movs	r1, #1
 8009f3a:	f7ff febb 	bl	8009cb4 <_Balloc>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	b928      	cbnz	r0, 8009f4e <__i2b+0x1a>
 8009f42:	4b05      	ldr	r3, [pc, #20]	; (8009f58 <__i2b+0x24>)
 8009f44:	4805      	ldr	r0, [pc, #20]	; (8009f5c <__i2b+0x28>)
 8009f46:	f240 1145 	movw	r1, #325	; 0x145
 8009f4a:	f000 ff2d 	bl	800ada8 <__assert_func>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	6144      	str	r4, [r0, #20]
 8009f52:	6103      	str	r3, [r0, #16]
 8009f54:	bd10      	pop	{r4, pc}
 8009f56:	bf00      	nop
 8009f58:	0800b4d8 	.word	0x0800b4d8
 8009f5c:	0800b560 	.word	0x0800b560

08009f60 <__multiply>:
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	4691      	mov	r9, r2
 8009f66:	690a      	ldr	r2, [r1, #16]
 8009f68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	bfb8      	it	lt
 8009f70:	460b      	movlt	r3, r1
 8009f72:	460c      	mov	r4, r1
 8009f74:	bfbc      	itt	lt
 8009f76:	464c      	movlt	r4, r9
 8009f78:	4699      	movlt	r9, r3
 8009f7a:	6927      	ldr	r7, [r4, #16]
 8009f7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f80:	68a3      	ldr	r3, [r4, #8]
 8009f82:	6861      	ldr	r1, [r4, #4]
 8009f84:	eb07 060a 	add.w	r6, r7, sl
 8009f88:	42b3      	cmp	r3, r6
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	bfb8      	it	lt
 8009f8e:	3101      	addlt	r1, #1
 8009f90:	f7ff fe90 	bl	8009cb4 <_Balloc>
 8009f94:	b930      	cbnz	r0, 8009fa4 <__multiply+0x44>
 8009f96:	4602      	mov	r2, r0
 8009f98:	4b44      	ldr	r3, [pc, #272]	; (800a0ac <__multiply+0x14c>)
 8009f9a:	4845      	ldr	r0, [pc, #276]	; (800a0b0 <__multiply+0x150>)
 8009f9c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009fa0:	f000 ff02 	bl	800ada8 <__assert_func>
 8009fa4:	f100 0514 	add.w	r5, r0, #20
 8009fa8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fac:	462b      	mov	r3, r5
 8009fae:	2200      	movs	r2, #0
 8009fb0:	4543      	cmp	r3, r8
 8009fb2:	d321      	bcc.n	8009ff8 <__multiply+0x98>
 8009fb4:	f104 0314 	add.w	r3, r4, #20
 8009fb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009fbc:	f109 0314 	add.w	r3, r9, #20
 8009fc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009fc4:	9202      	str	r2, [sp, #8]
 8009fc6:	1b3a      	subs	r2, r7, r4
 8009fc8:	3a15      	subs	r2, #21
 8009fca:	f022 0203 	bic.w	r2, r2, #3
 8009fce:	3204      	adds	r2, #4
 8009fd0:	f104 0115 	add.w	r1, r4, #21
 8009fd4:	428f      	cmp	r7, r1
 8009fd6:	bf38      	it	cc
 8009fd8:	2204      	movcc	r2, #4
 8009fda:	9201      	str	r2, [sp, #4]
 8009fdc:	9a02      	ldr	r2, [sp, #8]
 8009fde:	9303      	str	r3, [sp, #12]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d80c      	bhi.n	8009ffe <__multiply+0x9e>
 8009fe4:	2e00      	cmp	r6, #0
 8009fe6:	dd03      	ble.n	8009ff0 <__multiply+0x90>
 8009fe8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d05b      	beq.n	800a0a8 <__multiply+0x148>
 8009ff0:	6106      	str	r6, [r0, #16]
 8009ff2:	b005      	add	sp, #20
 8009ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff8:	f843 2b04 	str.w	r2, [r3], #4
 8009ffc:	e7d8      	b.n	8009fb0 <__multiply+0x50>
 8009ffe:	f8b3 a000 	ldrh.w	sl, [r3]
 800a002:	f1ba 0f00 	cmp.w	sl, #0
 800a006:	d024      	beq.n	800a052 <__multiply+0xf2>
 800a008:	f104 0e14 	add.w	lr, r4, #20
 800a00c:	46a9      	mov	r9, r5
 800a00e:	f04f 0c00 	mov.w	ip, #0
 800a012:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a016:	f8d9 1000 	ldr.w	r1, [r9]
 800a01a:	fa1f fb82 	uxth.w	fp, r2
 800a01e:	b289      	uxth	r1, r1
 800a020:	fb0a 110b 	mla	r1, sl, fp, r1
 800a024:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a028:	f8d9 2000 	ldr.w	r2, [r9]
 800a02c:	4461      	add	r1, ip
 800a02e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a032:	fb0a c20b 	mla	r2, sl, fp, ip
 800a036:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a03a:	b289      	uxth	r1, r1
 800a03c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a040:	4577      	cmp	r7, lr
 800a042:	f849 1b04 	str.w	r1, [r9], #4
 800a046:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a04a:	d8e2      	bhi.n	800a012 <__multiply+0xb2>
 800a04c:	9a01      	ldr	r2, [sp, #4]
 800a04e:	f845 c002 	str.w	ip, [r5, r2]
 800a052:	9a03      	ldr	r2, [sp, #12]
 800a054:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a058:	3304      	adds	r3, #4
 800a05a:	f1b9 0f00 	cmp.w	r9, #0
 800a05e:	d021      	beq.n	800a0a4 <__multiply+0x144>
 800a060:	6829      	ldr	r1, [r5, #0]
 800a062:	f104 0c14 	add.w	ip, r4, #20
 800a066:	46ae      	mov	lr, r5
 800a068:	f04f 0a00 	mov.w	sl, #0
 800a06c:	f8bc b000 	ldrh.w	fp, [ip]
 800a070:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a074:	fb09 220b 	mla	r2, r9, fp, r2
 800a078:	4452      	add	r2, sl
 800a07a:	b289      	uxth	r1, r1
 800a07c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a080:	f84e 1b04 	str.w	r1, [lr], #4
 800a084:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a088:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a08c:	f8be 1000 	ldrh.w	r1, [lr]
 800a090:	fb09 110a 	mla	r1, r9, sl, r1
 800a094:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a098:	4567      	cmp	r7, ip
 800a09a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a09e:	d8e5      	bhi.n	800a06c <__multiply+0x10c>
 800a0a0:	9a01      	ldr	r2, [sp, #4]
 800a0a2:	50a9      	str	r1, [r5, r2]
 800a0a4:	3504      	adds	r5, #4
 800a0a6:	e799      	b.n	8009fdc <__multiply+0x7c>
 800a0a8:	3e01      	subs	r6, #1
 800a0aa:	e79b      	b.n	8009fe4 <__multiply+0x84>
 800a0ac:	0800b4d8 	.word	0x0800b4d8
 800a0b0:	0800b560 	.word	0x0800b560

0800a0b4 <__pow5mult>:
 800a0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0b8:	4615      	mov	r5, r2
 800a0ba:	f012 0203 	ands.w	r2, r2, #3
 800a0be:	4606      	mov	r6, r0
 800a0c0:	460f      	mov	r7, r1
 800a0c2:	d007      	beq.n	800a0d4 <__pow5mult+0x20>
 800a0c4:	4c25      	ldr	r4, [pc, #148]	; (800a15c <__pow5mult+0xa8>)
 800a0c6:	3a01      	subs	r2, #1
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0ce:	f7ff fe53 	bl	8009d78 <__multadd>
 800a0d2:	4607      	mov	r7, r0
 800a0d4:	10ad      	asrs	r5, r5, #2
 800a0d6:	d03d      	beq.n	800a154 <__pow5mult+0xa0>
 800a0d8:	69f4      	ldr	r4, [r6, #28]
 800a0da:	b97c      	cbnz	r4, 800a0fc <__pow5mult+0x48>
 800a0dc:	2010      	movs	r0, #16
 800a0de:	f000 fe97 	bl	800ae10 <malloc>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	61f0      	str	r0, [r6, #28]
 800a0e6:	b928      	cbnz	r0, 800a0f4 <__pow5mult+0x40>
 800a0e8:	4b1d      	ldr	r3, [pc, #116]	; (800a160 <__pow5mult+0xac>)
 800a0ea:	481e      	ldr	r0, [pc, #120]	; (800a164 <__pow5mult+0xb0>)
 800a0ec:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a0f0:	f000 fe5a 	bl	800ada8 <__assert_func>
 800a0f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0f8:	6004      	str	r4, [r0, #0]
 800a0fa:	60c4      	str	r4, [r0, #12]
 800a0fc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a100:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a104:	b94c      	cbnz	r4, 800a11a <__pow5mult+0x66>
 800a106:	f240 2171 	movw	r1, #625	; 0x271
 800a10a:	4630      	mov	r0, r6
 800a10c:	f7ff ff12 	bl	8009f34 <__i2b>
 800a110:	2300      	movs	r3, #0
 800a112:	f8c8 0008 	str.w	r0, [r8, #8]
 800a116:	4604      	mov	r4, r0
 800a118:	6003      	str	r3, [r0, #0]
 800a11a:	f04f 0900 	mov.w	r9, #0
 800a11e:	07eb      	lsls	r3, r5, #31
 800a120:	d50a      	bpl.n	800a138 <__pow5mult+0x84>
 800a122:	4639      	mov	r1, r7
 800a124:	4622      	mov	r2, r4
 800a126:	4630      	mov	r0, r6
 800a128:	f7ff ff1a 	bl	8009f60 <__multiply>
 800a12c:	4639      	mov	r1, r7
 800a12e:	4680      	mov	r8, r0
 800a130:	4630      	mov	r0, r6
 800a132:	f7ff fdff 	bl	8009d34 <_Bfree>
 800a136:	4647      	mov	r7, r8
 800a138:	106d      	asrs	r5, r5, #1
 800a13a:	d00b      	beq.n	800a154 <__pow5mult+0xa0>
 800a13c:	6820      	ldr	r0, [r4, #0]
 800a13e:	b938      	cbnz	r0, 800a150 <__pow5mult+0x9c>
 800a140:	4622      	mov	r2, r4
 800a142:	4621      	mov	r1, r4
 800a144:	4630      	mov	r0, r6
 800a146:	f7ff ff0b 	bl	8009f60 <__multiply>
 800a14a:	6020      	str	r0, [r4, #0]
 800a14c:	f8c0 9000 	str.w	r9, [r0]
 800a150:	4604      	mov	r4, r0
 800a152:	e7e4      	b.n	800a11e <__pow5mult+0x6a>
 800a154:	4638      	mov	r0, r7
 800a156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a15a:	bf00      	nop
 800a15c:	0800b6b0 	.word	0x0800b6b0
 800a160:	0800b549 	.word	0x0800b549
 800a164:	0800b560 	.word	0x0800b560

0800a168 <__lshift>:
 800a168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a16c:	460c      	mov	r4, r1
 800a16e:	6849      	ldr	r1, [r1, #4]
 800a170:	6923      	ldr	r3, [r4, #16]
 800a172:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a176:	68a3      	ldr	r3, [r4, #8]
 800a178:	4607      	mov	r7, r0
 800a17a:	4691      	mov	r9, r2
 800a17c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a180:	f108 0601 	add.w	r6, r8, #1
 800a184:	42b3      	cmp	r3, r6
 800a186:	db0b      	blt.n	800a1a0 <__lshift+0x38>
 800a188:	4638      	mov	r0, r7
 800a18a:	f7ff fd93 	bl	8009cb4 <_Balloc>
 800a18e:	4605      	mov	r5, r0
 800a190:	b948      	cbnz	r0, 800a1a6 <__lshift+0x3e>
 800a192:	4602      	mov	r2, r0
 800a194:	4b28      	ldr	r3, [pc, #160]	; (800a238 <__lshift+0xd0>)
 800a196:	4829      	ldr	r0, [pc, #164]	; (800a23c <__lshift+0xd4>)
 800a198:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a19c:	f000 fe04 	bl	800ada8 <__assert_func>
 800a1a0:	3101      	adds	r1, #1
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	e7ee      	b.n	800a184 <__lshift+0x1c>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f100 0114 	add.w	r1, r0, #20
 800a1ac:	f100 0210 	add.w	r2, r0, #16
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	4553      	cmp	r3, sl
 800a1b4:	db33      	blt.n	800a21e <__lshift+0xb6>
 800a1b6:	6920      	ldr	r0, [r4, #16]
 800a1b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1bc:	f104 0314 	add.w	r3, r4, #20
 800a1c0:	f019 091f 	ands.w	r9, r9, #31
 800a1c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1cc:	d02b      	beq.n	800a226 <__lshift+0xbe>
 800a1ce:	f1c9 0e20 	rsb	lr, r9, #32
 800a1d2:	468a      	mov	sl, r1
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	6818      	ldr	r0, [r3, #0]
 800a1d8:	fa00 f009 	lsl.w	r0, r0, r9
 800a1dc:	4310      	orrs	r0, r2
 800a1de:	f84a 0b04 	str.w	r0, [sl], #4
 800a1e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1e6:	459c      	cmp	ip, r3
 800a1e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a1ec:	d8f3      	bhi.n	800a1d6 <__lshift+0x6e>
 800a1ee:	ebac 0304 	sub.w	r3, ip, r4
 800a1f2:	3b15      	subs	r3, #21
 800a1f4:	f023 0303 	bic.w	r3, r3, #3
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	f104 0015 	add.w	r0, r4, #21
 800a1fe:	4584      	cmp	ip, r0
 800a200:	bf38      	it	cc
 800a202:	2304      	movcc	r3, #4
 800a204:	50ca      	str	r2, [r1, r3]
 800a206:	b10a      	cbz	r2, 800a20c <__lshift+0xa4>
 800a208:	f108 0602 	add.w	r6, r8, #2
 800a20c:	3e01      	subs	r6, #1
 800a20e:	4638      	mov	r0, r7
 800a210:	612e      	str	r6, [r5, #16]
 800a212:	4621      	mov	r1, r4
 800a214:	f7ff fd8e 	bl	8009d34 <_Bfree>
 800a218:	4628      	mov	r0, r5
 800a21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a21e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a222:	3301      	adds	r3, #1
 800a224:	e7c5      	b.n	800a1b2 <__lshift+0x4a>
 800a226:	3904      	subs	r1, #4
 800a228:	f853 2b04 	ldr.w	r2, [r3], #4
 800a22c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a230:	459c      	cmp	ip, r3
 800a232:	d8f9      	bhi.n	800a228 <__lshift+0xc0>
 800a234:	e7ea      	b.n	800a20c <__lshift+0xa4>
 800a236:	bf00      	nop
 800a238:	0800b4d8 	.word	0x0800b4d8
 800a23c:	0800b560 	.word	0x0800b560

0800a240 <__mcmp>:
 800a240:	b530      	push	{r4, r5, lr}
 800a242:	6902      	ldr	r2, [r0, #16]
 800a244:	690c      	ldr	r4, [r1, #16]
 800a246:	1b12      	subs	r2, r2, r4
 800a248:	d10e      	bne.n	800a268 <__mcmp+0x28>
 800a24a:	f100 0314 	add.w	r3, r0, #20
 800a24e:	3114      	adds	r1, #20
 800a250:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a254:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a258:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a25c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a260:	42a5      	cmp	r5, r4
 800a262:	d003      	beq.n	800a26c <__mcmp+0x2c>
 800a264:	d305      	bcc.n	800a272 <__mcmp+0x32>
 800a266:	2201      	movs	r2, #1
 800a268:	4610      	mov	r0, r2
 800a26a:	bd30      	pop	{r4, r5, pc}
 800a26c:	4283      	cmp	r3, r0
 800a26e:	d3f3      	bcc.n	800a258 <__mcmp+0x18>
 800a270:	e7fa      	b.n	800a268 <__mcmp+0x28>
 800a272:	f04f 32ff 	mov.w	r2, #4294967295
 800a276:	e7f7      	b.n	800a268 <__mcmp+0x28>

0800a278 <__mdiff>:
 800a278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27c:	460c      	mov	r4, r1
 800a27e:	4606      	mov	r6, r0
 800a280:	4611      	mov	r1, r2
 800a282:	4620      	mov	r0, r4
 800a284:	4690      	mov	r8, r2
 800a286:	f7ff ffdb 	bl	800a240 <__mcmp>
 800a28a:	1e05      	subs	r5, r0, #0
 800a28c:	d110      	bne.n	800a2b0 <__mdiff+0x38>
 800a28e:	4629      	mov	r1, r5
 800a290:	4630      	mov	r0, r6
 800a292:	f7ff fd0f 	bl	8009cb4 <_Balloc>
 800a296:	b930      	cbnz	r0, 800a2a6 <__mdiff+0x2e>
 800a298:	4b3a      	ldr	r3, [pc, #232]	; (800a384 <__mdiff+0x10c>)
 800a29a:	4602      	mov	r2, r0
 800a29c:	f240 2137 	movw	r1, #567	; 0x237
 800a2a0:	4839      	ldr	r0, [pc, #228]	; (800a388 <__mdiff+0x110>)
 800a2a2:	f000 fd81 	bl	800ada8 <__assert_func>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b0:	bfa4      	itt	ge
 800a2b2:	4643      	movge	r3, r8
 800a2b4:	46a0      	movge	r8, r4
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2bc:	bfa6      	itte	ge
 800a2be:	461c      	movge	r4, r3
 800a2c0:	2500      	movge	r5, #0
 800a2c2:	2501      	movlt	r5, #1
 800a2c4:	f7ff fcf6 	bl	8009cb4 <_Balloc>
 800a2c8:	b920      	cbnz	r0, 800a2d4 <__mdiff+0x5c>
 800a2ca:	4b2e      	ldr	r3, [pc, #184]	; (800a384 <__mdiff+0x10c>)
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	f240 2145 	movw	r1, #581	; 0x245
 800a2d2:	e7e5      	b.n	800a2a0 <__mdiff+0x28>
 800a2d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a2d8:	6926      	ldr	r6, [r4, #16]
 800a2da:	60c5      	str	r5, [r0, #12]
 800a2dc:	f104 0914 	add.w	r9, r4, #20
 800a2e0:	f108 0514 	add.w	r5, r8, #20
 800a2e4:	f100 0e14 	add.w	lr, r0, #20
 800a2e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a2ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a2f0:	f108 0210 	add.w	r2, r8, #16
 800a2f4:	46f2      	mov	sl, lr
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a300:	fa11 f88b 	uxtah	r8, r1, fp
 800a304:	b299      	uxth	r1, r3
 800a306:	0c1b      	lsrs	r3, r3, #16
 800a308:	eba8 0801 	sub.w	r8, r8, r1
 800a30c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a310:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a314:	fa1f f888 	uxth.w	r8, r8
 800a318:	1419      	asrs	r1, r3, #16
 800a31a:	454e      	cmp	r6, r9
 800a31c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a320:	f84a 3b04 	str.w	r3, [sl], #4
 800a324:	d8e8      	bhi.n	800a2f8 <__mdiff+0x80>
 800a326:	1b33      	subs	r3, r6, r4
 800a328:	3b15      	subs	r3, #21
 800a32a:	f023 0303 	bic.w	r3, r3, #3
 800a32e:	3304      	adds	r3, #4
 800a330:	3415      	adds	r4, #21
 800a332:	42a6      	cmp	r6, r4
 800a334:	bf38      	it	cc
 800a336:	2304      	movcc	r3, #4
 800a338:	441d      	add	r5, r3
 800a33a:	4473      	add	r3, lr
 800a33c:	469e      	mov	lr, r3
 800a33e:	462e      	mov	r6, r5
 800a340:	4566      	cmp	r6, ip
 800a342:	d30e      	bcc.n	800a362 <__mdiff+0xea>
 800a344:	f10c 0203 	add.w	r2, ip, #3
 800a348:	1b52      	subs	r2, r2, r5
 800a34a:	f022 0203 	bic.w	r2, r2, #3
 800a34e:	3d03      	subs	r5, #3
 800a350:	45ac      	cmp	ip, r5
 800a352:	bf38      	it	cc
 800a354:	2200      	movcc	r2, #0
 800a356:	4413      	add	r3, r2
 800a358:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a35c:	b17a      	cbz	r2, 800a37e <__mdiff+0x106>
 800a35e:	6107      	str	r7, [r0, #16]
 800a360:	e7a4      	b.n	800a2ac <__mdiff+0x34>
 800a362:	f856 8b04 	ldr.w	r8, [r6], #4
 800a366:	fa11 f288 	uxtah	r2, r1, r8
 800a36a:	1414      	asrs	r4, r2, #16
 800a36c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a370:	b292      	uxth	r2, r2
 800a372:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a376:	f84e 2b04 	str.w	r2, [lr], #4
 800a37a:	1421      	asrs	r1, r4, #16
 800a37c:	e7e0      	b.n	800a340 <__mdiff+0xc8>
 800a37e:	3f01      	subs	r7, #1
 800a380:	e7ea      	b.n	800a358 <__mdiff+0xe0>
 800a382:	bf00      	nop
 800a384:	0800b4d8 	.word	0x0800b4d8
 800a388:	0800b560 	.word	0x0800b560

0800a38c <__ulp>:
 800a38c:	b082      	sub	sp, #8
 800a38e:	ed8d 0b00 	vstr	d0, [sp]
 800a392:	9a01      	ldr	r2, [sp, #4]
 800a394:	4b0f      	ldr	r3, [pc, #60]	; (800a3d4 <__ulp+0x48>)
 800a396:	4013      	ands	r3, r2
 800a398:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	dc08      	bgt.n	800a3b2 <__ulp+0x26>
 800a3a0:	425b      	negs	r3, r3
 800a3a2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a3a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a3aa:	da04      	bge.n	800a3b6 <__ulp+0x2a>
 800a3ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a3b0:	4113      	asrs	r3, r2
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	e008      	b.n	800a3c8 <__ulp+0x3c>
 800a3b6:	f1a2 0314 	sub.w	r3, r2, #20
 800a3ba:	2b1e      	cmp	r3, #30
 800a3bc:	bfda      	itte	le
 800a3be:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a3c2:	40da      	lsrle	r2, r3
 800a3c4:	2201      	movgt	r2, #1
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4610      	mov	r0, r2
 800a3cc:	ec41 0b10 	vmov	d0, r0, r1
 800a3d0:	b002      	add	sp, #8
 800a3d2:	4770      	bx	lr
 800a3d4:	7ff00000 	.word	0x7ff00000

0800a3d8 <__b2d>:
 800a3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3dc:	6906      	ldr	r6, [r0, #16]
 800a3de:	f100 0814 	add.w	r8, r0, #20
 800a3e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a3e6:	1f37      	subs	r7, r6, #4
 800a3e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	f7ff fd53 	bl	8009e98 <__hi0bits>
 800a3f2:	f1c0 0320 	rsb	r3, r0, #32
 800a3f6:	280a      	cmp	r0, #10
 800a3f8:	600b      	str	r3, [r1, #0]
 800a3fa:	491b      	ldr	r1, [pc, #108]	; (800a468 <__b2d+0x90>)
 800a3fc:	dc15      	bgt.n	800a42a <__b2d+0x52>
 800a3fe:	f1c0 0c0b 	rsb	ip, r0, #11
 800a402:	fa22 f30c 	lsr.w	r3, r2, ip
 800a406:	45b8      	cmp	r8, r7
 800a408:	ea43 0501 	orr.w	r5, r3, r1
 800a40c:	bf34      	ite	cc
 800a40e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a412:	2300      	movcs	r3, #0
 800a414:	3015      	adds	r0, #21
 800a416:	fa02 f000 	lsl.w	r0, r2, r0
 800a41a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a41e:	4303      	orrs	r3, r0
 800a420:	461c      	mov	r4, r3
 800a422:	ec45 4b10 	vmov	d0, r4, r5
 800a426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a42a:	45b8      	cmp	r8, r7
 800a42c:	bf3a      	itte	cc
 800a42e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a432:	f1a6 0708 	subcc.w	r7, r6, #8
 800a436:	2300      	movcs	r3, #0
 800a438:	380b      	subs	r0, #11
 800a43a:	d012      	beq.n	800a462 <__b2d+0x8a>
 800a43c:	f1c0 0120 	rsb	r1, r0, #32
 800a440:	fa23 f401 	lsr.w	r4, r3, r1
 800a444:	4082      	lsls	r2, r0
 800a446:	4322      	orrs	r2, r4
 800a448:	4547      	cmp	r7, r8
 800a44a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a44e:	bf8c      	ite	hi
 800a450:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a454:	2200      	movls	r2, #0
 800a456:	4083      	lsls	r3, r0
 800a458:	40ca      	lsrs	r2, r1
 800a45a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a45e:	4313      	orrs	r3, r2
 800a460:	e7de      	b.n	800a420 <__b2d+0x48>
 800a462:	ea42 0501 	orr.w	r5, r2, r1
 800a466:	e7db      	b.n	800a420 <__b2d+0x48>
 800a468:	3ff00000 	.word	0x3ff00000

0800a46c <__d2b>:
 800a46c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a470:	460f      	mov	r7, r1
 800a472:	2101      	movs	r1, #1
 800a474:	ec59 8b10 	vmov	r8, r9, d0
 800a478:	4616      	mov	r6, r2
 800a47a:	f7ff fc1b 	bl	8009cb4 <_Balloc>
 800a47e:	4604      	mov	r4, r0
 800a480:	b930      	cbnz	r0, 800a490 <__d2b+0x24>
 800a482:	4602      	mov	r2, r0
 800a484:	4b24      	ldr	r3, [pc, #144]	; (800a518 <__d2b+0xac>)
 800a486:	4825      	ldr	r0, [pc, #148]	; (800a51c <__d2b+0xb0>)
 800a488:	f240 310f 	movw	r1, #783	; 0x30f
 800a48c:	f000 fc8c 	bl	800ada8 <__assert_func>
 800a490:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a494:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a498:	bb2d      	cbnz	r5, 800a4e6 <__d2b+0x7a>
 800a49a:	9301      	str	r3, [sp, #4]
 800a49c:	f1b8 0300 	subs.w	r3, r8, #0
 800a4a0:	d026      	beq.n	800a4f0 <__d2b+0x84>
 800a4a2:	4668      	mov	r0, sp
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	f7ff fd17 	bl	8009ed8 <__lo0bits>
 800a4aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a4ae:	b1e8      	cbz	r0, 800a4ec <__d2b+0x80>
 800a4b0:	f1c0 0320 	rsb	r3, r0, #32
 800a4b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b8:	430b      	orrs	r3, r1
 800a4ba:	40c2      	lsrs	r2, r0
 800a4bc:	6163      	str	r3, [r4, #20]
 800a4be:	9201      	str	r2, [sp, #4]
 800a4c0:	9b01      	ldr	r3, [sp, #4]
 800a4c2:	61a3      	str	r3, [r4, #24]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	bf14      	ite	ne
 800a4c8:	2202      	movne	r2, #2
 800a4ca:	2201      	moveq	r2, #1
 800a4cc:	6122      	str	r2, [r4, #16]
 800a4ce:	b1bd      	cbz	r5, 800a500 <__d2b+0x94>
 800a4d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a4d4:	4405      	add	r5, r0
 800a4d6:	603d      	str	r5, [r7, #0]
 800a4d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a4dc:	6030      	str	r0, [r6, #0]
 800a4de:	4620      	mov	r0, r4
 800a4e0:	b003      	add	sp, #12
 800a4e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4ea:	e7d6      	b.n	800a49a <__d2b+0x2e>
 800a4ec:	6161      	str	r1, [r4, #20]
 800a4ee:	e7e7      	b.n	800a4c0 <__d2b+0x54>
 800a4f0:	a801      	add	r0, sp, #4
 800a4f2:	f7ff fcf1 	bl	8009ed8 <__lo0bits>
 800a4f6:	9b01      	ldr	r3, [sp, #4]
 800a4f8:	6163      	str	r3, [r4, #20]
 800a4fa:	3020      	adds	r0, #32
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	e7e5      	b.n	800a4cc <__d2b+0x60>
 800a500:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a504:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a508:	6038      	str	r0, [r7, #0]
 800a50a:	6918      	ldr	r0, [r3, #16]
 800a50c:	f7ff fcc4 	bl	8009e98 <__hi0bits>
 800a510:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a514:	e7e2      	b.n	800a4dc <__d2b+0x70>
 800a516:	bf00      	nop
 800a518:	0800b4d8 	.word	0x0800b4d8
 800a51c:	0800b560 	.word	0x0800b560

0800a520 <__ratio>:
 800a520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a524:	4688      	mov	r8, r1
 800a526:	4669      	mov	r1, sp
 800a528:	4681      	mov	r9, r0
 800a52a:	f7ff ff55 	bl	800a3d8 <__b2d>
 800a52e:	a901      	add	r1, sp, #4
 800a530:	4640      	mov	r0, r8
 800a532:	ec55 4b10 	vmov	r4, r5, d0
 800a536:	f7ff ff4f 	bl	800a3d8 <__b2d>
 800a53a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a53e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a542:	eba3 0c02 	sub.w	ip, r3, r2
 800a546:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a54a:	1a9b      	subs	r3, r3, r2
 800a54c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a550:	ec51 0b10 	vmov	r0, r1, d0
 800a554:	2b00      	cmp	r3, #0
 800a556:	bfd6      	itet	le
 800a558:	460a      	movle	r2, r1
 800a55a:	462a      	movgt	r2, r5
 800a55c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a560:	468b      	mov	fp, r1
 800a562:	462f      	mov	r7, r5
 800a564:	bfd4      	ite	le
 800a566:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a56a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a56e:	4620      	mov	r0, r4
 800a570:	ee10 2a10 	vmov	r2, s0
 800a574:	465b      	mov	r3, fp
 800a576:	4639      	mov	r1, r7
 800a578:	f7f6 f980 	bl	800087c <__aeabi_ddiv>
 800a57c:	ec41 0b10 	vmov	d0, r0, r1
 800a580:	b003      	add	sp, #12
 800a582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a586 <__copybits>:
 800a586:	3901      	subs	r1, #1
 800a588:	b570      	push	{r4, r5, r6, lr}
 800a58a:	1149      	asrs	r1, r1, #5
 800a58c:	6914      	ldr	r4, [r2, #16]
 800a58e:	3101      	adds	r1, #1
 800a590:	f102 0314 	add.w	r3, r2, #20
 800a594:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a598:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a59c:	1f05      	subs	r5, r0, #4
 800a59e:	42a3      	cmp	r3, r4
 800a5a0:	d30c      	bcc.n	800a5bc <__copybits+0x36>
 800a5a2:	1aa3      	subs	r3, r4, r2
 800a5a4:	3b11      	subs	r3, #17
 800a5a6:	f023 0303 	bic.w	r3, r3, #3
 800a5aa:	3211      	adds	r2, #17
 800a5ac:	42a2      	cmp	r2, r4
 800a5ae:	bf88      	it	hi
 800a5b0:	2300      	movhi	r3, #0
 800a5b2:	4418      	add	r0, r3
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	4288      	cmp	r0, r1
 800a5b8:	d305      	bcc.n	800a5c6 <__copybits+0x40>
 800a5ba:	bd70      	pop	{r4, r5, r6, pc}
 800a5bc:	f853 6b04 	ldr.w	r6, [r3], #4
 800a5c0:	f845 6f04 	str.w	r6, [r5, #4]!
 800a5c4:	e7eb      	b.n	800a59e <__copybits+0x18>
 800a5c6:	f840 3b04 	str.w	r3, [r0], #4
 800a5ca:	e7f4      	b.n	800a5b6 <__copybits+0x30>

0800a5cc <__any_on>:
 800a5cc:	f100 0214 	add.w	r2, r0, #20
 800a5d0:	6900      	ldr	r0, [r0, #16]
 800a5d2:	114b      	asrs	r3, r1, #5
 800a5d4:	4298      	cmp	r0, r3
 800a5d6:	b510      	push	{r4, lr}
 800a5d8:	db11      	blt.n	800a5fe <__any_on+0x32>
 800a5da:	dd0a      	ble.n	800a5f2 <__any_on+0x26>
 800a5dc:	f011 011f 	ands.w	r1, r1, #31
 800a5e0:	d007      	beq.n	800a5f2 <__any_on+0x26>
 800a5e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a5e6:	fa24 f001 	lsr.w	r0, r4, r1
 800a5ea:	fa00 f101 	lsl.w	r1, r0, r1
 800a5ee:	428c      	cmp	r4, r1
 800a5f0:	d10b      	bne.n	800a60a <__any_on+0x3e>
 800a5f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d803      	bhi.n	800a602 <__any_on+0x36>
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	bd10      	pop	{r4, pc}
 800a5fe:	4603      	mov	r3, r0
 800a600:	e7f7      	b.n	800a5f2 <__any_on+0x26>
 800a602:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a606:	2900      	cmp	r1, #0
 800a608:	d0f5      	beq.n	800a5f6 <__any_on+0x2a>
 800a60a:	2001      	movs	r0, #1
 800a60c:	e7f6      	b.n	800a5fc <__any_on+0x30>

0800a60e <__ascii_wctomb>:
 800a60e:	b149      	cbz	r1, 800a624 <__ascii_wctomb+0x16>
 800a610:	2aff      	cmp	r2, #255	; 0xff
 800a612:	bf85      	ittet	hi
 800a614:	238a      	movhi	r3, #138	; 0x8a
 800a616:	6003      	strhi	r3, [r0, #0]
 800a618:	700a      	strbls	r2, [r1, #0]
 800a61a:	f04f 30ff 	movhi.w	r0, #4294967295
 800a61e:	bf98      	it	ls
 800a620:	2001      	movls	r0, #1
 800a622:	4770      	bx	lr
 800a624:	4608      	mov	r0, r1
 800a626:	4770      	bx	lr

0800a628 <__ssputs_r>:
 800a628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a62c:	688e      	ldr	r6, [r1, #8]
 800a62e:	461f      	mov	r7, r3
 800a630:	42be      	cmp	r6, r7
 800a632:	680b      	ldr	r3, [r1, #0]
 800a634:	4682      	mov	sl, r0
 800a636:	460c      	mov	r4, r1
 800a638:	4690      	mov	r8, r2
 800a63a:	d82c      	bhi.n	800a696 <__ssputs_r+0x6e>
 800a63c:	898a      	ldrh	r2, [r1, #12]
 800a63e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a642:	d026      	beq.n	800a692 <__ssputs_r+0x6a>
 800a644:	6965      	ldr	r5, [r4, #20]
 800a646:	6909      	ldr	r1, [r1, #16]
 800a648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a64c:	eba3 0901 	sub.w	r9, r3, r1
 800a650:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a654:	1c7b      	adds	r3, r7, #1
 800a656:	444b      	add	r3, r9
 800a658:	106d      	asrs	r5, r5, #1
 800a65a:	429d      	cmp	r5, r3
 800a65c:	bf38      	it	cc
 800a65e:	461d      	movcc	r5, r3
 800a660:	0553      	lsls	r3, r2, #21
 800a662:	d527      	bpl.n	800a6b4 <__ssputs_r+0x8c>
 800a664:	4629      	mov	r1, r5
 800a666:	f7ff fa87 	bl	8009b78 <_malloc_r>
 800a66a:	4606      	mov	r6, r0
 800a66c:	b360      	cbz	r0, 800a6c8 <__ssputs_r+0xa0>
 800a66e:	6921      	ldr	r1, [r4, #16]
 800a670:	464a      	mov	r2, r9
 800a672:	f7fe fea4 	bl	80093be <memcpy>
 800a676:	89a3      	ldrh	r3, [r4, #12]
 800a678:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a680:	81a3      	strh	r3, [r4, #12]
 800a682:	6126      	str	r6, [r4, #16]
 800a684:	6165      	str	r5, [r4, #20]
 800a686:	444e      	add	r6, r9
 800a688:	eba5 0509 	sub.w	r5, r5, r9
 800a68c:	6026      	str	r6, [r4, #0]
 800a68e:	60a5      	str	r5, [r4, #8]
 800a690:	463e      	mov	r6, r7
 800a692:	42be      	cmp	r6, r7
 800a694:	d900      	bls.n	800a698 <__ssputs_r+0x70>
 800a696:	463e      	mov	r6, r7
 800a698:	6820      	ldr	r0, [r4, #0]
 800a69a:	4632      	mov	r2, r6
 800a69c:	4641      	mov	r1, r8
 800a69e:	f000 fb59 	bl	800ad54 <memmove>
 800a6a2:	68a3      	ldr	r3, [r4, #8]
 800a6a4:	1b9b      	subs	r3, r3, r6
 800a6a6:	60a3      	str	r3, [r4, #8]
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	4433      	add	r3, r6
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b4:	462a      	mov	r2, r5
 800a6b6:	f000 fbb3 	bl	800ae20 <_realloc_r>
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d1e0      	bne.n	800a682 <__ssputs_r+0x5a>
 800a6c0:	6921      	ldr	r1, [r4, #16]
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	f7fe fe94 	bl	80093f0 <_free_r>
 800a6c8:	230c      	movs	r3, #12
 800a6ca:	f8ca 3000 	str.w	r3, [sl]
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6d4:	81a3      	strh	r3, [r4, #12]
 800a6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6da:	e7e9      	b.n	800a6b0 <__ssputs_r+0x88>

0800a6dc <_svfiprintf_r>:
 800a6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e0:	4698      	mov	r8, r3
 800a6e2:	898b      	ldrh	r3, [r1, #12]
 800a6e4:	061b      	lsls	r3, r3, #24
 800a6e6:	b09d      	sub	sp, #116	; 0x74
 800a6e8:	4607      	mov	r7, r0
 800a6ea:	460d      	mov	r5, r1
 800a6ec:	4614      	mov	r4, r2
 800a6ee:	d50e      	bpl.n	800a70e <_svfiprintf_r+0x32>
 800a6f0:	690b      	ldr	r3, [r1, #16]
 800a6f2:	b963      	cbnz	r3, 800a70e <_svfiprintf_r+0x32>
 800a6f4:	2140      	movs	r1, #64	; 0x40
 800a6f6:	f7ff fa3f 	bl	8009b78 <_malloc_r>
 800a6fa:	6028      	str	r0, [r5, #0]
 800a6fc:	6128      	str	r0, [r5, #16]
 800a6fe:	b920      	cbnz	r0, 800a70a <_svfiprintf_r+0x2e>
 800a700:	230c      	movs	r3, #12
 800a702:	603b      	str	r3, [r7, #0]
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
 800a708:	e0d0      	b.n	800a8ac <_svfiprintf_r+0x1d0>
 800a70a:	2340      	movs	r3, #64	; 0x40
 800a70c:	616b      	str	r3, [r5, #20]
 800a70e:	2300      	movs	r3, #0
 800a710:	9309      	str	r3, [sp, #36]	; 0x24
 800a712:	2320      	movs	r3, #32
 800a714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a718:	f8cd 800c 	str.w	r8, [sp, #12]
 800a71c:	2330      	movs	r3, #48	; 0x30
 800a71e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a8c4 <_svfiprintf_r+0x1e8>
 800a722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a726:	f04f 0901 	mov.w	r9, #1
 800a72a:	4623      	mov	r3, r4
 800a72c:	469a      	mov	sl, r3
 800a72e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a732:	b10a      	cbz	r2, 800a738 <_svfiprintf_r+0x5c>
 800a734:	2a25      	cmp	r2, #37	; 0x25
 800a736:	d1f9      	bne.n	800a72c <_svfiprintf_r+0x50>
 800a738:	ebba 0b04 	subs.w	fp, sl, r4
 800a73c:	d00b      	beq.n	800a756 <_svfiprintf_r+0x7a>
 800a73e:	465b      	mov	r3, fp
 800a740:	4622      	mov	r2, r4
 800a742:	4629      	mov	r1, r5
 800a744:	4638      	mov	r0, r7
 800a746:	f7ff ff6f 	bl	800a628 <__ssputs_r>
 800a74a:	3001      	adds	r0, #1
 800a74c:	f000 80a9 	beq.w	800a8a2 <_svfiprintf_r+0x1c6>
 800a750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a752:	445a      	add	r2, fp
 800a754:	9209      	str	r2, [sp, #36]	; 0x24
 800a756:	f89a 3000 	ldrb.w	r3, [sl]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 80a1 	beq.w	800a8a2 <_svfiprintf_r+0x1c6>
 800a760:	2300      	movs	r3, #0
 800a762:	f04f 32ff 	mov.w	r2, #4294967295
 800a766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a76a:	f10a 0a01 	add.w	sl, sl, #1
 800a76e:	9304      	str	r3, [sp, #16]
 800a770:	9307      	str	r3, [sp, #28]
 800a772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a776:	931a      	str	r3, [sp, #104]	; 0x68
 800a778:	4654      	mov	r4, sl
 800a77a:	2205      	movs	r2, #5
 800a77c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a780:	4850      	ldr	r0, [pc, #320]	; (800a8c4 <_svfiprintf_r+0x1e8>)
 800a782:	f7f5 fd45 	bl	8000210 <memchr>
 800a786:	9a04      	ldr	r2, [sp, #16]
 800a788:	b9d8      	cbnz	r0, 800a7c2 <_svfiprintf_r+0xe6>
 800a78a:	06d0      	lsls	r0, r2, #27
 800a78c:	bf44      	itt	mi
 800a78e:	2320      	movmi	r3, #32
 800a790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a794:	0711      	lsls	r1, r2, #28
 800a796:	bf44      	itt	mi
 800a798:	232b      	movmi	r3, #43	; 0x2b
 800a79a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a79e:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a4:	d015      	beq.n	800a7d2 <_svfiprintf_r+0xf6>
 800a7a6:	9a07      	ldr	r2, [sp, #28]
 800a7a8:	4654      	mov	r4, sl
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	f04f 0c0a 	mov.w	ip, #10
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b6:	3b30      	subs	r3, #48	; 0x30
 800a7b8:	2b09      	cmp	r3, #9
 800a7ba:	d94d      	bls.n	800a858 <_svfiprintf_r+0x17c>
 800a7bc:	b1b0      	cbz	r0, 800a7ec <_svfiprintf_r+0x110>
 800a7be:	9207      	str	r2, [sp, #28]
 800a7c0:	e014      	b.n	800a7ec <_svfiprintf_r+0x110>
 800a7c2:	eba0 0308 	sub.w	r3, r0, r8
 800a7c6:	fa09 f303 	lsl.w	r3, r9, r3
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	9304      	str	r3, [sp, #16]
 800a7ce:	46a2      	mov	sl, r4
 800a7d0:	e7d2      	b.n	800a778 <_svfiprintf_r+0x9c>
 800a7d2:	9b03      	ldr	r3, [sp, #12]
 800a7d4:	1d19      	adds	r1, r3, #4
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	9103      	str	r1, [sp, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	bfbb      	ittet	lt
 800a7de:	425b      	neglt	r3, r3
 800a7e0:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e4:	9307      	strge	r3, [sp, #28]
 800a7e6:	9307      	strlt	r3, [sp, #28]
 800a7e8:	bfb8      	it	lt
 800a7ea:	9204      	strlt	r2, [sp, #16]
 800a7ec:	7823      	ldrb	r3, [r4, #0]
 800a7ee:	2b2e      	cmp	r3, #46	; 0x2e
 800a7f0:	d10c      	bne.n	800a80c <_svfiprintf_r+0x130>
 800a7f2:	7863      	ldrb	r3, [r4, #1]
 800a7f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f6:	d134      	bne.n	800a862 <_svfiprintf_r+0x186>
 800a7f8:	9b03      	ldr	r3, [sp, #12]
 800a7fa:	1d1a      	adds	r2, r3, #4
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	9203      	str	r2, [sp, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	bfb8      	it	lt
 800a804:	f04f 33ff 	movlt.w	r3, #4294967295
 800a808:	3402      	adds	r4, #2
 800a80a:	9305      	str	r3, [sp, #20]
 800a80c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a8d4 <_svfiprintf_r+0x1f8>
 800a810:	7821      	ldrb	r1, [r4, #0]
 800a812:	2203      	movs	r2, #3
 800a814:	4650      	mov	r0, sl
 800a816:	f7f5 fcfb 	bl	8000210 <memchr>
 800a81a:	b138      	cbz	r0, 800a82c <_svfiprintf_r+0x150>
 800a81c:	9b04      	ldr	r3, [sp, #16]
 800a81e:	eba0 000a 	sub.w	r0, r0, sl
 800a822:	2240      	movs	r2, #64	; 0x40
 800a824:	4082      	lsls	r2, r0
 800a826:	4313      	orrs	r3, r2
 800a828:	3401      	adds	r4, #1
 800a82a:	9304      	str	r3, [sp, #16]
 800a82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a830:	4825      	ldr	r0, [pc, #148]	; (800a8c8 <_svfiprintf_r+0x1ec>)
 800a832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a836:	2206      	movs	r2, #6
 800a838:	f7f5 fcea 	bl	8000210 <memchr>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d038      	beq.n	800a8b2 <_svfiprintf_r+0x1d6>
 800a840:	4b22      	ldr	r3, [pc, #136]	; (800a8cc <_svfiprintf_r+0x1f0>)
 800a842:	bb1b      	cbnz	r3, 800a88c <_svfiprintf_r+0x1b0>
 800a844:	9b03      	ldr	r3, [sp, #12]
 800a846:	3307      	adds	r3, #7
 800a848:	f023 0307 	bic.w	r3, r3, #7
 800a84c:	3308      	adds	r3, #8
 800a84e:	9303      	str	r3, [sp, #12]
 800a850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a852:	4433      	add	r3, r6
 800a854:	9309      	str	r3, [sp, #36]	; 0x24
 800a856:	e768      	b.n	800a72a <_svfiprintf_r+0x4e>
 800a858:	fb0c 3202 	mla	r2, ip, r2, r3
 800a85c:	460c      	mov	r4, r1
 800a85e:	2001      	movs	r0, #1
 800a860:	e7a6      	b.n	800a7b0 <_svfiprintf_r+0xd4>
 800a862:	2300      	movs	r3, #0
 800a864:	3401      	adds	r4, #1
 800a866:	9305      	str	r3, [sp, #20]
 800a868:	4619      	mov	r1, r3
 800a86a:	f04f 0c0a 	mov.w	ip, #10
 800a86e:	4620      	mov	r0, r4
 800a870:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a874:	3a30      	subs	r2, #48	; 0x30
 800a876:	2a09      	cmp	r2, #9
 800a878:	d903      	bls.n	800a882 <_svfiprintf_r+0x1a6>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0c6      	beq.n	800a80c <_svfiprintf_r+0x130>
 800a87e:	9105      	str	r1, [sp, #20]
 800a880:	e7c4      	b.n	800a80c <_svfiprintf_r+0x130>
 800a882:	fb0c 2101 	mla	r1, ip, r1, r2
 800a886:	4604      	mov	r4, r0
 800a888:	2301      	movs	r3, #1
 800a88a:	e7f0      	b.n	800a86e <_svfiprintf_r+0x192>
 800a88c:	ab03      	add	r3, sp, #12
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	462a      	mov	r2, r5
 800a892:	4b0f      	ldr	r3, [pc, #60]	; (800a8d0 <_svfiprintf_r+0x1f4>)
 800a894:	a904      	add	r1, sp, #16
 800a896:	4638      	mov	r0, r7
 800a898:	f3af 8000 	nop.w
 800a89c:	1c42      	adds	r2, r0, #1
 800a89e:	4606      	mov	r6, r0
 800a8a0:	d1d6      	bne.n	800a850 <_svfiprintf_r+0x174>
 800a8a2:	89ab      	ldrh	r3, [r5, #12]
 800a8a4:	065b      	lsls	r3, r3, #25
 800a8a6:	f53f af2d 	bmi.w	800a704 <_svfiprintf_r+0x28>
 800a8aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8ac:	b01d      	add	sp, #116	; 0x74
 800a8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b2:	ab03      	add	r3, sp, #12
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	462a      	mov	r2, r5
 800a8b8:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <_svfiprintf_r+0x1f4>)
 800a8ba:	a904      	add	r1, sp, #16
 800a8bc:	4638      	mov	r0, r7
 800a8be:	f000 f879 	bl	800a9b4 <_printf_i>
 800a8c2:	e7eb      	b.n	800a89c <_svfiprintf_r+0x1c0>
 800a8c4:	0800b7bd 	.word	0x0800b7bd
 800a8c8:	0800b7c7 	.word	0x0800b7c7
 800a8cc:	00000000 	.word	0x00000000
 800a8d0:	0800a629 	.word	0x0800a629
 800a8d4:	0800b7c3 	.word	0x0800b7c3

0800a8d8 <_printf_common>:
 800a8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8dc:	4616      	mov	r6, r2
 800a8de:	4699      	mov	r9, r3
 800a8e0:	688a      	ldr	r2, [r1, #8]
 800a8e2:	690b      	ldr	r3, [r1, #16]
 800a8e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	bfb8      	it	lt
 800a8ec:	4613      	movlt	r3, r2
 800a8ee:	6033      	str	r3, [r6, #0]
 800a8f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8f4:	4607      	mov	r7, r0
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	b10a      	cbz	r2, 800a8fe <_printf_common+0x26>
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	6033      	str	r3, [r6, #0]
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	0699      	lsls	r1, r3, #26
 800a902:	bf42      	ittt	mi
 800a904:	6833      	ldrmi	r3, [r6, #0]
 800a906:	3302      	addmi	r3, #2
 800a908:	6033      	strmi	r3, [r6, #0]
 800a90a:	6825      	ldr	r5, [r4, #0]
 800a90c:	f015 0506 	ands.w	r5, r5, #6
 800a910:	d106      	bne.n	800a920 <_printf_common+0x48>
 800a912:	f104 0a19 	add.w	sl, r4, #25
 800a916:	68e3      	ldr	r3, [r4, #12]
 800a918:	6832      	ldr	r2, [r6, #0]
 800a91a:	1a9b      	subs	r3, r3, r2
 800a91c:	42ab      	cmp	r3, r5
 800a91e:	dc26      	bgt.n	800a96e <_printf_common+0x96>
 800a920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a924:	1e13      	subs	r3, r2, #0
 800a926:	6822      	ldr	r2, [r4, #0]
 800a928:	bf18      	it	ne
 800a92a:	2301      	movne	r3, #1
 800a92c:	0692      	lsls	r2, r2, #26
 800a92e:	d42b      	bmi.n	800a988 <_printf_common+0xb0>
 800a930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a934:	4649      	mov	r1, r9
 800a936:	4638      	mov	r0, r7
 800a938:	47c0      	blx	r8
 800a93a:	3001      	adds	r0, #1
 800a93c:	d01e      	beq.n	800a97c <_printf_common+0xa4>
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	6922      	ldr	r2, [r4, #16]
 800a942:	f003 0306 	and.w	r3, r3, #6
 800a946:	2b04      	cmp	r3, #4
 800a948:	bf02      	ittt	eq
 800a94a:	68e5      	ldreq	r5, [r4, #12]
 800a94c:	6833      	ldreq	r3, [r6, #0]
 800a94e:	1aed      	subeq	r5, r5, r3
 800a950:	68a3      	ldr	r3, [r4, #8]
 800a952:	bf0c      	ite	eq
 800a954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a958:	2500      	movne	r5, #0
 800a95a:	4293      	cmp	r3, r2
 800a95c:	bfc4      	itt	gt
 800a95e:	1a9b      	subgt	r3, r3, r2
 800a960:	18ed      	addgt	r5, r5, r3
 800a962:	2600      	movs	r6, #0
 800a964:	341a      	adds	r4, #26
 800a966:	42b5      	cmp	r5, r6
 800a968:	d11a      	bne.n	800a9a0 <_printf_common+0xc8>
 800a96a:	2000      	movs	r0, #0
 800a96c:	e008      	b.n	800a980 <_printf_common+0xa8>
 800a96e:	2301      	movs	r3, #1
 800a970:	4652      	mov	r2, sl
 800a972:	4649      	mov	r1, r9
 800a974:	4638      	mov	r0, r7
 800a976:	47c0      	blx	r8
 800a978:	3001      	adds	r0, #1
 800a97a:	d103      	bne.n	800a984 <_printf_common+0xac>
 800a97c:	f04f 30ff 	mov.w	r0, #4294967295
 800a980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a984:	3501      	adds	r5, #1
 800a986:	e7c6      	b.n	800a916 <_printf_common+0x3e>
 800a988:	18e1      	adds	r1, r4, r3
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	2030      	movs	r0, #48	; 0x30
 800a98e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a992:	4422      	add	r2, r4
 800a994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a99c:	3302      	adds	r3, #2
 800a99e:	e7c7      	b.n	800a930 <_printf_common+0x58>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	4622      	mov	r2, r4
 800a9a4:	4649      	mov	r1, r9
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	47c0      	blx	r8
 800a9aa:	3001      	adds	r0, #1
 800a9ac:	d0e6      	beq.n	800a97c <_printf_common+0xa4>
 800a9ae:	3601      	adds	r6, #1
 800a9b0:	e7d9      	b.n	800a966 <_printf_common+0x8e>
	...

0800a9b4 <_printf_i>:
 800a9b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b8:	7e0f      	ldrb	r7, [r1, #24]
 800a9ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9bc:	2f78      	cmp	r7, #120	; 0x78
 800a9be:	4691      	mov	r9, r2
 800a9c0:	4680      	mov	r8, r0
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	469a      	mov	sl, r3
 800a9c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9ca:	d807      	bhi.n	800a9dc <_printf_i+0x28>
 800a9cc:	2f62      	cmp	r7, #98	; 0x62
 800a9ce:	d80a      	bhi.n	800a9e6 <_printf_i+0x32>
 800a9d0:	2f00      	cmp	r7, #0
 800a9d2:	f000 80d4 	beq.w	800ab7e <_printf_i+0x1ca>
 800a9d6:	2f58      	cmp	r7, #88	; 0x58
 800a9d8:	f000 80c0 	beq.w	800ab5c <_printf_i+0x1a8>
 800a9dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9e4:	e03a      	b.n	800aa5c <_printf_i+0xa8>
 800a9e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9ea:	2b15      	cmp	r3, #21
 800a9ec:	d8f6      	bhi.n	800a9dc <_printf_i+0x28>
 800a9ee:	a101      	add	r1, pc, #4	; (adr r1, 800a9f4 <_printf_i+0x40>)
 800a9f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9f4:	0800aa4d 	.word	0x0800aa4d
 800a9f8:	0800aa61 	.word	0x0800aa61
 800a9fc:	0800a9dd 	.word	0x0800a9dd
 800aa00:	0800a9dd 	.word	0x0800a9dd
 800aa04:	0800a9dd 	.word	0x0800a9dd
 800aa08:	0800a9dd 	.word	0x0800a9dd
 800aa0c:	0800aa61 	.word	0x0800aa61
 800aa10:	0800a9dd 	.word	0x0800a9dd
 800aa14:	0800a9dd 	.word	0x0800a9dd
 800aa18:	0800a9dd 	.word	0x0800a9dd
 800aa1c:	0800a9dd 	.word	0x0800a9dd
 800aa20:	0800ab65 	.word	0x0800ab65
 800aa24:	0800aa8d 	.word	0x0800aa8d
 800aa28:	0800ab1f 	.word	0x0800ab1f
 800aa2c:	0800a9dd 	.word	0x0800a9dd
 800aa30:	0800a9dd 	.word	0x0800a9dd
 800aa34:	0800ab87 	.word	0x0800ab87
 800aa38:	0800a9dd 	.word	0x0800a9dd
 800aa3c:	0800aa8d 	.word	0x0800aa8d
 800aa40:	0800a9dd 	.word	0x0800a9dd
 800aa44:	0800a9dd 	.word	0x0800a9dd
 800aa48:	0800ab27 	.word	0x0800ab27
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	1d1a      	adds	r2, r3, #4
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	602a      	str	r2, [r5, #0]
 800aa54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e09f      	b.n	800aba0 <_printf_i+0x1ec>
 800aa60:	6820      	ldr	r0, [r4, #0]
 800aa62:	682b      	ldr	r3, [r5, #0]
 800aa64:	0607      	lsls	r7, r0, #24
 800aa66:	f103 0104 	add.w	r1, r3, #4
 800aa6a:	6029      	str	r1, [r5, #0]
 800aa6c:	d501      	bpl.n	800aa72 <_printf_i+0xbe>
 800aa6e:	681e      	ldr	r6, [r3, #0]
 800aa70:	e003      	b.n	800aa7a <_printf_i+0xc6>
 800aa72:	0646      	lsls	r6, r0, #25
 800aa74:	d5fb      	bpl.n	800aa6e <_printf_i+0xba>
 800aa76:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aa7a:	2e00      	cmp	r6, #0
 800aa7c:	da03      	bge.n	800aa86 <_printf_i+0xd2>
 800aa7e:	232d      	movs	r3, #45	; 0x2d
 800aa80:	4276      	negs	r6, r6
 800aa82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa86:	485a      	ldr	r0, [pc, #360]	; (800abf0 <_printf_i+0x23c>)
 800aa88:	230a      	movs	r3, #10
 800aa8a:	e012      	b.n	800aab2 <_printf_i+0xfe>
 800aa8c:	682b      	ldr	r3, [r5, #0]
 800aa8e:	6820      	ldr	r0, [r4, #0]
 800aa90:	1d19      	adds	r1, r3, #4
 800aa92:	6029      	str	r1, [r5, #0]
 800aa94:	0605      	lsls	r5, r0, #24
 800aa96:	d501      	bpl.n	800aa9c <_printf_i+0xe8>
 800aa98:	681e      	ldr	r6, [r3, #0]
 800aa9a:	e002      	b.n	800aaa2 <_printf_i+0xee>
 800aa9c:	0641      	lsls	r1, r0, #25
 800aa9e:	d5fb      	bpl.n	800aa98 <_printf_i+0xe4>
 800aaa0:	881e      	ldrh	r6, [r3, #0]
 800aaa2:	4853      	ldr	r0, [pc, #332]	; (800abf0 <_printf_i+0x23c>)
 800aaa4:	2f6f      	cmp	r7, #111	; 0x6f
 800aaa6:	bf0c      	ite	eq
 800aaa8:	2308      	moveq	r3, #8
 800aaaa:	230a      	movne	r3, #10
 800aaac:	2100      	movs	r1, #0
 800aaae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aab2:	6865      	ldr	r5, [r4, #4]
 800aab4:	60a5      	str	r5, [r4, #8]
 800aab6:	2d00      	cmp	r5, #0
 800aab8:	bfa2      	ittt	ge
 800aaba:	6821      	ldrge	r1, [r4, #0]
 800aabc:	f021 0104 	bicge.w	r1, r1, #4
 800aac0:	6021      	strge	r1, [r4, #0]
 800aac2:	b90e      	cbnz	r6, 800aac8 <_printf_i+0x114>
 800aac4:	2d00      	cmp	r5, #0
 800aac6:	d04b      	beq.n	800ab60 <_printf_i+0x1ac>
 800aac8:	4615      	mov	r5, r2
 800aaca:	fbb6 f1f3 	udiv	r1, r6, r3
 800aace:	fb03 6711 	mls	r7, r3, r1, r6
 800aad2:	5dc7      	ldrb	r7, [r0, r7]
 800aad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aad8:	4637      	mov	r7, r6
 800aada:	42bb      	cmp	r3, r7
 800aadc:	460e      	mov	r6, r1
 800aade:	d9f4      	bls.n	800aaca <_printf_i+0x116>
 800aae0:	2b08      	cmp	r3, #8
 800aae2:	d10b      	bne.n	800aafc <_printf_i+0x148>
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	07de      	lsls	r6, r3, #31
 800aae8:	d508      	bpl.n	800aafc <_printf_i+0x148>
 800aaea:	6923      	ldr	r3, [r4, #16]
 800aaec:	6861      	ldr	r1, [r4, #4]
 800aaee:	4299      	cmp	r1, r3
 800aaf0:	bfde      	ittt	le
 800aaf2:	2330      	movle	r3, #48	; 0x30
 800aaf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aaf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aafc:	1b52      	subs	r2, r2, r5
 800aafe:	6122      	str	r2, [r4, #16]
 800ab00:	f8cd a000 	str.w	sl, [sp]
 800ab04:	464b      	mov	r3, r9
 800ab06:	aa03      	add	r2, sp, #12
 800ab08:	4621      	mov	r1, r4
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	f7ff fee4 	bl	800a8d8 <_printf_common>
 800ab10:	3001      	adds	r0, #1
 800ab12:	d14a      	bne.n	800abaa <_printf_i+0x1f6>
 800ab14:	f04f 30ff 	mov.w	r0, #4294967295
 800ab18:	b004      	add	sp, #16
 800ab1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	f043 0320 	orr.w	r3, r3, #32
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	4833      	ldr	r0, [pc, #204]	; (800abf4 <_printf_i+0x240>)
 800ab28:	2778      	movs	r7, #120	; 0x78
 800ab2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	6829      	ldr	r1, [r5, #0]
 800ab32:	061f      	lsls	r7, r3, #24
 800ab34:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab38:	d402      	bmi.n	800ab40 <_printf_i+0x18c>
 800ab3a:	065f      	lsls	r7, r3, #25
 800ab3c:	bf48      	it	mi
 800ab3e:	b2b6      	uxthmi	r6, r6
 800ab40:	07df      	lsls	r7, r3, #31
 800ab42:	bf48      	it	mi
 800ab44:	f043 0320 	orrmi.w	r3, r3, #32
 800ab48:	6029      	str	r1, [r5, #0]
 800ab4a:	bf48      	it	mi
 800ab4c:	6023      	strmi	r3, [r4, #0]
 800ab4e:	b91e      	cbnz	r6, 800ab58 <_printf_i+0x1a4>
 800ab50:	6823      	ldr	r3, [r4, #0]
 800ab52:	f023 0320 	bic.w	r3, r3, #32
 800ab56:	6023      	str	r3, [r4, #0]
 800ab58:	2310      	movs	r3, #16
 800ab5a:	e7a7      	b.n	800aaac <_printf_i+0xf8>
 800ab5c:	4824      	ldr	r0, [pc, #144]	; (800abf0 <_printf_i+0x23c>)
 800ab5e:	e7e4      	b.n	800ab2a <_printf_i+0x176>
 800ab60:	4615      	mov	r5, r2
 800ab62:	e7bd      	b.n	800aae0 <_printf_i+0x12c>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	6826      	ldr	r6, [r4, #0]
 800ab68:	6961      	ldr	r1, [r4, #20]
 800ab6a:	1d18      	adds	r0, r3, #4
 800ab6c:	6028      	str	r0, [r5, #0]
 800ab6e:	0635      	lsls	r5, r6, #24
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	d501      	bpl.n	800ab78 <_printf_i+0x1c4>
 800ab74:	6019      	str	r1, [r3, #0]
 800ab76:	e002      	b.n	800ab7e <_printf_i+0x1ca>
 800ab78:	0670      	lsls	r0, r6, #25
 800ab7a:	d5fb      	bpl.n	800ab74 <_printf_i+0x1c0>
 800ab7c:	8019      	strh	r1, [r3, #0]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	6123      	str	r3, [r4, #16]
 800ab82:	4615      	mov	r5, r2
 800ab84:	e7bc      	b.n	800ab00 <_printf_i+0x14c>
 800ab86:	682b      	ldr	r3, [r5, #0]
 800ab88:	1d1a      	adds	r2, r3, #4
 800ab8a:	602a      	str	r2, [r5, #0]
 800ab8c:	681d      	ldr	r5, [r3, #0]
 800ab8e:	6862      	ldr	r2, [r4, #4]
 800ab90:	2100      	movs	r1, #0
 800ab92:	4628      	mov	r0, r5
 800ab94:	f7f5 fb3c 	bl	8000210 <memchr>
 800ab98:	b108      	cbz	r0, 800ab9e <_printf_i+0x1ea>
 800ab9a:	1b40      	subs	r0, r0, r5
 800ab9c:	6060      	str	r0, [r4, #4]
 800ab9e:	6863      	ldr	r3, [r4, #4]
 800aba0:	6123      	str	r3, [r4, #16]
 800aba2:	2300      	movs	r3, #0
 800aba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aba8:	e7aa      	b.n	800ab00 <_printf_i+0x14c>
 800abaa:	6923      	ldr	r3, [r4, #16]
 800abac:	462a      	mov	r2, r5
 800abae:	4649      	mov	r1, r9
 800abb0:	4640      	mov	r0, r8
 800abb2:	47d0      	blx	sl
 800abb4:	3001      	adds	r0, #1
 800abb6:	d0ad      	beq.n	800ab14 <_printf_i+0x160>
 800abb8:	6823      	ldr	r3, [r4, #0]
 800abba:	079b      	lsls	r3, r3, #30
 800abbc:	d413      	bmi.n	800abe6 <_printf_i+0x232>
 800abbe:	68e0      	ldr	r0, [r4, #12]
 800abc0:	9b03      	ldr	r3, [sp, #12]
 800abc2:	4298      	cmp	r0, r3
 800abc4:	bfb8      	it	lt
 800abc6:	4618      	movlt	r0, r3
 800abc8:	e7a6      	b.n	800ab18 <_printf_i+0x164>
 800abca:	2301      	movs	r3, #1
 800abcc:	4632      	mov	r2, r6
 800abce:	4649      	mov	r1, r9
 800abd0:	4640      	mov	r0, r8
 800abd2:	47d0      	blx	sl
 800abd4:	3001      	adds	r0, #1
 800abd6:	d09d      	beq.n	800ab14 <_printf_i+0x160>
 800abd8:	3501      	adds	r5, #1
 800abda:	68e3      	ldr	r3, [r4, #12]
 800abdc:	9903      	ldr	r1, [sp, #12]
 800abde:	1a5b      	subs	r3, r3, r1
 800abe0:	42ab      	cmp	r3, r5
 800abe2:	dcf2      	bgt.n	800abca <_printf_i+0x216>
 800abe4:	e7eb      	b.n	800abbe <_printf_i+0x20a>
 800abe6:	2500      	movs	r5, #0
 800abe8:	f104 0619 	add.w	r6, r4, #25
 800abec:	e7f5      	b.n	800abda <_printf_i+0x226>
 800abee:	bf00      	nop
 800abf0:	0800b7ce 	.word	0x0800b7ce
 800abf4:	0800b7df 	.word	0x0800b7df

0800abf8 <__sflush_r>:
 800abf8:	898a      	ldrh	r2, [r1, #12]
 800abfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abfe:	4605      	mov	r5, r0
 800ac00:	0710      	lsls	r0, r2, #28
 800ac02:	460c      	mov	r4, r1
 800ac04:	d458      	bmi.n	800acb8 <__sflush_r+0xc0>
 800ac06:	684b      	ldr	r3, [r1, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	dc05      	bgt.n	800ac18 <__sflush_r+0x20>
 800ac0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	dc02      	bgt.n	800ac18 <__sflush_r+0x20>
 800ac12:	2000      	movs	r0, #0
 800ac14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac1a:	2e00      	cmp	r6, #0
 800ac1c:	d0f9      	beq.n	800ac12 <__sflush_r+0x1a>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac24:	682f      	ldr	r7, [r5, #0]
 800ac26:	6a21      	ldr	r1, [r4, #32]
 800ac28:	602b      	str	r3, [r5, #0]
 800ac2a:	d032      	beq.n	800ac92 <__sflush_r+0x9a>
 800ac2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	075a      	lsls	r2, r3, #29
 800ac32:	d505      	bpl.n	800ac40 <__sflush_r+0x48>
 800ac34:	6863      	ldr	r3, [r4, #4]
 800ac36:	1ac0      	subs	r0, r0, r3
 800ac38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac3a:	b10b      	cbz	r3, 800ac40 <__sflush_r+0x48>
 800ac3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac3e:	1ac0      	subs	r0, r0, r3
 800ac40:	2300      	movs	r3, #0
 800ac42:	4602      	mov	r2, r0
 800ac44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac46:	6a21      	ldr	r1, [r4, #32]
 800ac48:	4628      	mov	r0, r5
 800ac4a:	47b0      	blx	r6
 800ac4c:	1c43      	adds	r3, r0, #1
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	d106      	bne.n	800ac60 <__sflush_r+0x68>
 800ac52:	6829      	ldr	r1, [r5, #0]
 800ac54:	291d      	cmp	r1, #29
 800ac56:	d82b      	bhi.n	800acb0 <__sflush_r+0xb8>
 800ac58:	4a29      	ldr	r2, [pc, #164]	; (800ad00 <__sflush_r+0x108>)
 800ac5a:	410a      	asrs	r2, r1
 800ac5c:	07d6      	lsls	r6, r2, #31
 800ac5e:	d427      	bmi.n	800acb0 <__sflush_r+0xb8>
 800ac60:	2200      	movs	r2, #0
 800ac62:	6062      	str	r2, [r4, #4]
 800ac64:	04d9      	lsls	r1, r3, #19
 800ac66:	6922      	ldr	r2, [r4, #16]
 800ac68:	6022      	str	r2, [r4, #0]
 800ac6a:	d504      	bpl.n	800ac76 <__sflush_r+0x7e>
 800ac6c:	1c42      	adds	r2, r0, #1
 800ac6e:	d101      	bne.n	800ac74 <__sflush_r+0x7c>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	b903      	cbnz	r3, 800ac76 <__sflush_r+0x7e>
 800ac74:	6560      	str	r0, [r4, #84]	; 0x54
 800ac76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac78:	602f      	str	r7, [r5, #0]
 800ac7a:	2900      	cmp	r1, #0
 800ac7c:	d0c9      	beq.n	800ac12 <__sflush_r+0x1a>
 800ac7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac82:	4299      	cmp	r1, r3
 800ac84:	d002      	beq.n	800ac8c <__sflush_r+0x94>
 800ac86:	4628      	mov	r0, r5
 800ac88:	f7fe fbb2 	bl	80093f0 <_free_r>
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	6360      	str	r0, [r4, #52]	; 0x34
 800ac90:	e7c0      	b.n	800ac14 <__sflush_r+0x1c>
 800ac92:	2301      	movs	r3, #1
 800ac94:	4628      	mov	r0, r5
 800ac96:	47b0      	blx	r6
 800ac98:	1c41      	adds	r1, r0, #1
 800ac9a:	d1c8      	bne.n	800ac2e <__sflush_r+0x36>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0c5      	beq.n	800ac2e <__sflush_r+0x36>
 800aca2:	2b1d      	cmp	r3, #29
 800aca4:	d001      	beq.n	800acaa <__sflush_r+0xb2>
 800aca6:	2b16      	cmp	r3, #22
 800aca8:	d101      	bne.n	800acae <__sflush_r+0xb6>
 800acaa:	602f      	str	r7, [r5, #0]
 800acac:	e7b1      	b.n	800ac12 <__sflush_r+0x1a>
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	e7ad      	b.n	800ac14 <__sflush_r+0x1c>
 800acb8:	690f      	ldr	r7, [r1, #16]
 800acba:	2f00      	cmp	r7, #0
 800acbc:	d0a9      	beq.n	800ac12 <__sflush_r+0x1a>
 800acbe:	0793      	lsls	r3, r2, #30
 800acc0:	680e      	ldr	r6, [r1, #0]
 800acc2:	bf08      	it	eq
 800acc4:	694b      	ldreq	r3, [r1, #20]
 800acc6:	600f      	str	r7, [r1, #0]
 800acc8:	bf18      	it	ne
 800acca:	2300      	movne	r3, #0
 800accc:	eba6 0807 	sub.w	r8, r6, r7
 800acd0:	608b      	str	r3, [r1, #8]
 800acd2:	f1b8 0f00 	cmp.w	r8, #0
 800acd6:	dd9c      	ble.n	800ac12 <__sflush_r+0x1a>
 800acd8:	6a21      	ldr	r1, [r4, #32]
 800acda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acdc:	4643      	mov	r3, r8
 800acde:	463a      	mov	r2, r7
 800ace0:	4628      	mov	r0, r5
 800ace2:	47b0      	blx	r6
 800ace4:	2800      	cmp	r0, #0
 800ace6:	dc06      	bgt.n	800acf6 <__sflush_r+0xfe>
 800ace8:	89a3      	ldrh	r3, [r4, #12]
 800acea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acee:	81a3      	strh	r3, [r4, #12]
 800acf0:	f04f 30ff 	mov.w	r0, #4294967295
 800acf4:	e78e      	b.n	800ac14 <__sflush_r+0x1c>
 800acf6:	4407      	add	r7, r0
 800acf8:	eba8 0800 	sub.w	r8, r8, r0
 800acfc:	e7e9      	b.n	800acd2 <__sflush_r+0xda>
 800acfe:	bf00      	nop
 800ad00:	dfbffffe 	.word	0xdfbffffe

0800ad04 <_fflush_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	690b      	ldr	r3, [r1, #16]
 800ad08:	4605      	mov	r5, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	b913      	cbnz	r3, 800ad14 <_fflush_r+0x10>
 800ad0e:	2500      	movs	r5, #0
 800ad10:	4628      	mov	r0, r5
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	b118      	cbz	r0, 800ad1e <_fflush_r+0x1a>
 800ad16:	6a03      	ldr	r3, [r0, #32]
 800ad18:	b90b      	cbnz	r3, 800ad1e <_fflush_r+0x1a>
 800ad1a:	f7fe fa29 	bl	8009170 <__sinit>
 800ad1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0f3      	beq.n	800ad0e <_fflush_r+0xa>
 800ad26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad28:	07d0      	lsls	r0, r2, #31
 800ad2a:	d404      	bmi.n	800ad36 <_fflush_r+0x32>
 800ad2c:	0599      	lsls	r1, r3, #22
 800ad2e:	d402      	bmi.n	800ad36 <_fflush_r+0x32>
 800ad30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad32:	f7fe fb42 	bl	80093ba <__retarget_lock_acquire_recursive>
 800ad36:	4628      	mov	r0, r5
 800ad38:	4621      	mov	r1, r4
 800ad3a:	f7ff ff5d 	bl	800abf8 <__sflush_r>
 800ad3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad40:	07da      	lsls	r2, r3, #31
 800ad42:	4605      	mov	r5, r0
 800ad44:	d4e4      	bmi.n	800ad10 <_fflush_r+0xc>
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	059b      	lsls	r3, r3, #22
 800ad4a:	d4e1      	bmi.n	800ad10 <_fflush_r+0xc>
 800ad4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad4e:	f7fe fb35 	bl	80093bc <__retarget_lock_release_recursive>
 800ad52:	e7dd      	b.n	800ad10 <_fflush_r+0xc>

0800ad54 <memmove>:
 800ad54:	4288      	cmp	r0, r1
 800ad56:	b510      	push	{r4, lr}
 800ad58:	eb01 0402 	add.w	r4, r1, r2
 800ad5c:	d902      	bls.n	800ad64 <memmove+0x10>
 800ad5e:	4284      	cmp	r4, r0
 800ad60:	4623      	mov	r3, r4
 800ad62:	d807      	bhi.n	800ad74 <memmove+0x20>
 800ad64:	1e43      	subs	r3, r0, #1
 800ad66:	42a1      	cmp	r1, r4
 800ad68:	d008      	beq.n	800ad7c <memmove+0x28>
 800ad6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad72:	e7f8      	b.n	800ad66 <memmove+0x12>
 800ad74:	4402      	add	r2, r0
 800ad76:	4601      	mov	r1, r0
 800ad78:	428a      	cmp	r2, r1
 800ad7a:	d100      	bne.n	800ad7e <memmove+0x2a>
 800ad7c:	bd10      	pop	{r4, pc}
 800ad7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad86:	e7f7      	b.n	800ad78 <memmove+0x24>

0800ad88 <_sbrk_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d06      	ldr	r5, [pc, #24]	; (800ada4 <_sbrk_r+0x1c>)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	f7f7 fe74 	bl	8002a80 <_sbrk>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_sbrk_r+0x1a>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_sbrk_r+0x1a>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	200005d0 	.word	0x200005d0

0800ada8 <__assert_func>:
 800ada8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adaa:	4614      	mov	r4, r2
 800adac:	461a      	mov	r2, r3
 800adae:	4b09      	ldr	r3, [pc, #36]	; (800add4 <__assert_func+0x2c>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4605      	mov	r5, r0
 800adb4:	68d8      	ldr	r0, [r3, #12]
 800adb6:	b14c      	cbz	r4, 800adcc <__assert_func+0x24>
 800adb8:	4b07      	ldr	r3, [pc, #28]	; (800add8 <__assert_func+0x30>)
 800adba:	9100      	str	r1, [sp, #0]
 800adbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adc0:	4906      	ldr	r1, [pc, #24]	; (800addc <__assert_func+0x34>)
 800adc2:	462b      	mov	r3, r5
 800adc4:	f000 f85c 	bl	800ae80 <fiprintf>
 800adc8:	f000 f86c 	bl	800aea4 <abort>
 800adcc:	4b04      	ldr	r3, [pc, #16]	; (800ade0 <__assert_func+0x38>)
 800adce:	461c      	mov	r4, r3
 800add0:	e7f3      	b.n	800adba <__assert_func+0x12>
 800add2:	bf00      	nop
 800add4:	20000244 	.word	0x20000244
 800add8:	0800b7f0 	.word	0x0800b7f0
 800addc:	0800b7fd 	.word	0x0800b7fd
 800ade0:	0800b82b 	.word	0x0800b82b

0800ade4 <_calloc_r>:
 800ade4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ade6:	fba1 2402 	umull	r2, r4, r1, r2
 800adea:	b94c      	cbnz	r4, 800ae00 <_calloc_r+0x1c>
 800adec:	4611      	mov	r1, r2
 800adee:	9201      	str	r2, [sp, #4]
 800adf0:	f7fe fec2 	bl	8009b78 <_malloc_r>
 800adf4:	9a01      	ldr	r2, [sp, #4]
 800adf6:	4605      	mov	r5, r0
 800adf8:	b930      	cbnz	r0, 800ae08 <_calloc_r+0x24>
 800adfa:	4628      	mov	r0, r5
 800adfc:	b003      	add	sp, #12
 800adfe:	bd30      	pop	{r4, r5, pc}
 800ae00:	220c      	movs	r2, #12
 800ae02:	6002      	str	r2, [r0, #0]
 800ae04:	2500      	movs	r5, #0
 800ae06:	e7f8      	b.n	800adfa <_calloc_r+0x16>
 800ae08:	4621      	mov	r1, r4
 800ae0a:	f7fe fa4a 	bl	80092a2 <memset>
 800ae0e:	e7f4      	b.n	800adfa <_calloc_r+0x16>

0800ae10 <malloc>:
 800ae10:	4b02      	ldr	r3, [pc, #8]	; (800ae1c <malloc+0xc>)
 800ae12:	4601      	mov	r1, r0
 800ae14:	6818      	ldr	r0, [r3, #0]
 800ae16:	f7fe beaf 	b.w	8009b78 <_malloc_r>
 800ae1a:	bf00      	nop
 800ae1c:	20000244 	.word	0x20000244

0800ae20 <_realloc_r>:
 800ae20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae24:	4680      	mov	r8, r0
 800ae26:	4614      	mov	r4, r2
 800ae28:	460e      	mov	r6, r1
 800ae2a:	b921      	cbnz	r1, 800ae36 <_realloc_r+0x16>
 800ae2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae30:	4611      	mov	r1, r2
 800ae32:	f7fe bea1 	b.w	8009b78 <_malloc_r>
 800ae36:	b92a      	cbnz	r2, 800ae44 <_realloc_r+0x24>
 800ae38:	f7fe fada 	bl	80093f0 <_free_r>
 800ae3c:	4625      	mov	r5, r4
 800ae3e:	4628      	mov	r0, r5
 800ae40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae44:	f000 f835 	bl	800aeb2 <_malloc_usable_size_r>
 800ae48:	4284      	cmp	r4, r0
 800ae4a:	4607      	mov	r7, r0
 800ae4c:	d802      	bhi.n	800ae54 <_realloc_r+0x34>
 800ae4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae52:	d812      	bhi.n	800ae7a <_realloc_r+0x5a>
 800ae54:	4621      	mov	r1, r4
 800ae56:	4640      	mov	r0, r8
 800ae58:	f7fe fe8e 	bl	8009b78 <_malloc_r>
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d0ed      	beq.n	800ae3e <_realloc_r+0x1e>
 800ae62:	42bc      	cmp	r4, r7
 800ae64:	4622      	mov	r2, r4
 800ae66:	4631      	mov	r1, r6
 800ae68:	bf28      	it	cs
 800ae6a:	463a      	movcs	r2, r7
 800ae6c:	f7fe faa7 	bl	80093be <memcpy>
 800ae70:	4631      	mov	r1, r6
 800ae72:	4640      	mov	r0, r8
 800ae74:	f7fe fabc 	bl	80093f0 <_free_r>
 800ae78:	e7e1      	b.n	800ae3e <_realloc_r+0x1e>
 800ae7a:	4635      	mov	r5, r6
 800ae7c:	e7df      	b.n	800ae3e <_realloc_r+0x1e>
	...

0800ae80 <fiprintf>:
 800ae80:	b40e      	push	{r1, r2, r3}
 800ae82:	b503      	push	{r0, r1, lr}
 800ae84:	4601      	mov	r1, r0
 800ae86:	ab03      	add	r3, sp, #12
 800ae88:	4805      	ldr	r0, [pc, #20]	; (800aea0 <fiprintf+0x20>)
 800ae8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae8e:	6800      	ldr	r0, [r0, #0]
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	f000 f83f 	bl	800af14 <_vfiprintf_r>
 800ae96:	b002      	add	sp, #8
 800ae98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae9c:	b003      	add	sp, #12
 800ae9e:	4770      	bx	lr
 800aea0:	20000244 	.word	0x20000244

0800aea4 <abort>:
 800aea4:	b508      	push	{r3, lr}
 800aea6:	2006      	movs	r0, #6
 800aea8:	f000 fa0c 	bl	800b2c4 <raise>
 800aeac:	2001      	movs	r0, #1
 800aeae:	f7f7 fd6f 	bl	8002990 <_exit>

0800aeb2 <_malloc_usable_size_r>:
 800aeb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeb6:	1f18      	subs	r0, r3, #4
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	bfbc      	itt	lt
 800aebc:	580b      	ldrlt	r3, [r1, r0]
 800aebe:	18c0      	addlt	r0, r0, r3
 800aec0:	4770      	bx	lr

0800aec2 <__sfputc_r>:
 800aec2:	6893      	ldr	r3, [r2, #8]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	b410      	push	{r4}
 800aeca:	6093      	str	r3, [r2, #8]
 800aecc:	da08      	bge.n	800aee0 <__sfputc_r+0x1e>
 800aece:	6994      	ldr	r4, [r2, #24]
 800aed0:	42a3      	cmp	r3, r4
 800aed2:	db01      	blt.n	800aed8 <__sfputc_r+0x16>
 800aed4:	290a      	cmp	r1, #10
 800aed6:	d103      	bne.n	800aee0 <__sfputc_r+0x1e>
 800aed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aedc:	f000 b934 	b.w	800b148 <__swbuf_r>
 800aee0:	6813      	ldr	r3, [r2, #0]
 800aee2:	1c58      	adds	r0, r3, #1
 800aee4:	6010      	str	r0, [r2, #0]
 800aee6:	7019      	strb	r1, [r3, #0]
 800aee8:	4608      	mov	r0, r1
 800aeea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <__sfputs_r>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	4606      	mov	r6, r0
 800aef4:	460f      	mov	r7, r1
 800aef6:	4614      	mov	r4, r2
 800aef8:	18d5      	adds	r5, r2, r3
 800aefa:	42ac      	cmp	r4, r5
 800aefc:	d101      	bne.n	800af02 <__sfputs_r+0x12>
 800aefe:	2000      	movs	r0, #0
 800af00:	e007      	b.n	800af12 <__sfputs_r+0x22>
 800af02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af06:	463a      	mov	r2, r7
 800af08:	4630      	mov	r0, r6
 800af0a:	f7ff ffda 	bl	800aec2 <__sfputc_r>
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	d1f3      	bne.n	800aefa <__sfputs_r+0xa>
 800af12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af14 <_vfiprintf_r>:
 800af14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af18:	460d      	mov	r5, r1
 800af1a:	b09d      	sub	sp, #116	; 0x74
 800af1c:	4614      	mov	r4, r2
 800af1e:	4698      	mov	r8, r3
 800af20:	4606      	mov	r6, r0
 800af22:	b118      	cbz	r0, 800af2c <_vfiprintf_r+0x18>
 800af24:	6a03      	ldr	r3, [r0, #32]
 800af26:	b90b      	cbnz	r3, 800af2c <_vfiprintf_r+0x18>
 800af28:	f7fe f922 	bl	8009170 <__sinit>
 800af2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af2e:	07d9      	lsls	r1, r3, #31
 800af30:	d405      	bmi.n	800af3e <_vfiprintf_r+0x2a>
 800af32:	89ab      	ldrh	r3, [r5, #12]
 800af34:	059a      	lsls	r2, r3, #22
 800af36:	d402      	bmi.n	800af3e <_vfiprintf_r+0x2a>
 800af38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af3a:	f7fe fa3e 	bl	80093ba <__retarget_lock_acquire_recursive>
 800af3e:	89ab      	ldrh	r3, [r5, #12]
 800af40:	071b      	lsls	r3, r3, #28
 800af42:	d501      	bpl.n	800af48 <_vfiprintf_r+0x34>
 800af44:	692b      	ldr	r3, [r5, #16]
 800af46:	b99b      	cbnz	r3, 800af70 <_vfiprintf_r+0x5c>
 800af48:	4629      	mov	r1, r5
 800af4a:	4630      	mov	r0, r6
 800af4c:	f000 f93a 	bl	800b1c4 <__swsetup_r>
 800af50:	b170      	cbz	r0, 800af70 <_vfiprintf_r+0x5c>
 800af52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af54:	07dc      	lsls	r4, r3, #31
 800af56:	d504      	bpl.n	800af62 <_vfiprintf_r+0x4e>
 800af58:	f04f 30ff 	mov.w	r0, #4294967295
 800af5c:	b01d      	add	sp, #116	; 0x74
 800af5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af62:	89ab      	ldrh	r3, [r5, #12]
 800af64:	0598      	lsls	r0, r3, #22
 800af66:	d4f7      	bmi.n	800af58 <_vfiprintf_r+0x44>
 800af68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af6a:	f7fe fa27 	bl	80093bc <__retarget_lock_release_recursive>
 800af6e:	e7f3      	b.n	800af58 <_vfiprintf_r+0x44>
 800af70:	2300      	movs	r3, #0
 800af72:	9309      	str	r3, [sp, #36]	; 0x24
 800af74:	2320      	movs	r3, #32
 800af76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af7e:	2330      	movs	r3, #48	; 0x30
 800af80:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b134 <_vfiprintf_r+0x220>
 800af84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af88:	f04f 0901 	mov.w	r9, #1
 800af8c:	4623      	mov	r3, r4
 800af8e:	469a      	mov	sl, r3
 800af90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af94:	b10a      	cbz	r2, 800af9a <_vfiprintf_r+0x86>
 800af96:	2a25      	cmp	r2, #37	; 0x25
 800af98:	d1f9      	bne.n	800af8e <_vfiprintf_r+0x7a>
 800af9a:	ebba 0b04 	subs.w	fp, sl, r4
 800af9e:	d00b      	beq.n	800afb8 <_vfiprintf_r+0xa4>
 800afa0:	465b      	mov	r3, fp
 800afa2:	4622      	mov	r2, r4
 800afa4:	4629      	mov	r1, r5
 800afa6:	4630      	mov	r0, r6
 800afa8:	f7ff ffa2 	bl	800aef0 <__sfputs_r>
 800afac:	3001      	adds	r0, #1
 800afae:	f000 80a9 	beq.w	800b104 <_vfiprintf_r+0x1f0>
 800afb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afb4:	445a      	add	r2, fp
 800afb6:	9209      	str	r2, [sp, #36]	; 0x24
 800afb8:	f89a 3000 	ldrb.w	r3, [sl]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f000 80a1 	beq.w	800b104 <_vfiprintf_r+0x1f0>
 800afc2:	2300      	movs	r3, #0
 800afc4:	f04f 32ff 	mov.w	r2, #4294967295
 800afc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afcc:	f10a 0a01 	add.w	sl, sl, #1
 800afd0:	9304      	str	r3, [sp, #16]
 800afd2:	9307      	str	r3, [sp, #28]
 800afd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afd8:	931a      	str	r3, [sp, #104]	; 0x68
 800afda:	4654      	mov	r4, sl
 800afdc:	2205      	movs	r2, #5
 800afde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afe2:	4854      	ldr	r0, [pc, #336]	; (800b134 <_vfiprintf_r+0x220>)
 800afe4:	f7f5 f914 	bl	8000210 <memchr>
 800afe8:	9a04      	ldr	r2, [sp, #16]
 800afea:	b9d8      	cbnz	r0, 800b024 <_vfiprintf_r+0x110>
 800afec:	06d1      	lsls	r1, r2, #27
 800afee:	bf44      	itt	mi
 800aff0:	2320      	movmi	r3, #32
 800aff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff6:	0713      	lsls	r3, r2, #28
 800aff8:	bf44      	itt	mi
 800affa:	232b      	movmi	r3, #43	; 0x2b
 800affc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b000:	f89a 3000 	ldrb.w	r3, [sl]
 800b004:	2b2a      	cmp	r3, #42	; 0x2a
 800b006:	d015      	beq.n	800b034 <_vfiprintf_r+0x120>
 800b008:	9a07      	ldr	r2, [sp, #28]
 800b00a:	4654      	mov	r4, sl
 800b00c:	2000      	movs	r0, #0
 800b00e:	f04f 0c0a 	mov.w	ip, #10
 800b012:	4621      	mov	r1, r4
 800b014:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b018:	3b30      	subs	r3, #48	; 0x30
 800b01a:	2b09      	cmp	r3, #9
 800b01c:	d94d      	bls.n	800b0ba <_vfiprintf_r+0x1a6>
 800b01e:	b1b0      	cbz	r0, 800b04e <_vfiprintf_r+0x13a>
 800b020:	9207      	str	r2, [sp, #28]
 800b022:	e014      	b.n	800b04e <_vfiprintf_r+0x13a>
 800b024:	eba0 0308 	sub.w	r3, r0, r8
 800b028:	fa09 f303 	lsl.w	r3, r9, r3
 800b02c:	4313      	orrs	r3, r2
 800b02e:	9304      	str	r3, [sp, #16]
 800b030:	46a2      	mov	sl, r4
 800b032:	e7d2      	b.n	800afda <_vfiprintf_r+0xc6>
 800b034:	9b03      	ldr	r3, [sp, #12]
 800b036:	1d19      	adds	r1, r3, #4
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	9103      	str	r1, [sp, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	bfbb      	ittet	lt
 800b040:	425b      	neglt	r3, r3
 800b042:	f042 0202 	orrlt.w	r2, r2, #2
 800b046:	9307      	strge	r3, [sp, #28]
 800b048:	9307      	strlt	r3, [sp, #28]
 800b04a:	bfb8      	it	lt
 800b04c:	9204      	strlt	r2, [sp, #16]
 800b04e:	7823      	ldrb	r3, [r4, #0]
 800b050:	2b2e      	cmp	r3, #46	; 0x2e
 800b052:	d10c      	bne.n	800b06e <_vfiprintf_r+0x15a>
 800b054:	7863      	ldrb	r3, [r4, #1]
 800b056:	2b2a      	cmp	r3, #42	; 0x2a
 800b058:	d134      	bne.n	800b0c4 <_vfiprintf_r+0x1b0>
 800b05a:	9b03      	ldr	r3, [sp, #12]
 800b05c:	1d1a      	adds	r2, r3, #4
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	9203      	str	r2, [sp, #12]
 800b062:	2b00      	cmp	r3, #0
 800b064:	bfb8      	it	lt
 800b066:	f04f 33ff 	movlt.w	r3, #4294967295
 800b06a:	3402      	adds	r4, #2
 800b06c:	9305      	str	r3, [sp, #20]
 800b06e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b144 <_vfiprintf_r+0x230>
 800b072:	7821      	ldrb	r1, [r4, #0]
 800b074:	2203      	movs	r2, #3
 800b076:	4650      	mov	r0, sl
 800b078:	f7f5 f8ca 	bl	8000210 <memchr>
 800b07c:	b138      	cbz	r0, 800b08e <_vfiprintf_r+0x17a>
 800b07e:	9b04      	ldr	r3, [sp, #16]
 800b080:	eba0 000a 	sub.w	r0, r0, sl
 800b084:	2240      	movs	r2, #64	; 0x40
 800b086:	4082      	lsls	r2, r0
 800b088:	4313      	orrs	r3, r2
 800b08a:	3401      	adds	r4, #1
 800b08c:	9304      	str	r3, [sp, #16]
 800b08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b092:	4829      	ldr	r0, [pc, #164]	; (800b138 <_vfiprintf_r+0x224>)
 800b094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b098:	2206      	movs	r2, #6
 800b09a:	f7f5 f8b9 	bl	8000210 <memchr>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d03f      	beq.n	800b122 <_vfiprintf_r+0x20e>
 800b0a2:	4b26      	ldr	r3, [pc, #152]	; (800b13c <_vfiprintf_r+0x228>)
 800b0a4:	bb1b      	cbnz	r3, 800b0ee <_vfiprintf_r+0x1da>
 800b0a6:	9b03      	ldr	r3, [sp, #12]
 800b0a8:	3307      	adds	r3, #7
 800b0aa:	f023 0307 	bic.w	r3, r3, #7
 800b0ae:	3308      	adds	r3, #8
 800b0b0:	9303      	str	r3, [sp, #12]
 800b0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b4:	443b      	add	r3, r7
 800b0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0b8:	e768      	b.n	800af8c <_vfiprintf_r+0x78>
 800b0ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0be:	460c      	mov	r4, r1
 800b0c0:	2001      	movs	r0, #1
 800b0c2:	e7a6      	b.n	800b012 <_vfiprintf_r+0xfe>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	3401      	adds	r4, #1
 800b0c8:	9305      	str	r3, [sp, #20]
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	f04f 0c0a 	mov.w	ip, #10
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0d6:	3a30      	subs	r2, #48	; 0x30
 800b0d8:	2a09      	cmp	r2, #9
 800b0da:	d903      	bls.n	800b0e4 <_vfiprintf_r+0x1d0>
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d0c6      	beq.n	800b06e <_vfiprintf_r+0x15a>
 800b0e0:	9105      	str	r1, [sp, #20]
 800b0e2:	e7c4      	b.n	800b06e <_vfiprintf_r+0x15a>
 800b0e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e7f0      	b.n	800b0d0 <_vfiprintf_r+0x1bc>
 800b0ee:	ab03      	add	r3, sp, #12
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	462a      	mov	r2, r5
 800b0f4:	4b12      	ldr	r3, [pc, #72]	; (800b140 <_vfiprintf_r+0x22c>)
 800b0f6:	a904      	add	r1, sp, #16
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f3af 8000 	nop.w
 800b0fe:	4607      	mov	r7, r0
 800b100:	1c78      	adds	r0, r7, #1
 800b102:	d1d6      	bne.n	800b0b2 <_vfiprintf_r+0x19e>
 800b104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b106:	07d9      	lsls	r1, r3, #31
 800b108:	d405      	bmi.n	800b116 <_vfiprintf_r+0x202>
 800b10a:	89ab      	ldrh	r3, [r5, #12]
 800b10c:	059a      	lsls	r2, r3, #22
 800b10e:	d402      	bmi.n	800b116 <_vfiprintf_r+0x202>
 800b110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b112:	f7fe f953 	bl	80093bc <__retarget_lock_release_recursive>
 800b116:	89ab      	ldrh	r3, [r5, #12]
 800b118:	065b      	lsls	r3, r3, #25
 800b11a:	f53f af1d 	bmi.w	800af58 <_vfiprintf_r+0x44>
 800b11e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b120:	e71c      	b.n	800af5c <_vfiprintf_r+0x48>
 800b122:	ab03      	add	r3, sp, #12
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	462a      	mov	r2, r5
 800b128:	4b05      	ldr	r3, [pc, #20]	; (800b140 <_vfiprintf_r+0x22c>)
 800b12a:	a904      	add	r1, sp, #16
 800b12c:	4630      	mov	r0, r6
 800b12e:	f7ff fc41 	bl	800a9b4 <_printf_i>
 800b132:	e7e4      	b.n	800b0fe <_vfiprintf_r+0x1ea>
 800b134:	0800b7bd 	.word	0x0800b7bd
 800b138:	0800b7c7 	.word	0x0800b7c7
 800b13c:	00000000 	.word	0x00000000
 800b140:	0800aef1 	.word	0x0800aef1
 800b144:	0800b7c3 	.word	0x0800b7c3

0800b148 <__swbuf_r>:
 800b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14a:	460e      	mov	r6, r1
 800b14c:	4614      	mov	r4, r2
 800b14e:	4605      	mov	r5, r0
 800b150:	b118      	cbz	r0, 800b15a <__swbuf_r+0x12>
 800b152:	6a03      	ldr	r3, [r0, #32]
 800b154:	b90b      	cbnz	r3, 800b15a <__swbuf_r+0x12>
 800b156:	f7fe f80b 	bl	8009170 <__sinit>
 800b15a:	69a3      	ldr	r3, [r4, #24]
 800b15c:	60a3      	str	r3, [r4, #8]
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	071a      	lsls	r2, r3, #28
 800b162:	d525      	bpl.n	800b1b0 <__swbuf_r+0x68>
 800b164:	6923      	ldr	r3, [r4, #16]
 800b166:	b31b      	cbz	r3, 800b1b0 <__swbuf_r+0x68>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	6922      	ldr	r2, [r4, #16]
 800b16c:	1a98      	subs	r0, r3, r2
 800b16e:	6963      	ldr	r3, [r4, #20]
 800b170:	b2f6      	uxtb	r6, r6
 800b172:	4283      	cmp	r3, r0
 800b174:	4637      	mov	r7, r6
 800b176:	dc04      	bgt.n	800b182 <__swbuf_r+0x3a>
 800b178:	4621      	mov	r1, r4
 800b17a:	4628      	mov	r0, r5
 800b17c:	f7ff fdc2 	bl	800ad04 <_fflush_r>
 800b180:	b9e0      	cbnz	r0, 800b1bc <__swbuf_r+0x74>
 800b182:	68a3      	ldr	r3, [r4, #8]
 800b184:	3b01      	subs	r3, #1
 800b186:	60a3      	str	r3, [r4, #8]
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	1c5a      	adds	r2, r3, #1
 800b18c:	6022      	str	r2, [r4, #0]
 800b18e:	701e      	strb	r6, [r3, #0]
 800b190:	6962      	ldr	r2, [r4, #20]
 800b192:	1c43      	adds	r3, r0, #1
 800b194:	429a      	cmp	r2, r3
 800b196:	d004      	beq.n	800b1a2 <__swbuf_r+0x5a>
 800b198:	89a3      	ldrh	r3, [r4, #12]
 800b19a:	07db      	lsls	r3, r3, #31
 800b19c:	d506      	bpl.n	800b1ac <__swbuf_r+0x64>
 800b19e:	2e0a      	cmp	r6, #10
 800b1a0:	d104      	bne.n	800b1ac <__swbuf_r+0x64>
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f7ff fdad 	bl	800ad04 <_fflush_r>
 800b1aa:	b938      	cbnz	r0, 800b1bc <__swbuf_r+0x74>
 800b1ac:	4638      	mov	r0, r7
 800b1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f000 f806 	bl	800b1c4 <__swsetup_r>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d0d5      	beq.n	800b168 <__swbuf_r+0x20>
 800b1bc:	f04f 37ff 	mov.w	r7, #4294967295
 800b1c0:	e7f4      	b.n	800b1ac <__swbuf_r+0x64>
	...

0800b1c4 <__swsetup_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4b2a      	ldr	r3, [pc, #168]	; (800b270 <__swsetup_r+0xac>)
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	6818      	ldr	r0, [r3, #0]
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	b118      	cbz	r0, 800b1d8 <__swsetup_r+0x14>
 800b1d0:	6a03      	ldr	r3, [r0, #32]
 800b1d2:	b90b      	cbnz	r3, 800b1d8 <__swsetup_r+0x14>
 800b1d4:	f7fd ffcc 	bl	8009170 <__sinit>
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1de:	0718      	lsls	r0, r3, #28
 800b1e0:	d422      	bmi.n	800b228 <__swsetup_r+0x64>
 800b1e2:	06d9      	lsls	r1, r3, #27
 800b1e4:	d407      	bmi.n	800b1f6 <__swsetup_r+0x32>
 800b1e6:	2309      	movs	r3, #9
 800b1e8:	602b      	str	r3, [r5, #0]
 800b1ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f4:	e034      	b.n	800b260 <__swsetup_r+0x9c>
 800b1f6:	0758      	lsls	r0, r3, #29
 800b1f8:	d512      	bpl.n	800b220 <__swsetup_r+0x5c>
 800b1fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1fc:	b141      	cbz	r1, 800b210 <__swsetup_r+0x4c>
 800b1fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b202:	4299      	cmp	r1, r3
 800b204:	d002      	beq.n	800b20c <__swsetup_r+0x48>
 800b206:	4628      	mov	r0, r5
 800b208:	f7fe f8f2 	bl	80093f0 <_free_r>
 800b20c:	2300      	movs	r3, #0
 800b20e:	6363      	str	r3, [r4, #52]	; 0x34
 800b210:	89a3      	ldrh	r3, [r4, #12]
 800b212:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b216:	81a3      	strh	r3, [r4, #12]
 800b218:	2300      	movs	r3, #0
 800b21a:	6063      	str	r3, [r4, #4]
 800b21c:	6923      	ldr	r3, [r4, #16]
 800b21e:	6023      	str	r3, [r4, #0]
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	f043 0308 	orr.w	r3, r3, #8
 800b226:	81a3      	strh	r3, [r4, #12]
 800b228:	6923      	ldr	r3, [r4, #16]
 800b22a:	b94b      	cbnz	r3, 800b240 <__swsetup_r+0x7c>
 800b22c:	89a3      	ldrh	r3, [r4, #12]
 800b22e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b236:	d003      	beq.n	800b240 <__swsetup_r+0x7c>
 800b238:	4621      	mov	r1, r4
 800b23a:	4628      	mov	r0, r5
 800b23c:	f000 f884 	bl	800b348 <__smakebuf_r>
 800b240:	89a0      	ldrh	r0, [r4, #12]
 800b242:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b246:	f010 0301 	ands.w	r3, r0, #1
 800b24a:	d00a      	beq.n	800b262 <__swsetup_r+0x9e>
 800b24c:	2300      	movs	r3, #0
 800b24e:	60a3      	str	r3, [r4, #8]
 800b250:	6963      	ldr	r3, [r4, #20]
 800b252:	425b      	negs	r3, r3
 800b254:	61a3      	str	r3, [r4, #24]
 800b256:	6923      	ldr	r3, [r4, #16]
 800b258:	b943      	cbnz	r3, 800b26c <__swsetup_r+0xa8>
 800b25a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b25e:	d1c4      	bne.n	800b1ea <__swsetup_r+0x26>
 800b260:	bd38      	pop	{r3, r4, r5, pc}
 800b262:	0781      	lsls	r1, r0, #30
 800b264:	bf58      	it	pl
 800b266:	6963      	ldrpl	r3, [r4, #20]
 800b268:	60a3      	str	r3, [r4, #8]
 800b26a:	e7f4      	b.n	800b256 <__swsetup_r+0x92>
 800b26c:	2000      	movs	r0, #0
 800b26e:	e7f7      	b.n	800b260 <__swsetup_r+0x9c>
 800b270:	20000244 	.word	0x20000244

0800b274 <_raise_r>:
 800b274:	291f      	cmp	r1, #31
 800b276:	b538      	push	{r3, r4, r5, lr}
 800b278:	4604      	mov	r4, r0
 800b27a:	460d      	mov	r5, r1
 800b27c:	d904      	bls.n	800b288 <_raise_r+0x14>
 800b27e:	2316      	movs	r3, #22
 800b280:	6003      	str	r3, [r0, #0]
 800b282:	f04f 30ff 	mov.w	r0, #4294967295
 800b286:	bd38      	pop	{r3, r4, r5, pc}
 800b288:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b28a:	b112      	cbz	r2, 800b292 <_raise_r+0x1e>
 800b28c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b290:	b94b      	cbnz	r3, 800b2a6 <_raise_r+0x32>
 800b292:	4620      	mov	r0, r4
 800b294:	f000 f830 	bl	800b2f8 <_getpid_r>
 800b298:	462a      	mov	r2, r5
 800b29a:	4601      	mov	r1, r0
 800b29c:	4620      	mov	r0, r4
 800b29e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2a2:	f000 b817 	b.w	800b2d4 <_kill_r>
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d00a      	beq.n	800b2c0 <_raise_r+0x4c>
 800b2aa:	1c59      	adds	r1, r3, #1
 800b2ac:	d103      	bne.n	800b2b6 <_raise_r+0x42>
 800b2ae:	2316      	movs	r3, #22
 800b2b0:	6003      	str	r3, [r0, #0]
 800b2b2:	2001      	movs	r0, #1
 800b2b4:	e7e7      	b.n	800b286 <_raise_r+0x12>
 800b2b6:	2400      	movs	r4, #0
 800b2b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2bc:	4628      	mov	r0, r5
 800b2be:	4798      	blx	r3
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	e7e0      	b.n	800b286 <_raise_r+0x12>

0800b2c4 <raise>:
 800b2c4:	4b02      	ldr	r3, [pc, #8]	; (800b2d0 <raise+0xc>)
 800b2c6:	4601      	mov	r1, r0
 800b2c8:	6818      	ldr	r0, [r3, #0]
 800b2ca:	f7ff bfd3 	b.w	800b274 <_raise_r>
 800b2ce:	bf00      	nop
 800b2d0:	20000244 	.word	0x20000244

0800b2d4 <_kill_r>:
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	4d07      	ldr	r5, [pc, #28]	; (800b2f4 <_kill_r+0x20>)
 800b2d8:	2300      	movs	r3, #0
 800b2da:	4604      	mov	r4, r0
 800b2dc:	4608      	mov	r0, r1
 800b2de:	4611      	mov	r1, r2
 800b2e0:	602b      	str	r3, [r5, #0]
 800b2e2:	f7f7 fb45 	bl	8002970 <_kill>
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	d102      	bne.n	800b2f0 <_kill_r+0x1c>
 800b2ea:	682b      	ldr	r3, [r5, #0]
 800b2ec:	b103      	cbz	r3, 800b2f0 <_kill_r+0x1c>
 800b2ee:	6023      	str	r3, [r4, #0]
 800b2f0:	bd38      	pop	{r3, r4, r5, pc}
 800b2f2:	bf00      	nop
 800b2f4:	200005d0 	.word	0x200005d0

0800b2f8 <_getpid_r>:
 800b2f8:	f7f7 bb32 	b.w	8002960 <_getpid>

0800b2fc <__swhatbuf_r>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	460c      	mov	r4, r1
 800b300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b304:	2900      	cmp	r1, #0
 800b306:	b096      	sub	sp, #88	; 0x58
 800b308:	4615      	mov	r5, r2
 800b30a:	461e      	mov	r6, r3
 800b30c:	da0d      	bge.n	800b32a <__swhatbuf_r+0x2e>
 800b30e:	89a3      	ldrh	r3, [r4, #12]
 800b310:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b314:	f04f 0100 	mov.w	r1, #0
 800b318:	bf0c      	ite	eq
 800b31a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b31e:	2340      	movne	r3, #64	; 0x40
 800b320:	2000      	movs	r0, #0
 800b322:	6031      	str	r1, [r6, #0]
 800b324:	602b      	str	r3, [r5, #0]
 800b326:	b016      	add	sp, #88	; 0x58
 800b328:	bd70      	pop	{r4, r5, r6, pc}
 800b32a:	466a      	mov	r2, sp
 800b32c:	f000 f848 	bl	800b3c0 <_fstat_r>
 800b330:	2800      	cmp	r0, #0
 800b332:	dbec      	blt.n	800b30e <__swhatbuf_r+0x12>
 800b334:	9901      	ldr	r1, [sp, #4]
 800b336:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b33a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b33e:	4259      	negs	r1, r3
 800b340:	4159      	adcs	r1, r3
 800b342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b346:	e7eb      	b.n	800b320 <__swhatbuf_r+0x24>

0800b348 <__smakebuf_r>:
 800b348:	898b      	ldrh	r3, [r1, #12]
 800b34a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b34c:	079d      	lsls	r5, r3, #30
 800b34e:	4606      	mov	r6, r0
 800b350:	460c      	mov	r4, r1
 800b352:	d507      	bpl.n	800b364 <__smakebuf_r+0x1c>
 800b354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	6123      	str	r3, [r4, #16]
 800b35c:	2301      	movs	r3, #1
 800b35e:	6163      	str	r3, [r4, #20]
 800b360:	b002      	add	sp, #8
 800b362:	bd70      	pop	{r4, r5, r6, pc}
 800b364:	ab01      	add	r3, sp, #4
 800b366:	466a      	mov	r2, sp
 800b368:	f7ff ffc8 	bl	800b2fc <__swhatbuf_r>
 800b36c:	9900      	ldr	r1, [sp, #0]
 800b36e:	4605      	mov	r5, r0
 800b370:	4630      	mov	r0, r6
 800b372:	f7fe fc01 	bl	8009b78 <_malloc_r>
 800b376:	b948      	cbnz	r0, 800b38c <__smakebuf_r+0x44>
 800b378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b37c:	059a      	lsls	r2, r3, #22
 800b37e:	d4ef      	bmi.n	800b360 <__smakebuf_r+0x18>
 800b380:	f023 0303 	bic.w	r3, r3, #3
 800b384:	f043 0302 	orr.w	r3, r3, #2
 800b388:	81a3      	strh	r3, [r4, #12]
 800b38a:	e7e3      	b.n	800b354 <__smakebuf_r+0xc>
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	6020      	str	r0, [r4, #0]
 800b390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b394:	81a3      	strh	r3, [r4, #12]
 800b396:	9b00      	ldr	r3, [sp, #0]
 800b398:	6163      	str	r3, [r4, #20]
 800b39a:	9b01      	ldr	r3, [sp, #4]
 800b39c:	6120      	str	r0, [r4, #16]
 800b39e:	b15b      	cbz	r3, 800b3b8 <__smakebuf_r+0x70>
 800b3a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f000 f81d 	bl	800b3e4 <_isatty_r>
 800b3aa:	b128      	cbz	r0, 800b3b8 <__smakebuf_r+0x70>
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	f023 0303 	bic.w	r3, r3, #3
 800b3b2:	f043 0301 	orr.w	r3, r3, #1
 800b3b6:	81a3      	strh	r3, [r4, #12]
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	431d      	orrs	r5, r3
 800b3bc:	81a5      	strh	r5, [r4, #12]
 800b3be:	e7cf      	b.n	800b360 <__smakebuf_r+0x18>

0800b3c0 <_fstat_r>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	4d07      	ldr	r5, [pc, #28]	; (800b3e0 <_fstat_r+0x20>)
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	4608      	mov	r0, r1
 800b3ca:	4611      	mov	r1, r2
 800b3cc:	602b      	str	r3, [r5, #0]
 800b3ce:	f7f7 fb2e 	bl	8002a2e <_fstat>
 800b3d2:	1c43      	adds	r3, r0, #1
 800b3d4:	d102      	bne.n	800b3dc <_fstat_r+0x1c>
 800b3d6:	682b      	ldr	r3, [r5, #0]
 800b3d8:	b103      	cbz	r3, 800b3dc <_fstat_r+0x1c>
 800b3da:	6023      	str	r3, [r4, #0]
 800b3dc:	bd38      	pop	{r3, r4, r5, pc}
 800b3de:	bf00      	nop
 800b3e0:	200005d0 	.word	0x200005d0

0800b3e4 <_isatty_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	4d06      	ldr	r5, [pc, #24]	; (800b400 <_isatty_r+0x1c>)
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	4608      	mov	r0, r1
 800b3ee:	602b      	str	r3, [r5, #0]
 800b3f0:	f7f7 fb2d 	bl	8002a4e <_isatty>
 800b3f4:	1c43      	adds	r3, r0, #1
 800b3f6:	d102      	bne.n	800b3fe <_isatty_r+0x1a>
 800b3f8:	682b      	ldr	r3, [r5, #0]
 800b3fa:	b103      	cbz	r3, 800b3fe <_isatty_r+0x1a>
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	bd38      	pop	{r3, r4, r5, pc}
 800b400:	200005d0 	.word	0x200005d0

0800b404 <_init>:
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	bf00      	nop
 800b408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40a:	bc08      	pop	{r3}
 800b40c:	469e      	mov	lr, r3
 800b40e:	4770      	bx	lr

0800b410 <_fini>:
 800b410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b412:	bf00      	nop
 800b414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b416:	bc08      	pop	{r3}
 800b418:	469e      	mov	lr, r3
 800b41a:	4770      	bx	lr
