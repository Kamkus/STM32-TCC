
TCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b274  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800b448  0800b448  0001b448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b854  0800b854  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800b854  0800b854  0001b854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b85c  0800b85c  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b85c  0800b85c  0001b85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b860  0800b860  0001b860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800b864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000248  0800baac  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800baac  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159a3  00000000  00000000  000202bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003125  00000000  00000000  00035c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  00038d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e18  00000000  00000000  00039fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a2f  00000000  00000000  0003add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000179be  00000000  00000000  000637ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6e44  00000000  00000000  0007b1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e08  00000000  00000000  00172004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00177e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b42c 	.word	0x0800b42c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	0800b42c 	.word	0x0800b42c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b9a6 	b.w	8000ff0 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9e08      	ldr	r6, [sp, #32]
 8000d2e:	460d      	mov	r5, r1
 8000d30:	4604      	mov	r4, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14a      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0xe2>
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	b143      	cbz	r3, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d48:	f1c3 0220 	rsb	r2, r3, #32
 8000d4c:	409f      	lsls	r7, r3
 8000d4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d52:	4317      	orrs	r7, r2
 8000d54:	409c      	lsls	r4, r3
 8000d56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d5a:	fa1f f58c 	uxth.w	r5, ip
 8000d5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d62:	0c22      	lsrs	r2, r4, #16
 8000d64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d6c:	fb01 f005 	mul.w	r0, r1, r5
 8000d70:	4290      	cmp	r0, r2
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x62>
 8000d74:	eb1c 0202 	adds.w	r2, ip, r2
 8000d78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d7c:	f080 811c 	bcs.w	8000fb8 <__udivmoddi4+0x290>
 8000d80:	4290      	cmp	r0, r2
 8000d82:	f240 8119 	bls.w	8000fb8 <__udivmoddi4+0x290>
 8000d86:	3902      	subs	r1, #2
 8000d88:	4462      	add	r2, ip
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	b2a4      	uxth	r4, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9a:	fb00 f505 	mul.w	r5, r0, r5
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x90>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000daa:	f080 8107 	bcs.w	8000fbc <__udivmoddi4+0x294>
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	f240 8104 	bls.w	8000fbc <__udivmoddi4+0x294>
 8000db4:	4464      	add	r4, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11e      	cbz	r6, 8000dca <__udivmoddi4+0xa2>
 8000dc2:	40dc      	lsrs	r4, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0xbc>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f000 80ed 	beq.w	8000fb2 <__udivmoddi4+0x28a>
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e9c6 0500 	strd	r0, r5, [r6]
 8000dde:	4608      	mov	r0, r1
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d149      	bne.n	8000e80 <__udivmoddi4+0x158>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	d302      	bcc.n	8000df6 <__udivmoddi4+0xce>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f200 80f8 	bhi.w	8000fe6 <__udivmoddi4+0x2be>
 8000df6:	1a84      	subs	r4, r0, r2
 8000df8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4617      	mov	r7, r2
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d0e2      	beq.n	8000dca <__udivmoddi4+0xa2>
 8000e04:	e9c6 4700 	strd	r4, r7, [r6]
 8000e08:	e7df      	b.n	8000dca <__udivmoddi4+0xa2>
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xe6>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f382 	clz	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x210>
 8000e18:	1a8a      	subs	r2, r1, r2
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	2101      	movs	r1, #1
 8000e24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e28:	fb07 2015 	mls	r0, r7, r5, r2
 8000e2c:	0c22      	lsrs	r2, r4, #16
 8000e2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e32:	fb0e f005 	mul.w	r0, lr, r5
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x124>
 8000e3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x122>
 8000e44:	4290      	cmp	r0, r2
 8000e46:	f200 80cb 	bhi.w	8000fe0 <__udivmoddi4+0x2b8>
 8000e4a:	4645      	mov	r5, r8
 8000e4c:	1a12      	subs	r2, r2, r0
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e54:	fb07 2210 	mls	r2, r7, r0, r2
 8000e58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e60:	45a6      	cmp	lr, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x14e>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x14c>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f200 80bb 	bhi.w	8000fea <__udivmoddi4+0x2c2>
 8000e74:	4610      	mov	r0, r2
 8000e76:	eba4 040e 	sub.w	r4, r4, lr
 8000e7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7e:	e79f      	b.n	8000dc0 <__udivmoddi4+0x98>
 8000e80:	f1c1 0720 	rsb	r7, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e92:	fa20 f307 	lsr.w	r3, r0, r7
 8000e96:	40fd      	lsrs	r5, r7
 8000e98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eb0:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb4:	42a5      	cmp	r5, r4
 8000eb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eba:	fa00 f001 	lsl.w	r0, r0, r1
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b0>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec8:	f080 8088 	bcs.w	8000fdc <__udivmoddi4+0x2b4>
 8000ecc:	42a5      	cmp	r5, r4
 8000ece:	f240 8085 	bls.w	8000fdc <__udivmoddi4+0x2b4>
 8000ed2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed6:	4464      	add	r4, ip
 8000ed8:	1b64      	subs	r4, r4, r5
 8000eda:	b29d      	uxth	r5, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1da>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef8:	d26c      	bcs.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	d96a      	bls.n	8000fd4 <__udivmoddi4+0x2ac>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4464      	add	r4, ip
 8000f02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f06:	fba3 9502 	umull	r9, r5, r3, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	42ac      	cmp	r4, r5
 8000f10:	46c8      	mov	r8, r9
 8000f12:	46ae      	mov	lr, r5
 8000f14:	d356      	bcc.n	8000fc4 <__udivmoddi4+0x29c>
 8000f16:	d053      	beq.n	8000fc0 <__udivmoddi4+0x298>
 8000f18:	b156      	cbz	r6, 8000f30 <__udivmoddi4+0x208>
 8000f1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f22:	fa04 f707 	lsl.w	r7, r4, r7
 8000f26:	40ca      	lsrs	r2, r1
 8000f28:	40cc      	lsrs	r4, r1
 8000f2a:	4317      	orrs	r7, r2
 8000f2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f30:	4618      	mov	r0, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f38:	f1c3 0120 	rsb	r1, r3, #32
 8000f3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f40:	fa20 f201 	lsr.w	r2, r0, r1
 8000f44:	fa25 f101 	lsr.w	r1, r5, r1
 8000f48:	409d      	lsls	r5, r3
 8000f4a:	432a      	orrs	r2, r5
 8000f4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f50:	fa1f fe8c 	uxth.w	lr, ip
 8000f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f58:	fb07 1510 	mls	r5, r7, r0, r1
 8000f5c:	0c11      	lsrs	r1, r2, #16
 8000f5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f62:	fb00 f50e 	mul.w	r5, r0, lr
 8000f66:	428d      	cmp	r5, r1
 8000f68:	fa04 f403 	lsl.w	r4, r4, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x258>
 8000f6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f76:	d22f      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f78:	428d      	cmp	r5, r1
 8000f7a:	d92d      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4461      	add	r1, ip
 8000f80:	1b49      	subs	r1, r1, r5
 8000f82:	b292      	uxth	r2, r2
 8000f84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f88:	fb07 1115 	mls	r1, r7, r5, r1
 8000f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f90:	fb05 f10e 	mul.w	r1, r5, lr
 8000f94:	4291      	cmp	r1, r2
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x282>
 8000f98:	eb1c 0202 	adds.w	r2, ip, r2
 8000f9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fa0:	d216      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa2:	4291      	cmp	r1, r2
 8000fa4:	d914      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000fa6:	3d02      	subs	r5, #2
 8000fa8:	4462      	add	r2, ip
 8000faa:	1a52      	subs	r2, r2, r1
 8000fac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fb0:	e738      	b.n	8000e24 <__udivmoddi4+0xfc>
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e708      	b.n	8000dca <__udivmoddi4+0xa2>
 8000fb8:	4639      	mov	r1, r7
 8000fba:	e6e6      	b.n	8000d8a <__udivmoddi4+0x62>
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	e6fb      	b.n	8000db8 <__udivmoddi4+0x90>
 8000fc0:	4548      	cmp	r0, r9
 8000fc2:	d2a9      	bcs.n	8000f18 <__udivmoddi4+0x1f0>
 8000fc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	e7a3      	b.n	8000f18 <__udivmoddi4+0x1f0>
 8000fd0:	4645      	mov	r5, r8
 8000fd2:	e7ea      	b.n	8000faa <__udivmoddi4+0x282>
 8000fd4:	462b      	mov	r3, r5
 8000fd6:	e794      	b.n	8000f02 <__udivmoddi4+0x1da>
 8000fd8:	4640      	mov	r0, r8
 8000fda:	e7d1      	b.n	8000f80 <__udivmoddi4+0x258>
 8000fdc:	46d0      	mov	r8, sl
 8000fde:	e77b      	b.n	8000ed8 <__udivmoddi4+0x1b0>
 8000fe0:	3d02      	subs	r5, #2
 8000fe2:	4462      	add	r2, ip
 8000fe4:	e732      	b.n	8000e4c <__udivmoddi4+0x124>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e70a      	b.n	8000e00 <__udivmoddi4+0xd8>
 8000fea:	4464      	add	r4, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e742      	b.n	8000e76 <__udivmoddi4+0x14e>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 fa47 	bl	8001490 <null_ptr_check>
 8001002:	4603      	mov	r3, r0
 8001004:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d117      	bne.n	800103e <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	20d0      	movs	r0, #208	; 0xd0
 8001016:	f000 f818 	bl	800104a <bmp2_get_regs>
 800101a:	4603      	mov	r3, r0
 800101c:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10b      	bne.n	800103e <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b58      	cmp	r3, #88	; 0x58
 800102c:	d105      	bne.n	800103a <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 fa79 	bl	8001526 <get_calib_param>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e001      	b.n	800103e <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 800103a:	23fc      	movs	r3, #252	; 0xfc
 800103c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800104a:	b590      	push	{r4, r7, lr}
 800104c:	b087      	sub	sp, #28
 800104e:	af00      	add	r7, sp, #0
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f000 fa18 	bl	8001490 <null_ptr_check>
 8001060:	4603      	mov	r3, r0
 8001062:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8001064:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d11e      	bne.n	80010aa <bmp2_get_regs+0x60>
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d01b      	beq.n	80010aa <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d103      	bne.n	8001082 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001080:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68dc      	ldr	r4, [r3, #12]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	7bf8      	ldrb	r0, [r7, #15]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	47a0      	blx	r4
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80010a4:	23fe      	movs	r3, #254	; 0xfe
 80010a6:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010a8:	e001      	b.n	80010ae <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010aa:	23ff      	movs	r3, #255	; 0xff
 80010ac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}

080010ba <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80010ba:	b590      	push	{r4, r7, lr}
 80010bc:	b08b      	sub	sp, #44	; 0x2c
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d901      	bls.n	80010d2 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 80010ce:	2304      	movs	r3, #4
 80010d0:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 80010d2:	6838      	ldr	r0, [r7, #0]
 80010d4:	f000 f9dc 	bl	8001490 <null_ptr_check>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80010de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d150      	bne.n	8001188 <bmp2_set_regs+0xce>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d04d      	beq.n	8001188 <bmp2_set_regs+0xce>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d04a      	beq.n	8001188 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d043      	beq.n	8001180 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d114      	bne.n	8001130 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001106:	2300      	movs	r3, #0
 8001108:	77fb      	strb	r3, [r7, #31]
 800110a:	e00d      	b.n	8001128 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 800110c:	7ffb      	ldrb	r3, [r7, #31]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	4413      	add	r3, r2
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	7ffb      	ldrb	r3, [r7, #31]
 8001116:	68f9      	ldr	r1, [r7, #12]
 8001118:	440b      	add	r3, r1
 800111a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001122:	7ffb      	ldrb	r3, [r7, #31]
 8001124:	3301      	adds	r3, #1
 8001126:	77fb      	strb	r3, [r7, #31]
 8001128:	7ffb      	ldrb	r3, [r7, #31]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8ed      	bhi.n	800110c <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d90b      	bls.n	800114e <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8001136:	f107 0114 	add.w	r1, r7, #20
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f9c6 	bl	80014d0 <interleave_data>
                temp_len = ((len * 2) - 1);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	3b01      	subs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
 800114c:	e001      	b.n	8001152 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	691c      	ldr	r4, [r3, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	7818      	ldrb	r0, [r3, #0]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f107 0114 	add.w	r1, r7, #20
 8001162:	6a3a      	ldr	r2, [r7, #32]
 8001164:	47a0      	blx	r4
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00b      	beq.n	8001190 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8001178:	23fe      	movs	r3, #254	; 0xfe
 800117a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 800117e:	e007      	b.n	8001190 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001180:	23fd      	movs	r3, #253	; 0xfd
 8001182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001186:	e003      	b.n	8001190 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001188:	23ff      	movs	r3, #255	; 0xff
 800118a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800118e:	e000      	b.n	8001192 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001190:	bf00      	nop
    }

    return rslt;
 8001192:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001196:	4618      	mov	r0, r3
 8001198:	372c      	adds	r7, #44	; 0x2c
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}

0800119e <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80011a6:	23e0      	movs	r3, #224	; 0xe0
 80011a8:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80011aa:	23b6      	movs	r3, #182	; 0xb6
 80011ac:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011ae:	f107 010d 	add.w	r1, r7, #13
 80011b2:	f107 000e 	add.w	r0, r7, #14
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f7ff ff7e 	bl	80010ba <bmp2_set_regs>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80011d8:	2300      	movs	r3, #0
 80011da:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d02d      	beq.n	800123e <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80011e2:	f107 010c 	add.w	r1, r7, #12
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2202      	movs	r2, #2
 80011ea:	20f4      	movs	r0, #244	; 0xf4
 80011ec:	f7ff ff2d 	bl	800104a <bmp2_get_regs>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80011f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d122      	bne.n	8001242 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 80011fc:	7b3b      	ldrb	r3, [r7, #12]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	b2da      	uxtb	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8001206:	7b3b      	ldrb	r3, [r7, #12]
 8001208:	109b      	asrs	r3, r3, #2
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	b2da      	uxtb	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8001216:	7b7b      	ldrb	r3, [r7, #13]
 8001218:	095b      	lsrs	r3, r3, #5
 800121a:	b2da      	uxtb	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001220:	7b7b      	ldrb	r3, [r7, #13]
 8001222:	109b      	asrs	r3, r3, #2
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	b2da      	uxtb	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001230:	7b7b      	ldrb	r3, [r7, #13]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	715a      	strb	r2, [r3, #5]
 800123c:	e001      	b.n	8001242 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800123e:	23ff      	movs	r3, #255	; 0xff
 8001240:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f9fd 	bl	800165c <conf_sensor>
 8001262:	4603      	mov	r3, r0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d01b      	beq.n	80012b4 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 800127c:	f107 010e 	add.w	r1, r7, #14
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2201      	movs	r2, #1
 8001284:	20f3      	movs	r0, #243	; 0xf3
 8001286:	f7ff fee0 	bl	800104a <bmp2_get_regs>
 800128a:	4603      	mov	r3, r0
 800128c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d110      	bne.n	80012b8 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	10db      	asrs	r3, r3, #3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	705a      	strb	r2, [r3, #1]
 80012b2:	e001      	b.n	80012b8 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012b4:	23ff      	movs	r3, #255	; 0xff
 80012b6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	68b9      	ldr	r1, [r7, #8]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f9bf 	bl	800165c <conf_sensor>
 80012de:	4603      	mov	r3, r0
 80012e0:	75fb      	strb	r3, [r7, #23]

    return rslt;
 80012e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	2300      	movs	r3, #0
 80012fe:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d024      	beq.n	800135a <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001310:	f107 0110 	add.w	r1, r7, #16
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2206      	movs	r2, #6
 8001318:	20f7      	movs	r0, #247	; 0xf7
 800131a:	f7ff fe96 	bl	800104a <bmp2_get_regs>
 800131e:	4603      	mov	r3, r0
 8001320:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001322:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d119      	bne.n	800135e <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 800132a:	f107 0208 	add.w	r2, r7, #8
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fab9 	bl	80018ac <parse_sensor_data>
 800133a:	4603      	mov	r3, r0
 800133c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 800133e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10b      	bne.n	800135e <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f80b 	bl	800136a <bmp2_compensate_data>
 8001354:	4603      	mov	r3, r0
 8001356:	75fb      	strb	r3, [r7, #23]
 8001358:	e001      	b.n	800135e <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800135a:	23ff      	movs	r3, #255	; 0xff
 800135c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800135e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f88a 	bl	8001490 <null_ptr_check>
 800137c:	4603      	mov	r3, r0
 800137e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001380:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d129      	bne.n	80013dc <bmp2_compensate_data+0x72>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d026      	beq.n	80013dc <bmp2_compensate_data+0x72>
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d023      	beq.n	80013dc <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3308      	adds	r3, #8
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	68f9      	ldr	r1, [r7, #12]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fabb 	bl	8001934 <compensate_temperature>
 80013be:	4603      	mov	r3, r0
 80013c0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80013c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10a      	bne.n	80013e0 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	68f9      	ldr	r1, [r7, #12]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fba5 	bl	8001b20 <compensate_pressure>
 80013d6:	4603      	mov	r3, r0
 80013d8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 80013da:	e001      	b.n	80013e0 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013dc:	23ff      	movs	r3, #255	; 0xff
 80013de:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80013e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 80013ec:	b5b0      	push	{r4, r5, r7, lr}
 80013ee:	b092      	sub	sp, #72	; 0x48
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <bmp2_compute_meas_time+0x9c>)
 80013fa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80013fe:	461d      	mov	r5, r3
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001408:	4b20      	ldr	r3, [pc, #128]	; (800148c <bmp2_compute_meas_time+0xa0>)
 800140a:	f107 0410 	add.w	r4, r7, #16
 800140e:	461d      	mov	r5, r3
 8001410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001414:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f837 	bl	8001490 <null_ptr_check>
 8001422:	4603      	mov	r3, r0
 8001424:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001428:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800142c:	2b00      	cmp	r3, #0
 800142e:	d122      	bne.n	8001476 <bmp2_compute_meas_time+0x8a>
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01f      	beq.n	8001476 <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7e1b      	ldrb	r3, [r3, #24]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d111      	bne.n	8001462 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	78db      	ldrb	r3, [r3, #3]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	3348      	adds	r3, #72	; 0x48
 8001446:	443b      	add	r3, r7
 8001448:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	789b      	ldrb	r3, [r3, #2]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	3348      	adds	r3, #72	; 0x48
 8001454:	443b      	add	r3, r7
 8001456:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800145a:	441a      	add	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001460:	e00c      	b.n	800147c <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	78db      	ldrb	r3, [r3, #3]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	3348      	adds	r3, #72	; 0x48
 800146a:	443b      	add	r3, r7
 800146c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001474:	e002      	b.n	800147c <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001476:	23ff      	movs	r3, #255	; 0xff
 8001478:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 800147c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001480:	4618      	mov	r0, r3
 8001482:	3748      	adds	r7, #72	; 0x48
 8001484:	46bd      	mov	sp, r7
 8001486:	bdb0      	pop	{r4, r5, r7, pc}
 8001488:	0800b448 	.word	0x0800b448
 800148c:	0800b45c 	.word	0x0800b45c

08001490 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <null_ptr_check+0x26>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <null_ptr_check+0x26>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <null_ptr_check+0x26>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80014b6:	23ff      	movs	r3, #255	; 0xff
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e001      	b.n	80014c0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80014de:	2301      	movs	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e015      	b.n	8001510 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	441a      	add	r2, r3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	3b01      	subs	r3, #1
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	440b      	add	r3, r1
 80014f4:	7812      	ldrb	r2, [r2, #0]
 80014f6:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	441a      	add	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	440b      	add	r3, r1
 8001506:	7812      	ldrb	r2, [r2, #0]
 8001508:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d3e5      	bcc.n	80014e4 <interleave_data+0x14>
    }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b08a      	sub	sp, #40	; 0x28
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001544:	f107 010c 	add.w	r1, r7, #12
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2219      	movs	r2, #25
 800154c:	2088      	movs	r0, #136	; 0x88
 800154e:	f7ff fd7c 	bl	800104a <bmp2_get_regs>
 8001552:	4603      	mov	r3, r0
 8001554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 8001558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800155c:	2b00      	cmp	r3, #0
 800155e:	d177      	bne.n	8001650 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001560:	7b7b      	ldrb	r3, [r7, #13]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	7b3b      	ldrb	r3, [r7, #12]
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b21b      	sxth	r3, r3
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7bbb      	ldrb	r3, [r7, #14]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21a      	sxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 8001586:	7c7b      	ldrb	r3, [r7, #17]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	7c3b      	ldrb	r3, [r7, #16]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21a      	sxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7cbb      	ldrb	r3, [r7, #18]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80015ac:	7d7b      	ldrb	r3, [r7, #21]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	7d3b      	ldrb	r3, [r7, #20]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	7dbb      	ldrb	r3, [r7, #22]
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 80015d0:	7e7b      	ldrb	r3, [r7, #25]
 80015d2:	021b      	lsls	r3, r3, #8
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	7e3b      	ldrb	r3, [r7, #24]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b21a      	sxth	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 80015e2:	7efb      	ldrb	r3, [r7, #27]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	7ebb      	ldrb	r3, [r7, #26]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 80015f4:	7f7b      	ldrb	r3, [r7, #29]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	7f3b      	ldrb	r3, [r7, #28]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b21a      	sxth	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001606:	7ffb      	ldrb	r3, [r7, #31]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	b21a      	sxth	r2, r3
 800160c:	7fbb      	ldrb	r3, [r7, #30]
 800160e:	b21b      	sxth	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b21a      	sxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001618:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21a      	sxth	r2, r3
 8001620:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21a      	sxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 800162e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21a      	sxth	r2, r3
 8001636:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800163a:	b21b      	sxth	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b21a      	sxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001644:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001648:	b25a      	sxtb	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 8001650:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001654:	4618      	mov	r0, r3
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800166a:	2300      	movs	r3, #0
 800166c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 800166e:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8001672:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d074      	beq.n	8001764 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800167a:	f107 0114 	add.w	r1, r7, #20
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2202      	movs	r2, #2
 8001682:	20f4      	movs	r0, #244	; 0xf4
 8001684:	f7ff fce1 	bl	800104a <bmp2_get_regs>
 8001688:	4603      	mov	r3, r0
 800168a:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800168c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d169      	bne.n	8001768 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fd82 	bl	800119e <bmp2_soft_reset>
 800169a:	4603      	mov	r3, r0
 800169c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 800169e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d160      	bne.n	8001768 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f861 	bl	8001774 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80016b2:	7d7b      	ldrb	r3, [r7, #21]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80016cc:	7d7b      	ldrb	r3, [r7, #21]
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	f023 031c 	bic.w	r3, r3, #28
 80016d4:	b25a      	sxtb	r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	791b      	ldrb	r3, [r3, #4]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	f003 031c 	and.w	r3, r3, #28
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 80016ec:	7d7b      	ldrb	r3, [r7, #21]
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	795b      	ldrb	r3, [r3, #5]
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	b25b      	sxtb	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800170a:	f107 0114 	add.w	r1, r7, #20
 800170e:	f107 0010 	add.w	r0, r7, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2202      	movs	r2, #2
 8001716:	f7ff fcd0 	bl	80010ba <bmp2_set_regs>
 800171a:	4603      	mov	r3, r0
 800171c:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 800171e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d120      	bne.n	8001768 <conf_sensor+0x10c>
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d01d      	beq.n	8001768 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001732:	7d3b      	ldrb	r3, [r7, #20]
 8001734:	b25b      	sxtb	r3, r3
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	b25a      	sxtb	r2, r3
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	b25b      	sxtb	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b25b      	sxtb	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 800174e:	f107 0114 	add.w	r1, r7, #20
 8001752:	f107 0010 	add.w	r0, r7, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f7ff fcae 	bl	80010ba <bmp2_set_regs>
 800175e:	4603      	mov	r3, r0
 8001760:	75fb      	strb	r3, [r7, #23]
 8001762:	e001      	b.n	8001768 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001764:	23ff      	movs	r3, #255	; 0xff
 8001766:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	78db      	ldrb	r3, [r3, #3]
 8001782:	2b04      	cmp	r3, #4
 8001784:	f200 808b 	bhi.w	800189e <set_os_mode+0x12a>
 8001788:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <set_os_mode+0x1c>)
 800178a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178e:	bf00      	nop
 8001790:	080017a5 	.word	0x080017a5
 8001794:	080017d7 	.word	0x080017d7
 8001798:	08001809 	.word	0x08001809
 800179c:	0800183b 	.word	0x0800183b
 80017a0:	0800186d 	.word	0x0800186d
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	f043 0320 	orr.w	r3, r3, #32
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	f023 031c 	bic.w	r3, r3, #28
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	701a      	strb	r2, [r3, #0]
            break;
 80017d4:	e064      	b.n	80018a0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	f043 0320 	orr.w	r3, r3, #32
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	f023 031c 	bic.w	r3, r3, #28
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	b2da      	uxtb	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	701a      	strb	r2, [r3, #0]
            break;
 8001806:	e04b      	b.n	80018a0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b25b      	sxtb	r3, r3
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f043 0320 	orr.w	r3, r3, #32
 8001818:	b25b      	sxtb	r3, r3
 800181a:	b2da      	uxtb	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b25b      	sxtb	r3, r3
 8001826:	f023 031c 	bic.w	r3, r3, #28
 800182a:	b25b      	sxtb	r3, r3
 800182c:	f043 030c 	orr.w	r3, r3, #12
 8001830:	b25b      	sxtb	r3, r3
 8001832:	b2da      	uxtb	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	701a      	strb	r2, [r3, #0]
            break;
 8001838:	e032      	b.n	80018a0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b25b      	sxtb	r3, r3
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	b25b      	sxtb	r3, r3
 8001846:	f043 0320 	orr.w	r3, r3, #32
 800184a:	b25b      	sxtb	r3, r3
 800184c:	b2da      	uxtb	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	f023 031c 	bic.w	r3, r3, #28
 800185c:	b25b      	sxtb	r3, r3
 800185e:	f043 0310 	orr.w	r3, r3, #16
 8001862:	b25b      	sxtb	r3, r3
 8001864:	b2da      	uxtb	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	701a      	strb	r2, [r3, #0]
            break;
 800186a:	e019      	b.n	80018a0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b25b      	sxtb	r3, r3
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	b25b      	sxtb	r3, r3
 8001878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800187c:	b25b      	sxtb	r3, r3
 800187e:	b2da      	uxtb	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b25b      	sxtb	r3, r3
 800188a:	f023 031c 	bic.w	r3, r3, #28
 800188e:	b25b      	sxtb	r3, r3
 8001890:	f043 0314 	orr.w	r3, r3, #20
 8001894:	b25b      	sxtb	r3, r3
 8001896:	b2da      	uxtb	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	701a      	strb	r2, [r3, #0]
            break;
 800189c:	e000      	b.n	80018a0 <set_os_mode+0x12c>
        default:
            break;
 800189e:	bf00      	nop
    }
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	031b      	lsls	r3, r3, #12
 80018bc:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3301      	adds	r3, #1
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3302      	adds	r3, #2
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	431a      	orrs	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	431a      	orrs	r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3303      	adds	r3, #3
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	031b      	lsls	r3, r3, #12
 80018ea:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3305      	adds	r3, #5
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	431a      	orrs	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	461a      	mov	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4619      	mov	r1, r3
 800191c:	4610      	mov	r0, r2
 800191e:	f000 fae3 	bl	8001ee8 <st_check_boundaries>
 8001922:	4603      	mov	r3, r0
 8001924:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001926:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001934:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001938:	b08c      	sub	sp, #48	; 0x30
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe01 	bl	8000554 <__aeabi_i2d>
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b6c      	ldr	r3, [pc, #432]	; (8001b08 <compensate_temperature+0x1d4>)
 8001958:	f7fe ff90 	bl	800087c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	8b9b      	ldrh	r3, [r3, #28]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fde3 	bl	8000534 <__aeabi_ui2d>
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <compensate_temperature+0x1d8>)
 8001974:	f7fe ff82 	bl	800087c <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fc9a 	bl	80002b8 <__aeabi_dsub>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdde 	bl	8000554 <__aeabi_i2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800199c:	4620      	mov	r0, r4
 800199e:	4629      	mov	r1, r5
 80019a0:	f7fe fe42 	bl	8000628 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdcf 	bl	8000554 <__aeabi_i2d>
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80019be:	f7fe ff5d 	bl	800087c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4614      	mov	r4, r2
 80019c8:	461d      	mov	r5, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	8b9b      	ldrh	r3, [r3, #28]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdb0 	bl	8000534 <__aeabi_ui2d>
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4b4d      	ldr	r3, [pc, #308]	; (8001b10 <compensate_temperature+0x1dc>)
 80019da:	f7fe ff4f 	bl	800087c <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4620      	mov	r0, r4
 80019e4:	4629      	mov	r1, r5
 80019e6:	f7fe fc67 	bl	80002b8 <__aeabi_dsub>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fdac 	bl	8000554 <__aeabi_i2d>
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001a04:	f7fe ff3a 	bl	800087c <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4690      	mov	r8, r2
 8001a0e:	4699      	mov	r9, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	8b9b      	ldrh	r3, [r3, #28]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd8d 	bl	8000534 <__aeabi_ui2d>
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <compensate_temperature+0x1dc>)
 8001a20:	f7fe ff2c 	bl	800087c <__aeabi_ddiv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4640      	mov	r0, r8
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	f7fe fc44 	bl	80002b8 <__aeabi_dsub>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001a34:	4620      	mov	r0, r4
 8001a36:	4629      	mov	r1, r5
 8001a38:	f7fe fdf6 	bl	8000628 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4614      	mov	r4, r2
 8001a42:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd82 	bl	8000554 <__aeabi_i2d>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
    var2 =
 8001a54:	4620      	mov	r0, r4
 8001a56:	4629      	mov	r1, r5
 8001a58:	f7fe fde6 	bl	8000628 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a68:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a6c:	f7fe fc26 	bl	80002bc <__adddf3>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7ff f870 	bl	8000b5c <__aeabi_d2iz>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001a82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a8a:	f7fe fc17 	bl	80002bc <__adddf3>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <compensate_temperature+0x1e0>)
 8001a9c:	f7fe feee 	bl	800087c <__aeabi_ddiv>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <compensate_temperature+0x1e4>)
 8001aae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ab2:	f7ff f82b 	bl	8000b0c <__aeabi_dcmplt>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <compensate_temperature+0x1e4>)
 8001ac2:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <compensate_temperature+0x1e8>)
 8001ad2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ad6:	f7ff f837 	bl	8000b48 <__aeabi_dcmpgt>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <compensate_temperature+0x1e8>)
 8001ae6:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001af6:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001afa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3730      	adds	r7, #48	; 0x30
 8001b02:	46bd      	mov	sp, r7
 8001b04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b08:	40d00000 	.word	0x40d00000
 8001b0c:	40900000 	.word	0x40900000
 8001b10:	40c00000 	.word	0x40c00000
 8001b14:	40b40000 	.word	0x40b40000
 8001b18:	c0440000 	.word	0xc0440000
 8001b1c:	40554000 	.word	0x40554000

08001b20 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b08c      	sub	sp, #48	; 0x30
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd06 	bl	8000554 <__aeabi_i2d>
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b50:	f7fe fe94 	bl	800087c <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4bcb      	ldr	r3, [pc, #812]	; (8001e90 <compensate_pressure+0x370>)
 8001b62:	f7fe fba9 	bl	80002b8 <__aeabi_dsub>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b76:	f7fe fd57 	bl	8000628 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4614      	mov	r4, r2
 8001b80:	461d      	mov	r5, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fce3 	bl	8000554 <__aeabi_i2d>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4620      	mov	r0, r4
 8001b94:	4629      	mov	r1, r5
 8001b96:	f7fe fd47 	bl	8000628 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	4bbb      	ldr	r3, [pc, #748]	; (8001e94 <compensate_pressure+0x374>)
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fcca 	bl	8000554 <__aeabi_i2d>
 8001bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc4:	f7fe fd30 	bl	8000628 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	f7fe fb72 	bl	80002bc <__adddf3>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001be0:	f7fe fb6c 	bl	80002bc <__adddf3>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4ba9      	ldr	r3, [pc, #676]	; (8001e98 <compensate_pressure+0x378>)
 8001bf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bf6:	f7fe fe41 	bl	800087c <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4614      	mov	r4, r2
 8001c00:	461d      	mov	r5, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fca3 	bl	8000554 <__aeabi_i2d>
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	4ba2      	ldr	r3, [pc, #648]	; (8001e9c <compensate_pressure+0x37c>)
 8001c14:	f7fe fd08 	bl	8000628 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	4629      	mov	r1, r5
 8001c20:	f7fe fb4c 	bl	80002bc <__adddf3>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc8e 	bl	8000554 <__aeabi_i2d>
 8001c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c3c:	f7fe fcf4 	bl	8000628 <__aeabi_dmul>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c4c:	f7fe fcec 	bl	8000628 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b90      	ldr	r3, [pc, #576]	; (8001ea0 <compensate_pressure+0x380>)
 8001c5e:	f7fe fe0d 	bl	800087c <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4614      	mov	r4, r2
 8001c68:	461d      	mov	r5, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc6f 	bl	8000554 <__aeabi_i2d>
 8001c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7a:	f7fe fcd5 	bl	8000628 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4620      	mov	r0, r4
 8001c84:	4629      	mov	r1, r5
 8001c86:	f7fe fb19 	bl	80002bc <__adddf3>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	4b82      	ldr	r3, [pc, #520]	; (8001ea0 <compensate_pressure+0x380>)
 8001c98:	f7fe fdf0 	bl	800087c <__aeabi_ddiv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	4b7a      	ldr	r3, [pc, #488]	; (8001e94 <compensate_pressure+0x374>)
 8001caa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cae:	f7fe fde5 	bl	800087c <__aeabi_ddiv>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	4b79      	ldr	r3, [pc, #484]	; (8001ea4 <compensate_pressure+0x384>)
 8001cc0:	f7fe fafc 	bl	80002bc <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4614      	mov	r4, r2
 8001cca:	461d      	mov	r5, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fc2f 	bl	8000534 <__aeabi_ui2d>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4620      	mov	r0, r4
 8001cdc:	4629      	mov	r1, r5
 8001cde:	f7fe fca3 	bl	8000628 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cf6:	f7fe ff09 	bl	8000b0c <__aeabi_dcmplt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10b      	bne.n	8001d18 <compensate_pressure+0x1f8>
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d0c:	f7fe ff1c 	bl	8000b48 <__aeabi_dcmpgt>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80de 	beq.w	8001ed4 <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fc09 	bl	8000534 <__aeabi_ui2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	495f      	ldr	r1, [pc, #380]	; (8001ea8 <compensate_pressure+0x388>)
 8001d2c:	f7fe fac4 	bl	80002b8 <__aeabi_dsub>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <compensate_pressure+0x38c>)
 8001d3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d42:	f7fe fd9b 	bl	800087c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d4e:	f7fe fab3 	bl	80002b8 <__aeabi_dsub>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	a347      	add	r3, pc, #284	; (adr r3, 8001e78 <compensate_pressure+0x358>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fc62 	bl	8000628 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d70:	f7fe fd84 	bl	800087c <__aeabi_ddiv>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fbe6 	bl	8000554 <__aeabi_i2d>
 8001d88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d8c:	f7fe fc4c 	bl	8000628 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d9c:	f7fe fc44 	bl	8000628 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <compensate_pressure+0x390>)
 8001dae:	f7fe fd65 	bl	800087c <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbc7 	bl	8000554 <__aeabi_i2d>
 8001dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dca:	f7fe fc2d 	bl	8000628 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <compensate_pressure+0x374>)
 8001ddc:	f7fe fd4e 	bl	800087c <__aeabi_ddiv>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001de8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001df0:	f7fe fa64 	bl	80002bc <__adddf3>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fba6 	bl	8000554 <__aeabi_i2d>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	4629      	mov	r1, r5
 8001e10:	f7fe fa54 	bl	80002bc <__adddf3>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <compensate_pressure+0x394>)
 8001e22:	f7fe fd2b 	bl	800087c <__aeabi_ddiv>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e2e:	f7fe fa45 	bl	80002bc <__adddf3>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001e3a:	a311      	add	r3, pc, #68	; (adr r3, 8001e80 <compensate_pressure+0x360>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e44:	f7fe fe62 	bl	8000b0c <__aeabi_dcmplt>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001e4e:	a30c      	add	r3, pc, #48	; (adr r3, 8001e80 <compensate_pressure+0x360>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001e5e:	a30a      	add	r3, pc, #40	; (adr r3, 8001e88 <compensate_pressure+0x368>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e68:	f7fe fe6e 	bl	8000b48 <__aeabi_dcmpgt>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	e022      	b.n	8001eb8 <compensate_pressure+0x398>
 8001e72:	bf00      	nop
 8001e74:	f3af 8000 	nop.w
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	40b86a00 	.word	0x40b86a00
 8001e80:	00000000 	.word	0x00000000
 8001e84:	40dd4c00 	.word	0x40dd4c00
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	40fadb00 	.word	0x40fadb00
 8001e90:	40ef4000 	.word	0x40ef4000
 8001e94:	40e00000 	.word	0x40e00000
 8001e98:	40100000 	.word	0x40100000
 8001e9c:	40f00000 	.word	0x40f00000
 8001ea0:	41200000 	.word	0x41200000
 8001ea4:	3ff00000 	.word	0x3ff00000
 8001ea8:	41300000 	.word	0x41300000
 8001eac:	40b00000 	.word	0x40b00000
 8001eb0:	41e00000 	.word	0x41e00000
 8001eb4:	40300000 	.word	0x40300000
 8001eb8:	d007      	beq.n	8001eca <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001eba:	a309      	add	r3, pc, #36	; (adr r3, 8001ee0 <compensate_pressure+0x3c0>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001eca:	68f9      	ldr	r1, [r7, #12]
 8001ecc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ed0:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001ed4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3730      	adds	r7, #48	; 0x30
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee0:	00000000 	.word	0x00000000
 8001ee4:	40fadb00 	.word	0x40fadb00

08001ee8 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db03      	blt.n	8001f04 <st_check_boundaries+0x1c>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <st_check_boundaries+0x88>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	dd09      	ble.n	8001f18 <st_check_boundaries+0x30>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db06      	blt.n	8001f18 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <st_check_boundaries+0x88>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	dc02      	bgt.n	8001f18 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001f12:	23fa      	movs	r3, #250	; 0xfa
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e023      	b.n	8001f60 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db03      	blt.n	8001f26 <st_check_boundaries+0x3e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a13      	ldr	r2, [pc, #76]	; (8001f70 <st_check_boundaries+0x88>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	dd09      	ble.n	8001f3a <st_check_boundaries+0x52>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db06      	blt.n	8001f3a <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <st_check_boundaries+0x88>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	dc02      	bgt.n	8001f3a <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001f34:	23fb      	movs	r3, #251	; 0xfb
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	e012      	b.n	8001f60 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db03      	blt.n	8001f48 <st_check_boundaries+0x60>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <st_check_boundaries+0x88>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	dd09      	ble.n	8001f5c <st_check_boundaries+0x74>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db03      	blt.n	8001f56 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <st_check_boundaries+0x88>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	dd02      	ble.n	8001f5c <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001f56:	23f9      	movs	r3, #249	; 0xf9
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	e001      	b.n	8001f60 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	000ffff0 	.word	0x000ffff0

08001f74 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff f839 	bl	8000ff4 <bmp2_init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f91e 	bl	80011ce <bmp2_get_config>
 8001f92:	4603      	mov	r3, r0
 8001f94:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f96:	2303      	movs	r3, #3
 8001f98:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f950 	bl	800124e <bmp2_set_config>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001fb2:	f107 0308 	add.w	r3, r7, #8
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	2003      	movs	r0, #3
 8001fbc:	f7ff f982 	bl	80012c4 <bmp2_set_power_mode>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001fc4:	f107 0108 	add.w	r1, r7, #8
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fa0c 	bl	80013ec <bmp2_compute_meas_time>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	6858      	ldr	r0, [r3, #4]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	891b      	ldrh	r3, [r3, #8]
 8002008:	2200      	movs	r2, #0
 800200a:	4619      	mov	r1, r3
 800200c:	f001 fb50 	bl	80036b0 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	f107 010f 	add.w	r1, r7, #15
 8002018:	2305      	movs	r3, #5
 800201a:	2201      	movs	r2, #1
 800201c:	f002 fd27 	bl	8004a6e <HAL_SPI_Transmit>
 8002020:	4603      	mov	r3, r0
 8002022:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2305      	movs	r3, #5
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	f002 fe8b 	bl	8004d4a <HAL_SPI_Receive>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	7dbb      	ldrb	r3, [r7, #22]
 800203a:	4413      	add	r3, r2
 800203c:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	6858      	ldr	r0, [r3, #4]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	891b      	ldrh	r3, [r3, #8]
 8002046:	2201      	movs	r2, #1
 8002048:	4619      	mov	r1, r3
 800204a:	f001 fb31 	bl	80036b0 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 800204e:	7dbb      	ldrb	r3, [r7, #22]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <bmp2_spi_read+0x74>
    iError = -1;
 8002054:	23ff      	movs	r3, #255	; 0xff
 8002056:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002058:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002078:	2300      	movs	r3, #0
 800207a:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	6858      	ldr	r0, [r3, #4]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	891b      	ldrh	r3, [r3, #8]
 8002088:	2200      	movs	r2, #0
 800208a:	4619      	mov	r1, r3
 800208c:	f001 fb10 	bl	80036b0 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	f107 010f 	add.w	r1, r7, #15
 8002098:	2305      	movs	r3, #5
 800209a:	2201      	movs	r2, #1
 800209c:	f002 fce7 	bl	8004a6e <HAL_SPI_Transmit>
 80020a0:	4603      	mov	r3, r0
 80020a2:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	2305      	movs	r3, #5
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	f002 fcdd 	bl	8004a6e <HAL_SPI_Transmit>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	7dbb      	ldrb	r3, [r7, #22]
 80020ba:	4413      	add	r3, r2
 80020bc:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6858      	ldr	r0, [r3, #4]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	891b      	ldrh	r3, [r3, #8]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4619      	mov	r1, r3
 80020ca:	f001 faf1 	bl	80036b0 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80020ce:	7dbb      	ldrb	r3, [r7, #22]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <bmp2_spi_write+0x74>
    iError = -1;
 80020d4:	23ff      	movs	r3, #255	; 0xff
 80020d6:	75fb      	strb	r3, [r7, #23]

  return iError;
 80020d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a05      	ldr	r2, [pc, #20]	; (8002108 <bmp2_delay_us+0x24>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	099b      	lsrs	r3, r3, #6
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 ff65 	bl	8002fc8 <HAL_Delay>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	10624dd3 	.word	0x10624dd3

0800210c <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b08d      	sub	sp, #52	; 0x34
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002114:	23ff      	movs	r3, #255	; 0xff
 8002116:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double temp = NAN;
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <BMP2_ReadTemperature_degC+0x9c>)
 8002120:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	899b      	ldrh	r3, [r3, #12]
 800212a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff f899 	bl	800126c <bmp2_get_status>
 800213a:	4603      	mov	r3, r0
 800213c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8002140:	f107 0308 	add.w	r3, r7, #8
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff f8d1 	bl	80012ee <bmp2_get_sensor_data>
 800214c:	4603      	mov	r3, r0
 800214e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    temp = comp_data.temperature;
 8002152:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002156:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 800215a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002168:	7f3b      	ldrb	r3, [r7, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <BMP2_ReadTemperature_degC+0x6a>
 800216e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002172:	2b00      	cmp	r3, #0
 8002174:	dcdb      	bgt.n	800212e <BMP2_ReadTemperature_degC+0x22>

  /* Save reading result in sensor handler */
  BMP2_GET_TEMP(dev) = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685c      	ldr	r4, [r3, #4]
 800217a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800217e:	f7fe fd35 	bl	8000bec <__aeabi_d2f>
 8002182:	4603      	mov	r3, r0
 8002184:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800218e:	729a      	strb	r2, [r3, #10]

  return temp;
 8002190:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002194:	ec43 2b17 	vmov	d7, r2, r3
}
 8002198:	eeb0 0a47 	vmov.f32	s0, s14
 800219c:	eef0 0a67 	vmov.f32	s1, s15
 80021a0:	3734      	adds	r7, #52	; 0x34
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	7ff80000 	.word	0x7ff80000

080021ac <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08c      	sub	sp, #48	; 0x30
 80021b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
 80021c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021c2:	4b86      	ldr	r3, [pc, #536]	; (80023dc <MX_GPIO_Init+0x230>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a85      	ldr	r2, [pc, #532]	; (80023dc <MX_GPIO_Init+0x230>)
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b83      	ldr	r3, [pc, #524]	; (80023dc <MX_GPIO_Init+0x230>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021da:	4b80      	ldr	r3, [pc, #512]	; (80023dc <MX_GPIO_Init+0x230>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a7f      	ldr	r2, [pc, #508]	; (80023dc <MX_GPIO_Init+0x230>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b7d      	ldr	r3, [pc, #500]	; (80023dc <MX_GPIO_Init+0x230>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021f2:	4b7a      	ldr	r3, [pc, #488]	; (80023dc <MX_GPIO_Init+0x230>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a79      	ldr	r2, [pc, #484]	; (80023dc <MX_GPIO_Init+0x230>)
 80021f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b77      	ldr	r3, [pc, #476]	; (80023dc <MX_GPIO_Init+0x230>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	4b74      	ldr	r3, [pc, #464]	; (80023dc <MX_GPIO_Init+0x230>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a73      	ldr	r2, [pc, #460]	; (80023dc <MX_GPIO_Init+0x230>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b71      	ldr	r3, [pc, #452]	; (80023dc <MX_GPIO_Init+0x230>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	4b6e      	ldr	r3, [pc, #440]	; (80023dc <MX_GPIO_Init+0x230>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a6d      	ldr	r2, [pc, #436]	; (80023dc <MX_GPIO_Init+0x230>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <MX_GPIO_Init+0x230>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800223a:	4b68      	ldr	r3, [pc, #416]	; (80023dc <MX_GPIO_Init+0x230>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a67      	ldr	r2, [pc, #412]	; (80023dc <MX_GPIO_Init+0x230>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b65      	ldr	r3, [pc, #404]	; (80023dc <MX_GPIO_Init+0x230>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002252:	4b62      	ldr	r3, [pc, #392]	; (80023dc <MX_GPIO_Init+0x230>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a61      	ldr	r2, [pc, #388]	; (80023dc <MX_GPIO_Init+0x230>)
 8002258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b5f      	ldr	r3, [pc, #380]	; (80023dc <MX_GPIO_Init+0x230>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	2110      	movs	r1, #16
 800226e:	485c      	ldr	r0, [pc, #368]	; (80023e0 <MX_GPIO_Init+0x234>)
 8002270:	f001 fa1e 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	f244 0181 	movw	r1, #16513	; 0x4081
 800227a:	485a      	ldr	r0, [pc, #360]	; (80023e4 <MX_GPIO_Init+0x238>)
 800227c:	f001 fa18 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002280:	2200      	movs	r2, #0
 8002282:	2140      	movs	r1, #64	; 0x40
 8002284:	4858      	ldr	r0, [pc, #352]	; (80023e8 <MX_GPIO_Init+0x23c>)
 8002286:	f001 fa13 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800228a:	2310      	movs	r3, #16
 800228c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228e:	2301      	movs	r3, #1
 8002290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 031c 	add.w	r3, r7, #28
 800229e:	4619      	mov	r1, r3
 80022a0:	484f      	ldr	r0, [pc, #316]	; (80023e0 <MX_GPIO_Init+0x234>)
 80022a2:	f001 f859 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80022a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	4619      	mov	r1, r3
 80022bc:	484b      	ldr	r0, [pc, #300]	; (80023ec <MX_GPIO_Init+0x240>)
 80022be:	f001 f84b 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80022c2:	2332      	movs	r3, #50	; 0x32
 80022c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022d2:	230b      	movs	r3, #11
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	4843      	ldr	r0, [pc, #268]	; (80023ec <MX_GPIO_Init+0x240>)
 80022de:	f001 f83b 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80022e2:	2386      	movs	r3, #134	; 0x86
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ee:	2303      	movs	r3, #3
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022f2:	230b      	movs	r3, #11
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 031c 	add.w	r3, r7, #28
 80022fa:	4619      	mov	r1, r3
 80022fc:	483c      	ldr	r0, [pc, #240]	; (80023f0 <MX_GPIO_Init+0x244>)
 80022fe:	f001 f82b 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002302:	f244 0381 	movw	r3, #16513	; 0x4081
 8002306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	2301      	movs	r3, #1
 800230a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4619      	mov	r1, r3
 800231a:	4832      	ldr	r0, [pc, #200]	; (80023e4 <MX_GPIO_Init+0x238>)
 800231c:	f001 f81c 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002332:	230b      	movs	r3, #11
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	4619      	mov	r1, r3
 800233c:	4829      	ldr	r0, [pc, #164]	; (80023e4 <MX_GPIO_Init+0x238>)
 800233e:	f001 f80b 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002342:	2340      	movs	r3, #64	; 0x40
 8002344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002346:	2301      	movs	r3, #1
 8002348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	4823      	ldr	r0, [pc, #140]	; (80023e8 <MX_GPIO_Init+0x23c>)
 800235a:	f000 fffd 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	4619      	mov	r1, r3
 8002370:	481d      	ldr	r0, [pc, #116]	; (80023e8 <MX_GPIO_Init+0x23c>)
 8002372:	f000 fff1 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002376:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800237a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002388:	230a      	movs	r3, #10
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	4619      	mov	r1, r3
 8002392:	4817      	ldr	r0, [pc, #92]	; (80023f0 <MX_GPIO_Init+0x244>)
 8002394:	f000 ffe0 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800239c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	4810      	ldr	r0, [pc, #64]	; (80023f0 <MX_GPIO_Init+0x244>)
 80023ae:	f000 ffd3 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80023b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80023b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c0:	2303      	movs	r3, #3
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023c4:	230b      	movs	r3, #11
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	4806      	ldr	r0, [pc, #24]	; (80023e8 <MX_GPIO_Init+0x23c>)
 80023d0:	f000 ffc2 	bl	8003358 <HAL_GPIO_Init>

}
 80023d4:	bf00      	nop
 80023d6:	3730      	adds	r7, #48	; 0x30
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40020400 	.word	0x40020400
 80023e8:	40021800 	.word	0x40021800
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40020000 	.word	0x40020000

080023f4 <CalculatePWMValue>:
float I, prev_I = 0.0;
float error, error_p, prev_error = 0.0;
float pwm_i, pwm_p = 0.0;
float dt = 0.1;
float error = 0;
float CalculatePWMValue(float temp){
 80023f4:	b5b0      	push	{r4, r5, r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	ed87 0a01 	vstr	s0, [r7, #4]
	error = set_point - temp;
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <CalculatePWMValue+0x104>)
 8002400:	ed93 7a00 	vldr	s14, [r3]
 8002404:	edd7 7a01 	vldr	s15, [r7, #4]
 8002408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240c:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <CalculatePWMValue+0x108>)
 800240e:	edc3 7a00 	vstr	s15, [r3]
	I += error+prev_error;
 8002412:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <CalculatePWMValue+0x108>)
 8002414:	ed93 7a00 	vldr	s14, [r3]
 8002418:	4b39      	ldr	r3, [pc, #228]	; (8002500 <CalculatePWMValue+0x10c>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002422:	4b38      	ldr	r3, [pc, #224]	; (8002504 <CalculatePWMValue+0x110>)
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242c:	4b35      	ldr	r3, [pc, #212]	; (8002504 <CalculatePWMValue+0x110>)
 800242e:	edc3 7a00 	vstr	s15, [r3]
	pwm_i = I*ki*(dt/2.0);
 8002432:	4b34      	ldr	r3, [pc, #208]	; (8002504 <CalculatePWMValue+0x110>)
 8002434:	ed93 7a00 	vldr	s14, [r3]
 8002438:	4b33      	ldr	r3, [pc, #204]	; (8002508 <CalculatePWMValue+0x114>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	ee17 0a90 	vmov	r0, s15
 8002446:	f7fe f897 	bl	8000578 <__aeabi_f2d>
 800244a:	4604      	mov	r4, r0
 800244c:	460d      	mov	r5, r1
 800244e:	4b2f      	ldr	r3, [pc, #188]	; (800250c <CalculatePWMValue+0x118>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f890 	bl	8000578 <__aeabi_f2d>
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002460:	f7fe fa0c 	bl	800087c <__aeabi_ddiv>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4620      	mov	r0, r4
 800246a:	4629      	mov	r1, r5
 800246c:	f7fe f8dc 	bl	8000628 <__aeabi_dmul>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fbb8 	bl	8000bec <__aeabi_d2f>
 800247c:	4603      	mov	r3, r0
 800247e:	4a24      	ldr	r2, [pc, #144]	; (8002510 <CalculatePWMValue+0x11c>)
 8002480:	6013      	str	r3, [r2, #0]
	prev_error = error;
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <CalculatePWMValue+0x108>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <CalculatePWMValue+0x10c>)
 8002488:	6013      	str	r3, [r2, #0]
	pwm_p = kp*error;
 800248a:	4b22      	ldr	r3, [pc, #136]	; (8002514 <CalculatePWMValue+0x120>)
 800248c:	ed93 7a00 	vldr	s14, [r3]
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <CalculatePWMValue+0x108>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <CalculatePWMValue+0x124>)
 800249c:	edc3 7a00 	vstr	s15, [r3]
	float helpPWMValue = 100*(pwm_p + pwm_i);
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <CalculatePWMValue+0x124>)
 80024a2:	ed93 7a00 	vldr	s14, [r3]
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <CalculatePWMValue+0x11c>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800251c <CalculatePWMValue+0x128>
 80024b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b8:	edc7 7a03 	vstr	s15, [r7, #12]
	if (helpPWMValue > 999) {
 80024bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80024c0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002520 <CalculatePWMValue+0x12c>
 80024c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024cc:	dd01      	ble.n	80024d2 <CalculatePWMValue+0xde>
		helpPWMValue = 1000;
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <CalculatePWMValue+0x130>)
 80024d0:	60fb      	str	r3, [r7, #12]
	}
	if(helpPWMValue < 0){
 80024d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024de:	d502      	bpl.n	80024e6 <CalculatePWMValue+0xf2>
		helpPWMValue = 0;
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
	}
	return helpPWMValue;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	ee07 3a90 	vmov	s15, r3
}
 80024ec:	eeb0 0a67 	vmov.f32	s0, s15
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bdb0      	pop	{r4, r5, r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000054 	.word	0x20000054
 80024fc:	200002f0 	.word	0x200002f0
 8002500:	200002f4 	.word	0x200002f4
 8002504:	200002ec 	.word	0x200002ec
 8002508:	2000005c 	.word	0x2000005c
 800250c:	20000060 	.word	0x20000060
 8002510:	200002f8 	.word	0x200002f8
 8002514:	20000058 	.word	0x20000058
 8002518:	200002fc 	.word	0x200002fc
 800251c:	42c80000 	.word	0x42c80000
 8002520:	4479c000 	.word	0x4479c000
 8002524:	447a0000 	.word	0x447a0000

08002528 <HAL_TIM_PeriodElapsedCallback>:

float PWMValue = 0;
char message[] = "%d, %d, %d\r\n";
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af02      	add	r7, sp, #8
 800252e:	6078      	str	r0, [r7, #4]
  if(htim==&htim2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a2b      	ldr	r2, [pc, #172]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d14f      	bne.n	80025d8 <HAL_TIM_PeriodElapsedCallback+0xb0>
  {
	  temp = BMP2_ReadTemperature_degC(&bmp2dev_1);
 8002538:	482a      	ldr	r0, [pc, #168]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800253a:	f7ff fde7 	bl	800210c <BMP2_ReadTemperature_degC>
 800253e:	ec53 2b10 	vmov	r2, r3, d0
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	f7fe fb51 	bl	8000bec <__aeabi_d2f>
 800254a:	4603      	mov	r3, r0
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800254e:	6013      	str	r3, [r2, #0]
	  newTemp = (int)(temp*1000);
 8002550:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80025ec <HAL_TIM_PeriodElapsedCallback+0xc4>
 800255a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002562:	ee17 2a90 	vmov	r2, s15
 8002566:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002568:	601a      	str	r2, [r3, #0]
//		  PWMValue = 1000;
//	  }
//	  if(PWMValue < 0){
//		  PWMValue = 0;
//	  }
	  PWMValue = CalculatePWMValue(temp);
 800256a:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	eeb0 0a67 	vmov.f32	s0, s15
 8002574:	f7ff ff3e 	bl	80023f4 <CalculatePWMValue>
 8002578:	eef0 7a40 	vmov.f32	s15, s0
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800257e:	edc3 7a00 	vstr	s15, [r3]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWMValue);
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800258c:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	ee17 2a90 	vmov	r2, s15
 8002594:	635a      	str	r2, [r3, #52]	; 0x34
	  int daneD=sprintf(&dane,&message,newTemp, (int)PWMValue, (int)(error*1000));
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80025a4:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80025ec <HAL_TIM_PeriodElapsedCallback+0xc4>
 80025ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025b6:	ee17 3a90 	vmov	r3, s15
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	ee16 3a90 	vmov	r3, s13
 80025c0:	490f      	ldr	r1, [pc, #60]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80025c2:	4810      	ldr	r0, [pc, #64]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80025c4:	f006 fe1e 	bl	8009204 <siprintf>
 80025c8:	60f8      	str	r0, [r7, #12]
	  HAL_UART_Transmit_IT(&huart3,(uint8_t*)dane , daneD);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	490c      	ldr	r1, [pc, #48]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80025d2:	480d      	ldr	r0, [pc, #52]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80025d4:	f004 fc14 	bl	8006e00 <HAL_UART_Transmit_IT>
  }
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000370 	.word	0x20000370
 80025e4:	20000018 	.word	0x20000018
 80025e8:	20000264 	.word	0x20000264
 80025ec:	447a0000 	.word	0x447a0000
 80025f0:	20000268 	.word	0x20000268
 80025f4:	20000300 	.word	0x20000300
 80025f8:	200003bc 	.word	0x200003bc
 80025fc:	200002f0 	.word	0x200002f0
 8002600:	20000064 	.word	0x20000064
 8002604:	2000026c 	.word	0x2000026c
 8002608:	20000408 	.word	0x20000408

0800260c <HAL_UART_RxCpltCallback>:

//unsigned char PWM[6];
uint8_t userSettings[4];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	set_point = atof((char *)userSettings);
 8002614:	480a      	ldr	r0, [pc, #40]	; (8002640 <HAL_UART_RxCpltCallback+0x34>)
 8002616:	f005 ff16 	bl	8008446 <atof>
 800261a:	ec53 2b10 	vmov	r2, r3, d0
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fae3 	bl	8000bec <__aeabi_d2f>
 8002626:	4603      	mov	r3, r0
 8002628:	4a06      	ldr	r2, [pc, #24]	; (8002644 <HAL_UART_RxCpltCallback+0x38>)
 800262a:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart3,&userSettings ,4);
 800262c:	2204      	movs	r2, #4
 800262e:	4904      	ldr	r1, [pc, #16]	; (8002640 <HAL_UART_RxCpltCallback+0x34>)
 8002630:	4805      	ldr	r0, [pc, #20]	; (8002648 <HAL_UART_RxCpltCallback+0x3c>)
 8002632:	f004 fc43 	bl	8006ebc <HAL_UART_Receive_IT>

}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000304 	.word	0x20000304
 8002644:	20000054 	.word	0x20000054
 8002648:	20000408 	.word	0x20000408

0800264c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002650:	f000 fc5d 	bl	8002f0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002654:	f000 f824 	bl	80026a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002658:	f7ff fda8 	bl	80021ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800265c:	f000 fb96 	bl	8002d8c <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8002660:	f000 f892 	bl	8002788 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002664:	f000 fa68 	bl	8002b38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002668:	f000 fab4 	bl	8002bd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev_1);
 800266c:	4807      	ldr	r0, [pc, #28]	; (800268c <main+0x40>)
 800266e:	f7ff fc81 	bl	8001f74 <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8002672:	4807      	ldr	r0, [pc, #28]	; (8002690 <main+0x44>)
 8002674:	f003 fa1c 	bl	8005ab0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002678:	2100      	movs	r1, #0
 800267a:	4806      	ldr	r0, [pc, #24]	; (8002694 <main+0x48>)
 800267c:	f003 fae8 	bl	8005c50 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3,&userSettings,4);
 8002680:	2204      	movs	r2, #4
 8002682:	4905      	ldr	r1, [pc, #20]	; (8002698 <main+0x4c>)
 8002684:	4805      	ldr	r0, [pc, #20]	; (800269c <main+0x50>)
 8002686:	f004 fc19 	bl	8006ebc <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800268a:	e7fe      	b.n	800268a <main+0x3e>
 800268c:	20000018 	.word	0x20000018
 8002690:	20000370 	.word	0x20000370
 8002694:	200003bc 	.word	0x200003bc
 8002698:	20000304 	.word	0x20000304
 800269c:	20000408 	.word	0x20000408

080026a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b094      	sub	sp, #80	; 0x50
 80026a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026a6:	f107 0320 	add.w	r3, r7, #32
 80026aa:	2230      	movs	r2, #48	; 0x30
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f006 fe0b 	bl	80092ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80026c4:	f001 f80e 	bl	80036e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <SystemClock_Config+0xd4>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	4a29      	ldr	r2, [pc, #164]	; (8002774 <SystemClock_Config+0xd4>)
 80026ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d2:	6413      	str	r3, [r2, #64]	; 0x40
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <SystemClock_Config+0xd4>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <SystemClock_Config+0xd8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a24      	ldr	r2, [pc, #144]	; (8002778 <SystemClock_Config+0xd8>)
 80026e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <SystemClock_Config+0xd8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026f8:	2301      	movs	r3, #1
 80026fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002702:	2302      	movs	r3, #2
 8002704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800270c:	2304      	movs	r3, #4
 800270e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002710:	23d8      	movs	r3, #216	; 0xd8
 8002712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002714:	2302      	movs	r3, #2
 8002716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002718:	2303      	movs	r3, #3
 800271a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800271c:	f107 0320 	add.w	r3, r7, #32
 8002720:	4618      	mov	r0, r3
 8002722:	f001 f83f 	bl	80037a4 <HAL_RCC_OscConfig>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800272c:	f000 f826 	bl	800277c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002730:	f000 ffe8 	bl	8003704 <HAL_PWREx_EnableOverDrive>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800273a:	f000 f81f 	bl	800277c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800273e:	230f      	movs	r3, #15
 8002740:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002742:	2302      	movs	r3, #2
 8002744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800274a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800274e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002750:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002754:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	2107      	movs	r1, #7
 800275c:	4618      	mov	r0, r3
 800275e:	f001 fac5 	bl	8003cec <HAL_RCC_ClockConfig>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002768:	f000 f808 	bl	800277c <Error_Handler>
  }
}
 800276c:	bf00      	nop
 800276e:	3750      	adds	r7, #80	; 0x50
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	40007000 	.word	0x40007000

0800277c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002780:	b672      	cpsid	i
}
 8002782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002784:	e7fe      	b.n	8002784 <Error_Handler+0x8>
	...

08002788 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <MX_SPI4_Init+0x74>)
 800278e:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <MX_SPI4_Init+0x78>)
 8002790:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <MX_SPI4_Init+0x74>)
 8002794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002798:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800279a:	4b18      	ldr	r3, [pc, #96]	; (80027fc <MX_SPI4_Init+0x74>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <MX_SPI4_Init+0x74>)
 80027a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027a6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80027a8:	4b14      	ldr	r3, [pc, #80]	; (80027fc <MX_SPI4_Init+0x74>)
 80027aa:	2202      	movs	r2, #2
 80027ac:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80027ae:	4b13      	ldr	r3, [pc, #76]	; (80027fc <MX_SPI4_Init+0x74>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_SPI4_Init+0x74>)
 80027b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ba:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <MX_SPI4_Init+0x74>)
 80027be:	2210      	movs	r2, #16
 80027c0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_SPI4_Init+0x74>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_SPI4_Init+0x74>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <MX_SPI4_Init+0x74>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_SPI4_Init+0x74>)
 80027d6:	2207      	movs	r2, #7
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <MX_SPI4_Init+0x74>)
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <MX_SPI4_Init+0x74>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80027e6:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_SPI4_Init+0x74>)
 80027e8:	f002 f896 	bl	8004918 <HAL_SPI_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80027f2:	f7ff ffc3 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000308 	.word	0x20000308
 8002800:	40013400 	.word	0x40013400

08002804 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1b      	ldr	r2, [pc, #108]	; (8002890 <HAL_SPI_MspInit+0x8c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d12f      	bne.n	8002886 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_SPI_MspInit+0x90>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <HAL_SPI_MspInit+0x90>)
 800282c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <HAL_SPI_MspInit+0x90>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_SPI_MspInit+0x90>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a14      	ldr	r2, [pc, #80]	; (8002894 <HAL_SPI_MspInit+0x90>)
 8002844:	f043 0310 	orr.w	r3, r3, #16
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_SPI_MspInit+0x90>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002856:	2364      	movs	r3, #100	; 0x64
 8002858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002862:	2303      	movs	r3, #3
 8002864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002866:	2305      	movs	r3, #5
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	4619      	mov	r1, r3
 8002870:	4809      	ldr	r0, [pc, #36]	; (8002898 <HAL_SPI_MspInit+0x94>)
 8002872:	f000 fd71 	bl	8003358 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	2054      	movs	r0, #84	; 0x54
 800287c:	f000 fca3 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002880:	2054      	movs	r0, #84	; 0x54
 8002882:	f000 fcbc 	bl	80031fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002886:	bf00      	nop
 8002888:	3728      	adds	r7, #40	; 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40013400 	.word	0x40013400
 8002894:	40023800 	.word	0x40023800
 8002898:	40021000 	.word	0x40021000

0800289c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_MspInit+0x44>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_MspInit+0x44>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_MspInit+0x44>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_MspInit+0x44>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <HAL_MspInit+0x44>)
 80028c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c4:	6453      	str	r3, [r2, #68]	; 0x44
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_MspInit+0x44>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800

080028e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <NMI_Handler+0x4>

080028ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <HardFault_Handler+0x4>

080028f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <MemManage_Handler+0x4>

080028f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <BusFault_Handler+0x4>

080028fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <UsageFault_Handler+0x4>

08002902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002930:	f000 fb2a 	bl	8002f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}

08002938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <TIM2_IRQHandler+0x10>)
 800293e:	f003 fa81 	bl	8005e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000370 	.word	0x20000370

0800294c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002950:	4802      	ldr	r0, [pc, #8]	; (800295c <TIM3_IRQHandler+0x10>)
 8002952:	f003 fa77 	bl	8005e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200003bc 	.word	0x200003bc

08002960 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <USART3_IRQHandler+0x10>)
 8002966:	f004 faed 	bl	8006f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000408 	.word	0x20000408

08002974 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <SPI4_IRQHandler+0x10>)
 800297a:	f002 fd29 	bl	80053d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000308 	.word	0x20000308

08002988 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return 1;
 800298c:	2301      	movs	r3, #1
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_kill>:

int _kill(int pid, int sig)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029a2:	f006 fcf3 	bl	800938c <__errno>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2216      	movs	r2, #22
 80029aa:	601a      	str	r2, [r3, #0]
  return -1;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_exit>:

void _exit (int status)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029c0:	f04f 31ff 	mov.w	r1, #4294967295
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ffe7 	bl	8002998 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029ca:	e7fe      	b.n	80029ca <_exit+0x12>

080029cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e00a      	b.n	80029f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029de:	f3af 8000 	nop.w
 80029e2:	4601      	mov	r1, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	60ba      	str	r2, [r7, #8]
 80029ea:	b2ca      	uxtb	r2, r1
 80029ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	3301      	adds	r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	dbf0      	blt.n	80029de <_read+0x12>
  }

  return len;
 80029fc:	687b      	ldr	r3, [r7, #4]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	e009      	b.n	8002a2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	60ba      	str	r2, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	dbf1      	blt.n	8002a18 <_write+0x12>
  }
  return len;
 8002a34:	687b      	ldr	r3, [r7, #4]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <_close>:

int _close(int file)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a66:	605a      	str	r2, [r3, #4]
  return 0;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <_isatty>:

int _isatty(int file)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a7e:	2301      	movs	r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab0:	4a14      	ldr	r2, [pc, #80]	; (8002b04 <_sbrk+0x5c>)
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <_sbrk+0x60>)
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002abc:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <_sbrk+0x64>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <_sbrk+0x64>)
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <_sbrk+0x68>)
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <_sbrk+0x64>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d207      	bcs.n	8002ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad8:	f006 fc58 	bl	800938c <__errno>
 8002adc:	4603      	mov	r3, r0
 8002ade:	220c      	movs	r2, #12
 8002ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae6:	e009      	b.n	8002afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <_sbrk+0x64>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <_sbrk+0x64>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <_sbrk+0x64>)
 8002af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20050000 	.word	0x20050000
 8002b08:	00000400 	.word	0x00000400
 8002b0c:	2000036c 	.word	0x2000036c
 8002b10:	200005e0 	.word	0x200005e0

08002b14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <SystemInit+0x20>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <SystemInit+0x20>)
 8002b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3e:	f107 0310 	add.w	r3, r7, #16
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <MX_TIM2_Init+0x94>)
 8002b58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <MX_TIM2_Init+0x94>)
 8002b60:	226b      	movs	r2, #107	; 0x6b
 8002b62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <MX_TIM2_Init+0x94>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <MX_TIM2_Init+0x94>)
 8002b6c:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <MX_TIM2_Init+0x98>)
 8002b6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b70:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <MX_TIM2_Init+0x94>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <MX_TIM2_Init+0x94>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b7c:	4813      	ldr	r0, [pc, #76]	; (8002bcc <MX_TIM2_Init+0x94>)
 8002b7e:	f002 ff3f 	bl	8005a00 <HAL_TIM_Base_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b88:	f7ff fdf8 	bl	800277c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	4619      	mov	r1, r3
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <MX_TIM2_Init+0x94>)
 8002b9a:	f003 fb87 	bl	80062ac <HAL_TIM_ConfigClockSource>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ba4:	f7ff fdea 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_TIM2_Init+0x94>)
 8002bb6:	f004 f829 	bl	8006c0c <HAL_TIMEx_MasterConfigSynchronization>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002bc0:	f7ff fddc 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000370 	.word	0x20000370
 8002bd0:	0001869f 	.word	0x0001869f

08002bd4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bda:	f107 031c 	add.w	r3, r7, #28
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002be6:	463b      	mov	r3, r7
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
 8002bf4:	615a      	str	r2, [r3, #20]
 8002bf6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <MX_TIM3_Init+0xac>)
 8002bfa:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <MX_TIM3_Init+0xb0>)
 8002bfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <MX_TIM3_Init+0xac>)
 8002c00:	226b      	movs	r2, #107	; 0x6b
 8002c02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <MX_TIM3_Init+0xac>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <MX_TIM3_Init+0xac>)
 8002c0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <MX_TIM3_Init+0xac>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <MX_TIM3_Init+0xac>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c1e:	4818      	ldr	r0, [pc, #96]	; (8002c80 <MX_TIM3_Init+0xac>)
 8002c20:	f002 ffbe 	bl	8005ba0 <HAL_TIM_PWM_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002c2a:	f7ff fda7 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c36:	f107 031c 	add.w	r3, r7, #28
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4810      	ldr	r0, [pc, #64]	; (8002c80 <MX_TIM3_Init+0xac>)
 8002c3e:	f003 ffe5 	bl	8006c0c <HAL_TIMEx_MasterConfigSynchronization>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002c48:	f7ff fd98 	bl	800277c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c4c:	2360      	movs	r3, #96	; 0x60
 8002c4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c5c:	463b      	mov	r3, r7
 8002c5e:	2200      	movs	r2, #0
 8002c60:	4619      	mov	r1, r3
 8002c62:	4807      	ldr	r0, [pc, #28]	; (8002c80 <MX_TIM3_Init+0xac>)
 8002c64:	f003 fa0e 	bl	8006084 <HAL_TIM_PWM_ConfigChannel>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002c6e:	f7ff fd85 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c72:	4803      	ldr	r0, [pc, #12]	; (8002c80 <MX_TIM3_Init+0xac>)
 8002c74:	f000 f852 	bl	8002d1c <HAL_TIM_MspPostInit>

}
 8002c78:	bf00      	nop
 8002c7a:	3728      	adds	r7, #40	; 0x28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200003bc 	.word	0x200003bc
 8002c84:	40000400 	.word	0x40000400

08002c88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d113      	bne.n	8002cc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_TIM_Base_MspInit+0x44>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <HAL_TIM_Base_MspInit+0x44>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_TIM_Base_MspInit+0x44>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	201c      	movs	r0, #28
 8002cb8:	f000 fa85 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cbc:	201c      	movs	r0, #28
 8002cbe:	f000 fa9e 	bl	80031fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <HAL_TIM_PWM_MspInit+0x44>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d113      	bne.n	8002d0a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_TIM_PWM_MspInit+0x48>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <HAL_TIM_PWM_MspInit+0x48>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_TIM_PWM_MspInit+0x48>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	201d      	movs	r0, #29
 8002d00:	f000 fa61 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d04:	201d      	movs	r0, #29
 8002d06:	f000 fa7a 	bl	80031fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40023800 	.word	0x40023800

08002d1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a11      	ldr	r2, [pc, #68]	; (8002d80 <HAL_TIM_MspPostInit+0x64>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d11b      	bne.n	8002d76 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_TIM_MspPostInit+0x68>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <HAL_TIM_MspPostInit+0x68>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_TIM_MspPostInit+0x68>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d56:	2340      	movs	r3, #64	; 0x40
 8002d58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d66:	2302      	movs	r3, #2
 8002d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6a:	f107 030c 	add.w	r3, r7, #12
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4805      	ldr	r0, [pc, #20]	; (8002d88 <HAL_TIM_MspPostInit+0x6c>)
 8002d72:	f000 faf1 	bl	8003358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d76:	bf00      	nop
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020000 	.word	0x40020000

08002d8c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <MX_USART3_UART_Init+0x58>)
 8002d92:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <MX_USART3_UART_Init+0x5c>)
 8002d94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d96:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <MX_USART3_UART_Init+0x58>)
 8002d98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <MX_USART3_UART_Init+0x58>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <MX_USART3_UART_Init+0x58>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <MX_USART3_UART_Init+0x58>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <MX_USART3_UART_Init+0x58>)
 8002db2:	220c      	movs	r2, #12
 8002db4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <MX_USART3_UART_Init+0x58>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <MX_USART3_UART_Init+0x58>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <MX_USART3_UART_Init+0x58>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <MX_USART3_UART_Init+0x58>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002dce:	4805      	ldr	r0, [pc, #20]	; (8002de4 <MX_USART3_UART_Init+0x58>)
 8002dd0:	f003 ffc8 	bl	8006d64 <HAL_UART_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002dda:	f7ff fccf 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000408 	.word	0x20000408
 8002de8:	40004800 	.word	0x40004800

08002dec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b0aa      	sub	sp, #168	; 0xa8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e04:	f107 0310 	add.w	r3, r7, #16
 8002e08:	2284      	movs	r2, #132	; 0x84
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f006 fa5c 	bl	80092ca <memset>
  if(uartHandle->Instance==USART3)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <HAL_UART_MspInit+0xc4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d144      	bne.n	8002ea6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e22:	2300      	movs	r3, #0
 8002e24:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e26:	f107 0310 	add.w	r3, r7, #16
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 f984 	bl	8004138 <HAL_RCCEx_PeriphCLKConfig>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e36:	f7ff fca1 	bl	800277c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e3a:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <HAL_UART_MspInit+0xc8>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <HAL_UART_MspInit+0xc8>)
 8002e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_UART_MspInit+0xc8>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_UART_MspInit+0xc8>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <HAL_UART_MspInit+0xc8>)
 8002e58:	f043 0308 	orr.w	r3, r3, #8
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_UART_MspInit+0xc8>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e84:	2307      	movs	r3, #7
 8002e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4809      	ldr	r0, [pc, #36]	; (8002eb8 <HAL_UART_MspInit+0xcc>)
 8002e92:	f000 fa61 	bl	8003358 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2100      	movs	r1, #0
 8002e9a:	2027      	movs	r0, #39	; 0x27
 8002e9c:	f000 f993 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ea0:	2027      	movs	r0, #39	; 0x27
 8002ea2:	f000 f9ac 	bl	80031fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	37a8      	adds	r7, #168	; 0xa8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40004800 	.word	0x40004800
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020c00 	.word	0x40020c00

08002ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ec0:	480d      	ldr	r0, [pc, #52]	; (8002ef8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ec2:	490e      	ldr	r1, [pc, #56]	; (8002efc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ec4:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec8:	e002      	b.n	8002ed0 <LoopCopyDataInit>

08002eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ece:	3304      	adds	r3, #4

08002ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed4:	d3f9      	bcc.n	8002eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ed8:	4c0b      	ldr	r4, [pc, #44]	; (8002f08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002edc:	e001      	b.n	8002ee2 <LoopFillZerobss>

08002ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee0:	3204      	adds	r2, #4

08002ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee4:	d3fb      	bcc.n	8002ede <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ee6:	f7ff fe15 	bl	8002b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eea:	f006 fa55 	bl	8009398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eee:	f7ff fbad 	bl	800264c <main>
  bx  lr    
 8002ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ef4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002efc:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8002f00:	0800b864 	.word	0x0800b864
  ldr r2, =_sbss
 8002f04:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8002f08:	200005e0 	.word	0x200005e0

08002f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f0c:	e7fe      	b.n	8002f0c <ADC_IRQHandler>

08002f0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f12:	2003      	movs	r0, #3
 8002f14:	f000 f94c 	bl	80031b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f000 f805 	bl	8002f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f1e:	f7ff fcbd 	bl	800289c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_InitTick+0x54>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_InitTick+0x58>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f967 	bl	800321a <HAL_SYSTICK_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00e      	b.n	8002f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d80a      	bhi.n	8002f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f000 f92f 	bl	80031c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f68:	4a06      	ldr	r2, [pc, #24]	; (8002f84 <HAL_InitTick+0x5c>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000074 	.word	0x20000074
 8002f80:	2000007c 	.word	0x2000007c
 8002f84:	20000078 	.word	0x20000078

08002f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_IncTick+0x20>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_IncTick+0x24>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <HAL_IncTick+0x24>)
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	2000007c 	.word	0x2000007c
 8002fac:	20000490 	.word	0x20000490

08002fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_GetTick+0x14>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000490 	.word	0x20000490

08002fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff ffee 	bl	8002fb0 <HAL_GetTick>
 8002fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d005      	beq.n	8002fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_Delay+0x44>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fee:	bf00      	nop
 8002ff0:	f7ff ffde 	bl	8002fb0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d8f7      	bhi.n	8002ff0 <HAL_Delay+0x28>
  {
  }
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000007c 	.word	0x2000007c

08003010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <__NVIC_SetPriorityGrouping+0x40>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800302c:	4013      	ands	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 800303a:	4313      	orrs	r3, r2
 800303c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303e:	4a04      	ldr	r2, [pc, #16]	; (8003050 <__NVIC_SetPriorityGrouping+0x40>)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	60d3      	str	r3, [r2, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00
 8003054:	05fa0000 	.word	0x05fa0000

08003058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <__NVIC_GetPriorityGrouping+0x18>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	f003 0307 	and.w	r3, r3, #7
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	2b00      	cmp	r3, #0
 8003084:	db0b      	blt.n	800309e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	4907      	ldr	r1, [pc, #28]	; (80030ac <__NVIC_EnableIRQ+0x38>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2001      	movs	r0, #1
 8003096:	fa00 f202 	lsl.w	r2, r0, r2
 800309a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e000e100 	.word	0xe000e100

080030b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	db0a      	blt.n	80030da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	490c      	ldr	r1, [pc, #48]	; (80030fc <__NVIC_SetPriority+0x4c>)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	0112      	lsls	r2, r2, #4
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	440b      	add	r3, r1
 80030d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d8:	e00a      	b.n	80030f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	4908      	ldr	r1, [pc, #32]	; (8003100 <__NVIC_SetPriority+0x50>)
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	3b04      	subs	r3, #4
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	440b      	add	r3, r1
 80030ee:	761a      	strb	r2, [r3, #24]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000e100 	.word	0xe000e100
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	; 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f1c3 0307 	rsb	r3, r3, #7
 800311e:	2b04      	cmp	r3, #4
 8003120:	bf28      	it	cs
 8003122:	2304      	movcs	r3, #4
 8003124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3304      	adds	r3, #4
 800312a:	2b06      	cmp	r3, #6
 800312c:	d902      	bls.n	8003134 <NVIC_EncodePriority+0x30>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3b03      	subs	r3, #3
 8003132:	e000      	b.n	8003136 <NVIC_EncodePriority+0x32>
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	f04f 32ff 	mov.w	r2, #4294967295
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43da      	mvns	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	401a      	ands	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800314c:	f04f 31ff 	mov.w	r1, #4294967295
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	43d9      	mvns	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800315c:	4313      	orrs	r3, r2
         );
}
 800315e:	4618      	mov	r0, r3
 8003160:	3724      	adds	r7, #36	; 0x24
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800317c:	d301      	bcc.n	8003182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800317e:	2301      	movs	r3, #1
 8003180:	e00f      	b.n	80031a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <SysTick_Config+0x40>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318a:	210f      	movs	r1, #15
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	f7ff ff8e 	bl	80030b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <SysTick_Config+0x40>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319a:	4b04      	ldr	r3, [pc, #16]	; (80031ac <SysTick_Config+0x40>)
 800319c:	2207      	movs	r2, #7
 800319e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	e000e010 	.word	0xe000e010

080031b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff ff29 	bl	8003010 <__NVIC_SetPriorityGrouping>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031d8:	f7ff ff3e 	bl	8003058 <__NVIC_GetPriorityGrouping>
 80031dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	6978      	ldr	r0, [r7, #20]
 80031e4:	f7ff ff8e 	bl	8003104 <NVIC_EncodePriority>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff5d 	bl	80030b0 <__NVIC_SetPriority>
}
 80031f6:	bf00      	nop
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff31 	bl	8003074 <__NVIC_EnableIRQ>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffa2 	bl	800316c <SysTick_Config>
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003240:	f7ff feb6 	bl	8002fb0 <HAL_GetTick>
 8003244:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d008      	beq.n	8003264 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e052      	b.n	800330a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0216 	bic.w	r2, r2, #22
 8003272:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003282:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <HAL_DMA_Abort+0x62>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0208 	bic.w	r2, r2, #8
 80032a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b4:	e013      	b.n	80032de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032b6:	f7ff fe7b 	bl	8002fb0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b05      	cmp	r3, #5
 80032c2:	d90c      	bls.n	80032de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2203      	movs	r2, #3
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e015      	b.n	800330a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e4      	bne.n	80032b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	223f      	movs	r2, #63	; 0x3f
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d004      	beq.n	8003330 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e00c      	b.n	800334a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2205      	movs	r2, #5
 8003334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	; 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	e175      	b.n	8003664 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003378:	2201      	movs	r2, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	429a      	cmp	r2, r3
 8003392:	f040 8164 	bne.w	800365e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d005      	beq.n	80033ae <HAL_GPIO_Init+0x56>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d130      	bne.n	8003410 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	2203      	movs	r2, #3
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e4:	2201      	movs	r2, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 0201 	and.w	r2, r3, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b03      	cmp	r3, #3
 800341a:	d017      	beq.n	800344c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d123      	bne.n	80034a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	08da      	lsrs	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3208      	adds	r2, #8
 8003460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	220f      	movs	r2, #15
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	08da      	lsrs	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3208      	adds	r2, #8
 800349a:	69b9      	ldr	r1, [r7, #24]
 800349c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0203 	and.w	r2, r3, #3
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80be 	beq.w	800365e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e2:	4b66      	ldr	r3, [pc, #408]	; (800367c <HAL_GPIO_Init+0x324>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	4a65      	ldr	r2, [pc, #404]	; (800367c <HAL_GPIO_Init+0x324>)
 80034e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ec:	6453      	str	r3, [r2, #68]	; 0x44
 80034ee:	4b63      	ldr	r3, [pc, #396]	; (800367c <HAL_GPIO_Init+0x324>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034fa:	4a61      	ldr	r2, [pc, #388]	; (8003680 <HAL_GPIO_Init+0x328>)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	3302      	adds	r3, #2
 8003502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	220f      	movs	r2, #15
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a58      	ldr	r2, [pc, #352]	; (8003684 <HAL_GPIO_Init+0x32c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d037      	beq.n	8003596 <HAL_GPIO_Init+0x23e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a57      	ldr	r2, [pc, #348]	; (8003688 <HAL_GPIO_Init+0x330>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d031      	beq.n	8003592 <HAL_GPIO_Init+0x23a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a56      	ldr	r2, [pc, #344]	; (800368c <HAL_GPIO_Init+0x334>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02b      	beq.n	800358e <HAL_GPIO_Init+0x236>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a55      	ldr	r2, [pc, #340]	; (8003690 <HAL_GPIO_Init+0x338>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d025      	beq.n	800358a <HAL_GPIO_Init+0x232>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a54      	ldr	r2, [pc, #336]	; (8003694 <HAL_GPIO_Init+0x33c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01f      	beq.n	8003586 <HAL_GPIO_Init+0x22e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a53      	ldr	r2, [pc, #332]	; (8003698 <HAL_GPIO_Init+0x340>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d019      	beq.n	8003582 <HAL_GPIO_Init+0x22a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a52      	ldr	r2, [pc, #328]	; (800369c <HAL_GPIO_Init+0x344>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_GPIO_Init+0x226>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a51      	ldr	r2, [pc, #324]	; (80036a0 <HAL_GPIO_Init+0x348>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00d      	beq.n	800357a <HAL_GPIO_Init+0x222>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a50      	ldr	r2, [pc, #320]	; (80036a4 <HAL_GPIO_Init+0x34c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <HAL_GPIO_Init+0x21e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4f      	ldr	r2, [pc, #316]	; (80036a8 <HAL_GPIO_Init+0x350>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_GPIO_Init+0x21a>
 800356e:	2309      	movs	r3, #9
 8003570:	e012      	b.n	8003598 <HAL_GPIO_Init+0x240>
 8003572:	230a      	movs	r3, #10
 8003574:	e010      	b.n	8003598 <HAL_GPIO_Init+0x240>
 8003576:	2308      	movs	r3, #8
 8003578:	e00e      	b.n	8003598 <HAL_GPIO_Init+0x240>
 800357a:	2307      	movs	r3, #7
 800357c:	e00c      	b.n	8003598 <HAL_GPIO_Init+0x240>
 800357e:	2306      	movs	r3, #6
 8003580:	e00a      	b.n	8003598 <HAL_GPIO_Init+0x240>
 8003582:	2305      	movs	r3, #5
 8003584:	e008      	b.n	8003598 <HAL_GPIO_Init+0x240>
 8003586:	2304      	movs	r3, #4
 8003588:	e006      	b.n	8003598 <HAL_GPIO_Init+0x240>
 800358a:	2303      	movs	r3, #3
 800358c:	e004      	b.n	8003598 <HAL_GPIO_Init+0x240>
 800358e:	2302      	movs	r3, #2
 8003590:	e002      	b.n	8003598 <HAL_GPIO_Init+0x240>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <HAL_GPIO_Init+0x240>
 8003596:	2300      	movs	r3, #0
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	f002 0203 	and.w	r2, r2, #3
 800359e:	0092      	lsls	r2, r2, #2
 80035a0:	4093      	lsls	r3, r2
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035a8:	4935      	ldr	r1, [pc, #212]	; (8003680 <HAL_GPIO_Init+0x328>)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	3302      	adds	r3, #2
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035b6:	4b3d      	ldr	r3, [pc, #244]	; (80036ac <HAL_GPIO_Init+0x354>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035da:	4a34      	ldr	r2, [pc, #208]	; (80036ac <HAL_GPIO_Init+0x354>)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035e0:	4b32      	ldr	r3, [pc, #200]	; (80036ac <HAL_GPIO_Init+0x354>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003604:	4a29      	ldr	r2, [pc, #164]	; (80036ac <HAL_GPIO_Init+0x354>)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800360a:	4b28      	ldr	r3, [pc, #160]	; (80036ac <HAL_GPIO_Init+0x354>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800362e:	4a1f      	ldr	r2, [pc, #124]	; (80036ac <HAL_GPIO_Init+0x354>)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_GPIO_Init+0x354>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003658:	4a14      	ldr	r2, [pc, #80]	; (80036ac <HAL_GPIO_Init+0x354>)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3301      	adds	r3, #1
 8003662:	61fb      	str	r3, [r7, #28]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b0f      	cmp	r3, #15
 8003668:	f67f ae86 	bls.w	8003378 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	3724      	adds	r7, #36	; 0x24
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	40013800 	.word	0x40013800
 8003684:	40020000 	.word	0x40020000
 8003688:	40020400 	.word	0x40020400
 800368c:	40020800 	.word	0x40020800
 8003690:	40020c00 	.word	0x40020c00
 8003694:	40021000 	.word	0x40021000
 8003698:	40021400 	.word	0x40021400
 800369c:	40021800 	.word	0x40021800
 80036a0:	40021c00 	.word	0x40021c00
 80036a4:	40022000 	.word	0x40022000
 80036a8:	40022400 	.word	0x40022400
 80036ac:	40013c00 	.word	0x40013c00

080036b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	807b      	strh	r3, [r7, #2]
 80036bc:	4613      	mov	r3, r2
 80036be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c0:	787b      	ldrb	r3, [r7, #1]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036c6:	887a      	ldrh	r2, [r7, #2]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036cc:	e003      	b.n	80036d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036ce:	887b      	ldrh	r3, [r7, #2]
 80036d0:	041a      	lsls	r2, r3, #16
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	619a      	str	r2, [r3, #24]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a04      	ldr	r2, [pc, #16]	; (8003700 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40007000 	.word	0x40007000

08003704 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	4b23      	ldr	r3, [pc, #140]	; (800379c <HAL_PWREx_EnableOverDrive+0x98>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	4a22      	ldr	r2, [pc, #136]	; (800379c <HAL_PWREx_EnableOverDrive+0x98>)
 8003714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003718:	6413      	str	r3, [r2, #64]	; 0x40
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <HAL_PWREx_EnableOverDrive+0x98>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003726:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003732:	f7ff fc3d 	bl	8002fb0 <HAL_GetTick>
 8003736:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003738:	e009      	b.n	800374e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800373a:	f7ff fc39 	bl	8002fb0 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003748:	d901      	bls.n	800374e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e022      	b.n	8003794 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375a:	d1ee      	bne.n	800373a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003766:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003768:	f7ff fc22 	bl	8002fb0 <HAL_GetTick>
 800376c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800376e:	e009      	b.n	8003784 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003770:	f7ff fc1e 	bl	8002fb0 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800377e:	d901      	bls.n	8003784 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e007      	b.n	8003794 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003790:	d1ee      	bne.n	8003770 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	40007000 	.word	0x40007000

080037a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037ac:	2300      	movs	r3, #0
 80037ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e291      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8087 	beq.w	80038d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c8:	4b96      	ldr	r3, [pc, #600]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d00c      	beq.n	80037ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d4:	4b93      	ldr	r3, [pc, #588]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d112      	bne.n	8003806 <HAL_RCC_OscConfig+0x62>
 80037e0:	4b90      	ldr	r3, [pc, #576]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ec:	d10b      	bne.n	8003806 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ee:	4b8d      	ldr	r3, [pc, #564]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d06c      	beq.n	80038d4 <HAL_RCC_OscConfig+0x130>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d168      	bne.n	80038d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e26b      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0x7a>
 8003810:	4b84      	ldr	r3, [pc, #528]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a83      	ldr	r2, [pc, #524]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e02e      	b.n	800387c <HAL_RCC_OscConfig+0xd8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x9c>
 8003826:	4b7f      	ldr	r3, [pc, #508]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a7e      	ldr	r2, [pc, #504]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 800382c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b7c      	ldr	r3, [pc, #496]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a7b      	ldr	r2, [pc, #492]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e01d      	b.n	800387c <HAL_RCC_OscConfig+0xd8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0xc0>
 800384a:	4b76      	ldr	r3, [pc, #472]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a75      	ldr	r2, [pc, #468]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	4b73      	ldr	r3, [pc, #460]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a72      	ldr	r2, [pc, #456]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0xd8>
 8003864:	4b6f      	ldr	r3, [pc, #444]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a6e      	ldr	r2, [pc, #440]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b6c      	ldr	r3, [pc, #432]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a6b      	ldr	r2, [pc, #428]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d013      	beq.n	80038ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7ff fb94 	bl	8002fb0 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388c:	f7ff fb90 	bl	8002fb0 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e21f      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	4b61      	ldr	r3, [pc, #388]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0xe8>
 80038aa:	e014      	b.n	80038d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7ff fb80 	bl	8002fb0 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b4:	f7ff fb7c 	bl	8002fb0 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e20b      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c6:	4b57      	ldr	r3, [pc, #348]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x110>
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d069      	beq.n	80039b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038e2:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ee:	4b4d      	ldr	r3, [pc, #308]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d11c      	bne.n	8003934 <HAL_RCC_OscConfig+0x190>
 80038fa:	4b4a      	ldr	r3, [pc, #296]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d116      	bne.n	8003934 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_RCC_OscConfig+0x17a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d001      	beq.n	800391e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e1df      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391e:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	493d      	ldr	r1, [pc, #244]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 800392e:	4313      	orrs	r3, r2
 8003930:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003932:	e040      	b.n	80039b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d023      	beq.n	8003984 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800393c:	4b39      	ldr	r3, [pc, #228]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a38      	ldr	r2, [pc, #224]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7ff fb32 	bl	8002fb0 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003950:	f7ff fb2e 	bl	8002fb0 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e1bd      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003962:	4b30      	ldr	r3, [pc, #192]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396e:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4929      	ldr	r1, [pc, #164]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]
 8003982:	e018      	b.n	80039b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003984:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7ff fb0e 	bl	8002fb0 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003998:	f7ff fb0a 	bl	8002fb0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e199      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039aa:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d038      	beq.n	8003a34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d019      	beq.n	80039fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ca:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80039cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ce:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d6:	f7ff faeb 	bl	8002fb0 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039de:	f7ff fae7 	bl	8002fb0 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e176      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 80039f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x23a>
 80039fc:	e01a      	b.n	8003a34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a02:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0a:	f7ff fad1 	bl	8002fb0 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a10:	e00a      	b.n	8003a28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a12:	f7ff facd 	bl	8002fb0 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d903      	bls.n	8003a28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e15c      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
 8003a24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a28:	4b91      	ldr	r3, [pc, #580]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1ee      	bne.n	8003a12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80a4 	beq.w	8003b8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a42:	4b8b      	ldr	r3, [pc, #556]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10d      	bne.n	8003a6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4a87      	ldr	r2, [pc, #540]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5a:	4b85      	ldr	r3, [pc, #532]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a6a:	4b82      	ldr	r3, [pc, #520]	; (8003c74 <HAL_RCC_OscConfig+0x4d0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d118      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a76:	4b7f      	ldr	r3, [pc, #508]	; (8003c74 <HAL_RCC_OscConfig+0x4d0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7e      	ldr	r2, [pc, #504]	; (8003c74 <HAL_RCC_OscConfig+0x4d0>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a82:	f7ff fa95 	bl	8002fb0 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8a:	f7ff fa91 	bl	8002fb0 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b64      	cmp	r3, #100	; 0x64
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e120      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a9c:	4b75      	ldr	r3, [pc, #468]	; (8003c74 <HAL_RCC_OscConfig+0x4d0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d106      	bne.n	8003abe <HAL_RCC_OscConfig+0x31a>
 8003ab0:	4b6f      	ldr	r3, [pc, #444]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	4a6e      	ldr	r2, [pc, #440]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6713      	str	r3, [r2, #112]	; 0x70
 8003abc:	e02d      	b.n	8003b1a <HAL_RCC_OscConfig+0x376>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x33c>
 8003ac6:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a69      	ldr	r2, [pc, #420]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad2:	4b67      	ldr	r3, [pc, #412]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	4a66      	ldr	r2, [pc, #408]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ade:	e01c      	b.n	8003b1a <HAL_RCC_OscConfig+0x376>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	d10c      	bne.n	8003b02 <HAL_RCC_OscConfig+0x35e>
 8003ae8:	4b61      	ldr	r3, [pc, #388]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	4a60      	ldr	r2, [pc, #384]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003aee:	f043 0304 	orr.w	r3, r3, #4
 8003af2:	6713      	str	r3, [r2, #112]	; 0x70
 8003af4:	4b5e      	ldr	r3, [pc, #376]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	4a5d      	ldr	r2, [pc, #372]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	6713      	str	r3, [r2, #112]	; 0x70
 8003b00:	e00b      	b.n	8003b1a <HAL_RCC_OscConfig+0x376>
 8003b02:	4b5b      	ldr	r3, [pc, #364]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	4a5a      	ldr	r2, [pc, #360]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0e:	4b58      	ldr	r3, [pc, #352]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	4a57      	ldr	r2, [pc, #348]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003b14:	f023 0304 	bic.w	r3, r3, #4
 8003b18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d015      	beq.n	8003b4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b22:	f7ff fa45 	bl	8002fb0 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b28:	e00a      	b.n	8003b40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2a:	f7ff fa41 	bl	8002fb0 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e0ce      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b40:	4b4b      	ldr	r3, [pc, #300]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ee      	beq.n	8003b2a <HAL_RCC_OscConfig+0x386>
 8003b4c:	e014      	b.n	8003b78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4e:	f7ff fa2f 	bl	8002fb0 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7ff fa2b 	bl	8002fb0 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e0b8      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6c:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1ee      	bne.n	8003b56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d105      	bne.n	8003b8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7e:	4b3c      	ldr	r3, [pc, #240]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	4a3b      	ldr	r2, [pc, #236]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80a4 	beq.w	8003cdc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b94:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d06b      	beq.n	8003c78 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d149      	bne.n	8003c3c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba8:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a30      	ldr	r2, [pc, #192]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7ff f9fc 	bl	8002fb0 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7ff f9f8 	bl	8002fb0 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e087      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	019b      	lsls	r3, r3, #6
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003c02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c06:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c14:	f7ff f9cc 	bl	8002fb0 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1c:	f7ff f9c8 	bl	8002fb0 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e057      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0x478>
 8003c3a:	e04f      	b.n	8003cdc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7ff f9b2 	bl	8002fb0 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c50:	f7ff f9ae 	bl	8002fb0 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e03d      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <HAL_RCC_OscConfig+0x4cc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x4ac>
 8003c6e:	e035      	b.n	8003cdc <HAL_RCC_OscConfig+0x538>
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <HAL_RCC_OscConfig+0x544>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d028      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d121      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d11a      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ca8:	4013      	ands	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d111      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800

08003cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0d0      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d04:	4b6a      	ldr	r3, [pc, #424]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d910      	bls.n	8003d34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b67      	ldr	r3, [pc, #412]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 020f 	bic.w	r2, r3, #15
 8003d1a:	4965      	ldr	r1, [pc, #404]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b63      	ldr	r3, [pc, #396]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0b8      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d4c:	4b59      	ldr	r3, [pc, #356]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a58      	ldr	r2, [pc, #352]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d64:	4b53      	ldr	r3, [pc, #332]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4a52      	ldr	r2, [pc, #328]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d70:	4b50      	ldr	r3, [pc, #320]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	494d      	ldr	r1, [pc, #308]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d040      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d107      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	4b47      	ldr	r3, [pc, #284]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d115      	bne.n	8003dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e07f      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dae:	4b41      	ldr	r3, [pc, #260]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e073      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbe:	4b3d      	ldr	r3, [pc, #244]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e06b      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dce:	4b39      	ldr	r3, [pc, #228]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f023 0203 	bic.w	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4936      	ldr	r1, [pc, #216]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de0:	f7ff f8e6 	bl	8002fb0 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de8:	f7ff f8e2 	bl	8002fb0 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e053      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 020c 	and.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d1eb      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e10:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d210      	bcs.n	8003e40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 020f 	bic.w	r2, r3, #15
 8003e26:	4922      	ldr	r1, [pc, #136]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b20      	ldr	r3, [pc, #128]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e032      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e4c:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4916      	ldr	r1, [pc, #88]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e6a:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	490e      	ldr	r1, [pc, #56]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e7e:	f000 f821 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 8003e82:	4602      	mov	r2, r0
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	490a      	ldr	r1, [pc, #40]	; (8003eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8003e90:	5ccb      	ldrb	r3, [r1, r3]
 8003e92:	fa22 f303 	lsr.w	r3, r2, r3
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <HAL_RCC_ClockConfig+0x1d0>)
 8003e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e9a:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <HAL_RCC_ClockConfig+0x1d4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff f842 	bl	8002f28 <HAL_InitTick>

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023c00 	.word	0x40023c00
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	0800b47c 	.word	0x0800b47c
 8003ebc:	20000074 	.word	0x20000074
 8003ec0:	20000078 	.word	0x20000078

08003ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec8:	b094      	sub	sp, #80	; 0x50
 8003eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003edc:	4b79      	ldr	r3, [pc, #484]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 030c 	and.w	r3, r3, #12
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d00d      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x40>
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	f200 80e1 	bhi.w	80040b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d003      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0x3a>
 8003ef6:	e0db      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ef8:	4b73      	ldr	r3, [pc, #460]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003efa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003efc:	e0db      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003efe:	4b73      	ldr	r3, [pc, #460]	; (80040cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f02:	e0d8      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f04:	4b6f      	ldr	r3, [pc, #444]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f0c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f0e:	4b6d      	ldr	r3, [pc, #436]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d063      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1a:	4b6a      	ldr	r3, [pc, #424]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	099b      	lsrs	r3, r3, #6
 8003f20:	2200      	movs	r2, #0
 8003f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2e:	2300      	movs	r3, #0
 8003f30:	637b      	str	r3, [r7, #52]	; 0x34
 8003f32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f36:	4622      	mov	r2, r4
 8003f38:	462b      	mov	r3, r5
 8003f3a:	f04f 0000 	mov.w	r0, #0
 8003f3e:	f04f 0100 	mov.w	r1, #0
 8003f42:	0159      	lsls	r1, r3, #5
 8003f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f48:	0150      	lsls	r0, r2, #5
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4621      	mov	r1, r4
 8003f50:	1a51      	subs	r1, r2, r1
 8003f52:	6139      	str	r1, [r7, #16]
 8003f54:	4629      	mov	r1, r5
 8003f56:	eb63 0301 	sbc.w	r3, r3, r1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f68:	4659      	mov	r1, fp
 8003f6a:	018b      	lsls	r3, r1, #6
 8003f6c:	4651      	mov	r1, sl
 8003f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f72:	4651      	mov	r1, sl
 8003f74:	018a      	lsls	r2, r1, #6
 8003f76:	4651      	mov	r1, sl
 8003f78:	ebb2 0801 	subs.w	r8, r2, r1
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f96:	4690      	mov	r8, r2
 8003f98:	4699      	mov	r9, r3
 8003f9a:	4623      	mov	r3, r4
 8003f9c:	eb18 0303 	adds.w	r3, r8, r3
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	462b      	mov	r3, r5
 8003fa4:	eb49 0303 	adc.w	r3, r9, r3
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	024b      	lsls	r3, r1, #9
 8003fba:	4621      	mov	r1, r4
 8003fbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	024a      	lsls	r2, r1, #9
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fca:	2200      	movs	r2, #0
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fd4:	f7fc fe5a 	bl	8000c8c <__aeabi_uldivmod>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4613      	mov	r3, r2
 8003fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe0:	e058      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe2:	4b38      	ldr	r3, [pc, #224]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	099b      	lsrs	r3, r3, #6
 8003fe8:	2200      	movs	r2, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	4611      	mov	r1, r2
 8003fee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ff2:	623b      	str	r3, [r7, #32]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	464b      	mov	r3, r9
 8004000:	f04f 0000 	mov.w	r0, #0
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	0159      	lsls	r1, r3, #5
 800400a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800400e:	0150      	lsls	r0, r2, #5
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4641      	mov	r1, r8
 8004016:	ebb2 0a01 	subs.w	sl, r2, r1
 800401a:	4649      	mov	r1, r9
 800401c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800402c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004034:	ebb2 040a 	subs.w	r4, r2, sl
 8004038:	eb63 050b 	sbc.w	r5, r3, fp
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	00eb      	lsls	r3, r5, #3
 8004046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800404a:	00e2      	lsls	r2, r4, #3
 800404c:	4614      	mov	r4, r2
 800404e:	461d      	mov	r5, r3
 8004050:	4643      	mov	r3, r8
 8004052:	18e3      	adds	r3, r4, r3
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	464b      	mov	r3, r9
 8004058:	eb45 0303 	adc.w	r3, r5, r3
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800406a:	4629      	mov	r1, r5
 800406c:	028b      	lsls	r3, r1, #10
 800406e:	4621      	mov	r1, r4
 8004070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004074:	4621      	mov	r1, r4
 8004076:	028a      	lsls	r2, r1, #10
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407e:	2200      	movs	r2, #0
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	61fa      	str	r2, [r7, #28]
 8004084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004088:	f7fc fe00 	bl	8000c8c <__aeabi_uldivmod>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4613      	mov	r3, r2
 8004092:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	3301      	adds	r3, #1
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80040a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ae:	e002      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80040b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3750      	adds	r7, #80	; 0x50
 80040bc:	46bd      	mov	sp, r7
 80040be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
 80040c8:	00f42400 	.word	0x00f42400
 80040cc:	007a1200 	.word	0x007a1200

080040d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000074 	.word	0x20000074

080040e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040ec:	f7ff fff0 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	0a9b      	lsrs	r3, r3, #10
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4903      	ldr	r1, [pc, #12]	; (800410c <HAL_RCC_GetPCLK1Freq+0x24>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40023800 	.word	0x40023800
 800410c:	0800b48c 	.word	0x0800b48c

08004110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004114:	f7ff ffdc 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	0b5b      	lsrs	r3, r3, #13
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	4903      	ldr	r1, [pc, #12]	; (8004134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40023800 	.word	0x40023800
 8004134:	0800b48c 	.word	0x0800b48c

08004138 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d012      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004160:	4b69      	ldr	r3, [pc, #420]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4a68      	ldr	r2, [pc, #416]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004166:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	4b66      	ldr	r3, [pc, #408]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004174:	4964      	ldr	r1, [pc, #400]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004182:	2301      	movs	r3, #1
 8004184:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d017      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004192:	4b5d      	ldr	r3, [pc, #372]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004198:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a0:	4959      	ldr	r1, [pc, #356]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b0:	d101      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80041b2:	2301      	movs	r3, #1
 80041b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80041be:	2301      	movs	r3, #1
 80041c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d017      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041ce:	4b4e      	ldr	r3, [pc, #312]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	494a      	ldr	r1, [pc, #296]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ec:	d101      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041ee:	2301      	movs	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041fa:	2301      	movs	r3, #1
 80041fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800420a:	2301      	movs	r3, #1
 800420c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 808b 	beq.w	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800421c:	4b3a      	ldr	r3, [pc, #232]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	4a39      	ldr	r2, [pc, #228]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004226:	6413      	str	r3, [r2, #64]	; 0x40
 8004228:	4b37      	ldr	r3, [pc, #220]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004234:	4b35      	ldr	r3, [pc, #212]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a34      	ldr	r2, [pc, #208]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800423a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004240:	f7fe feb6 	bl	8002fb0 <HAL_GetTick>
 8004244:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004248:	f7fe feb2 	bl	8002fb0 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b64      	cmp	r3, #100	; 0x64
 8004254:	d901      	bls.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e357      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800425a:	4b2c      	ldr	r3, [pc, #176]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d035      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	429a      	cmp	r2, r3
 8004282:	d02e      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004284:	4b20      	ldr	r3, [pc, #128]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800428e:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004298:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	4a1a      	ldr	r2, [pc, #104]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042a6:	4a18      	ldr	r2, [pc, #96]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042ac:	4b16      	ldr	r3, [pc, #88]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d114      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fe fe7a 	bl	8002fb0 <HAL_GetTick>
 80042bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042be:	e00a      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c0:	f7fe fe76 	bl	8002fb0 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e319      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0ee      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ee:	d111      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042fe:	400b      	ands	r3, r1
 8004300:	4901      	ldr	r1, [pc, #4]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
 8004306:	e00b      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004308:	40023800 	.word	0x40023800
 800430c:	40007000 	.word	0x40007000
 8004310:	0ffffcff 	.word	0x0ffffcff
 8004314:	4baa      	ldr	r3, [pc, #680]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4aa9      	ldr	r2, [pc, #676]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800431e:	6093      	str	r3, [r2, #8]
 8004320:	4ba7      	ldr	r3, [pc, #668]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432c:	49a4      	ldr	r1, [pc, #656]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432e:	4313      	orrs	r3, r2
 8004330:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b00      	cmp	r3, #0
 800433c:	d010      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800433e:	4ba0      	ldr	r3, [pc, #640]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004344:	4a9e      	ldr	r2, [pc, #632]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800434a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800434e:	4b9c      	ldr	r3, [pc, #624]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004350:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004358:	4999      	ldr	r1, [pc, #612]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800436c:	4b94      	ldr	r3, [pc, #592]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800437a:	4991      	ldr	r1, [pc, #580]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800438e:	4b8c      	ldr	r3, [pc, #560]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004394:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800439c:	4988      	ldr	r1, [pc, #544]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043b0:	4b83      	ldr	r3, [pc, #524]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043be:	4980      	ldr	r1, [pc, #512]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043d2:	4b7b      	ldr	r3, [pc, #492]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	4977      	ldr	r1, [pc, #476]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043f4:	4b72      	ldr	r3, [pc, #456]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fa:	f023 0203 	bic.w	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	496f      	ldr	r1, [pc, #444]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004416:	4b6a      	ldr	r3, [pc, #424]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441c:	f023 020c 	bic.w	r2, r3, #12
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004424:	4966      	ldr	r1, [pc, #408]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004438:	4b61      	ldr	r3, [pc, #388]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	495e      	ldr	r1, [pc, #376]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800445a:	4b59      	ldr	r3, [pc, #356]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004468:	4955      	ldr	r1, [pc, #340]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800447c:	4b50      	ldr	r3, [pc, #320]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	494d      	ldr	r1, [pc, #308]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800449e:	4b48      	ldr	r3, [pc, #288]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ac:	4944      	ldr	r1, [pc, #272]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80044c0:	4b3f      	ldr	r3, [pc, #252]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ce:	493c      	ldr	r1, [pc, #240]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80044e2:	4b37      	ldr	r3, [pc, #220]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f0:	4933      	ldr	r1, [pc, #204]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004504:	4b2e      	ldr	r3, [pc, #184]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004512:	492b      	ldr	r1, [pc, #172]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d011      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004526:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004534:	4922      	ldr	r1, [pc, #136]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004544:	d101      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004546:	2301      	movs	r3, #1
 8004548:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004556:	2301      	movs	r3, #1
 8004558:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004566:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004574:	4912      	ldr	r1, [pc, #72]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00b      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004598:	4909      	ldr	r1, [pc, #36]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d006      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 80d9 	beq.w	8004766 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045b4:	4b02      	ldr	r3, [pc, #8]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a01      	ldr	r2, [pc, #4]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045be:	e001      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80045c0:	40023800 	.word	0x40023800
 80045c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c6:	f7fe fcf3 	bl	8002fb0 <HAL_GetTick>
 80045ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045ce:	f7fe fcef 	bl	8002fb0 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b64      	cmp	r3, #100	; 0x64
 80045da:	d901      	bls.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e194      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045e0:	4b6c      	ldr	r3, [pc, #432]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f0      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d021      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d11d      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004600:	4b64      	ldr	r3, [pc, #400]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004606:	0c1b      	lsrs	r3, r3, #16
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800460e:	4b61      	ldr	r3, [pc, #388]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004614:	0e1b      	lsrs	r3, r3, #24
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	019a      	lsls	r2, r3, #6
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	431a      	orrs	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	061b      	lsls	r3, r3, #24
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	071b      	lsls	r3, r3, #28
 8004634:	4957      	ldr	r1, [pc, #348]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800465a:	2b00      	cmp	r3, #0
 800465c:	d02e      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004666:	d129      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004668:	4b4a      	ldr	r3, [pc, #296]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800466a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466e:	0c1b      	lsrs	r3, r3, #16
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004676:	4b47      	ldr	r3, [pc, #284]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467c:	0f1b      	lsrs	r3, r3, #28
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	019a      	lsls	r2, r3, #6
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	431a      	orrs	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	071b      	lsls	r3, r3, #28
 800469c:	493d      	ldr	r1, [pc, #244]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046a4:	4b3b      	ldr	r3, [pc, #236]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046aa:	f023 021f 	bic.w	r2, r3, #31
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	3b01      	subs	r3, #1
 80046b4:	4937      	ldr	r1, [pc, #220]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01d      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046c8:	4b32      	ldr	r3, [pc, #200]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ce:	0e1b      	lsrs	r3, r3, #24
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046d6:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046dc:	0f1b      	lsrs	r3, r3, #28
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	019a      	lsls	r2, r3, #6
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	041b      	lsls	r3, r3, #16
 80046f0:	431a      	orrs	r2, r3
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	061b      	lsls	r3, r3, #24
 80046f6:	431a      	orrs	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	071b      	lsls	r3, r3, #28
 80046fc:	4925      	ldr	r1, [pc, #148]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d011      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	019a      	lsls	r2, r3, #6
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	041b      	lsls	r3, r3, #16
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	061b      	lsls	r3, r3, #24
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	071b      	lsls	r3, r3, #28
 800472c:	4919      	ldr	r1, [pc, #100]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004734:	4b17      	ldr	r3, [pc, #92]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a16      	ldr	r2, [pc, #88]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800473a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800473e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004740:	f7fe fc36 	bl	8002fb0 <HAL_GetTick>
 8004744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004746:	e008      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004748:	f7fe fc32 	bl	8002fb0 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b64      	cmp	r3, #100	; 0x64
 8004754:	d901      	bls.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e0d7      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800475a:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b01      	cmp	r3, #1
 800476a:	f040 80cd 	bne.w	8004908 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a08      	ldr	r2, [pc, #32]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800477a:	f7fe fc19 	bl	8002fb0 <HAL_GetTick>
 800477e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004780:	e00a      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004782:	f7fe fc15 	bl	8002fb0 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b64      	cmp	r3, #100	; 0x64
 800478e:	d903      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e0ba      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004794:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004798:	4b5e      	ldr	r3, [pc, #376]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a4:	d0ed      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d02e      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d12a      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047ce:	4b51      	ldr	r3, [pc, #324]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047dc:	4b4d      	ldr	r3, [pc, #308]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	0f1b      	lsrs	r3, r3, #28
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	019a      	lsls	r2, r3, #6
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	041b      	lsls	r3, r3, #16
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	061b      	lsls	r3, r3, #24
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	071b      	lsls	r3, r3, #28
 8004802:	4944      	ldr	r1, [pc, #272]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800480a:	4b42      	ldr	r3, [pc, #264]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800480c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004810:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	493d      	ldr	r1, [pc, #244]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d022      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004838:	d11d      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800483a:	4b36      	ldr	r3, [pc, #216]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	0e1b      	lsrs	r3, r3, #24
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004848:	4b32      	ldr	r3, [pc, #200]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	0f1b      	lsrs	r3, r3, #28
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	019a      	lsls	r2, r3, #6
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	431a      	orrs	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	061b      	lsls	r3, r3, #24
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	071b      	lsls	r3, r3, #28
 800486e:	4929      	ldr	r1, [pc, #164]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d028      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004882:	4b24      	ldr	r3, [pc, #144]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004888:	0e1b      	lsrs	r3, r3, #24
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004890:	4b20      	ldr	r3, [pc, #128]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	0c1b      	lsrs	r3, r3, #16
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	019a      	lsls	r2, r3, #6
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	041b      	lsls	r3, r3, #16
 80048a8:	431a      	orrs	r2, r3
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	061b      	lsls	r3, r3, #24
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	071b      	lsls	r3, r3, #28
 80048b6:	4917      	ldr	r1, [pc, #92]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048be:	4b15      	ldr	r3, [pc, #84]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	4911      	ldr	r1, [pc, #68]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a0e      	ldr	r2, [pc, #56]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e0:	f7fe fb66 	bl	8002fb0 <HAL_GetTick>
 80048e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048e8:	f7fe fb62 	bl	8002fb0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b64      	cmp	r3, #100	; 0x64
 80048f4:	d901      	bls.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e007      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004906:	d1ef      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800

08004918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e09d      	b.n	8004a66 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d108      	bne.n	8004944 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800493a:	d009      	beq.n	8004950 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	61da      	str	r2, [r3, #28]
 8004942:	e005      	b.n	8004950 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd ff4a 	bl	8002804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004986:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004990:	d902      	bls.n	8004998 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e002      	b.n	800499e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800499c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049a6:	d007      	beq.n	80049b8 <HAL_SPI_Init+0xa0>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049b0:	d002      	beq.n	80049b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	ea42 0103 	orr.w	r1, r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	0c1b      	lsrs	r3, r3, #16
 8004a14:	f003 0204 	and.w	r2, r3, #4
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a34:	ea42 0103 	orr.w	r1, r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69da      	ldr	r2, [r3, #28]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b088      	sub	sp, #32
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_SPI_Transmit+0x22>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e158      	b.n	8004d42 <HAL_SPI_Transmit+0x2d4>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a98:	f7fe fa8a 	bl	8002fb0 <HAL_GetTick>
 8004a9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d002      	beq.n	8004ab4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ab2:	e13d      	b.n	8004d30 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_Transmit+0x52>
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ac4:	e134      	b.n	8004d30 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2203      	movs	r2, #3
 8004aca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b10:	d10f      	bne.n	8004b32 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b40      	cmp	r3, #64	; 0x40
 8004b3e:	d007      	beq.n	8004b50 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b58:	d94b      	bls.n	8004bf2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_SPI_Transmit+0xfa>
 8004b62:	8afb      	ldrh	r3, [r7, #22]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d13e      	bne.n	8004be6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	881a      	ldrh	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	1c9a      	adds	r2, r3, #2
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b8c:	e02b      	b.n	8004be6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d112      	bne.n	8004bc2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	1c9a      	adds	r2, r3, #2
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bc0:	e011      	b.n	8004be6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc2:	f7fe f9f5 	bl	8002fb0 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d803      	bhi.n	8004bda <HAL_SPI_Transmit+0x16c>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d102      	bne.n	8004be0 <HAL_SPI_Transmit+0x172>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d102      	bne.n	8004be6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004be4:	e0a4      	b.n	8004d30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1ce      	bne.n	8004b8e <HAL_SPI_Transmit+0x120>
 8004bf0:	e07c      	b.n	8004cec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_SPI_Transmit+0x192>
 8004bfa:	8afb      	ldrh	r3, [r7, #22]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d170      	bne.n	8004ce2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d912      	bls.n	8004c30 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	881a      	ldrh	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	1c9a      	adds	r2, r3, #2
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b02      	subs	r3, #2
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c2e:	e058      	b.n	8004ce2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	7812      	ldrb	r2, [r2, #0]
 8004c3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c56:	e044      	b.n	8004ce2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d12b      	bne.n	8004cbe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d912      	bls.n	8004c96 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	881a      	ldrh	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	1c9a      	adds	r2, r3, #2
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b02      	subs	r3, #2
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c94:	e025      	b.n	8004ce2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	7812      	ldrb	r2, [r2, #0]
 8004ca2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cbc:	e011      	b.n	8004ce2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cbe:	f7fe f977 	bl	8002fb0 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d803      	bhi.n	8004cd6 <HAL_SPI_Transmit+0x268>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d102      	bne.n	8004cdc <HAL_SPI_Transmit+0x26e>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ce0:	e026      	b.n	8004d30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1b5      	bne.n	8004c58 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	6839      	ldr	r1, [r7, #0]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fe1b 	bl	800592c <SPI_EndRxTxTransaction>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e000      	b.n	8004d30 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004d2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d40:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3720      	adds	r7, #32
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b088      	sub	sp, #32
 8004d4e:	af02      	add	r7, sp, #8
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	4613      	mov	r3, r2
 8004d58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d66:	d112      	bne.n	8004d8e <HAL_SPI_Receive+0x44>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10e      	bne.n	8004d8e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2204      	movs	r2, #4
 8004d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d78:	88fa      	ldrh	r2, [r7, #6]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f910 	bl	8004faa <HAL_SPI_TransmitReceive>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	e109      	b.n	8004fa2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_SPI_Receive+0x52>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e102      	b.n	8004fa2 <HAL_SPI_Receive+0x258>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004da4:	f7fe f904 	bl	8002fb0 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d002      	beq.n	8004dbc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
 8004db8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dba:	e0e9      	b.n	8004f90 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_SPI_Receive+0x7e>
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dcc:	e0e0      	b.n	8004f90 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2204      	movs	r2, #4
 8004dd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	88fa      	ldrh	r2, [r7, #6]
 8004dee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e18:	d908      	bls.n	8004e2c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	e007      	b.n	8004e3c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e3a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e44:	d10f      	bne.n	8004e66 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e70:	2b40      	cmp	r3, #64	; 0x40
 8004e72:	d007      	beq.n	8004e84 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e8c:	d867      	bhi.n	8004f5e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e8e:	e030      	b.n	8004ef2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d117      	bne.n	8004ece <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f103 020c 	add.w	r2, r3, #12
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	7812      	ldrb	r2, [r2, #0]
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004ecc:	e011      	b.n	8004ef2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ece:	f7fe f86f 	bl	8002fb0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d803      	bhi.n	8004ee6 <HAL_SPI_Receive+0x19c>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d102      	bne.n	8004eec <HAL_SPI_Receive+0x1a2>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ef0:	e04e      	b.n	8004f90 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1c8      	bne.n	8004e90 <HAL_SPI_Receive+0x146>
 8004efe:	e034      	b.n	8004f6a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d115      	bne.n	8004f3a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	b292      	uxth	r2, r2
 8004f1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	1c9a      	adds	r2, r3, #2
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f38:	e011      	b.n	8004f5e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f3a:	f7fe f839 	bl	8002fb0 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d803      	bhi.n	8004f52 <HAL_SPI_Receive+0x208>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d102      	bne.n	8004f58 <HAL_SPI_Receive+0x20e>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d102      	bne.n	8004f5e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f5c:	e018      	b.n	8004f90 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1ca      	bne.n	8004f00 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fc60 	bl	8005834 <SPI_EndRxTransaction>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	75fb      	strb	r3, [r7, #23]
 8004f8c:	e000      	b.n	8004f90 <HAL_SPI_Receive+0x246>
  }

error :
 8004f8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b08a      	sub	sp, #40	; 0x28
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x26>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e1fb      	b.n	80053c8 <HAL_SPI_TransmitReceive+0x41e>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fd8:	f7fd ffea 	bl	8002fb0 <HAL_GetTick>
 8004fdc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fe4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004fec:	887b      	ldrh	r3, [r7, #2]
 8004fee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ff0:	887b      	ldrh	r3, [r7, #2]
 8004ff2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ff4:	7efb      	ldrb	r3, [r7, #27]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d00e      	beq.n	8005018 <HAL_SPI_TransmitReceive+0x6e>
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005000:	d106      	bne.n	8005010 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d102      	bne.n	8005010 <HAL_SPI_TransmitReceive+0x66>
 800500a:	7efb      	ldrb	r3, [r7, #27]
 800500c:	2b04      	cmp	r3, #4
 800500e:	d003      	beq.n	8005018 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005010:	2302      	movs	r3, #2
 8005012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005016:	e1cd      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_SPI_TransmitReceive+0x80>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_SPI_TransmitReceive+0x80>
 8005024:	887b      	ldrh	r3, [r7, #2]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005030:	e1c0      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b04      	cmp	r3, #4
 800503c:	d003      	beq.n	8005046 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2205      	movs	r2, #5
 8005042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	887a      	ldrh	r2, [r7, #2]
 8005056:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	887a      	ldrh	r2, [r7, #2]
 800505e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	887a      	ldrh	r2, [r7, #2]
 800506c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	887a      	ldrh	r2, [r7, #2]
 8005072:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005088:	d802      	bhi.n	8005090 <HAL_SPI_TransmitReceive+0xe6>
 800508a:	8a3b      	ldrh	r3, [r7, #16]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d908      	bls.n	80050a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800509e:	605a      	str	r2, [r3, #4]
 80050a0:	e007      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	d007      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050d8:	d97c      	bls.n	80051d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <HAL_SPI_TransmitReceive+0x13e>
 80050e2:	8a7b      	ldrh	r3, [r7, #18]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d169      	bne.n	80051bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	881a      	ldrh	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	1c9a      	adds	r2, r3, #2
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800510c:	e056      	b.n	80051bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b02      	cmp	r3, #2
 800511a:	d11b      	bne.n	8005154 <HAL_SPI_TransmitReceive+0x1aa>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <HAL_SPI_TransmitReceive+0x1aa>
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	2b01      	cmp	r3, #1
 800512a:	d113      	bne.n	8005154 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	881a      	ldrh	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	1c9a      	adds	r2, r3, #2
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b01      	cmp	r3, #1
 8005160:	d11c      	bne.n	800519c <HAL_SPI_TransmitReceive+0x1f2>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d016      	beq.n	800519c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	b292      	uxth	r2, r2
 800517a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	1c9a      	adds	r2, r3, #2
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005198:	2301      	movs	r3, #1
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800519c:	f7fd ff08 	bl	8002fb0 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d807      	bhi.n	80051bc <HAL_SPI_TransmitReceive+0x212>
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b2:	d003      	beq.n	80051bc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80051ba:	e0fb      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1a3      	bne.n	800510e <HAL_SPI_TransmitReceive+0x164>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d19d      	bne.n	800510e <HAL_SPI_TransmitReceive+0x164>
 80051d2:	e0df      	b.n	8005394 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_SPI_TransmitReceive+0x23a>
 80051dc:	8a7b      	ldrh	r3, [r7, #18]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	f040 80cb 	bne.w	800537a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d912      	bls.n	8005214 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	881a      	ldrh	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	1c9a      	adds	r2, r3, #2
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b02      	subs	r3, #2
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005212:	e0b2      	b.n	800537a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	7812      	ldrb	r2, [r2, #0]
 8005220:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800523a:	e09e      	b.n	800537a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d134      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x30a>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02f      	beq.n	80052b4 <HAL_SPI_TransmitReceive+0x30a>
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	2b01      	cmp	r3, #1
 8005258:	d12c      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d912      	bls.n	800528a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	881a      	ldrh	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	1c9a      	adds	r2, r3, #2
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b02      	subs	r3, #2
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005288:	e012      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	330c      	adds	r3, #12
 8005294:	7812      	ldrb	r2, [r2, #0]
 8005296:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d148      	bne.n	8005354 <HAL_SPI_TransmitReceive+0x3aa>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d042      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d923      	bls.n	8005322 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	b292      	uxth	r2, r2
 80052e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	1c9a      	adds	r2, r3, #2
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b02      	subs	r3, #2
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	d81f      	bhi.n	8005350 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800531e:	605a      	str	r2, [r3, #4]
 8005320:	e016      	b.n	8005350 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f103 020c 	add.w	r2, r3, #12
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	7812      	ldrb	r2, [r2, #0]
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005350:	2301      	movs	r3, #1
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005354:	f7fd fe2c 	bl	8002fb0 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005360:	429a      	cmp	r2, r3
 8005362:	d803      	bhi.n	800536c <HAL_SPI_TransmitReceive+0x3c2>
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536a:	d102      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x3c8>
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	2b00      	cmp	r3, #0
 8005370:	d103      	bne.n	800537a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005378:	e01c      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	f47f af5b 	bne.w	800523c <HAL_SPI_TransmitReceive+0x292>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	f47f af54 	bne.w	800523c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fac7 	bl	800592c <SPI_EndRxTxTransaction>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d006      	beq.n	80053b2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	661a      	str	r2, [r3, #96]	; 0x60
 80053b0:	e000      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80053b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80053c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3728      	adds	r7, #40	; 0x28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10e      	bne.n	8005410 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d009      	beq.n	8005410 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
    return;
 800540e:	e0ce      	b.n	80055ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <HAL_SPI_IRQHandler+0x5e>
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4798      	blx	r3
    return;
 800542c:	e0bf      	b.n	80055ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <HAL_SPI_IRQHandler+0x7e>
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d105      	bne.n	800544e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80b0 	beq.w	80055ae <HAL_SPI_IRQHandler+0x1de>
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 80aa 	beq.w	80055ae <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d023      	beq.n	80054ac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b03      	cmp	r3, #3
 800546e:	d011      	beq.n	8005494 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005474:	f043 0204 	orr.w	r2, r3, #4
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	e00b      	b.n	80054ac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]
        return;
 80054aa:	e080      	b.n	80055ae <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d014      	beq.n	80054e0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ba:	f043 0201 	orr.w	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00c      	beq.n	8005504 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ee:	f043 0208 	orr.w	r2, r3, #8
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005508:	2b00      	cmp	r3, #0
 800550a:	d04f      	beq.n	80055ac <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800551a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <HAL_SPI_IRQHandler+0x168>
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d034      	beq.n	80055a2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0203 	bic.w	r2, r2, #3
 8005546:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554c:	2b00      	cmp	r3, #0
 800554e:	d011      	beq.n	8005574 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005554:	4a17      	ldr	r2, [pc, #92]	; (80055b4 <HAL_SPI_IRQHandler+0x1e4>)
 8005556:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555c:	4618      	mov	r0, r3
 800555e:	f7fd fed8 	bl	8003312 <HAL_DMA_Abort_IT>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005578:	2b00      	cmp	r3, #0
 800557a:	d016      	beq.n	80055aa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005580:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <HAL_SPI_IRQHandler+0x1e4>)
 8005582:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005588:	4618      	mov	r0, r3
 800558a:	f7fd fec2 	bl	8003312 <HAL_DMA_Abort_IT>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80055a0:	e003      	b.n	80055aa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f808 	bl	80055b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80055a8:	e000      	b.n	80055ac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80055aa:	bf00      	nop
    return;
 80055ac:	bf00      	nop
  }
}
 80055ae:	3720      	adds	r7, #32
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	080055cd 	.word	0x080055cd

080055b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff ffe5 	bl	80055b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	4613      	mov	r3, r2
 8005606:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005608:	f7fd fcd2 	bl	8002fb0 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	4413      	add	r3, r2
 8005616:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005618:	f7fd fcca 	bl	8002fb0 <HAL_GetTick>
 800561c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800561e:	4b39      	ldr	r3, [pc, #228]	; (8005704 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	015b      	lsls	r3, r3, #5
 8005624:	0d1b      	lsrs	r3, r3, #20
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	fb02 f303 	mul.w	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800562e:	e054      	b.n	80056da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d050      	beq.n	80056da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005638:	f7fd fcba 	bl	8002fb0 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	429a      	cmp	r2, r3
 8005646:	d902      	bls.n	800564e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d13d      	bne.n	80056ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800565c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005666:	d111      	bne.n	800568c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005670:	d004      	beq.n	800567c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567a:	d107      	bne.n	800568c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800568a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005694:	d10f      	bne.n	80056b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e017      	b.n	80056fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d19b      	bne.n	8005630 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000074 	.word	0x20000074

08005708 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800571a:	f7fd fc49 	bl	8002fb0 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	1a9b      	subs	r3, r3, r2
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	4413      	add	r3, r2
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800572a:	f7fd fc41 	bl	8002fb0 <HAL_GetTick>
 800572e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005738:	4b3d      	ldr	r3, [pc, #244]	; (8005830 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	00da      	lsls	r2, r3, #3
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	0d1b      	lsrs	r3, r3, #20
 8005748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574a:	fb02 f303 	mul.w	r3, r2, r3
 800574e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005750:	e060      	b.n	8005814 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005758:	d107      	bne.n	800576a <SPI_WaitFifoStateUntilTimeout+0x62>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d104      	bne.n	800576a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005768:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d050      	beq.n	8005814 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005772:	f7fd fc1d 	bl	8002fb0 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577e:	429a      	cmp	r2, r3
 8005780:	d902      	bls.n	8005788 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	2b00      	cmp	r3, #0
 8005786:	d13d      	bne.n	8005804 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005796:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057a0:	d111      	bne.n	80057c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057aa:	d004      	beq.n	80057b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b4:	d107      	bne.n	80057c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ce:	d10f      	bne.n	80057f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e010      	b.n	8005826 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3b01      	subs	r3, #1
 8005812:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4013      	ands	r3, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d196      	bne.n	8005752 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3728      	adds	r7, #40	; 0x28
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000074 	.word	0x20000074

08005834 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af02      	add	r7, sp, #8
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005848:	d111      	bne.n	800586e <SPI_EndRxTransaction+0x3a>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005852:	d004      	beq.n	800585e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585c:	d107      	bne.n	800586e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005876:	d112      	bne.n	800589e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2200      	movs	r2, #0
 8005880:	2180      	movs	r1, #128	; 0x80
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f7ff feb8 	bl	80055f8 <SPI_WaitFlagStateUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d021      	beq.n	80058d2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005892:	f043 0220 	orr.w	r2, r3, #32
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e03d      	b.n	800591a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <SPI_EndRxTransaction+0xf0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a21      	ldr	r2, [pc, #132]	; (8005928 <SPI_EndRxTransaction+0xf4>)
 80058a4:	fba2 2303 	umull	r2, r3, r2, r3
 80058a8:	0d5b      	lsrs	r3, r3, #21
 80058aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058ae:	fb02 f303 	mul.w	r3, r2, r3
 80058b2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	3b01      	subs	r3, #1
 80058be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b80      	cmp	r3, #128	; 0x80
 80058cc:	d0f2      	beq.n	80058b4 <SPI_EndRxTransaction+0x80>
 80058ce:	e000      	b.n	80058d2 <SPI_EndRxTransaction+0x9e>
        break;
 80058d0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058da:	d11d      	bne.n	8005918 <SPI_EndRxTransaction+0xe4>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e4:	d004      	beq.n	80058f0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ee:	d113      	bne.n	8005918 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f7ff ff03 	bl	8005708 <SPI_WaitFifoStateUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590c:	f043 0220 	orr.w	r2, r3, #32
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e000      	b.n	800591a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20000074 	.word	0x20000074
 8005928:	165e9f81 	.word	0x165e9f81

0800592c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af02      	add	r7, sp, #8
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2200      	movs	r2, #0
 8005940:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f7ff fedf 	bl	8005708 <SPI_WaitFifoStateUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005954:	f043 0220 	orr.w	r2, r3, #32
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e046      	b.n	80059ee <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005960:	4b25      	ldr	r3, [pc, #148]	; (80059f8 <SPI_EndRxTxTransaction+0xcc>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a25      	ldr	r2, [pc, #148]	; (80059fc <SPI_EndRxTxTransaction+0xd0>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	0d5b      	lsrs	r3, r3, #21
 800596c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005970:	fb02 f303 	mul.w	r3, r2, r3
 8005974:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597e:	d112      	bne.n	80059a6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2200      	movs	r2, #0
 8005988:	2180      	movs	r1, #128	; 0x80
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff fe34 	bl	80055f8 <SPI_WaitFlagStateUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599a:	f043 0220 	orr.w	r2, r3, #32
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e023      	b.n	80059ee <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059bc:	2b80      	cmp	r3, #128	; 0x80
 80059be:	d0f2      	beq.n	80059a6 <SPI_EndRxTxTransaction+0x7a>
 80059c0:	e000      	b.n	80059c4 <SPI_EndRxTxTransaction+0x98>
        break;
 80059c2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff fe99 	bl	8005708 <SPI_WaitFifoStateUntilTimeout>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e0:	f043 0220 	orr.w	r2, r3, #32
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e000      	b.n	80059ee <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000074 	.word	0x20000074
 80059fc:	165e9f81 	.word	0x165e9f81

08005a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e049      	b.n	8005aa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fd f92e 	bl	8002c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f000 fd26 	bl	8006490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d001      	beq.n	8005ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e054      	b.n	8005b72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a26      	ldr	r2, [pc, #152]	; (8005b80 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d022      	beq.n	8005b30 <HAL_TIM_Base_Start_IT+0x80>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af2:	d01d      	beq.n	8005b30 <HAL_TIM_Base_Start_IT+0x80>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a22      	ldr	r2, [pc, #136]	; (8005b84 <HAL_TIM_Base_Start_IT+0xd4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d018      	beq.n	8005b30 <HAL_TIM_Base_Start_IT+0x80>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a21      	ldr	r2, [pc, #132]	; (8005b88 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d013      	beq.n	8005b30 <HAL_TIM_Base_Start_IT+0x80>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a1f      	ldr	r2, [pc, #124]	; (8005b8c <HAL_TIM_Base_Start_IT+0xdc>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00e      	beq.n	8005b30 <HAL_TIM_Base_Start_IT+0x80>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a1e      	ldr	r2, [pc, #120]	; (8005b90 <HAL_TIM_Base_Start_IT+0xe0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d009      	beq.n	8005b30 <HAL_TIM_Base_Start_IT+0x80>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a1c      	ldr	r2, [pc, #112]	; (8005b94 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d004      	beq.n	8005b30 <HAL_TIM_Base_Start_IT+0x80>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1b      	ldr	r2, [pc, #108]	; (8005b98 <HAL_TIM_Base_Start_IT+0xe8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d115      	bne.n	8005b5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <HAL_TIM_Base_Start_IT+0xec>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b06      	cmp	r3, #6
 8005b40:	d015      	beq.n	8005b6e <HAL_TIM_Base_Start_IT+0xbe>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b48:	d011      	beq.n	8005b6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5a:	e008      	b.n	8005b6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e000      	b.n	8005b70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40010000 	.word	0x40010000
 8005b84:	40000400 	.word	0x40000400
 8005b88:	40000800 	.word	0x40000800
 8005b8c:	40000c00 	.word	0x40000c00
 8005b90:	40010400 	.word	0x40010400
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40001800 	.word	0x40001800
 8005b9c:	00010007 	.word	0x00010007

08005ba0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e049      	b.n	8005c46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fd f882 	bl	8002cd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f000 fc56 	bl	8006490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <HAL_TIM_PWM_Start+0x24>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	bf14      	ite	ne
 8005c6c:	2301      	movne	r3, #1
 8005c6e:	2300      	moveq	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	e03c      	b.n	8005cee <HAL_TIM_PWM_Start+0x9e>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d109      	bne.n	8005c8e <HAL_TIM_PWM_Start+0x3e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	bf14      	ite	ne
 8005c86:	2301      	movne	r3, #1
 8005c88:	2300      	moveq	r3, #0
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	e02f      	b.n	8005cee <HAL_TIM_PWM_Start+0x9e>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d109      	bne.n	8005ca8 <HAL_TIM_PWM_Start+0x58>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	bf14      	ite	ne
 8005ca0:	2301      	movne	r3, #1
 8005ca2:	2300      	moveq	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	e022      	b.n	8005cee <HAL_TIM_PWM_Start+0x9e>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b0c      	cmp	r3, #12
 8005cac:	d109      	bne.n	8005cc2 <HAL_TIM_PWM_Start+0x72>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	bf14      	ite	ne
 8005cba:	2301      	movne	r3, #1
 8005cbc:	2300      	moveq	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	e015      	b.n	8005cee <HAL_TIM_PWM_Start+0x9e>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b10      	cmp	r3, #16
 8005cc6:	d109      	bne.n	8005cdc <HAL_TIM_PWM_Start+0x8c>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	e008      	b.n	8005cee <HAL_TIM_PWM_Start+0x9e>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	bf14      	ite	ne
 8005ce8:	2301      	movne	r3, #1
 8005cea:	2300      	moveq	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e092      	b.n	8005e1c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <HAL_TIM_PWM_Start+0xb6>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d04:	e023      	b.n	8005d4e <HAL_TIM_PWM_Start+0xfe>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d104      	bne.n	8005d16 <HAL_TIM_PWM_Start+0xc6>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d14:	e01b      	b.n	8005d4e <HAL_TIM_PWM_Start+0xfe>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d104      	bne.n	8005d26 <HAL_TIM_PWM_Start+0xd6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d24:	e013      	b.n	8005d4e <HAL_TIM_PWM_Start+0xfe>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b0c      	cmp	r3, #12
 8005d2a:	d104      	bne.n	8005d36 <HAL_TIM_PWM_Start+0xe6>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d34:	e00b      	b.n	8005d4e <HAL_TIM_PWM_Start+0xfe>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b10      	cmp	r3, #16
 8005d3a:	d104      	bne.n	8005d46 <HAL_TIM_PWM_Start+0xf6>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d44:	e003      	b.n	8005d4e <HAL_TIM_PWM_Start+0xfe>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2201      	movs	r2, #1
 8005d54:	6839      	ldr	r1, [r7, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 ff32 	bl	8006bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a30      	ldr	r2, [pc, #192]	; (8005e24 <HAL_TIM_PWM_Start+0x1d4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_TIM_PWM_Start+0x120>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2f      	ldr	r2, [pc, #188]	; (8005e28 <HAL_TIM_PWM_Start+0x1d8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d101      	bne.n	8005d74 <HAL_TIM_PWM_Start+0x124>
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <HAL_TIM_PWM_Start+0x126>
 8005d74:	2300      	movs	r3, #0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d007      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a25      	ldr	r2, [pc, #148]	; (8005e24 <HAL_TIM_PWM_Start+0x1d4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d022      	beq.n	8005dda <HAL_TIM_PWM_Start+0x18a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9c:	d01d      	beq.n	8005dda <HAL_TIM_PWM_Start+0x18a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a22      	ldr	r2, [pc, #136]	; (8005e2c <HAL_TIM_PWM_Start+0x1dc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d018      	beq.n	8005dda <HAL_TIM_PWM_Start+0x18a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a20      	ldr	r2, [pc, #128]	; (8005e30 <HAL_TIM_PWM_Start+0x1e0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d013      	beq.n	8005dda <HAL_TIM_PWM_Start+0x18a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a1f      	ldr	r2, [pc, #124]	; (8005e34 <HAL_TIM_PWM_Start+0x1e4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00e      	beq.n	8005dda <HAL_TIM_PWM_Start+0x18a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a19      	ldr	r2, [pc, #100]	; (8005e28 <HAL_TIM_PWM_Start+0x1d8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_TIM_PWM_Start+0x18a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1b      	ldr	r2, [pc, #108]	; (8005e38 <HAL_TIM_PWM_Start+0x1e8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d004      	beq.n	8005dda <HAL_TIM_PWM_Start+0x18a>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <HAL_TIM_PWM_Start+0x1ec>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d115      	bne.n	8005e06 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <HAL_TIM_PWM_Start+0x1f0>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b06      	cmp	r3, #6
 8005dea:	d015      	beq.n	8005e18 <HAL_TIM_PWM_Start+0x1c8>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df2:	d011      	beq.n	8005e18 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0201 	orr.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e04:	e008      	b.n	8005e18 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0201 	orr.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e000      	b.n	8005e1a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	40010000 	.word	0x40010000
 8005e28:	40010400 	.word	0x40010400
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40000800 	.word	0x40000800
 8005e34:	40000c00 	.word	0x40000c00
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40001800 	.word	0x40001800
 8005e40:	00010007 	.word	0x00010007

08005e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d122      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d11b      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0202 	mvn.w	r2, #2
 8005e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fae4 	bl	8006454 <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fad6 	bl	8006440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fae7 	bl	8006468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d122      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d11b      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0204 	mvn.w	r2, #4
 8005ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 faba 	bl	8006454 <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 faac 	bl	8006440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fabd 	bl	8006468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d122      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d11b      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0208 	mvn.w	r2, #8
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2204      	movs	r2, #4
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fa90 	bl	8006454 <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa82 	bl	8006440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fa93 	bl	8006468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b10      	cmp	r3, #16
 8005f54:	d122      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d11b      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0210 	mvn.w	r2, #16
 8005f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2208      	movs	r2, #8
 8005f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fa66 	bl	8006454 <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa58 	bl	8006440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fa69 	bl	8006468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d107      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0201 	mvn.w	r2, #1
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fc fab0 	bl	8002528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b80      	cmp	r3, #128	; 0x80
 8005fd4:	d10e      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe0:	2b80      	cmp	r3, #128	; 0x80
 8005fe2:	d107      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fea4 	bl	8006d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006002:	d10e      	bne.n	8006022 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600e:	2b80      	cmp	r3, #128	; 0x80
 8006010:	d107      	bne.n	8006022 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800601a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fe97 	bl	8006d50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d10e      	bne.n	800604e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d107      	bne.n	800604e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fa17 	bl	800647c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b20      	cmp	r3, #32
 800605a:	d10e      	bne.n	800607a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b20      	cmp	r3, #32
 8006068:	d107      	bne.n	800607a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f06f 0220 	mvn.w	r2, #32
 8006072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fe57 	bl	8006d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800609e:	2302      	movs	r3, #2
 80060a0:	e0ff      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b14      	cmp	r3, #20
 80060ae:	f200 80f0 	bhi.w	8006292 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	0800610d 	.word	0x0800610d
 80060bc:	08006293 	.word	0x08006293
 80060c0:	08006293 	.word	0x08006293
 80060c4:	08006293 	.word	0x08006293
 80060c8:	0800614d 	.word	0x0800614d
 80060cc:	08006293 	.word	0x08006293
 80060d0:	08006293 	.word	0x08006293
 80060d4:	08006293 	.word	0x08006293
 80060d8:	0800618f 	.word	0x0800618f
 80060dc:	08006293 	.word	0x08006293
 80060e0:	08006293 	.word	0x08006293
 80060e4:	08006293 	.word	0x08006293
 80060e8:	080061cf 	.word	0x080061cf
 80060ec:	08006293 	.word	0x08006293
 80060f0:	08006293 	.word	0x08006293
 80060f4:	08006293 	.word	0x08006293
 80060f8:	08006211 	.word	0x08006211
 80060fc:	08006293 	.word	0x08006293
 8006100:	08006293 	.word	0x08006293
 8006104:	08006293 	.word	0x08006293
 8006108:	08006251 	.word	0x08006251
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fa5c 	bl	80065d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0208 	orr.w	r2, r2, #8
 8006126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0204 	bic.w	r2, r2, #4
 8006136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6999      	ldr	r1, [r3, #24]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	619a      	str	r2, [r3, #24]
      break;
 800614a:	e0a5      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 faae 	bl	80066b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6999      	ldr	r1, [r3, #24]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	021a      	lsls	r2, r3, #8
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	619a      	str	r2, [r3, #24]
      break;
 800618c:	e084      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fb05 	bl	80067a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0208 	orr.w	r2, r2, #8
 80061a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0204 	bic.w	r2, r2, #4
 80061b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69d9      	ldr	r1, [r3, #28]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	61da      	str	r2, [r3, #28]
      break;
 80061cc:	e064      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fb5b 	bl	8006890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69d9      	ldr	r1, [r3, #28]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	021a      	lsls	r2, r3, #8
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	61da      	str	r2, [r3, #28]
      break;
 800620e:	e043      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fb92 	bl	8006940 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0208 	orr.w	r2, r2, #8
 800622a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0204 	bic.w	r2, r2, #4
 800623a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800624e:	e023      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fbc4 	bl	80069e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800626a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	021a      	lsls	r2, r3, #8
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006290:	e002      	b.n	8006298 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
      break;
 8006296:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop

080062ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_TIM_ConfigClockSource+0x1c>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e0b4      	b.n	8006432 <HAL_TIM_ConfigClockSource+0x186>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	4b56      	ldr	r3, [pc, #344]	; (800643c <HAL_TIM_ConfigClockSource+0x190>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006300:	d03e      	beq.n	8006380 <HAL_TIM_ConfigClockSource+0xd4>
 8006302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006306:	f200 8087 	bhi.w	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 800630a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630e:	f000 8086 	beq.w	800641e <HAL_TIM_ConfigClockSource+0x172>
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006316:	d87f      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006318:	2b70      	cmp	r3, #112	; 0x70
 800631a:	d01a      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0xa6>
 800631c:	2b70      	cmp	r3, #112	; 0x70
 800631e:	d87b      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006320:	2b60      	cmp	r3, #96	; 0x60
 8006322:	d050      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x11a>
 8006324:	2b60      	cmp	r3, #96	; 0x60
 8006326:	d877      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006328:	2b50      	cmp	r3, #80	; 0x50
 800632a:	d03c      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0xfa>
 800632c:	2b50      	cmp	r3, #80	; 0x50
 800632e:	d873      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006330:	2b40      	cmp	r3, #64	; 0x40
 8006332:	d058      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x13a>
 8006334:	2b40      	cmp	r3, #64	; 0x40
 8006336:	d86f      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006338:	2b30      	cmp	r3, #48	; 0x30
 800633a:	d064      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x15a>
 800633c:	2b30      	cmp	r3, #48	; 0x30
 800633e:	d86b      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006340:	2b20      	cmp	r3, #32
 8006342:	d060      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x15a>
 8006344:	2b20      	cmp	r3, #32
 8006346:	d867      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d05c      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x15a>
 800634c:	2b10      	cmp	r3, #16
 800634e:	d05a      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x15a>
 8006350:	e062      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006362:	f000 fc0d 	bl	8006b80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	609a      	str	r2, [r3, #8]
      break;
 800637e:	e04f      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006390:	f000 fbf6 	bl	8006b80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063a2:	609a      	str	r2, [r3, #8]
      break;
 80063a4:	e03c      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b2:	461a      	mov	r2, r3
 80063b4:	f000 fb6a 	bl	8006a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2150      	movs	r1, #80	; 0x50
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fbc3 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 80063c4:	e02c      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063d2:	461a      	mov	r2, r3
 80063d4:	f000 fb89 	bl	8006aea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2160      	movs	r1, #96	; 0x60
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fbb3 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 80063e4:	e01c      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f2:	461a      	mov	r2, r3
 80063f4:	f000 fb4a 	bl	8006a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2140      	movs	r1, #64	; 0x40
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fba3 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 8006404:	e00c      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f000 fb9a 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 8006416:	e003      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	73fb      	strb	r3, [r7, #15]
      break;
 800641c:	e000      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800641e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006430:	7bfb      	ldrb	r3, [r7, #15]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	fffeff88 	.word	0xfffeff88

08006440 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a40      	ldr	r2, [pc, #256]	; (80065a4 <TIM_Base_SetConfig+0x114>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d013      	beq.n	80064d0 <TIM_Base_SetConfig+0x40>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ae:	d00f      	beq.n	80064d0 <TIM_Base_SetConfig+0x40>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a3d      	ldr	r2, [pc, #244]	; (80065a8 <TIM_Base_SetConfig+0x118>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00b      	beq.n	80064d0 <TIM_Base_SetConfig+0x40>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a3c      	ldr	r2, [pc, #240]	; (80065ac <TIM_Base_SetConfig+0x11c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d007      	beq.n	80064d0 <TIM_Base_SetConfig+0x40>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a3b      	ldr	r2, [pc, #236]	; (80065b0 <TIM_Base_SetConfig+0x120>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_Base_SetConfig+0x40>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a3a      	ldr	r2, [pc, #232]	; (80065b4 <TIM_Base_SetConfig+0x124>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d108      	bne.n	80064e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a2f      	ldr	r2, [pc, #188]	; (80065a4 <TIM_Base_SetConfig+0x114>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d02b      	beq.n	8006542 <TIM_Base_SetConfig+0xb2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f0:	d027      	beq.n	8006542 <TIM_Base_SetConfig+0xb2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a2c      	ldr	r2, [pc, #176]	; (80065a8 <TIM_Base_SetConfig+0x118>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d023      	beq.n	8006542 <TIM_Base_SetConfig+0xb2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a2b      	ldr	r2, [pc, #172]	; (80065ac <TIM_Base_SetConfig+0x11c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d01f      	beq.n	8006542 <TIM_Base_SetConfig+0xb2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a2a      	ldr	r2, [pc, #168]	; (80065b0 <TIM_Base_SetConfig+0x120>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d01b      	beq.n	8006542 <TIM_Base_SetConfig+0xb2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a29      	ldr	r2, [pc, #164]	; (80065b4 <TIM_Base_SetConfig+0x124>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d017      	beq.n	8006542 <TIM_Base_SetConfig+0xb2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a28      	ldr	r2, [pc, #160]	; (80065b8 <TIM_Base_SetConfig+0x128>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d013      	beq.n	8006542 <TIM_Base_SetConfig+0xb2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a27      	ldr	r2, [pc, #156]	; (80065bc <TIM_Base_SetConfig+0x12c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00f      	beq.n	8006542 <TIM_Base_SetConfig+0xb2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a26      	ldr	r2, [pc, #152]	; (80065c0 <TIM_Base_SetConfig+0x130>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00b      	beq.n	8006542 <TIM_Base_SetConfig+0xb2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a25      	ldr	r2, [pc, #148]	; (80065c4 <TIM_Base_SetConfig+0x134>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d007      	beq.n	8006542 <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a24      	ldr	r2, [pc, #144]	; (80065c8 <TIM_Base_SetConfig+0x138>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d003      	beq.n	8006542 <TIM_Base_SetConfig+0xb2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a23      	ldr	r2, [pc, #140]	; (80065cc <TIM_Base_SetConfig+0x13c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d108      	bne.n	8006554 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a0a      	ldr	r2, [pc, #40]	; (80065a4 <TIM_Base_SetConfig+0x114>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d003      	beq.n	8006588 <TIM_Base_SetConfig+0xf8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a0c      	ldr	r2, [pc, #48]	; (80065b4 <TIM_Base_SetConfig+0x124>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d103      	bne.n	8006590 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	615a      	str	r2, [r3, #20]
}
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40010000 	.word	0x40010000
 80065a8:	40000400 	.word	0x40000400
 80065ac:	40000800 	.word	0x40000800
 80065b0:	40000c00 	.word	0x40000c00
 80065b4:	40010400 	.word	0x40010400
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40014400 	.word	0x40014400
 80065c0:	40014800 	.word	0x40014800
 80065c4:	40001800 	.word	0x40001800
 80065c8:	40001c00 	.word	0x40001c00
 80065cc:	40002000 	.word	0x40002000

080065d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4b2b      	ldr	r3, [pc, #172]	; (80066a8 <TIM_OC1_SetConfig+0xd8>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0303 	bic.w	r3, r3, #3
 8006606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f023 0302 	bic.w	r3, r3, #2
 8006618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a21      	ldr	r2, [pc, #132]	; (80066ac <TIM_OC1_SetConfig+0xdc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d003      	beq.n	8006634 <TIM_OC1_SetConfig+0x64>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a20      	ldr	r2, [pc, #128]	; (80066b0 <TIM_OC1_SetConfig+0xe0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d10c      	bne.n	800664e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0308 	bic.w	r3, r3, #8
 800663a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f023 0304 	bic.w	r3, r3, #4
 800664c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a16      	ldr	r2, [pc, #88]	; (80066ac <TIM_OC1_SetConfig+0xdc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d003      	beq.n	800665e <TIM_OC1_SetConfig+0x8e>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <TIM_OC1_SetConfig+0xe0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d111      	bne.n	8006682 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800666c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	621a      	str	r2, [r3, #32]
}
 800669c:	bf00      	nop
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	fffeff8f 	.word	0xfffeff8f
 80066ac:	40010000 	.word	0x40010000
 80066b0:	40010400 	.word	0x40010400

080066b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f023 0210 	bic.w	r2, r3, #16
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4b2e      	ldr	r3, [pc, #184]	; (8006798 <TIM_OC2_SetConfig+0xe4>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f023 0320 	bic.w	r3, r3, #32
 80066fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a23      	ldr	r2, [pc, #140]	; (800679c <TIM_OC2_SetConfig+0xe8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d003      	beq.n	800671c <TIM_OC2_SetConfig+0x68>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a22      	ldr	r2, [pc, #136]	; (80067a0 <TIM_OC2_SetConfig+0xec>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d10d      	bne.n	8006738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a18      	ldr	r2, [pc, #96]	; (800679c <TIM_OC2_SetConfig+0xe8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_OC2_SetConfig+0x94>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a17      	ldr	r2, [pc, #92]	; (80067a0 <TIM_OC2_SetConfig+0xec>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d113      	bne.n	8006770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800674e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	feff8fff 	.word	0xfeff8fff
 800679c:	40010000 	.word	0x40010000
 80067a0:	40010400 	.word	0x40010400

080067a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4b2d      	ldr	r3, [pc, #180]	; (8006884 <TIM_OC3_SetConfig+0xe0>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	021b      	lsls	r3, r3, #8
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a22      	ldr	r2, [pc, #136]	; (8006888 <TIM_OC3_SetConfig+0xe4>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d003      	beq.n	800680a <TIM_OC3_SetConfig+0x66>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a21      	ldr	r2, [pc, #132]	; (800688c <TIM_OC3_SetConfig+0xe8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d10d      	bne.n	8006826 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	021b      	lsls	r3, r3, #8
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a17      	ldr	r2, [pc, #92]	; (8006888 <TIM_OC3_SetConfig+0xe4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d003      	beq.n	8006836 <TIM_OC3_SetConfig+0x92>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a16      	ldr	r2, [pc, #88]	; (800688c <TIM_OC3_SetConfig+0xe8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d113      	bne.n	800685e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800683c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	621a      	str	r2, [r3, #32]
}
 8006878:	bf00      	nop
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	fffeff8f 	.word	0xfffeff8f
 8006888:	40010000 	.word	0x40010000
 800688c:	40010400 	.word	0x40010400

08006890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4b1e      	ldr	r3, [pc, #120]	; (8006934 <TIM_OC4_SetConfig+0xa4>)
 80068bc:	4013      	ands	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	031b      	lsls	r3, r3, #12
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a13      	ldr	r2, [pc, #76]	; (8006938 <TIM_OC4_SetConfig+0xa8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <TIM_OC4_SetConfig+0x68>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a12      	ldr	r2, [pc, #72]	; (800693c <TIM_OC4_SetConfig+0xac>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d109      	bne.n	800690c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	019b      	lsls	r3, r3, #6
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	621a      	str	r2, [r3, #32]
}
 8006926:	bf00      	nop
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	feff8fff 	.word	0xfeff8fff
 8006938:	40010000 	.word	0x40010000
 800693c:	40010400 	.word	0x40010400

08006940 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <TIM_OC5_SetConfig+0x98>)
 800696c:	4013      	ands	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006980:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	041b      	lsls	r3, r3, #16
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a12      	ldr	r2, [pc, #72]	; (80069dc <TIM_OC5_SetConfig+0x9c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d003      	beq.n	800699e <TIM_OC5_SetConfig+0x5e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a11      	ldr	r2, [pc, #68]	; (80069e0 <TIM_OC5_SetConfig+0xa0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d109      	bne.n	80069b2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	021b      	lsls	r3, r3, #8
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	621a      	str	r2, [r3, #32]
}
 80069cc:	bf00      	nop
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	fffeff8f 	.word	0xfffeff8f
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40010400 	.word	0x40010400

080069e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4b1c      	ldr	r3, [pc, #112]	; (8006a80 <TIM_OC6_SetConfig+0x9c>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	051b      	lsls	r3, r3, #20
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a13      	ldr	r2, [pc, #76]	; (8006a84 <TIM_OC6_SetConfig+0xa0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d003      	beq.n	8006a44 <TIM_OC6_SetConfig+0x60>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a12      	ldr	r2, [pc, #72]	; (8006a88 <TIM_OC6_SetConfig+0xa4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d109      	bne.n	8006a58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	029b      	lsls	r3, r3, #10
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	feff8fff 	.word	0xfeff8fff
 8006a84:	40010000 	.word	0x40010000
 8006a88:	40010400 	.word	0x40010400

08006a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0201 	bic.w	r2, r3, #1
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f023 030a 	bic.w	r3, r3, #10
 8006ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b087      	sub	sp, #28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f023 0210 	bic.w	r2, r3, #16
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	031b      	lsls	r3, r3, #12
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f043 0307 	orr.w	r3, r3, #7
 8006b6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	609a      	str	r2, [r3, #8]
}
 8006b74:	bf00      	nop
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	021a      	lsls	r2, r3, #8
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	609a      	str	r2, [r3, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f003 031f 	and.w	r3, r3, #31
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1a      	ldr	r2, [r3, #32]
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	43db      	mvns	r3, r3
 8006be2:	401a      	ands	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1a      	ldr	r2, [r3, #32]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
	...

08006c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d101      	bne.n	8006c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c20:	2302      	movs	r3, #2
 8006c22:	e06d      	b.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a30      	ldr	r2, [pc, #192]	; (8006d0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d004      	beq.n	8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a2f      	ldr	r2, [pc, #188]	; (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d108      	bne.n	8006c6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a20      	ldr	r2, [pc, #128]	; (8006d0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d022      	beq.n	8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c96:	d01d      	beq.n	8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	; (8006d14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d018      	beq.n	8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1c      	ldr	r2, [pc, #112]	; (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d013      	beq.n	8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1a      	ldr	r2, [pc, #104]	; (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d00e      	beq.n	8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a15      	ldr	r2, [pc, #84]	; (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d009      	beq.n	8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a16      	ldr	r2, [pc, #88]	; (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d004      	beq.n	8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a15      	ldr	r2, [pc, #84]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d10c      	bne.n	8006cee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	40010000 	.word	0x40010000
 8006d10:	40010400 	.word	0x40010400
 8006d14:	40000400 	.word	0x40000400
 8006d18:	40000800 	.word	0x40000800
 8006d1c:	40000c00 	.word	0x40000c00
 8006d20:	40014000 	.word	0x40014000
 8006d24:	40001800 	.word	0x40001800

08006d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e040      	b.n	8006df8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7fc f830 	bl	8002dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2224      	movs	r2, #36	; 0x24
 8006d90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0201 	bic.w	r2, r2, #1
 8006da0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fbc0 	bl	8007528 <UART_SetConfig>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d101      	bne.n	8006db2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e022      	b.n	8006df8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fe18 	bl	80079f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0201 	orr.w	r2, r2, #1
 8006dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fe9f 	bl	8007b34 <UART_CheckIdleState>
 8006df6:	4603      	mov	r3, r0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b08b      	sub	sp, #44	; 0x2c
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d147      	bne.n	8006ea6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <HAL_UART_Transmit_IT+0x22>
 8006e1c:	88fb      	ldrh	r3, [r7, #6]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e040      	b.n	8006ea8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	88fa      	ldrh	r2, [r7, #6]
 8006e30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2221      	movs	r2, #33	; 0x21
 8006e4e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e58:	d107      	bne.n	8006e6a <HAL_UART_Transmit_IT+0x6a>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d103      	bne.n	8006e6a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4a13      	ldr	r2, [pc, #76]	; (8006eb4 <HAL_UART_Transmit_IT+0xb4>)
 8006e66:	66da      	str	r2, [r3, #108]	; 0x6c
 8006e68:	e002      	b.n	8006e70 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a12      	ldr	r2, [pc, #72]	; (8006eb8 <HAL_UART_Transmit_IT+0xb8>)
 8006e6e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	623b      	str	r3, [r7, #32]
 8006e90:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	69f9      	ldr	r1, [r7, #28]
 8006e94:	6a3a      	ldr	r2, [r7, #32]
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e6      	bne.n	8006e70 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e000      	b.n	8006ea8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006ea6:	2302      	movs	r3, #2
  }
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	372c      	adds	r7, #44	; 0x2c
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	08008067 	.word	0x08008067
 8006eb8:	08007fb1 	.word	0x08007fb1

08006ebc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	; 0x28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d132      	bne.n	8006f3a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_UART_Receive_IT+0x24>
 8006eda:	88fb      	ldrh	r3, [r7, #6]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e02b      	b.n	8006f3c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d018      	beq.n	8006f2a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	613b      	str	r3, [r7, #16]
   return(result);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	623b      	str	r3, [r7, #32]
 8006f18:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	69f9      	ldr	r1, [r7, #28]
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e6      	bne.n	8006ef8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f2a:	88fb      	ldrh	r3, [r7, #6]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 fefd 	bl	8007d30 <UART_Start_Receive_IT>
 8006f36:	4603      	mov	r3, r0
 8006f38:	e000      	b.n	8006f3c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006f3a:	2302      	movs	r3, #2
  }
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3728      	adds	r7, #40	; 0x28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b0ba      	sub	sp, #232	; 0xe8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f72:	4013      	ands	r3, r2
 8006f74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d115      	bne.n	8006fac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f84:	f003 0320 	and.w	r3, r3, #32
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00f      	beq.n	8006fac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d009      	beq.n	8006fac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 8297 	beq.w	80074d0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4798      	blx	r3
      }
      return;
 8006faa:	e291      	b.n	80074d0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 8117 	beq.w	80071e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006fc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006fc6:	4b85      	ldr	r3, [pc, #532]	; (80071dc <HAL_UART_IRQHandler+0x298>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 810a 	beq.w	80071e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d011      	beq.n	8007000 <HAL_UART_IRQHandler+0xbc>
 8006fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2201      	movs	r2, #1
 8006fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff6:	f043 0201 	orr.w	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d011      	beq.n	8007030 <HAL_UART_IRQHandler+0xec>
 800700c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2202      	movs	r2, #2
 800701e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007026:	f043 0204 	orr.w	r2, r3, #4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d011      	beq.n	8007060 <HAL_UART_IRQHandler+0x11c>
 800703c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2204      	movs	r2, #4
 800704e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007056:	f043 0202 	orr.w	r2, r3, #2
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d017      	beq.n	800709c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800706c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b00      	cmp	r3, #0
 8007076:	d105      	bne.n	8007084 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800707c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2208      	movs	r2, #8
 800708a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007092:	f043 0208 	orr.w	r2, r3, #8
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800709c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d012      	beq.n	80070ce <HAL_UART_IRQHandler+0x18a>
 80070a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00c      	beq.n	80070ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c4:	f043 0220 	orr.w	r2, r3, #32
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 81fd 	beq.w	80074d4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00d      	beq.n	8007102 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d007      	beq.n	8007102 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007108:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	d005      	beq.n	8007126 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800711a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800711e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007122:	2b00      	cmp	r3, #0
 8007124:	d04f      	beq.n	80071c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fec8 	bl	8007ebc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007136:	2b40      	cmp	r3, #64	; 0x40
 8007138:	d141      	bne.n	80071be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3308      	adds	r3, #8
 8007140:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007150:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007158:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3308      	adds	r3, #8
 8007162:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007166:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800716a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007172:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800717e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1d9      	bne.n	800713a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718a:	2b00      	cmp	r3, #0
 800718c:	d013      	beq.n	80071b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007192:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <HAL_UART_IRQHandler+0x29c>)
 8007194:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800719a:	4618      	mov	r0, r3
 800719c:	f7fc f8b9 	bl	8003312 <HAL_DMA_Abort_IT>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d017      	beq.n	80071d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071b0:	4610      	mov	r0, r2
 80071b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b4:	e00f      	b.n	80071d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9a0 	bl	80074fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071bc:	e00b      	b.n	80071d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f99c 	bl	80074fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	e007      	b.n	80071d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f998 	bl	80074fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80071d4:	e17e      	b.n	80074d4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d6:	bf00      	nop
    return;
 80071d8:	e17c      	b.n	80074d4 <HAL_UART_IRQHandler+0x590>
 80071da:	bf00      	nop
 80071dc:	04000120 	.word	0x04000120
 80071e0:	08007f85 	.word	0x08007f85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	f040 814c 	bne.w	8007486 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f2:	f003 0310 	and.w	r3, r3, #16
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 8145 	beq.w	8007486 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 813e 	beq.w	8007486 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2210      	movs	r2, #16
 8007210:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721c:	2b40      	cmp	r3, #64	; 0x40
 800721e:	f040 80b6 	bne.w	800738e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800722e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 8150 	beq.w	80074d8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800723e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007242:	429a      	cmp	r2, r3
 8007244:	f080 8148 	bcs.w	80074d8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800724e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725c:	f000 8086 	beq.w	800736c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800727c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800728a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800728e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007296:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1da      	bne.n	8007260 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072bc:	f023 0301 	bic.w	r3, r3, #1
 80072c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3308      	adds	r3, #8
 80072ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e1      	bne.n	80072aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3308      	adds	r3, #8
 80072ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3308      	adds	r3, #8
 8007306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800730a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800730c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007310:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e3      	bne.n	80072e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800733a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800733c:	f023 0310 	bic.w	r3, r3, #16
 8007340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800734e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007350:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007354:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800735c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e4      	bne.n	800732c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007366:	4618      	mov	r0, r3
 8007368:	f7fb ff63 	bl	8003232 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800737e:	b29b      	uxth	r3, r3
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	b29b      	uxth	r3, r3
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f8c2 	bl	8007510 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800738c:	e0a4      	b.n	80074d8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800739a:	b29b      	uxth	r3, r3
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 8096 	beq.w	80074dc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80073b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 8091 	beq.w	80074dc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073dc:	647b      	str	r3, [r7, #68]	; 0x44
 80073de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e4      	bne.n	80073ba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3308      	adds	r3, #8
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	623b      	str	r3, [r7, #32]
   return(result);
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	f023 0301 	bic.w	r3, r3, #1
 8007406:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3308      	adds	r3, #8
 8007410:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007414:	633a      	str	r2, [r7, #48]	; 0x30
 8007416:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800741a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e3      	bne.n	80073f0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2220      	movs	r2, #32
 800742c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	60fb      	str	r3, [r7, #12]
   return(result);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f023 0310 	bic.w	r3, r3, #16
 8007450:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800745e:	61fb      	str	r3, [r7, #28]
 8007460:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	69b9      	ldr	r1, [r7, #24]
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	617b      	str	r3, [r7, #20]
   return(result);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e4      	bne.n	800743c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2202      	movs	r2, #2
 8007476:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f846 	bl	8007510 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007484:	e02a      	b.n	80074dc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00e      	beq.n	80074b0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749a:	2b00      	cmp	r3, #0
 800749c:	d008      	beq.n	80074b0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01c      	beq.n	80074e0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	4798      	blx	r3
    }
    return;
 80074ae:	e017      	b.n	80074e0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d012      	beq.n	80074e2 <HAL_UART_IRQHandler+0x59e>
 80074bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00c      	beq.n	80074e2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fe2c 	bl	8008126 <UART_EndTransmit_IT>
    return;
 80074ce:	e008      	b.n	80074e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80074d0:	bf00      	nop
 80074d2:	e006      	b.n	80074e2 <HAL_UART_IRQHandler+0x59e>
    return;
 80074d4:	bf00      	nop
 80074d6:	e004      	b.n	80074e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80074d8:	bf00      	nop
 80074da:	e002      	b.n	80074e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80074dc:	bf00      	nop
 80074de:	e000      	b.n	80074e2 <HAL_UART_IRQHandler+0x59e>
    return;
 80074e0:	bf00      	nop
  }

}
 80074e2:	37e8      	adds	r7, #232	; 0xe8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4ba6      	ldr	r3, [pc, #664]	; (80077ec <UART_SetConfig+0x2c4>)
 8007554:	4013      	ands	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	6979      	ldr	r1, [r7, #20]
 800755c:	430b      	orrs	r3, r1
 800755e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	430a      	orrs	r2, r1
 8007598:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a94      	ldr	r2, [pc, #592]	; (80077f0 <UART_SetConfig+0x2c8>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d120      	bne.n	80075e6 <UART_SetConfig+0xbe>
 80075a4:	4b93      	ldr	r3, [pc, #588]	; (80077f4 <UART_SetConfig+0x2cc>)
 80075a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d816      	bhi.n	80075e0 <UART_SetConfig+0xb8>
 80075b2:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <UART_SetConfig+0x90>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	080075c9 	.word	0x080075c9
 80075bc:	080075d5 	.word	0x080075d5
 80075c0:	080075cf 	.word	0x080075cf
 80075c4:	080075db 	.word	0x080075db
 80075c8:	2301      	movs	r3, #1
 80075ca:	77fb      	strb	r3, [r7, #31]
 80075cc:	e150      	b.n	8007870 <UART_SetConfig+0x348>
 80075ce:	2302      	movs	r3, #2
 80075d0:	77fb      	strb	r3, [r7, #31]
 80075d2:	e14d      	b.n	8007870 <UART_SetConfig+0x348>
 80075d4:	2304      	movs	r3, #4
 80075d6:	77fb      	strb	r3, [r7, #31]
 80075d8:	e14a      	b.n	8007870 <UART_SetConfig+0x348>
 80075da:	2308      	movs	r3, #8
 80075dc:	77fb      	strb	r3, [r7, #31]
 80075de:	e147      	b.n	8007870 <UART_SetConfig+0x348>
 80075e0:	2310      	movs	r3, #16
 80075e2:	77fb      	strb	r3, [r7, #31]
 80075e4:	e144      	b.n	8007870 <UART_SetConfig+0x348>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a83      	ldr	r2, [pc, #524]	; (80077f8 <UART_SetConfig+0x2d0>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d132      	bne.n	8007656 <UART_SetConfig+0x12e>
 80075f0:	4b80      	ldr	r3, [pc, #512]	; (80077f4 <UART_SetConfig+0x2cc>)
 80075f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f6:	f003 030c 	and.w	r3, r3, #12
 80075fa:	2b0c      	cmp	r3, #12
 80075fc:	d828      	bhi.n	8007650 <UART_SetConfig+0x128>
 80075fe:	a201      	add	r2, pc, #4	; (adr r2, 8007604 <UART_SetConfig+0xdc>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007639 	.word	0x08007639
 8007608:	08007651 	.word	0x08007651
 800760c:	08007651 	.word	0x08007651
 8007610:	08007651 	.word	0x08007651
 8007614:	08007645 	.word	0x08007645
 8007618:	08007651 	.word	0x08007651
 800761c:	08007651 	.word	0x08007651
 8007620:	08007651 	.word	0x08007651
 8007624:	0800763f 	.word	0x0800763f
 8007628:	08007651 	.word	0x08007651
 800762c:	08007651 	.word	0x08007651
 8007630:	08007651 	.word	0x08007651
 8007634:	0800764b 	.word	0x0800764b
 8007638:	2300      	movs	r3, #0
 800763a:	77fb      	strb	r3, [r7, #31]
 800763c:	e118      	b.n	8007870 <UART_SetConfig+0x348>
 800763e:	2302      	movs	r3, #2
 8007640:	77fb      	strb	r3, [r7, #31]
 8007642:	e115      	b.n	8007870 <UART_SetConfig+0x348>
 8007644:	2304      	movs	r3, #4
 8007646:	77fb      	strb	r3, [r7, #31]
 8007648:	e112      	b.n	8007870 <UART_SetConfig+0x348>
 800764a:	2308      	movs	r3, #8
 800764c:	77fb      	strb	r3, [r7, #31]
 800764e:	e10f      	b.n	8007870 <UART_SetConfig+0x348>
 8007650:	2310      	movs	r3, #16
 8007652:	77fb      	strb	r3, [r7, #31]
 8007654:	e10c      	b.n	8007870 <UART_SetConfig+0x348>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a68      	ldr	r2, [pc, #416]	; (80077fc <UART_SetConfig+0x2d4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d120      	bne.n	80076a2 <UART_SetConfig+0x17a>
 8007660:	4b64      	ldr	r3, [pc, #400]	; (80077f4 <UART_SetConfig+0x2cc>)
 8007662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007666:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800766a:	2b30      	cmp	r3, #48	; 0x30
 800766c:	d013      	beq.n	8007696 <UART_SetConfig+0x16e>
 800766e:	2b30      	cmp	r3, #48	; 0x30
 8007670:	d814      	bhi.n	800769c <UART_SetConfig+0x174>
 8007672:	2b20      	cmp	r3, #32
 8007674:	d009      	beq.n	800768a <UART_SetConfig+0x162>
 8007676:	2b20      	cmp	r3, #32
 8007678:	d810      	bhi.n	800769c <UART_SetConfig+0x174>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <UART_SetConfig+0x15c>
 800767e:	2b10      	cmp	r3, #16
 8007680:	d006      	beq.n	8007690 <UART_SetConfig+0x168>
 8007682:	e00b      	b.n	800769c <UART_SetConfig+0x174>
 8007684:	2300      	movs	r3, #0
 8007686:	77fb      	strb	r3, [r7, #31]
 8007688:	e0f2      	b.n	8007870 <UART_SetConfig+0x348>
 800768a:	2302      	movs	r3, #2
 800768c:	77fb      	strb	r3, [r7, #31]
 800768e:	e0ef      	b.n	8007870 <UART_SetConfig+0x348>
 8007690:	2304      	movs	r3, #4
 8007692:	77fb      	strb	r3, [r7, #31]
 8007694:	e0ec      	b.n	8007870 <UART_SetConfig+0x348>
 8007696:	2308      	movs	r3, #8
 8007698:	77fb      	strb	r3, [r7, #31]
 800769a:	e0e9      	b.n	8007870 <UART_SetConfig+0x348>
 800769c:	2310      	movs	r3, #16
 800769e:	77fb      	strb	r3, [r7, #31]
 80076a0:	e0e6      	b.n	8007870 <UART_SetConfig+0x348>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a56      	ldr	r2, [pc, #344]	; (8007800 <UART_SetConfig+0x2d8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d120      	bne.n	80076ee <UART_SetConfig+0x1c6>
 80076ac:	4b51      	ldr	r3, [pc, #324]	; (80077f4 <UART_SetConfig+0x2cc>)
 80076ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076b6:	2bc0      	cmp	r3, #192	; 0xc0
 80076b8:	d013      	beq.n	80076e2 <UART_SetConfig+0x1ba>
 80076ba:	2bc0      	cmp	r3, #192	; 0xc0
 80076bc:	d814      	bhi.n	80076e8 <UART_SetConfig+0x1c0>
 80076be:	2b80      	cmp	r3, #128	; 0x80
 80076c0:	d009      	beq.n	80076d6 <UART_SetConfig+0x1ae>
 80076c2:	2b80      	cmp	r3, #128	; 0x80
 80076c4:	d810      	bhi.n	80076e8 <UART_SetConfig+0x1c0>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <UART_SetConfig+0x1a8>
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d006      	beq.n	80076dc <UART_SetConfig+0x1b4>
 80076ce:	e00b      	b.n	80076e8 <UART_SetConfig+0x1c0>
 80076d0:	2300      	movs	r3, #0
 80076d2:	77fb      	strb	r3, [r7, #31]
 80076d4:	e0cc      	b.n	8007870 <UART_SetConfig+0x348>
 80076d6:	2302      	movs	r3, #2
 80076d8:	77fb      	strb	r3, [r7, #31]
 80076da:	e0c9      	b.n	8007870 <UART_SetConfig+0x348>
 80076dc:	2304      	movs	r3, #4
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	e0c6      	b.n	8007870 <UART_SetConfig+0x348>
 80076e2:	2308      	movs	r3, #8
 80076e4:	77fb      	strb	r3, [r7, #31]
 80076e6:	e0c3      	b.n	8007870 <UART_SetConfig+0x348>
 80076e8:	2310      	movs	r3, #16
 80076ea:	77fb      	strb	r3, [r7, #31]
 80076ec:	e0c0      	b.n	8007870 <UART_SetConfig+0x348>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a44      	ldr	r2, [pc, #272]	; (8007804 <UART_SetConfig+0x2dc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d125      	bne.n	8007744 <UART_SetConfig+0x21c>
 80076f8:	4b3e      	ldr	r3, [pc, #248]	; (80077f4 <UART_SetConfig+0x2cc>)
 80076fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007706:	d017      	beq.n	8007738 <UART_SetConfig+0x210>
 8007708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800770c:	d817      	bhi.n	800773e <UART_SetConfig+0x216>
 800770e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007712:	d00b      	beq.n	800772c <UART_SetConfig+0x204>
 8007714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007718:	d811      	bhi.n	800773e <UART_SetConfig+0x216>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <UART_SetConfig+0x1fe>
 800771e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007722:	d006      	beq.n	8007732 <UART_SetConfig+0x20a>
 8007724:	e00b      	b.n	800773e <UART_SetConfig+0x216>
 8007726:	2300      	movs	r3, #0
 8007728:	77fb      	strb	r3, [r7, #31]
 800772a:	e0a1      	b.n	8007870 <UART_SetConfig+0x348>
 800772c:	2302      	movs	r3, #2
 800772e:	77fb      	strb	r3, [r7, #31]
 8007730:	e09e      	b.n	8007870 <UART_SetConfig+0x348>
 8007732:	2304      	movs	r3, #4
 8007734:	77fb      	strb	r3, [r7, #31]
 8007736:	e09b      	b.n	8007870 <UART_SetConfig+0x348>
 8007738:	2308      	movs	r3, #8
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e098      	b.n	8007870 <UART_SetConfig+0x348>
 800773e:	2310      	movs	r3, #16
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e095      	b.n	8007870 <UART_SetConfig+0x348>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a2f      	ldr	r2, [pc, #188]	; (8007808 <UART_SetConfig+0x2e0>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d125      	bne.n	800779a <UART_SetConfig+0x272>
 800774e:	4b29      	ldr	r3, [pc, #164]	; (80077f4 <UART_SetConfig+0x2cc>)
 8007750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007754:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007758:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800775c:	d017      	beq.n	800778e <UART_SetConfig+0x266>
 800775e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007762:	d817      	bhi.n	8007794 <UART_SetConfig+0x26c>
 8007764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007768:	d00b      	beq.n	8007782 <UART_SetConfig+0x25a>
 800776a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800776e:	d811      	bhi.n	8007794 <UART_SetConfig+0x26c>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <UART_SetConfig+0x254>
 8007774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007778:	d006      	beq.n	8007788 <UART_SetConfig+0x260>
 800777a:	e00b      	b.n	8007794 <UART_SetConfig+0x26c>
 800777c:	2301      	movs	r3, #1
 800777e:	77fb      	strb	r3, [r7, #31]
 8007780:	e076      	b.n	8007870 <UART_SetConfig+0x348>
 8007782:	2302      	movs	r3, #2
 8007784:	77fb      	strb	r3, [r7, #31]
 8007786:	e073      	b.n	8007870 <UART_SetConfig+0x348>
 8007788:	2304      	movs	r3, #4
 800778a:	77fb      	strb	r3, [r7, #31]
 800778c:	e070      	b.n	8007870 <UART_SetConfig+0x348>
 800778e:	2308      	movs	r3, #8
 8007790:	77fb      	strb	r3, [r7, #31]
 8007792:	e06d      	b.n	8007870 <UART_SetConfig+0x348>
 8007794:	2310      	movs	r3, #16
 8007796:	77fb      	strb	r3, [r7, #31]
 8007798:	e06a      	b.n	8007870 <UART_SetConfig+0x348>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a1b      	ldr	r2, [pc, #108]	; (800780c <UART_SetConfig+0x2e4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d138      	bne.n	8007816 <UART_SetConfig+0x2ee>
 80077a4:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <UART_SetConfig+0x2cc>)
 80077a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80077ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077b2:	d017      	beq.n	80077e4 <UART_SetConfig+0x2bc>
 80077b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077b8:	d82a      	bhi.n	8007810 <UART_SetConfig+0x2e8>
 80077ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077be:	d00b      	beq.n	80077d8 <UART_SetConfig+0x2b0>
 80077c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077c4:	d824      	bhi.n	8007810 <UART_SetConfig+0x2e8>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <UART_SetConfig+0x2aa>
 80077ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ce:	d006      	beq.n	80077de <UART_SetConfig+0x2b6>
 80077d0:	e01e      	b.n	8007810 <UART_SetConfig+0x2e8>
 80077d2:	2300      	movs	r3, #0
 80077d4:	77fb      	strb	r3, [r7, #31]
 80077d6:	e04b      	b.n	8007870 <UART_SetConfig+0x348>
 80077d8:	2302      	movs	r3, #2
 80077da:	77fb      	strb	r3, [r7, #31]
 80077dc:	e048      	b.n	8007870 <UART_SetConfig+0x348>
 80077de:	2304      	movs	r3, #4
 80077e0:	77fb      	strb	r3, [r7, #31]
 80077e2:	e045      	b.n	8007870 <UART_SetConfig+0x348>
 80077e4:	2308      	movs	r3, #8
 80077e6:	77fb      	strb	r3, [r7, #31]
 80077e8:	e042      	b.n	8007870 <UART_SetConfig+0x348>
 80077ea:	bf00      	nop
 80077ec:	efff69f3 	.word	0xefff69f3
 80077f0:	40011000 	.word	0x40011000
 80077f4:	40023800 	.word	0x40023800
 80077f8:	40004400 	.word	0x40004400
 80077fc:	40004800 	.word	0x40004800
 8007800:	40004c00 	.word	0x40004c00
 8007804:	40005000 	.word	0x40005000
 8007808:	40011400 	.word	0x40011400
 800780c:	40007800 	.word	0x40007800
 8007810:	2310      	movs	r3, #16
 8007812:	77fb      	strb	r3, [r7, #31]
 8007814:	e02c      	b.n	8007870 <UART_SetConfig+0x348>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a72      	ldr	r2, [pc, #456]	; (80079e4 <UART_SetConfig+0x4bc>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d125      	bne.n	800786c <UART_SetConfig+0x344>
 8007820:	4b71      	ldr	r3, [pc, #452]	; (80079e8 <UART_SetConfig+0x4c0>)
 8007822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007826:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800782a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800782e:	d017      	beq.n	8007860 <UART_SetConfig+0x338>
 8007830:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007834:	d817      	bhi.n	8007866 <UART_SetConfig+0x33e>
 8007836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800783a:	d00b      	beq.n	8007854 <UART_SetConfig+0x32c>
 800783c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007840:	d811      	bhi.n	8007866 <UART_SetConfig+0x33e>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <UART_SetConfig+0x326>
 8007846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800784a:	d006      	beq.n	800785a <UART_SetConfig+0x332>
 800784c:	e00b      	b.n	8007866 <UART_SetConfig+0x33e>
 800784e:	2300      	movs	r3, #0
 8007850:	77fb      	strb	r3, [r7, #31]
 8007852:	e00d      	b.n	8007870 <UART_SetConfig+0x348>
 8007854:	2302      	movs	r3, #2
 8007856:	77fb      	strb	r3, [r7, #31]
 8007858:	e00a      	b.n	8007870 <UART_SetConfig+0x348>
 800785a:	2304      	movs	r3, #4
 800785c:	77fb      	strb	r3, [r7, #31]
 800785e:	e007      	b.n	8007870 <UART_SetConfig+0x348>
 8007860:	2308      	movs	r3, #8
 8007862:	77fb      	strb	r3, [r7, #31]
 8007864:	e004      	b.n	8007870 <UART_SetConfig+0x348>
 8007866:	2310      	movs	r3, #16
 8007868:	77fb      	strb	r3, [r7, #31]
 800786a:	e001      	b.n	8007870 <UART_SetConfig+0x348>
 800786c:	2310      	movs	r3, #16
 800786e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007878:	d15b      	bne.n	8007932 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800787a:	7ffb      	ldrb	r3, [r7, #31]
 800787c:	2b08      	cmp	r3, #8
 800787e:	d828      	bhi.n	80078d2 <UART_SetConfig+0x3aa>
 8007880:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <UART_SetConfig+0x360>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	080078ad 	.word	0x080078ad
 800788c:	080078b5 	.word	0x080078b5
 8007890:	080078bd 	.word	0x080078bd
 8007894:	080078d3 	.word	0x080078d3
 8007898:	080078c3 	.word	0x080078c3
 800789c:	080078d3 	.word	0x080078d3
 80078a0:	080078d3 	.word	0x080078d3
 80078a4:	080078d3 	.word	0x080078d3
 80078a8:	080078cb 	.word	0x080078cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078ac:	f7fc fc1c 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 80078b0:	61b8      	str	r0, [r7, #24]
        break;
 80078b2:	e013      	b.n	80078dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078b4:	f7fc fc2c 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 80078b8:	61b8      	str	r0, [r7, #24]
        break;
 80078ba:	e00f      	b.n	80078dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078bc:	4b4b      	ldr	r3, [pc, #300]	; (80079ec <UART_SetConfig+0x4c4>)
 80078be:	61bb      	str	r3, [r7, #24]
        break;
 80078c0:	e00c      	b.n	80078dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078c2:	f7fc faff 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 80078c6:	61b8      	str	r0, [r7, #24]
        break;
 80078c8:	e008      	b.n	80078dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ce:	61bb      	str	r3, [r7, #24]
        break;
 80078d0:	e004      	b.n	80078dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	77bb      	strb	r3, [r7, #30]
        break;
 80078da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d074      	beq.n	80079cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	005a      	lsls	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	085b      	lsrs	r3, r3, #1
 80078ec:	441a      	add	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2b0f      	cmp	r3, #15
 80078fc:	d916      	bls.n	800792c <UART_SetConfig+0x404>
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007904:	d212      	bcs.n	800792c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	b29b      	uxth	r3, r3
 800790a:	f023 030f 	bic.w	r3, r3, #15
 800790e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	085b      	lsrs	r3, r3, #1
 8007914:	b29b      	uxth	r3, r3
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	b29a      	uxth	r2, r3
 800791c:	89fb      	ldrh	r3, [r7, #14]
 800791e:	4313      	orrs	r3, r2
 8007920:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	89fa      	ldrh	r2, [r7, #14]
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	e04f      	b.n	80079cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	77bb      	strb	r3, [r7, #30]
 8007930:	e04c      	b.n	80079cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007932:	7ffb      	ldrb	r3, [r7, #31]
 8007934:	2b08      	cmp	r3, #8
 8007936:	d828      	bhi.n	800798a <UART_SetConfig+0x462>
 8007938:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <UART_SetConfig+0x418>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	08007965 	.word	0x08007965
 8007944:	0800796d 	.word	0x0800796d
 8007948:	08007975 	.word	0x08007975
 800794c:	0800798b 	.word	0x0800798b
 8007950:	0800797b 	.word	0x0800797b
 8007954:	0800798b 	.word	0x0800798b
 8007958:	0800798b 	.word	0x0800798b
 800795c:	0800798b 	.word	0x0800798b
 8007960:	08007983 	.word	0x08007983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007964:	f7fc fbc0 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 8007968:	61b8      	str	r0, [r7, #24]
        break;
 800796a:	e013      	b.n	8007994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800796c:	f7fc fbd0 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 8007970:	61b8      	str	r0, [r7, #24]
        break;
 8007972:	e00f      	b.n	8007994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007974:	4b1d      	ldr	r3, [pc, #116]	; (80079ec <UART_SetConfig+0x4c4>)
 8007976:	61bb      	str	r3, [r7, #24]
        break;
 8007978:	e00c      	b.n	8007994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800797a:	f7fc faa3 	bl	8003ec4 <HAL_RCC_GetSysClockFreq>
 800797e:	61b8      	str	r0, [r7, #24]
        break;
 8007980:	e008      	b.n	8007994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007986:	61bb      	str	r3, [r7, #24]
        break;
 8007988:	e004      	b.n	8007994 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	77bb      	strb	r3, [r7, #30]
        break;
 8007992:	bf00      	nop
    }

    if (pclk != 0U)
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d018      	beq.n	80079cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	085a      	lsrs	r2, r3, #1
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	441a      	add	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b0f      	cmp	r3, #15
 80079b2:	d909      	bls.n	80079c8 <UART_SetConfig+0x4a0>
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ba:	d205      	bcs.n	80079c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	b29a      	uxth	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60da      	str	r2, [r3, #12]
 80079c6:	e001      	b.n	80079cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80079d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3720      	adds	r7, #32
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	40007c00 	.word	0x40007c00
 80079e8:	40023800 	.word	0x40023800
 80079ec:	00f42400 	.word	0x00f42400

080079f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	f003 0308 	and.w	r3, r3, #8
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	f003 0310 	and.w	r3, r3, #16
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01a      	beq.n	8007b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aee:	d10a      	bne.n	8007b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]
  }
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b44:	f7fb fa34 	bl	8002fb0 <HAL_GetTick>
 8007b48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d10e      	bne.n	8007b76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f81b 	bl	8007ba2 <UART_WaitOnFlagUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e011      	b.n	8007b9a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b09c      	sub	sp, #112	; 0x70
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	603b      	str	r3, [r7, #0]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bb2:	e0a7      	b.n	8007d04 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bba:	f000 80a3 	beq.w	8007d04 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bbe:	f7fb f9f7 	bl	8002fb0 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d302      	bcc.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d13f      	bne.n	8007c54 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007be8:	667b      	str	r3, [r7, #100]	; 0x64
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bf4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bfa:	e841 2300 	strex	r3, r2, [r1]
 8007bfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1e6      	bne.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	f023 0301 	bic.w	r3, r3, #1
 8007c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3308      	adds	r3, #8
 8007c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c26:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e5      	bne.n	8007c06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e068      	b.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d050      	beq.n	8007d04 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c70:	d148      	bne.n	8007d04 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c7a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	461a      	mov	r2, r3
 8007c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e6      	bne.n	8007c7c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3308      	adds	r3, #8
 8007cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f023 0301 	bic.w	r3, r3, #1
 8007cc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cce:	623a      	str	r2, [r7, #32]
 8007cd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	69f9      	ldr	r1, [r7, #28]
 8007cd4:	6a3a      	ldr	r2, [r7, #32]
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e5      	bne.n	8007cae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2220      	movs	r2, #32
 8007ce6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2220      	movs	r2, #32
 8007cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e010      	b.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	69da      	ldr	r2, [r3, #28]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	bf0c      	ite	eq
 8007d14:	2301      	moveq	r3, #1
 8007d16:	2300      	movne	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	79fb      	ldrb	r3, [r7, #7]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	f43f af48 	beq.w	8007bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3770      	adds	r7, #112	; 0x70
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b097      	sub	sp, #92	; 0x5c
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	88fa      	ldrh	r2, [r7, #6]
 8007d48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d62:	d10e      	bne.n	8007d82 <UART_Start_Receive_IT+0x52>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d105      	bne.n	8007d78 <UART_Start_Receive_IT+0x48>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d76:	e02d      	b.n	8007dd4 <UART_Start_Receive_IT+0xa4>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	22ff      	movs	r2, #255	; 0xff
 8007d7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d80:	e028      	b.n	8007dd4 <UART_Start_Receive_IT+0xa4>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10d      	bne.n	8007da6 <UART_Start_Receive_IT+0x76>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <UART_Start_Receive_IT+0x6c>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	22ff      	movs	r2, #255	; 0xff
 8007d96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d9a:	e01b      	b.n	8007dd4 <UART_Start_Receive_IT+0xa4>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	227f      	movs	r2, #127	; 0x7f
 8007da0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007da4:	e016      	b.n	8007dd4 <UART_Start_Receive_IT+0xa4>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dae:	d10d      	bne.n	8007dcc <UART_Start_Receive_IT+0x9c>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d104      	bne.n	8007dc2 <UART_Start_Receive_IT+0x92>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	227f      	movs	r2, #127	; 0x7f
 8007dbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dc0:	e008      	b.n	8007dd4 <UART_Start_Receive_IT+0xa4>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	223f      	movs	r2, #63	; 0x3f
 8007dc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dca:	e003      	b.n	8007dd4 <UART_Start_Receive_IT+0xa4>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2222      	movs	r2, #34	; 0x22
 8007de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	f043 0301 	orr.w	r3, r3, #1
 8007dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3308      	adds	r3, #8
 8007e02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e04:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e5      	bne.n	8007de4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e20:	d107      	bne.n	8007e32 <UART_Start_Receive_IT+0x102>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d103      	bne.n	8007e32 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a21      	ldr	r2, [pc, #132]	; (8007eb4 <UART_Start_Receive_IT+0x184>)
 8007e2e:	669a      	str	r2, [r3, #104]	; 0x68
 8007e30:	e002      	b.n	8007e38 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4a20      	ldr	r2, [pc, #128]	; (8007eb8 <UART_Start_Receive_IT+0x188>)
 8007e36:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d019      	beq.n	8007e74 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007e54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e60:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e6      	bne.n	8007e40 <UART_Start_Receive_IT+0x110>
 8007e72:	e018      	b.n	8007ea6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	613b      	str	r3, [r7, #16]
   return(result);
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f043 0320 	orr.w	r3, r3, #32
 8007e88:	653b      	str	r3, [r7, #80]	; 0x50
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e92:	623b      	str	r3, [r7, #32]
 8007e94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	69f9      	ldr	r1, [r7, #28]
 8007e98:	6a3a      	ldr	r2, [r7, #32]
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e6      	bne.n	8007e74 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	375c      	adds	r7, #92	; 0x5c
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	080082e1 	.word	0x080082e1
 8007eb8:	0800817b 	.word	0x0800817b

08007ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b095      	sub	sp, #84	; 0x54
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ee4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e6      	bne.n	8007ec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3308      	adds	r3, #8
 8007efc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	f023 0301 	bic.w	r3, r3, #1
 8007f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3308      	adds	r3, #8
 8007f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e5      	bne.n	8007ef6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d118      	bne.n	8007f64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	e853 3f00 	ldrex	r3, [r3]
 8007f3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f023 0310 	bic.w	r3, r3, #16
 8007f46:	647b      	str	r3, [r7, #68]	; 0x44
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f50:	61bb      	str	r3, [r7, #24]
 8007f52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f54:	6979      	ldr	r1, [r7, #20]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	e841 2300 	strex	r3, r2, [r1]
 8007f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1e6      	bne.n	8007f32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f78:	bf00      	nop
 8007f7a:	3754      	adds	r7, #84	; 0x54
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff faaa 	bl	80074fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa8:	bf00      	nop
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b08f      	sub	sp, #60	; 0x3c
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fbc:	2b21      	cmp	r3, #33	; 0x21
 8007fbe:	d14c      	bne.n	800805a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d132      	bne.n	8008032 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e6      	bne.n	8007fcc <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	60bb      	str	r3, [r7, #8]
   return(result);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008012:	633b      	str	r3, [r7, #48]	; 0x30
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6979      	ldr	r1, [r7, #20]
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	613b      	str	r3, [r7, #16]
   return(result);
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e6      	bne.n	8007ffe <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008030:	e013      	b.n	800805a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800804e:	b29b      	uxth	r3, r3
 8008050:	3b01      	subs	r3, #1
 8008052:	b29a      	uxth	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800805a:	bf00      	nop
 800805c:	373c      	adds	r7, #60	; 0x3c
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008066:	b480      	push	{r7}
 8008068:	b091      	sub	sp, #68	; 0x44
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008072:	2b21      	cmp	r3, #33	; 0x21
 8008074:	d151      	bne.n	800811a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800807c:	b29b      	uxth	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d132      	bne.n	80080e8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	e853 3f00 	ldrex	r3, [r3]
 800808e:	623b      	str	r3, [r7, #32]
   return(result);
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008096:	63bb      	str	r3, [r7, #56]	; 0x38
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	633b      	str	r3, [r7, #48]	; 0x30
 80080a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a8:	e841 2300 	strex	r3, r2, [r1]
 80080ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e6      	bne.n	8008082 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080c8:	637b      	str	r3, [r7, #52]	; 0x34
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d2:	61fb      	str	r3, [r7, #28]
 80080d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	69b9      	ldr	r1, [r7, #24]
 80080d8:	69fa      	ldr	r2, [r7, #28]
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	617b      	str	r3, [r7, #20]
   return(result);
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e6      	bne.n	80080b4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80080e6:	e018      	b.n	800811a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80080ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080fc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008102:	1c9a      	adds	r2, r3, #2
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800810e:	b29b      	uxth	r3, r3
 8008110:	3b01      	subs	r3, #1
 8008112:	b29a      	uxth	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800811a:	bf00      	nop
 800811c:	3744      	adds	r7, #68	; 0x44
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b088      	sub	sp, #32
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	e853 3f00 	ldrex	r3, [r3]
 800813a:	60bb      	str	r3, [r7, #8]
   return(result);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	461a      	mov	r2, r3
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	61bb      	str	r3, [r7, #24]
 800814e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008150:	6979      	ldr	r1, [r7, #20]
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	e841 2300 	strex	r3, r2, [r1]
 8008158:	613b      	str	r3, [r7, #16]
   return(result);
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1e6      	bne.n	800812e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2220      	movs	r2, #32
 8008164:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7ff f9bb 	bl	80074e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008172:	bf00      	nop
 8008174:	3720      	adds	r7, #32
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b096      	sub	sp, #88	; 0x58
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008188:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008192:	2b22      	cmp	r3, #34	; 0x22
 8008194:	f040 8098 	bne.w	80082c8 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081a2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80081a6:	b2d9      	uxtb	r1, r3
 80081a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b2:	400a      	ands	r2, r1
 80081b4:	b2d2      	uxtb	r2, r2
 80081b6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	3b01      	subs	r3, #1
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081da:	b29b      	uxth	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d17b      	bne.n	80082d8 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081f4:	653b      	str	r3, [r7, #80]	; 0x50
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008200:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800820c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e6      	bne.n	80081e0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	623b      	str	r3, [r7, #32]
   return(result);
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	f023 0301 	bic.w	r3, r3, #1
 8008228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3308      	adds	r3, #8
 8008230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008232:	633a      	str	r2, [r7, #48]	; 0x30
 8008234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e5      	bne.n	8008212 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800825e:	2b01      	cmp	r3, #1
 8008260:	d12e      	bne.n	80082c0 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	60fb      	str	r3, [r7, #12]
   return(result);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f023 0310 	bic.w	r3, r3, #16
 800827c:	64bb      	str	r3, [r7, #72]	; 0x48
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008286:	61fb      	str	r3, [r7, #28]
 8008288:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	69b9      	ldr	r1, [r7, #24]
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	617b      	str	r3, [r7, #20]
   return(result);
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e6      	bne.n	8008268 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	f003 0310 	and.w	r3, r3, #16
 80082a4:	2b10      	cmp	r3, #16
 80082a6:	d103      	bne.n	80082b0 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2210      	movs	r2, #16
 80082ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff f929 	bl	8007510 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082be:	e00b      	b.n	80082d8 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7fa f9a3 	bl	800260c <HAL_UART_RxCpltCallback>
}
 80082c6:	e007      	b.n	80082d8 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	699a      	ldr	r2, [r3, #24]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0208 	orr.w	r2, r2, #8
 80082d6:	619a      	str	r2, [r3, #24]
}
 80082d8:	bf00      	nop
 80082da:	3758      	adds	r7, #88	; 0x58
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b096      	sub	sp, #88	; 0x58
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082f8:	2b22      	cmp	r3, #34	; 0x22
 80082fa:	f040 8098 	bne.w	800842e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800830e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008312:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008316:	4013      	ands	r3, r2
 8008318:	b29a      	uxth	r2, r3
 800831a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800831c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008322:	1c9a      	adds	r2, r3, #2
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800832e:	b29b      	uxth	r3, r3
 8008330:	3b01      	subs	r3, #1
 8008332:	b29a      	uxth	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008340:	b29b      	uxth	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d17b      	bne.n	800843e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834e:	e853 3f00 	ldrex	r3, [r3]
 8008352:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800835a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	461a      	mov	r2, r3
 8008362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008364:	643b      	str	r3, [r7, #64]	; 0x40
 8008366:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800836a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e6      	bne.n	8008346 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3308      	adds	r3, #8
 800837e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	e853 3f00 	ldrex	r3, [r3]
 8008386:	61fb      	str	r3, [r7, #28]
   return(result);
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	f023 0301 	bic.w	r3, r3, #1
 800838e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3308      	adds	r3, #8
 8008396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008398:	62fa      	str	r2, [r7, #44]	; 0x2c
 800839a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800839e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083a0:	e841 2300 	strex	r3, r2, [r1]
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e5      	bne.n	8008378 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d12e      	bne.n	8008426 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	60bb      	str	r3, [r7, #8]
   return(result);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f023 0310 	bic.w	r3, r3, #16
 80083e2:	647b      	str	r3, [r7, #68]	; 0x44
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ec:	61bb      	str	r3, [r7, #24]
 80083ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	6979      	ldr	r1, [r7, #20]
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	613b      	str	r3, [r7, #16]
   return(result);
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e6      	bne.n	80083ce <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f003 0310 	and.w	r3, r3, #16
 800840a:	2b10      	cmp	r3, #16
 800840c:	d103      	bne.n	8008416 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2210      	movs	r2, #16
 8008414:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff f876 	bl	8007510 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008424:	e00b      	b.n	800843e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7fa f8f0 	bl	800260c <HAL_UART_RxCpltCallback>
}
 800842c:	e007      	b.n	800843e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	699a      	ldr	r2, [r3, #24]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f042 0208 	orr.w	r2, r2, #8
 800843c:	619a      	str	r2, [r3, #24]
}
 800843e:	bf00      	nop
 8008440:	3758      	adds	r7, #88	; 0x58
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <atof>:
 8008446:	2100      	movs	r1, #0
 8008448:	f000 be0e 	b.w	8009068 <strtod>

0800844c <sulp>:
 800844c:	b570      	push	{r4, r5, r6, lr}
 800844e:	4604      	mov	r4, r0
 8008450:	460d      	mov	r5, r1
 8008452:	ec45 4b10 	vmov	d0, r4, r5
 8008456:	4616      	mov	r6, r2
 8008458:	f001 ffac 	bl	800a3b4 <__ulp>
 800845c:	ec51 0b10 	vmov	r0, r1, d0
 8008460:	b17e      	cbz	r6, 8008482 <sulp+0x36>
 8008462:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008466:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800846a:	2b00      	cmp	r3, #0
 800846c:	dd09      	ble.n	8008482 <sulp+0x36>
 800846e:	051b      	lsls	r3, r3, #20
 8008470:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008474:	2400      	movs	r4, #0
 8008476:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800847a:	4622      	mov	r2, r4
 800847c:	462b      	mov	r3, r5
 800847e:	f7f8 f8d3 	bl	8000628 <__aeabi_dmul>
 8008482:	bd70      	pop	{r4, r5, r6, pc}
 8008484:	0000      	movs	r0, r0
	...

08008488 <_strtod_l>:
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	ed2d 8b02 	vpush	{d8}
 8008490:	b09b      	sub	sp, #108	; 0x6c
 8008492:	4604      	mov	r4, r0
 8008494:	9213      	str	r2, [sp, #76]	; 0x4c
 8008496:	2200      	movs	r2, #0
 8008498:	9216      	str	r2, [sp, #88]	; 0x58
 800849a:	460d      	mov	r5, r1
 800849c:	f04f 0800 	mov.w	r8, #0
 80084a0:	f04f 0900 	mov.w	r9, #0
 80084a4:	460a      	mov	r2, r1
 80084a6:	9215      	str	r2, [sp, #84]	; 0x54
 80084a8:	7811      	ldrb	r1, [r2, #0]
 80084aa:	292b      	cmp	r1, #43	; 0x2b
 80084ac:	d04c      	beq.n	8008548 <_strtod_l+0xc0>
 80084ae:	d83a      	bhi.n	8008526 <_strtod_l+0x9e>
 80084b0:	290d      	cmp	r1, #13
 80084b2:	d834      	bhi.n	800851e <_strtod_l+0x96>
 80084b4:	2908      	cmp	r1, #8
 80084b6:	d834      	bhi.n	8008522 <_strtod_l+0x9a>
 80084b8:	2900      	cmp	r1, #0
 80084ba:	d03d      	beq.n	8008538 <_strtod_l+0xb0>
 80084bc:	2200      	movs	r2, #0
 80084be:	920a      	str	r2, [sp, #40]	; 0x28
 80084c0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80084c2:	7832      	ldrb	r2, [r6, #0]
 80084c4:	2a30      	cmp	r2, #48	; 0x30
 80084c6:	f040 80b4 	bne.w	8008632 <_strtod_l+0x1aa>
 80084ca:	7872      	ldrb	r2, [r6, #1]
 80084cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80084d0:	2a58      	cmp	r2, #88	; 0x58
 80084d2:	d170      	bne.n	80085b6 <_strtod_l+0x12e>
 80084d4:	9302      	str	r3, [sp, #8]
 80084d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	ab16      	add	r3, sp, #88	; 0x58
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	4a8e      	ldr	r2, [pc, #568]	; (8008718 <_strtod_l+0x290>)
 80084e0:	ab17      	add	r3, sp, #92	; 0x5c
 80084e2:	a915      	add	r1, sp, #84	; 0x54
 80084e4:	4620      	mov	r0, r4
 80084e6:	f001 f84b 	bl	8009580 <__gethex>
 80084ea:	f010 070f 	ands.w	r7, r0, #15
 80084ee:	4605      	mov	r5, r0
 80084f0:	d005      	beq.n	80084fe <_strtod_l+0x76>
 80084f2:	2f06      	cmp	r7, #6
 80084f4:	d12a      	bne.n	800854c <_strtod_l+0xc4>
 80084f6:	3601      	adds	r6, #1
 80084f8:	2300      	movs	r3, #0
 80084fa:	9615      	str	r6, [sp, #84]	; 0x54
 80084fc:	930a      	str	r3, [sp, #40]	; 0x28
 80084fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008500:	2b00      	cmp	r3, #0
 8008502:	f040 857f 	bne.w	8009004 <_strtod_l+0xb7c>
 8008506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008508:	b1db      	cbz	r3, 8008542 <_strtod_l+0xba>
 800850a:	4642      	mov	r2, r8
 800850c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008510:	ec43 2b10 	vmov	d0, r2, r3
 8008514:	b01b      	add	sp, #108	; 0x6c
 8008516:	ecbd 8b02 	vpop	{d8}
 800851a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851e:	2920      	cmp	r1, #32
 8008520:	d1cc      	bne.n	80084bc <_strtod_l+0x34>
 8008522:	3201      	adds	r2, #1
 8008524:	e7bf      	b.n	80084a6 <_strtod_l+0x1e>
 8008526:	292d      	cmp	r1, #45	; 0x2d
 8008528:	d1c8      	bne.n	80084bc <_strtod_l+0x34>
 800852a:	2101      	movs	r1, #1
 800852c:	910a      	str	r1, [sp, #40]	; 0x28
 800852e:	1c51      	adds	r1, r2, #1
 8008530:	9115      	str	r1, [sp, #84]	; 0x54
 8008532:	7852      	ldrb	r2, [r2, #1]
 8008534:	2a00      	cmp	r2, #0
 8008536:	d1c3      	bne.n	80084c0 <_strtod_l+0x38>
 8008538:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800853a:	9515      	str	r5, [sp, #84]	; 0x54
 800853c:	2b00      	cmp	r3, #0
 800853e:	f040 855f 	bne.w	8009000 <_strtod_l+0xb78>
 8008542:	4642      	mov	r2, r8
 8008544:	464b      	mov	r3, r9
 8008546:	e7e3      	b.n	8008510 <_strtod_l+0x88>
 8008548:	2100      	movs	r1, #0
 800854a:	e7ef      	b.n	800852c <_strtod_l+0xa4>
 800854c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800854e:	b13a      	cbz	r2, 8008560 <_strtod_l+0xd8>
 8008550:	2135      	movs	r1, #53	; 0x35
 8008552:	a818      	add	r0, sp, #96	; 0x60
 8008554:	f002 f82b 	bl	800a5ae <__copybits>
 8008558:	9916      	ldr	r1, [sp, #88]	; 0x58
 800855a:	4620      	mov	r0, r4
 800855c:	f001 fbfe 	bl	8009d5c <_Bfree>
 8008560:	3f01      	subs	r7, #1
 8008562:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008564:	2f04      	cmp	r7, #4
 8008566:	d806      	bhi.n	8008576 <_strtod_l+0xee>
 8008568:	e8df f007 	tbb	[pc, r7]
 800856c:	201d0314 	.word	0x201d0314
 8008570:	14          	.byte	0x14
 8008571:	00          	.byte	0x00
 8008572:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008576:	05e9      	lsls	r1, r5, #23
 8008578:	bf48      	it	mi
 800857a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800857e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008582:	0d1b      	lsrs	r3, r3, #20
 8008584:	051b      	lsls	r3, r3, #20
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1b9      	bne.n	80084fe <_strtod_l+0x76>
 800858a:	f000 feff 	bl	800938c <__errno>
 800858e:	2322      	movs	r3, #34	; 0x22
 8008590:	6003      	str	r3, [r0, #0]
 8008592:	e7b4      	b.n	80084fe <_strtod_l+0x76>
 8008594:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008598:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800859c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80085a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80085a4:	e7e7      	b.n	8008576 <_strtod_l+0xee>
 80085a6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008720 <_strtod_l+0x298>
 80085aa:	e7e4      	b.n	8008576 <_strtod_l+0xee>
 80085ac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80085b0:	f04f 38ff 	mov.w	r8, #4294967295
 80085b4:	e7df      	b.n	8008576 <_strtod_l+0xee>
 80085b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	9215      	str	r2, [sp, #84]	; 0x54
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	2b30      	cmp	r3, #48	; 0x30
 80085c0:	d0f9      	beq.n	80085b6 <_strtod_l+0x12e>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d09b      	beq.n	80084fe <_strtod_l+0x76>
 80085c6:	2301      	movs	r3, #1
 80085c8:	f04f 0a00 	mov.w	sl, #0
 80085cc:	9304      	str	r3, [sp, #16]
 80085ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80085d6:	46d3      	mov	fp, sl
 80085d8:	220a      	movs	r2, #10
 80085da:	9815      	ldr	r0, [sp, #84]	; 0x54
 80085dc:	7806      	ldrb	r6, [r0, #0]
 80085de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80085e2:	b2d9      	uxtb	r1, r3
 80085e4:	2909      	cmp	r1, #9
 80085e6:	d926      	bls.n	8008636 <_strtod_l+0x1ae>
 80085e8:	494c      	ldr	r1, [pc, #304]	; (800871c <_strtod_l+0x294>)
 80085ea:	2201      	movs	r2, #1
 80085ec:	f000 fe75 	bl	80092da <strncmp>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d030      	beq.n	8008656 <_strtod_l+0x1ce>
 80085f4:	2000      	movs	r0, #0
 80085f6:	4632      	mov	r2, r6
 80085f8:	9005      	str	r0, [sp, #20]
 80085fa:	465e      	mov	r6, fp
 80085fc:	4603      	mov	r3, r0
 80085fe:	2a65      	cmp	r2, #101	; 0x65
 8008600:	d001      	beq.n	8008606 <_strtod_l+0x17e>
 8008602:	2a45      	cmp	r2, #69	; 0x45
 8008604:	d113      	bne.n	800862e <_strtod_l+0x1a6>
 8008606:	b91e      	cbnz	r6, 8008610 <_strtod_l+0x188>
 8008608:	9a04      	ldr	r2, [sp, #16]
 800860a:	4302      	orrs	r2, r0
 800860c:	d094      	beq.n	8008538 <_strtod_l+0xb0>
 800860e:	2600      	movs	r6, #0
 8008610:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008612:	1c6a      	adds	r2, r5, #1
 8008614:	9215      	str	r2, [sp, #84]	; 0x54
 8008616:	786a      	ldrb	r2, [r5, #1]
 8008618:	2a2b      	cmp	r2, #43	; 0x2b
 800861a:	d074      	beq.n	8008706 <_strtod_l+0x27e>
 800861c:	2a2d      	cmp	r2, #45	; 0x2d
 800861e:	d078      	beq.n	8008712 <_strtod_l+0x28a>
 8008620:	f04f 0c00 	mov.w	ip, #0
 8008624:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008628:	2909      	cmp	r1, #9
 800862a:	d97f      	bls.n	800872c <_strtod_l+0x2a4>
 800862c:	9515      	str	r5, [sp, #84]	; 0x54
 800862e:	2700      	movs	r7, #0
 8008630:	e09e      	b.n	8008770 <_strtod_l+0x2e8>
 8008632:	2300      	movs	r3, #0
 8008634:	e7c8      	b.n	80085c8 <_strtod_l+0x140>
 8008636:	f1bb 0f08 	cmp.w	fp, #8
 800863a:	bfd8      	it	le
 800863c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800863e:	f100 0001 	add.w	r0, r0, #1
 8008642:	bfda      	itte	le
 8008644:	fb02 3301 	mlale	r3, r2, r1, r3
 8008648:	9309      	strle	r3, [sp, #36]	; 0x24
 800864a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800864e:	f10b 0b01 	add.w	fp, fp, #1
 8008652:	9015      	str	r0, [sp, #84]	; 0x54
 8008654:	e7c1      	b.n	80085da <_strtod_l+0x152>
 8008656:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	9215      	str	r2, [sp, #84]	; 0x54
 800865c:	785a      	ldrb	r2, [r3, #1]
 800865e:	f1bb 0f00 	cmp.w	fp, #0
 8008662:	d037      	beq.n	80086d4 <_strtod_l+0x24c>
 8008664:	9005      	str	r0, [sp, #20]
 8008666:	465e      	mov	r6, fp
 8008668:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800866c:	2b09      	cmp	r3, #9
 800866e:	d912      	bls.n	8008696 <_strtod_l+0x20e>
 8008670:	2301      	movs	r3, #1
 8008672:	e7c4      	b.n	80085fe <_strtod_l+0x176>
 8008674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	9215      	str	r2, [sp, #84]	; 0x54
 800867a:	785a      	ldrb	r2, [r3, #1]
 800867c:	3001      	adds	r0, #1
 800867e:	2a30      	cmp	r2, #48	; 0x30
 8008680:	d0f8      	beq.n	8008674 <_strtod_l+0x1ec>
 8008682:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008686:	2b08      	cmp	r3, #8
 8008688:	f200 84c1 	bhi.w	800900e <_strtod_l+0xb86>
 800868c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800868e:	9005      	str	r0, [sp, #20]
 8008690:	2000      	movs	r0, #0
 8008692:	930b      	str	r3, [sp, #44]	; 0x2c
 8008694:	4606      	mov	r6, r0
 8008696:	3a30      	subs	r2, #48	; 0x30
 8008698:	f100 0301 	add.w	r3, r0, #1
 800869c:	d014      	beq.n	80086c8 <_strtod_l+0x240>
 800869e:	9905      	ldr	r1, [sp, #20]
 80086a0:	4419      	add	r1, r3
 80086a2:	9105      	str	r1, [sp, #20]
 80086a4:	4633      	mov	r3, r6
 80086a6:	eb00 0c06 	add.w	ip, r0, r6
 80086aa:	210a      	movs	r1, #10
 80086ac:	4563      	cmp	r3, ip
 80086ae:	d113      	bne.n	80086d8 <_strtod_l+0x250>
 80086b0:	1833      	adds	r3, r6, r0
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	f106 0601 	add.w	r6, r6, #1
 80086b8:	4406      	add	r6, r0
 80086ba:	dc1a      	bgt.n	80086f2 <_strtod_l+0x26a>
 80086bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086be:	230a      	movs	r3, #10
 80086c0:	fb03 2301 	mla	r3, r3, r1, r2
 80086c4:	9309      	str	r3, [sp, #36]	; 0x24
 80086c6:	2300      	movs	r3, #0
 80086c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80086ca:	1c51      	adds	r1, r2, #1
 80086cc:	9115      	str	r1, [sp, #84]	; 0x54
 80086ce:	7852      	ldrb	r2, [r2, #1]
 80086d0:	4618      	mov	r0, r3
 80086d2:	e7c9      	b.n	8008668 <_strtod_l+0x1e0>
 80086d4:	4658      	mov	r0, fp
 80086d6:	e7d2      	b.n	800867e <_strtod_l+0x1f6>
 80086d8:	2b08      	cmp	r3, #8
 80086da:	f103 0301 	add.w	r3, r3, #1
 80086de:	dc03      	bgt.n	80086e8 <_strtod_l+0x260>
 80086e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80086e2:	434f      	muls	r7, r1
 80086e4:	9709      	str	r7, [sp, #36]	; 0x24
 80086e6:	e7e1      	b.n	80086ac <_strtod_l+0x224>
 80086e8:	2b10      	cmp	r3, #16
 80086ea:	bfd8      	it	le
 80086ec:	fb01 fa0a 	mulle.w	sl, r1, sl
 80086f0:	e7dc      	b.n	80086ac <_strtod_l+0x224>
 80086f2:	2e10      	cmp	r6, #16
 80086f4:	bfdc      	itt	le
 80086f6:	230a      	movle	r3, #10
 80086f8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80086fc:	e7e3      	b.n	80086c6 <_strtod_l+0x23e>
 80086fe:	2300      	movs	r3, #0
 8008700:	9305      	str	r3, [sp, #20]
 8008702:	2301      	movs	r3, #1
 8008704:	e780      	b.n	8008608 <_strtod_l+0x180>
 8008706:	f04f 0c00 	mov.w	ip, #0
 800870a:	1caa      	adds	r2, r5, #2
 800870c:	9215      	str	r2, [sp, #84]	; 0x54
 800870e:	78aa      	ldrb	r2, [r5, #2]
 8008710:	e788      	b.n	8008624 <_strtod_l+0x19c>
 8008712:	f04f 0c01 	mov.w	ip, #1
 8008716:	e7f8      	b.n	800870a <_strtod_l+0x282>
 8008718:	0800b4a4 	.word	0x0800b4a4
 800871c:	0800b494 	.word	0x0800b494
 8008720:	7ff00000 	.word	0x7ff00000
 8008724:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008726:	1c51      	adds	r1, r2, #1
 8008728:	9115      	str	r1, [sp, #84]	; 0x54
 800872a:	7852      	ldrb	r2, [r2, #1]
 800872c:	2a30      	cmp	r2, #48	; 0x30
 800872e:	d0f9      	beq.n	8008724 <_strtod_l+0x29c>
 8008730:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008734:	2908      	cmp	r1, #8
 8008736:	f63f af7a 	bhi.w	800862e <_strtod_l+0x1a6>
 800873a:	3a30      	subs	r2, #48	; 0x30
 800873c:	9208      	str	r2, [sp, #32]
 800873e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008740:	920c      	str	r2, [sp, #48]	; 0x30
 8008742:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008744:	1c57      	adds	r7, r2, #1
 8008746:	9715      	str	r7, [sp, #84]	; 0x54
 8008748:	7852      	ldrb	r2, [r2, #1]
 800874a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800874e:	f1be 0f09 	cmp.w	lr, #9
 8008752:	d938      	bls.n	80087c6 <_strtod_l+0x33e>
 8008754:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008756:	1a7f      	subs	r7, r7, r1
 8008758:	2f08      	cmp	r7, #8
 800875a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800875e:	dc03      	bgt.n	8008768 <_strtod_l+0x2e0>
 8008760:	9908      	ldr	r1, [sp, #32]
 8008762:	428f      	cmp	r7, r1
 8008764:	bfa8      	it	ge
 8008766:	460f      	movge	r7, r1
 8008768:	f1bc 0f00 	cmp.w	ip, #0
 800876c:	d000      	beq.n	8008770 <_strtod_l+0x2e8>
 800876e:	427f      	negs	r7, r7
 8008770:	2e00      	cmp	r6, #0
 8008772:	d14f      	bne.n	8008814 <_strtod_l+0x38c>
 8008774:	9904      	ldr	r1, [sp, #16]
 8008776:	4301      	orrs	r1, r0
 8008778:	f47f aec1 	bne.w	80084fe <_strtod_l+0x76>
 800877c:	2b00      	cmp	r3, #0
 800877e:	f47f aedb 	bne.w	8008538 <_strtod_l+0xb0>
 8008782:	2a69      	cmp	r2, #105	; 0x69
 8008784:	d029      	beq.n	80087da <_strtod_l+0x352>
 8008786:	dc26      	bgt.n	80087d6 <_strtod_l+0x34e>
 8008788:	2a49      	cmp	r2, #73	; 0x49
 800878a:	d026      	beq.n	80087da <_strtod_l+0x352>
 800878c:	2a4e      	cmp	r2, #78	; 0x4e
 800878e:	f47f aed3 	bne.w	8008538 <_strtod_l+0xb0>
 8008792:	499b      	ldr	r1, [pc, #620]	; (8008a00 <_strtod_l+0x578>)
 8008794:	a815      	add	r0, sp, #84	; 0x54
 8008796:	f001 f933 	bl	8009a00 <__match>
 800879a:	2800      	cmp	r0, #0
 800879c:	f43f aecc 	beq.w	8008538 <_strtod_l+0xb0>
 80087a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	2b28      	cmp	r3, #40	; 0x28
 80087a6:	d12f      	bne.n	8008808 <_strtod_l+0x380>
 80087a8:	4996      	ldr	r1, [pc, #600]	; (8008a04 <_strtod_l+0x57c>)
 80087aa:	aa18      	add	r2, sp, #96	; 0x60
 80087ac:	a815      	add	r0, sp, #84	; 0x54
 80087ae:	f001 f93b 	bl	8009a28 <__hexnan>
 80087b2:	2805      	cmp	r0, #5
 80087b4:	d128      	bne.n	8008808 <_strtod_l+0x380>
 80087b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80087bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80087c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80087c4:	e69b      	b.n	80084fe <_strtod_l+0x76>
 80087c6:	9f08      	ldr	r7, [sp, #32]
 80087c8:	210a      	movs	r1, #10
 80087ca:	fb01 2107 	mla	r1, r1, r7, r2
 80087ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80087d2:	9208      	str	r2, [sp, #32]
 80087d4:	e7b5      	b.n	8008742 <_strtod_l+0x2ba>
 80087d6:	2a6e      	cmp	r2, #110	; 0x6e
 80087d8:	e7d9      	b.n	800878e <_strtod_l+0x306>
 80087da:	498b      	ldr	r1, [pc, #556]	; (8008a08 <_strtod_l+0x580>)
 80087dc:	a815      	add	r0, sp, #84	; 0x54
 80087de:	f001 f90f 	bl	8009a00 <__match>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f43f aea8 	beq.w	8008538 <_strtod_l+0xb0>
 80087e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087ea:	4988      	ldr	r1, [pc, #544]	; (8008a0c <_strtod_l+0x584>)
 80087ec:	3b01      	subs	r3, #1
 80087ee:	a815      	add	r0, sp, #84	; 0x54
 80087f0:	9315      	str	r3, [sp, #84]	; 0x54
 80087f2:	f001 f905 	bl	8009a00 <__match>
 80087f6:	b910      	cbnz	r0, 80087fe <_strtod_l+0x376>
 80087f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087fa:	3301      	adds	r3, #1
 80087fc:	9315      	str	r3, [sp, #84]	; 0x54
 80087fe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008a1c <_strtod_l+0x594>
 8008802:	f04f 0800 	mov.w	r8, #0
 8008806:	e67a      	b.n	80084fe <_strtod_l+0x76>
 8008808:	4881      	ldr	r0, [pc, #516]	; (8008a10 <_strtod_l+0x588>)
 800880a:	f000 fdfd 	bl	8009408 <nan>
 800880e:	ec59 8b10 	vmov	r8, r9, d0
 8008812:	e674      	b.n	80084fe <_strtod_l+0x76>
 8008814:	9b05      	ldr	r3, [sp, #20]
 8008816:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008818:	1afb      	subs	r3, r7, r3
 800881a:	f1bb 0f00 	cmp.w	fp, #0
 800881e:	bf08      	it	eq
 8008820:	46b3      	moveq	fp, r6
 8008822:	2e10      	cmp	r6, #16
 8008824:	9308      	str	r3, [sp, #32]
 8008826:	4635      	mov	r5, r6
 8008828:	bfa8      	it	ge
 800882a:	2510      	movge	r5, #16
 800882c:	f7f7 fe82 	bl	8000534 <__aeabi_ui2d>
 8008830:	2e09      	cmp	r6, #9
 8008832:	4680      	mov	r8, r0
 8008834:	4689      	mov	r9, r1
 8008836:	dd13      	ble.n	8008860 <_strtod_l+0x3d8>
 8008838:	4b76      	ldr	r3, [pc, #472]	; (8008a14 <_strtod_l+0x58c>)
 800883a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800883e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008842:	f7f7 fef1 	bl	8000628 <__aeabi_dmul>
 8008846:	4680      	mov	r8, r0
 8008848:	4650      	mov	r0, sl
 800884a:	4689      	mov	r9, r1
 800884c:	f7f7 fe72 	bl	8000534 <__aeabi_ui2d>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4640      	mov	r0, r8
 8008856:	4649      	mov	r1, r9
 8008858:	f7f7 fd30 	bl	80002bc <__adddf3>
 800885c:	4680      	mov	r8, r0
 800885e:	4689      	mov	r9, r1
 8008860:	2e0f      	cmp	r6, #15
 8008862:	dc38      	bgt.n	80088d6 <_strtod_l+0x44e>
 8008864:	9b08      	ldr	r3, [sp, #32]
 8008866:	2b00      	cmp	r3, #0
 8008868:	f43f ae49 	beq.w	80084fe <_strtod_l+0x76>
 800886c:	dd24      	ble.n	80088b8 <_strtod_l+0x430>
 800886e:	2b16      	cmp	r3, #22
 8008870:	dc0b      	bgt.n	800888a <_strtod_l+0x402>
 8008872:	4968      	ldr	r1, [pc, #416]	; (8008a14 <_strtod_l+0x58c>)
 8008874:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800887c:	4642      	mov	r2, r8
 800887e:	464b      	mov	r3, r9
 8008880:	f7f7 fed2 	bl	8000628 <__aeabi_dmul>
 8008884:	4680      	mov	r8, r0
 8008886:	4689      	mov	r9, r1
 8008888:	e639      	b.n	80084fe <_strtod_l+0x76>
 800888a:	9a08      	ldr	r2, [sp, #32]
 800888c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008890:	4293      	cmp	r3, r2
 8008892:	db20      	blt.n	80088d6 <_strtod_l+0x44e>
 8008894:	4c5f      	ldr	r4, [pc, #380]	; (8008a14 <_strtod_l+0x58c>)
 8008896:	f1c6 060f 	rsb	r6, r6, #15
 800889a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800889e:	4642      	mov	r2, r8
 80088a0:	464b      	mov	r3, r9
 80088a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088a6:	f7f7 febf 	bl	8000628 <__aeabi_dmul>
 80088aa:	9b08      	ldr	r3, [sp, #32]
 80088ac:	1b9e      	subs	r6, r3, r6
 80088ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80088b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80088b6:	e7e3      	b.n	8008880 <_strtod_l+0x3f8>
 80088b8:	9b08      	ldr	r3, [sp, #32]
 80088ba:	3316      	adds	r3, #22
 80088bc:	db0b      	blt.n	80088d6 <_strtod_l+0x44e>
 80088be:	9b05      	ldr	r3, [sp, #20]
 80088c0:	1bdf      	subs	r7, r3, r7
 80088c2:	4b54      	ldr	r3, [pc, #336]	; (8008a14 <_strtod_l+0x58c>)
 80088c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80088c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088cc:	4640      	mov	r0, r8
 80088ce:	4649      	mov	r1, r9
 80088d0:	f7f7 ffd4 	bl	800087c <__aeabi_ddiv>
 80088d4:	e7d6      	b.n	8008884 <_strtod_l+0x3fc>
 80088d6:	9b08      	ldr	r3, [sp, #32]
 80088d8:	1b75      	subs	r5, r6, r5
 80088da:	441d      	add	r5, r3
 80088dc:	2d00      	cmp	r5, #0
 80088de:	dd70      	ble.n	80089c2 <_strtod_l+0x53a>
 80088e0:	f015 030f 	ands.w	r3, r5, #15
 80088e4:	d00a      	beq.n	80088fc <_strtod_l+0x474>
 80088e6:	494b      	ldr	r1, [pc, #300]	; (8008a14 <_strtod_l+0x58c>)
 80088e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80088ec:	4642      	mov	r2, r8
 80088ee:	464b      	mov	r3, r9
 80088f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f4:	f7f7 fe98 	bl	8000628 <__aeabi_dmul>
 80088f8:	4680      	mov	r8, r0
 80088fa:	4689      	mov	r9, r1
 80088fc:	f035 050f 	bics.w	r5, r5, #15
 8008900:	d04d      	beq.n	800899e <_strtod_l+0x516>
 8008902:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008906:	dd22      	ble.n	800894e <_strtod_l+0x4c6>
 8008908:	2500      	movs	r5, #0
 800890a:	46ab      	mov	fp, r5
 800890c:	9509      	str	r5, [sp, #36]	; 0x24
 800890e:	9505      	str	r5, [sp, #20]
 8008910:	2322      	movs	r3, #34	; 0x22
 8008912:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008a1c <_strtod_l+0x594>
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	f04f 0800 	mov.w	r8, #0
 800891c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800891e:	2b00      	cmp	r3, #0
 8008920:	f43f aded 	beq.w	80084fe <_strtod_l+0x76>
 8008924:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008926:	4620      	mov	r0, r4
 8008928:	f001 fa18 	bl	8009d5c <_Bfree>
 800892c:	9905      	ldr	r1, [sp, #20]
 800892e:	4620      	mov	r0, r4
 8008930:	f001 fa14 	bl	8009d5c <_Bfree>
 8008934:	4659      	mov	r1, fp
 8008936:	4620      	mov	r0, r4
 8008938:	f001 fa10 	bl	8009d5c <_Bfree>
 800893c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800893e:	4620      	mov	r0, r4
 8008940:	f001 fa0c 	bl	8009d5c <_Bfree>
 8008944:	4629      	mov	r1, r5
 8008946:	4620      	mov	r0, r4
 8008948:	f001 fa08 	bl	8009d5c <_Bfree>
 800894c:	e5d7      	b.n	80084fe <_strtod_l+0x76>
 800894e:	4b32      	ldr	r3, [pc, #200]	; (8008a18 <_strtod_l+0x590>)
 8008950:	9304      	str	r3, [sp, #16]
 8008952:	2300      	movs	r3, #0
 8008954:	112d      	asrs	r5, r5, #4
 8008956:	4640      	mov	r0, r8
 8008958:	4649      	mov	r1, r9
 800895a:	469a      	mov	sl, r3
 800895c:	2d01      	cmp	r5, #1
 800895e:	dc21      	bgt.n	80089a4 <_strtod_l+0x51c>
 8008960:	b10b      	cbz	r3, 8008966 <_strtod_l+0x4de>
 8008962:	4680      	mov	r8, r0
 8008964:	4689      	mov	r9, r1
 8008966:	492c      	ldr	r1, [pc, #176]	; (8008a18 <_strtod_l+0x590>)
 8008968:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800896c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008970:	4642      	mov	r2, r8
 8008972:	464b      	mov	r3, r9
 8008974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008978:	f7f7 fe56 	bl	8000628 <__aeabi_dmul>
 800897c:	4b27      	ldr	r3, [pc, #156]	; (8008a1c <_strtod_l+0x594>)
 800897e:	460a      	mov	r2, r1
 8008980:	400b      	ands	r3, r1
 8008982:	4927      	ldr	r1, [pc, #156]	; (8008a20 <_strtod_l+0x598>)
 8008984:	428b      	cmp	r3, r1
 8008986:	4680      	mov	r8, r0
 8008988:	d8be      	bhi.n	8008908 <_strtod_l+0x480>
 800898a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800898e:	428b      	cmp	r3, r1
 8008990:	bf86      	itte	hi
 8008992:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008a24 <_strtod_l+0x59c>
 8008996:	f04f 38ff 	movhi.w	r8, #4294967295
 800899a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800899e:	2300      	movs	r3, #0
 80089a0:	9304      	str	r3, [sp, #16]
 80089a2:	e07b      	b.n	8008a9c <_strtod_l+0x614>
 80089a4:	07ea      	lsls	r2, r5, #31
 80089a6:	d505      	bpl.n	80089b4 <_strtod_l+0x52c>
 80089a8:	9b04      	ldr	r3, [sp, #16]
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	f7f7 fe3b 	bl	8000628 <__aeabi_dmul>
 80089b2:	2301      	movs	r3, #1
 80089b4:	9a04      	ldr	r2, [sp, #16]
 80089b6:	3208      	adds	r2, #8
 80089b8:	f10a 0a01 	add.w	sl, sl, #1
 80089bc:	106d      	asrs	r5, r5, #1
 80089be:	9204      	str	r2, [sp, #16]
 80089c0:	e7cc      	b.n	800895c <_strtod_l+0x4d4>
 80089c2:	d0ec      	beq.n	800899e <_strtod_l+0x516>
 80089c4:	426d      	negs	r5, r5
 80089c6:	f015 020f 	ands.w	r2, r5, #15
 80089ca:	d00a      	beq.n	80089e2 <_strtod_l+0x55a>
 80089cc:	4b11      	ldr	r3, [pc, #68]	; (8008a14 <_strtod_l+0x58c>)
 80089ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089d2:	4640      	mov	r0, r8
 80089d4:	4649      	mov	r1, r9
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	f7f7 ff4f 	bl	800087c <__aeabi_ddiv>
 80089de:	4680      	mov	r8, r0
 80089e0:	4689      	mov	r9, r1
 80089e2:	112d      	asrs	r5, r5, #4
 80089e4:	d0db      	beq.n	800899e <_strtod_l+0x516>
 80089e6:	2d1f      	cmp	r5, #31
 80089e8:	dd1e      	ble.n	8008a28 <_strtod_l+0x5a0>
 80089ea:	2500      	movs	r5, #0
 80089ec:	46ab      	mov	fp, r5
 80089ee:	9509      	str	r5, [sp, #36]	; 0x24
 80089f0:	9505      	str	r5, [sp, #20]
 80089f2:	2322      	movs	r3, #34	; 0x22
 80089f4:	f04f 0800 	mov.w	r8, #0
 80089f8:	f04f 0900 	mov.w	r9, #0
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	e78d      	b.n	800891c <_strtod_l+0x494>
 8008a00:	0800b49f 	.word	0x0800b49f
 8008a04:	0800b4b8 	.word	0x0800b4b8
 8008a08:	0800b496 	.word	0x0800b496
 8008a0c:	0800b499 	.word	0x0800b499
 8008a10:	0800b853 	.word	0x0800b853
 8008a14:	0800b610 	.word	0x0800b610
 8008a18:	0800b5e8 	.word	0x0800b5e8
 8008a1c:	7ff00000 	.word	0x7ff00000
 8008a20:	7ca00000 	.word	0x7ca00000
 8008a24:	7fefffff 	.word	0x7fefffff
 8008a28:	f015 0310 	ands.w	r3, r5, #16
 8008a2c:	bf18      	it	ne
 8008a2e:	236a      	movne	r3, #106	; 0x6a
 8008a30:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008dd4 <_strtod_l+0x94c>
 8008a34:	9304      	str	r3, [sp, #16]
 8008a36:	4640      	mov	r0, r8
 8008a38:	4649      	mov	r1, r9
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	07ea      	lsls	r2, r5, #31
 8008a3e:	d504      	bpl.n	8008a4a <_strtod_l+0x5c2>
 8008a40:	e9da 2300 	ldrd	r2, r3, [sl]
 8008a44:	f7f7 fdf0 	bl	8000628 <__aeabi_dmul>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	106d      	asrs	r5, r5, #1
 8008a4c:	f10a 0a08 	add.w	sl, sl, #8
 8008a50:	d1f4      	bne.n	8008a3c <_strtod_l+0x5b4>
 8008a52:	b10b      	cbz	r3, 8008a58 <_strtod_l+0x5d0>
 8008a54:	4680      	mov	r8, r0
 8008a56:	4689      	mov	r9, r1
 8008a58:	9b04      	ldr	r3, [sp, #16]
 8008a5a:	b1bb      	cbz	r3, 8008a8c <_strtod_l+0x604>
 8008a5c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008a60:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	4649      	mov	r1, r9
 8008a68:	dd10      	ble.n	8008a8c <_strtod_l+0x604>
 8008a6a:	2b1f      	cmp	r3, #31
 8008a6c:	f340 811e 	ble.w	8008cac <_strtod_l+0x824>
 8008a70:	2b34      	cmp	r3, #52	; 0x34
 8008a72:	bfde      	ittt	le
 8008a74:	f04f 33ff 	movle.w	r3, #4294967295
 8008a78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008a7c:	4093      	lslle	r3, r2
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	bfcc      	ite	gt
 8008a84:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008a88:	ea03 0901 	andle.w	r9, r3, r1
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	2300      	movs	r3, #0
 8008a90:	4640      	mov	r0, r8
 8008a92:	4649      	mov	r1, r9
 8008a94:	f7f8 f830 	bl	8000af8 <__aeabi_dcmpeq>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d1a6      	bne.n	80089ea <_strtod_l+0x562>
 8008a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008aa2:	4633      	mov	r3, r6
 8008aa4:	465a      	mov	r2, fp
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f001 f9c0 	bl	8009e2c <__s2b>
 8008aac:	9009      	str	r0, [sp, #36]	; 0x24
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	f43f af2a 	beq.w	8008908 <_strtod_l+0x480>
 8008ab4:	9a08      	ldr	r2, [sp, #32]
 8008ab6:	9b05      	ldr	r3, [sp, #20]
 8008ab8:	2a00      	cmp	r2, #0
 8008aba:	eba3 0307 	sub.w	r3, r3, r7
 8008abe:	bfa8      	it	ge
 8008ac0:	2300      	movge	r3, #0
 8008ac2:	930c      	str	r3, [sp, #48]	; 0x30
 8008ac4:	2500      	movs	r5, #0
 8008ac6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008aca:	9312      	str	r3, [sp, #72]	; 0x48
 8008acc:	46ab      	mov	fp, r5
 8008ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	6859      	ldr	r1, [r3, #4]
 8008ad4:	f001 f902 	bl	8009cdc <_Balloc>
 8008ad8:	9005      	str	r0, [sp, #20]
 8008ada:	2800      	cmp	r0, #0
 8008adc:	f43f af18 	beq.w	8008910 <_strtod_l+0x488>
 8008ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae2:	691a      	ldr	r2, [r3, #16]
 8008ae4:	3202      	adds	r2, #2
 8008ae6:	f103 010c 	add.w	r1, r3, #12
 8008aea:	0092      	lsls	r2, r2, #2
 8008aec:	300c      	adds	r0, #12
 8008aee:	f000 fc7a 	bl	80093e6 <memcpy>
 8008af2:	ec49 8b10 	vmov	d0, r8, r9
 8008af6:	aa18      	add	r2, sp, #96	; 0x60
 8008af8:	a917      	add	r1, sp, #92	; 0x5c
 8008afa:	4620      	mov	r0, r4
 8008afc:	f001 fcca 	bl	800a494 <__d2b>
 8008b00:	ec49 8b18 	vmov	d8, r8, r9
 8008b04:	9016      	str	r0, [sp, #88]	; 0x58
 8008b06:	2800      	cmp	r0, #0
 8008b08:	f43f af02 	beq.w	8008910 <_strtod_l+0x488>
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f001 fa24 	bl	8009f5c <__i2b>
 8008b14:	4683      	mov	fp, r0
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f43f aefa 	beq.w	8008910 <_strtod_l+0x488>
 8008b1c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008b1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b20:	2e00      	cmp	r6, #0
 8008b22:	bfab      	itete	ge
 8008b24:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008b26:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008b28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008b2a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008b2e:	bfac      	ite	ge
 8008b30:	eb06 0a03 	addge.w	sl, r6, r3
 8008b34:	1b9f      	sublt	r7, r3, r6
 8008b36:	9b04      	ldr	r3, [sp, #16]
 8008b38:	1af6      	subs	r6, r6, r3
 8008b3a:	4416      	add	r6, r2
 8008b3c:	4ba0      	ldr	r3, [pc, #640]	; (8008dc0 <_strtod_l+0x938>)
 8008b3e:	3e01      	subs	r6, #1
 8008b40:	429e      	cmp	r6, r3
 8008b42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008b46:	f280 80c4 	bge.w	8008cd2 <_strtod_l+0x84a>
 8008b4a:	1b9b      	subs	r3, r3, r6
 8008b4c:	2b1f      	cmp	r3, #31
 8008b4e:	eba2 0203 	sub.w	r2, r2, r3
 8008b52:	f04f 0101 	mov.w	r1, #1
 8008b56:	f300 80b0 	bgt.w	8008cba <_strtod_l+0x832>
 8008b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5e:	930e      	str	r3, [sp, #56]	; 0x38
 8008b60:	2300      	movs	r3, #0
 8008b62:	930d      	str	r3, [sp, #52]	; 0x34
 8008b64:	eb0a 0602 	add.w	r6, sl, r2
 8008b68:	9b04      	ldr	r3, [sp, #16]
 8008b6a:	45b2      	cmp	sl, r6
 8008b6c:	4417      	add	r7, r2
 8008b6e:	441f      	add	r7, r3
 8008b70:	4653      	mov	r3, sl
 8008b72:	bfa8      	it	ge
 8008b74:	4633      	movge	r3, r6
 8008b76:	42bb      	cmp	r3, r7
 8008b78:	bfa8      	it	ge
 8008b7a:	463b      	movge	r3, r7
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	bfc2      	ittt	gt
 8008b80:	1af6      	subgt	r6, r6, r3
 8008b82:	1aff      	subgt	r7, r7, r3
 8008b84:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	dd17      	ble.n	8008bbe <_strtod_l+0x736>
 8008b8e:	4659      	mov	r1, fp
 8008b90:	461a      	mov	r2, r3
 8008b92:	4620      	mov	r0, r4
 8008b94:	f001 faa2 	bl	800a0dc <__pow5mult>
 8008b98:	4683      	mov	fp, r0
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	f43f aeb8 	beq.w	8008910 <_strtod_l+0x488>
 8008ba0:	4601      	mov	r1, r0
 8008ba2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f001 f9ef 	bl	8009f88 <__multiply>
 8008baa:	900b      	str	r0, [sp, #44]	; 0x2c
 8008bac:	2800      	cmp	r0, #0
 8008bae:	f43f aeaf 	beq.w	8008910 <_strtod_l+0x488>
 8008bb2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f001 f8d1 	bl	8009d5c <_Bfree>
 8008bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bbc:	9316      	str	r3, [sp, #88]	; 0x58
 8008bbe:	2e00      	cmp	r6, #0
 8008bc0:	f300 808c 	bgt.w	8008cdc <_strtod_l+0x854>
 8008bc4:	9b08      	ldr	r3, [sp, #32]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	dd08      	ble.n	8008bdc <_strtod_l+0x754>
 8008bca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bcc:	9905      	ldr	r1, [sp, #20]
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f001 fa84 	bl	800a0dc <__pow5mult>
 8008bd4:	9005      	str	r0, [sp, #20]
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f43f ae9a 	beq.w	8008910 <_strtod_l+0x488>
 8008bdc:	2f00      	cmp	r7, #0
 8008bde:	dd08      	ble.n	8008bf2 <_strtod_l+0x76a>
 8008be0:	9905      	ldr	r1, [sp, #20]
 8008be2:	463a      	mov	r2, r7
 8008be4:	4620      	mov	r0, r4
 8008be6:	f001 fad3 	bl	800a190 <__lshift>
 8008bea:	9005      	str	r0, [sp, #20]
 8008bec:	2800      	cmp	r0, #0
 8008bee:	f43f ae8f 	beq.w	8008910 <_strtod_l+0x488>
 8008bf2:	f1ba 0f00 	cmp.w	sl, #0
 8008bf6:	dd08      	ble.n	8008c0a <_strtod_l+0x782>
 8008bf8:	4659      	mov	r1, fp
 8008bfa:	4652      	mov	r2, sl
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f001 fac7 	bl	800a190 <__lshift>
 8008c02:	4683      	mov	fp, r0
 8008c04:	2800      	cmp	r0, #0
 8008c06:	f43f ae83 	beq.w	8008910 <_strtod_l+0x488>
 8008c0a:	9a05      	ldr	r2, [sp, #20]
 8008c0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f001 fb46 	bl	800a2a0 <__mdiff>
 8008c14:	4605      	mov	r5, r0
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f43f ae7a 	beq.w	8008910 <_strtod_l+0x488>
 8008c1c:	68c3      	ldr	r3, [r0, #12]
 8008c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c20:	2300      	movs	r3, #0
 8008c22:	60c3      	str	r3, [r0, #12]
 8008c24:	4659      	mov	r1, fp
 8008c26:	f001 fb1f 	bl	800a268 <__mcmp>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	da60      	bge.n	8008cf0 <_strtod_l+0x868>
 8008c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c30:	ea53 0308 	orrs.w	r3, r3, r8
 8008c34:	f040 8084 	bne.w	8008d40 <_strtod_l+0x8b8>
 8008c38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d17f      	bne.n	8008d40 <_strtod_l+0x8b8>
 8008c40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c44:	0d1b      	lsrs	r3, r3, #20
 8008c46:	051b      	lsls	r3, r3, #20
 8008c48:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008c4c:	d978      	bls.n	8008d40 <_strtod_l+0x8b8>
 8008c4e:	696b      	ldr	r3, [r5, #20]
 8008c50:	b913      	cbnz	r3, 8008c58 <_strtod_l+0x7d0>
 8008c52:	692b      	ldr	r3, [r5, #16]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	dd73      	ble.n	8008d40 <_strtod_l+0x8b8>
 8008c58:	4629      	mov	r1, r5
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f001 fa97 	bl	800a190 <__lshift>
 8008c62:	4659      	mov	r1, fp
 8008c64:	4605      	mov	r5, r0
 8008c66:	f001 faff 	bl	800a268 <__mcmp>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	dd68      	ble.n	8008d40 <_strtod_l+0x8b8>
 8008c6e:	9904      	ldr	r1, [sp, #16]
 8008c70:	4a54      	ldr	r2, [pc, #336]	; (8008dc4 <_strtod_l+0x93c>)
 8008c72:	464b      	mov	r3, r9
 8008c74:	2900      	cmp	r1, #0
 8008c76:	f000 8084 	beq.w	8008d82 <_strtod_l+0x8fa>
 8008c7a:	ea02 0109 	and.w	r1, r2, r9
 8008c7e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c82:	dc7e      	bgt.n	8008d82 <_strtod_l+0x8fa>
 8008c84:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c88:	f77f aeb3 	ble.w	80089f2 <_strtod_l+0x56a>
 8008c8c:	4b4e      	ldr	r3, [pc, #312]	; (8008dc8 <_strtod_l+0x940>)
 8008c8e:	4640      	mov	r0, r8
 8008c90:	4649      	mov	r1, r9
 8008c92:	2200      	movs	r2, #0
 8008c94:	f7f7 fcc8 	bl	8000628 <__aeabi_dmul>
 8008c98:	4b4a      	ldr	r3, [pc, #296]	; (8008dc4 <_strtod_l+0x93c>)
 8008c9a:	400b      	ands	r3, r1
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	4689      	mov	r9, r1
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f47f ae3f 	bne.w	8008924 <_strtod_l+0x49c>
 8008ca6:	2322      	movs	r3, #34	; 0x22
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	e63b      	b.n	8008924 <_strtod_l+0x49c>
 8008cac:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb4:	ea03 0808 	and.w	r8, r3, r8
 8008cb8:	e6e8      	b.n	8008a8c <_strtod_l+0x604>
 8008cba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008cbe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008cc2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008cc6:	36e2      	adds	r6, #226	; 0xe2
 8008cc8:	fa01 f306 	lsl.w	r3, r1, r6
 8008ccc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008cd0:	e748      	b.n	8008b64 <_strtod_l+0x6dc>
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008cda:	e743      	b.n	8008b64 <_strtod_l+0x6dc>
 8008cdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008cde:	4632      	mov	r2, r6
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f001 fa55 	bl	800a190 <__lshift>
 8008ce6:	9016      	str	r0, [sp, #88]	; 0x58
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	f47f af6b 	bne.w	8008bc4 <_strtod_l+0x73c>
 8008cee:	e60f      	b.n	8008910 <_strtod_l+0x488>
 8008cf0:	46ca      	mov	sl, r9
 8008cf2:	d171      	bne.n	8008dd8 <_strtod_l+0x950>
 8008cf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cf6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cfa:	b352      	cbz	r2, 8008d52 <_strtod_l+0x8ca>
 8008cfc:	4a33      	ldr	r2, [pc, #204]	; (8008dcc <_strtod_l+0x944>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d12a      	bne.n	8008d58 <_strtod_l+0x8d0>
 8008d02:	9b04      	ldr	r3, [sp, #16]
 8008d04:	4641      	mov	r1, r8
 8008d06:	b1fb      	cbz	r3, 8008d48 <_strtod_l+0x8c0>
 8008d08:	4b2e      	ldr	r3, [pc, #184]	; (8008dc4 <_strtod_l+0x93c>)
 8008d0a:	ea09 0303 	and.w	r3, r9, r3
 8008d0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d12:	f04f 32ff 	mov.w	r2, #4294967295
 8008d16:	d81a      	bhi.n	8008d4e <_strtod_l+0x8c6>
 8008d18:	0d1b      	lsrs	r3, r3, #20
 8008d1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d22:	4299      	cmp	r1, r3
 8008d24:	d118      	bne.n	8008d58 <_strtod_l+0x8d0>
 8008d26:	4b2a      	ldr	r3, [pc, #168]	; (8008dd0 <_strtod_l+0x948>)
 8008d28:	459a      	cmp	sl, r3
 8008d2a:	d102      	bne.n	8008d32 <_strtod_l+0x8aa>
 8008d2c:	3101      	adds	r1, #1
 8008d2e:	f43f adef 	beq.w	8008910 <_strtod_l+0x488>
 8008d32:	4b24      	ldr	r3, [pc, #144]	; (8008dc4 <_strtod_l+0x93c>)
 8008d34:	ea0a 0303 	and.w	r3, sl, r3
 8008d38:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008d3c:	f04f 0800 	mov.w	r8, #0
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1a2      	bne.n	8008c8c <_strtod_l+0x804>
 8008d46:	e5ed      	b.n	8008924 <_strtod_l+0x49c>
 8008d48:	f04f 33ff 	mov.w	r3, #4294967295
 8008d4c:	e7e9      	b.n	8008d22 <_strtod_l+0x89a>
 8008d4e:	4613      	mov	r3, r2
 8008d50:	e7e7      	b.n	8008d22 <_strtod_l+0x89a>
 8008d52:	ea53 0308 	orrs.w	r3, r3, r8
 8008d56:	d08a      	beq.n	8008c6e <_strtod_l+0x7e6>
 8008d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d5a:	b1e3      	cbz	r3, 8008d96 <_strtod_l+0x90e>
 8008d5c:	ea13 0f0a 	tst.w	r3, sl
 8008d60:	d0ee      	beq.n	8008d40 <_strtod_l+0x8b8>
 8008d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d64:	9a04      	ldr	r2, [sp, #16]
 8008d66:	4640      	mov	r0, r8
 8008d68:	4649      	mov	r1, r9
 8008d6a:	b1c3      	cbz	r3, 8008d9e <_strtod_l+0x916>
 8008d6c:	f7ff fb6e 	bl	800844c <sulp>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	ec51 0b18 	vmov	r0, r1, d8
 8008d78:	f7f7 faa0 	bl	80002bc <__adddf3>
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	4689      	mov	r9, r1
 8008d80:	e7de      	b.n	8008d40 <_strtod_l+0x8b8>
 8008d82:	4013      	ands	r3, r2
 8008d84:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d88:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008d8c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008d90:	f04f 38ff 	mov.w	r8, #4294967295
 8008d94:	e7d4      	b.n	8008d40 <_strtod_l+0x8b8>
 8008d96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d98:	ea13 0f08 	tst.w	r3, r8
 8008d9c:	e7e0      	b.n	8008d60 <_strtod_l+0x8d8>
 8008d9e:	f7ff fb55 	bl	800844c <sulp>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	ec51 0b18 	vmov	r0, r1, d8
 8008daa:	f7f7 fa85 	bl	80002b8 <__aeabi_dsub>
 8008dae:	2200      	movs	r2, #0
 8008db0:	2300      	movs	r3, #0
 8008db2:	4680      	mov	r8, r0
 8008db4:	4689      	mov	r9, r1
 8008db6:	f7f7 fe9f 	bl	8000af8 <__aeabi_dcmpeq>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d0c0      	beq.n	8008d40 <_strtod_l+0x8b8>
 8008dbe:	e618      	b.n	80089f2 <_strtod_l+0x56a>
 8008dc0:	fffffc02 	.word	0xfffffc02
 8008dc4:	7ff00000 	.word	0x7ff00000
 8008dc8:	39500000 	.word	0x39500000
 8008dcc:	000fffff 	.word	0x000fffff
 8008dd0:	7fefffff 	.word	0x7fefffff
 8008dd4:	0800b4d0 	.word	0x0800b4d0
 8008dd8:	4659      	mov	r1, fp
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f001 fbb4 	bl	800a548 <__ratio>
 8008de0:	ec57 6b10 	vmov	r6, r7, d0
 8008de4:	ee10 0a10 	vmov	r0, s0
 8008de8:	2200      	movs	r2, #0
 8008dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008dee:	4639      	mov	r1, r7
 8008df0:	f7f7 fe96 	bl	8000b20 <__aeabi_dcmple>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d071      	beq.n	8008edc <_strtod_l+0xa54>
 8008df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d17c      	bne.n	8008ef8 <_strtod_l+0xa70>
 8008dfe:	f1b8 0f00 	cmp.w	r8, #0
 8008e02:	d15a      	bne.n	8008eba <_strtod_l+0xa32>
 8008e04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d15d      	bne.n	8008ec8 <_strtod_l+0xa40>
 8008e0c:	4b90      	ldr	r3, [pc, #576]	; (8009050 <_strtod_l+0xbc8>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	4630      	mov	r0, r6
 8008e12:	4639      	mov	r1, r7
 8008e14:	f7f7 fe7a 	bl	8000b0c <__aeabi_dcmplt>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d15c      	bne.n	8008ed6 <_strtod_l+0xa4e>
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	4b8c      	ldr	r3, [pc, #560]	; (8009054 <_strtod_l+0xbcc>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	f7f7 fc00 	bl	8000628 <__aeabi_dmul>
 8008e28:	4606      	mov	r6, r0
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008e30:	9606      	str	r6, [sp, #24]
 8008e32:	9307      	str	r3, [sp, #28]
 8008e34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008e3c:	4b86      	ldr	r3, [pc, #536]	; (8009058 <_strtod_l+0xbd0>)
 8008e3e:	ea0a 0303 	and.w	r3, sl, r3
 8008e42:	930d      	str	r3, [sp, #52]	; 0x34
 8008e44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e46:	4b85      	ldr	r3, [pc, #532]	; (800905c <_strtod_l+0xbd4>)
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	f040 8090 	bne.w	8008f6e <_strtod_l+0xae6>
 8008e4e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008e52:	ec49 8b10 	vmov	d0, r8, r9
 8008e56:	f001 faad 	bl	800a3b4 <__ulp>
 8008e5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e5e:	ec51 0b10 	vmov	r0, r1, d0
 8008e62:	f7f7 fbe1 	bl	8000628 <__aeabi_dmul>
 8008e66:	4642      	mov	r2, r8
 8008e68:	464b      	mov	r3, r9
 8008e6a:	f7f7 fa27 	bl	80002bc <__adddf3>
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4979      	ldr	r1, [pc, #484]	; (8009058 <_strtod_l+0xbd0>)
 8008e72:	4a7b      	ldr	r2, [pc, #492]	; (8009060 <_strtod_l+0xbd8>)
 8008e74:	4019      	ands	r1, r3
 8008e76:	4291      	cmp	r1, r2
 8008e78:	4680      	mov	r8, r0
 8008e7a:	d944      	bls.n	8008f06 <_strtod_l+0xa7e>
 8008e7c:	ee18 2a90 	vmov	r2, s17
 8008e80:	4b78      	ldr	r3, [pc, #480]	; (8009064 <_strtod_l+0xbdc>)
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d104      	bne.n	8008e90 <_strtod_l+0xa08>
 8008e86:	ee18 3a10 	vmov	r3, s16
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	f43f ad40 	beq.w	8008910 <_strtod_l+0x488>
 8008e90:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009064 <_strtod_l+0xbdc>
 8008e94:	f04f 38ff 	mov.w	r8, #4294967295
 8008e98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 ff5e 	bl	8009d5c <_Bfree>
 8008ea0:	9905      	ldr	r1, [sp, #20]
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 ff5a 	bl	8009d5c <_Bfree>
 8008ea8:	4659      	mov	r1, fp
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 ff56 	bl	8009d5c <_Bfree>
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f000 ff52 	bl	8009d5c <_Bfree>
 8008eb8:	e609      	b.n	8008ace <_strtod_l+0x646>
 8008eba:	f1b8 0f01 	cmp.w	r8, #1
 8008ebe:	d103      	bne.n	8008ec8 <_strtod_l+0xa40>
 8008ec0:	f1b9 0f00 	cmp.w	r9, #0
 8008ec4:	f43f ad95 	beq.w	80089f2 <_strtod_l+0x56a>
 8008ec8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009020 <_strtod_l+0xb98>
 8008ecc:	4f60      	ldr	r7, [pc, #384]	; (8009050 <_strtod_l+0xbc8>)
 8008ece:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ed2:	2600      	movs	r6, #0
 8008ed4:	e7ae      	b.n	8008e34 <_strtod_l+0x9ac>
 8008ed6:	4f5f      	ldr	r7, [pc, #380]	; (8009054 <_strtod_l+0xbcc>)
 8008ed8:	2600      	movs	r6, #0
 8008eda:	e7a7      	b.n	8008e2c <_strtod_l+0x9a4>
 8008edc:	4b5d      	ldr	r3, [pc, #372]	; (8009054 <_strtod_l+0xbcc>)
 8008ede:	4630      	mov	r0, r6
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f7f7 fba0 	bl	8000628 <__aeabi_dmul>
 8008ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eea:	4606      	mov	r6, r0
 8008eec:	460f      	mov	r7, r1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d09c      	beq.n	8008e2c <_strtod_l+0x9a4>
 8008ef2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008ef6:	e79d      	b.n	8008e34 <_strtod_l+0x9ac>
 8008ef8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009028 <_strtod_l+0xba0>
 8008efc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f00:	ec57 6b17 	vmov	r6, r7, d7
 8008f04:	e796      	b.n	8008e34 <_strtod_l+0x9ac>
 8008f06:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008f0a:	9b04      	ldr	r3, [sp, #16]
 8008f0c:	46ca      	mov	sl, r9
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1c2      	bne.n	8008e98 <_strtod_l+0xa10>
 8008f12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f18:	0d1b      	lsrs	r3, r3, #20
 8008f1a:	051b      	lsls	r3, r3, #20
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d1bb      	bne.n	8008e98 <_strtod_l+0xa10>
 8008f20:	4630      	mov	r0, r6
 8008f22:	4639      	mov	r1, r7
 8008f24:	f7f7 feca 	bl	8000cbc <__aeabi_d2lz>
 8008f28:	f7f7 fb50 	bl	80005cc <__aeabi_l2d>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4630      	mov	r0, r6
 8008f32:	4639      	mov	r1, r7
 8008f34:	f7f7 f9c0 	bl	80002b8 <__aeabi_dsub>
 8008f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f3e:	ea43 0308 	orr.w	r3, r3, r8
 8008f42:	4313      	orrs	r3, r2
 8008f44:	4606      	mov	r6, r0
 8008f46:	460f      	mov	r7, r1
 8008f48:	d054      	beq.n	8008ff4 <_strtod_l+0xb6c>
 8008f4a:	a339      	add	r3, pc, #228	; (adr r3, 8009030 <_strtod_l+0xba8>)
 8008f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f50:	f7f7 fddc 	bl	8000b0c <__aeabi_dcmplt>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	f47f ace5 	bne.w	8008924 <_strtod_l+0x49c>
 8008f5a:	a337      	add	r3, pc, #220	; (adr r3, 8009038 <_strtod_l+0xbb0>)
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	4630      	mov	r0, r6
 8008f62:	4639      	mov	r1, r7
 8008f64:	f7f7 fdf0 	bl	8000b48 <__aeabi_dcmpgt>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d095      	beq.n	8008e98 <_strtod_l+0xa10>
 8008f6c:	e4da      	b.n	8008924 <_strtod_l+0x49c>
 8008f6e:	9b04      	ldr	r3, [sp, #16]
 8008f70:	b333      	cbz	r3, 8008fc0 <_strtod_l+0xb38>
 8008f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f78:	d822      	bhi.n	8008fc0 <_strtod_l+0xb38>
 8008f7a:	a331      	add	r3, pc, #196	; (adr r3, 8009040 <_strtod_l+0xbb8>)
 8008f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	f7f7 fdcc 	bl	8000b20 <__aeabi_dcmple>
 8008f88:	b1a0      	cbz	r0, 8008fb4 <_strtod_l+0xb2c>
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f7f7 fe0d 	bl	8000bac <__aeabi_d2uiz>
 8008f92:	2801      	cmp	r0, #1
 8008f94:	bf38      	it	cc
 8008f96:	2001      	movcc	r0, #1
 8008f98:	f7f7 facc 	bl	8000534 <__aeabi_ui2d>
 8008f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	460f      	mov	r7, r1
 8008fa2:	bb23      	cbnz	r3, 8008fee <_strtod_l+0xb66>
 8008fa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fa8:	9010      	str	r0, [sp, #64]	; 0x40
 8008faa:	9311      	str	r3, [sp, #68]	; 0x44
 8008fac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fb8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008fbc:	1a9b      	subs	r3, r3, r2
 8008fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008fc4:	eeb0 0a48 	vmov.f32	s0, s16
 8008fc8:	eef0 0a68 	vmov.f32	s1, s17
 8008fcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008fd0:	f001 f9f0 	bl	800a3b4 <__ulp>
 8008fd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008fd8:	ec53 2b10 	vmov	r2, r3, d0
 8008fdc:	f7f7 fb24 	bl	8000628 <__aeabi_dmul>
 8008fe0:	ec53 2b18 	vmov	r2, r3, d8
 8008fe4:	f7f7 f96a 	bl	80002bc <__adddf3>
 8008fe8:	4680      	mov	r8, r0
 8008fea:	4689      	mov	r9, r1
 8008fec:	e78d      	b.n	8008f0a <_strtod_l+0xa82>
 8008fee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008ff2:	e7db      	b.n	8008fac <_strtod_l+0xb24>
 8008ff4:	a314      	add	r3, pc, #80	; (adr r3, 8009048 <_strtod_l+0xbc0>)
 8008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffa:	f7f7 fd87 	bl	8000b0c <__aeabi_dcmplt>
 8008ffe:	e7b3      	b.n	8008f68 <_strtod_l+0xae0>
 8009000:	2300      	movs	r3, #0
 8009002:	930a      	str	r3, [sp, #40]	; 0x28
 8009004:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009006:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	f7ff ba7c 	b.w	8008506 <_strtod_l+0x7e>
 800900e:	2a65      	cmp	r2, #101	; 0x65
 8009010:	f43f ab75 	beq.w	80086fe <_strtod_l+0x276>
 8009014:	2a45      	cmp	r2, #69	; 0x45
 8009016:	f43f ab72 	beq.w	80086fe <_strtod_l+0x276>
 800901a:	2301      	movs	r3, #1
 800901c:	f7ff bbaa 	b.w	8008774 <_strtod_l+0x2ec>
 8009020:	00000000 	.word	0x00000000
 8009024:	bff00000 	.word	0xbff00000
 8009028:	00000000 	.word	0x00000000
 800902c:	3ff00000 	.word	0x3ff00000
 8009030:	94a03595 	.word	0x94a03595
 8009034:	3fdfffff 	.word	0x3fdfffff
 8009038:	35afe535 	.word	0x35afe535
 800903c:	3fe00000 	.word	0x3fe00000
 8009040:	ffc00000 	.word	0xffc00000
 8009044:	41dfffff 	.word	0x41dfffff
 8009048:	94a03595 	.word	0x94a03595
 800904c:	3fcfffff 	.word	0x3fcfffff
 8009050:	3ff00000 	.word	0x3ff00000
 8009054:	3fe00000 	.word	0x3fe00000
 8009058:	7ff00000 	.word	0x7ff00000
 800905c:	7fe00000 	.word	0x7fe00000
 8009060:	7c9fffff 	.word	0x7c9fffff
 8009064:	7fefffff 	.word	0x7fefffff

08009068 <strtod>:
 8009068:	460a      	mov	r2, r1
 800906a:	4601      	mov	r1, r0
 800906c:	4802      	ldr	r0, [pc, #8]	; (8009078 <strtod+0x10>)
 800906e:	4b03      	ldr	r3, [pc, #12]	; (800907c <strtod+0x14>)
 8009070:	6800      	ldr	r0, [r0, #0]
 8009072:	f7ff ba09 	b.w	8008488 <_strtod_l>
 8009076:	bf00      	nop
 8009078:	20000244 	.word	0x20000244
 800907c:	2000008c 	.word	0x2000008c

08009080 <std>:
 8009080:	2300      	movs	r3, #0
 8009082:	b510      	push	{r4, lr}
 8009084:	4604      	mov	r4, r0
 8009086:	e9c0 3300 	strd	r3, r3, [r0]
 800908a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800908e:	6083      	str	r3, [r0, #8]
 8009090:	8181      	strh	r1, [r0, #12]
 8009092:	6643      	str	r3, [r0, #100]	; 0x64
 8009094:	81c2      	strh	r2, [r0, #14]
 8009096:	6183      	str	r3, [r0, #24]
 8009098:	4619      	mov	r1, r3
 800909a:	2208      	movs	r2, #8
 800909c:	305c      	adds	r0, #92	; 0x5c
 800909e:	f000 f914 	bl	80092ca <memset>
 80090a2:	4b0d      	ldr	r3, [pc, #52]	; (80090d8 <std+0x58>)
 80090a4:	6263      	str	r3, [r4, #36]	; 0x24
 80090a6:	4b0d      	ldr	r3, [pc, #52]	; (80090dc <std+0x5c>)
 80090a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80090aa:	4b0d      	ldr	r3, [pc, #52]	; (80090e0 <std+0x60>)
 80090ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090ae:	4b0d      	ldr	r3, [pc, #52]	; (80090e4 <std+0x64>)
 80090b0:	6323      	str	r3, [r4, #48]	; 0x30
 80090b2:	4b0d      	ldr	r3, [pc, #52]	; (80090e8 <std+0x68>)
 80090b4:	6224      	str	r4, [r4, #32]
 80090b6:	429c      	cmp	r4, r3
 80090b8:	d006      	beq.n	80090c8 <std+0x48>
 80090ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80090be:	4294      	cmp	r4, r2
 80090c0:	d002      	beq.n	80090c8 <std+0x48>
 80090c2:	33d0      	adds	r3, #208	; 0xd0
 80090c4:	429c      	cmp	r4, r3
 80090c6:	d105      	bne.n	80090d4 <std+0x54>
 80090c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d0:	f000 b986 	b.w	80093e0 <__retarget_lock_init_recursive>
 80090d4:	bd10      	pop	{r4, pc}
 80090d6:	bf00      	nop
 80090d8:	08009245 	.word	0x08009245
 80090dc:	08009267 	.word	0x08009267
 80090e0:	0800929f 	.word	0x0800929f
 80090e4:	080092c3 	.word	0x080092c3
 80090e8:	20000494 	.word	0x20000494

080090ec <stdio_exit_handler>:
 80090ec:	4a02      	ldr	r2, [pc, #8]	; (80090f8 <stdio_exit_handler+0xc>)
 80090ee:	4903      	ldr	r1, [pc, #12]	; (80090fc <stdio_exit_handler+0x10>)
 80090f0:	4803      	ldr	r0, [pc, #12]	; (8009100 <stdio_exit_handler+0x14>)
 80090f2:	f000 b869 	b.w	80091c8 <_fwalk_sglue>
 80090f6:	bf00      	nop
 80090f8:	20000080 	.word	0x20000080
 80090fc:	0800ad2d 	.word	0x0800ad2d
 8009100:	200001f8 	.word	0x200001f8

08009104 <cleanup_stdio>:
 8009104:	6841      	ldr	r1, [r0, #4]
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <cleanup_stdio+0x34>)
 8009108:	4299      	cmp	r1, r3
 800910a:	b510      	push	{r4, lr}
 800910c:	4604      	mov	r4, r0
 800910e:	d001      	beq.n	8009114 <cleanup_stdio+0x10>
 8009110:	f001 fe0c 	bl	800ad2c <_fflush_r>
 8009114:	68a1      	ldr	r1, [r4, #8]
 8009116:	4b09      	ldr	r3, [pc, #36]	; (800913c <cleanup_stdio+0x38>)
 8009118:	4299      	cmp	r1, r3
 800911a:	d002      	beq.n	8009122 <cleanup_stdio+0x1e>
 800911c:	4620      	mov	r0, r4
 800911e:	f001 fe05 	bl	800ad2c <_fflush_r>
 8009122:	68e1      	ldr	r1, [r4, #12]
 8009124:	4b06      	ldr	r3, [pc, #24]	; (8009140 <cleanup_stdio+0x3c>)
 8009126:	4299      	cmp	r1, r3
 8009128:	d004      	beq.n	8009134 <cleanup_stdio+0x30>
 800912a:	4620      	mov	r0, r4
 800912c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009130:	f001 bdfc 	b.w	800ad2c <_fflush_r>
 8009134:	bd10      	pop	{r4, pc}
 8009136:	bf00      	nop
 8009138:	20000494 	.word	0x20000494
 800913c:	200004fc 	.word	0x200004fc
 8009140:	20000564 	.word	0x20000564

08009144 <global_stdio_init.part.0>:
 8009144:	b510      	push	{r4, lr}
 8009146:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <global_stdio_init.part.0+0x30>)
 8009148:	4c0b      	ldr	r4, [pc, #44]	; (8009178 <global_stdio_init.part.0+0x34>)
 800914a:	4a0c      	ldr	r2, [pc, #48]	; (800917c <global_stdio_init.part.0+0x38>)
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	4620      	mov	r0, r4
 8009150:	2200      	movs	r2, #0
 8009152:	2104      	movs	r1, #4
 8009154:	f7ff ff94 	bl	8009080 <std>
 8009158:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800915c:	2201      	movs	r2, #1
 800915e:	2109      	movs	r1, #9
 8009160:	f7ff ff8e 	bl	8009080 <std>
 8009164:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009168:	2202      	movs	r2, #2
 800916a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800916e:	2112      	movs	r1, #18
 8009170:	f7ff bf86 	b.w	8009080 <std>
 8009174:	200005cc 	.word	0x200005cc
 8009178:	20000494 	.word	0x20000494
 800917c:	080090ed 	.word	0x080090ed

08009180 <__sfp_lock_acquire>:
 8009180:	4801      	ldr	r0, [pc, #4]	; (8009188 <__sfp_lock_acquire+0x8>)
 8009182:	f000 b92e 	b.w	80093e2 <__retarget_lock_acquire_recursive>
 8009186:	bf00      	nop
 8009188:	200005d5 	.word	0x200005d5

0800918c <__sfp_lock_release>:
 800918c:	4801      	ldr	r0, [pc, #4]	; (8009194 <__sfp_lock_release+0x8>)
 800918e:	f000 b929 	b.w	80093e4 <__retarget_lock_release_recursive>
 8009192:	bf00      	nop
 8009194:	200005d5 	.word	0x200005d5

08009198 <__sinit>:
 8009198:	b510      	push	{r4, lr}
 800919a:	4604      	mov	r4, r0
 800919c:	f7ff fff0 	bl	8009180 <__sfp_lock_acquire>
 80091a0:	6a23      	ldr	r3, [r4, #32]
 80091a2:	b11b      	cbz	r3, 80091ac <__sinit+0x14>
 80091a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091a8:	f7ff bff0 	b.w	800918c <__sfp_lock_release>
 80091ac:	4b04      	ldr	r3, [pc, #16]	; (80091c0 <__sinit+0x28>)
 80091ae:	6223      	str	r3, [r4, #32]
 80091b0:	4b04      	ldr	r3, [pc, #16]	; (80091c4 <__sinit+0x2c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1f5      	bne.n	80091a4 <__sinit+0xc>
 80091b8:	f7ff ffc4 	bl	8009144 <global_stdio_init.part.0>
 80091bc:	e7f2      	b.n	80091a4 <__sinit+0xc>
 80091be:	bf00      	nop
 80091c0:	08009105 	.word	0x08009105
 80091c4:	200005cc 	.word	0x200005cc

080091c8 <_fwalk_sglue>:
 80091c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091cc:	4607      	mov	r7, r0
 80091ce:	4688      	mov	r8, r1
 80091d0:	4614      	mov	r4, r2
 80091d2:	2600      	movs	r6, #0
 80091d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091d8:	f1b9 0901 	subs.w	r9, r9, #1
 80091dc:	d505      	bpl.n	80091ea <_fwalk_sglue+0x22>
 80091de:	6824      	ldr	r4, [r4, #0]
 80091e0:	2c00      	cmp	r4, #0
 80091e2:	d1f7      	bne.n	80091d4 <_fwalk_sglue+0xc>
 80091e4:	4630      	mov	r0, r6
 80091e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ea:	89ab      	ldrh	r3, [r5, #12]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d907      	bls.n	8009200 <_fwalk_sglue+0x38>
 80091f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091f4:	3301      	adds	r3, #1
 80091f6:	d003      	beq.n	8009200 <_fwalk_sglue+0x38>
 80091f8:	4629      	mov	r1, r5
 80091fa:	4638      	mov	r0, r7
 80091fc:	47c0      	blx	r8
 80091fe:	4306      	orrs	r6, r0
 8009200:	3568      	adds	r5, #104	; 0x68
 8009202:	e7e9      	b.n	80091d8 <_fwalk_sglue+0x10>

08009204 <siprintf>:
 8009204:	b40e      	push	{r1, r2, r3}
 8009206:	b500      	push	{lr}
 8009208:	b09c      	sub	sp, #112	; 0x70
 800920a:	ab1d      	add	r3, sp, #116	; 0x74
 800920c:	9002      	str	r0, [sp, #8]
 800920e:	9006      	str	r0, [sp, #24]
 8009210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009214:	4809      	ldr	r0, [pc, #36]	; (800923c <siprintf+0x38>)
 8009216:	9107      	str	r1, [sp, #28]
 8009218:	9104      	str	r1, [sp, #16]
 800921a:	4909      	ldr	r1, [pc, #36]	; (8009240 <siprintf+0x3c>)
 800921c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009220:	9105      	str	r1, [sp, #20]
 8009222:	6800      	ldr	r0, [r0, #0]
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	a902      	add	r1, sp, #8
 8009228:	f001 fa6c 	bl	800a704 <_svfiprintf_r>
 800922c:	9b02      	ldr	r3, [sp, #8]
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]
 8009232:	b01c      	add	sp, #112	; 0x70
 8009234:	f85d eb04 	ldr.w	lr, [sp], #4
 8009238:	b003      	add	sp, #12
 800923a:	4770      	bx	lr
 800923c:	20000244 	.word	0x20000244
 8009240:	ffff0208 	.word	0xffff0208

08009244 <__sread>:
 8009244:	b510      	push	{r4, lr}
 8009246:	460c      	mov	r4, r1
 8009248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800924c:	f000 f87a 	bl	8009344 <_read_r>
 8009250:	2800      	cmp	r0, #0
 8009252:	bfab      	itete	ge
 8009254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009256:	89a3      	ldrhlt	r3, [r4, #12]
 8009258:	181b      	addge	r3, r3, r0
 800925a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800925e:	bfac      	ite	ge
 8009260:	6563      	strge	r3, [r4, #84]	; 0x54
 8009262:	81a3      	strhlt	r3, [r4, #12]
 8009264:	bd10      	pop	{r4, pc}

08009266 <__swrite>:
 8009266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926a:	461f      	mov	r7, r3
 800926c:	898b      	ldrh	r3, [r1, #12]
 800926e:	05db      	lsls	r3, r3, #23
 8009270:	4605      	mov	r5, r0
 8009272:	460c      	mov	r4, r1
 8009274:	4616      	mov	r6, r2
 8009276:	d505      	bpl.n	8009284 <__swrite+0x1e>
 8009278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800927c:	2302      	movs	r3, #2
 800927e:	2200      	movs	r2, #0
 8009280:	f000 f84e 	bl	8009320 <_lseek_r>
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800928a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800928e:	81a3      	strh	r3, [r4, #12]
 8009290:	4632      	mov	r2, r6
 8009292:	463b      	mov	r3, r7
 8009294:	4628      	mov	r0, r5
 8009296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800929a:	f000 b865 	b.w	8009368 <_write_r>

0800929e <__sseek>:
 800929e:	b510      	push	{r4, lr}
 80092a0:	460c      	mov	r4, r1
 80092a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a6:	f000 f83b 	bl	8009320 <_lseek_r>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	bf15      	itete	ne
 80092b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80092b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092ba:	81a3      	strheq	r3, [r4, #12]
 80092bc:	bf18      	it	ne
 80092be:	81a3      	strhne	r3, [r4, #12]
 80092c0:	bd10      	pop	{r4, pc}

080092c2 <__sclose>:
 80092c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c6:	f000 b81b 	b.w	8009300 <_close_r>

080092ca <memset>:
 80092ca:	4402      	add	r2, r0
 80092cc:	4603      	mov	r3, r0
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d100      	bne.n	80092d4 <memset+0xa>
 80092d2:	4770      	bx	lr
 80092d4:	f803 1b01 	strb.w	r1, [r3], #1
 80092d8:	e7f9      	b.n	80092ce <memset+0x4>

080092da <strncmp>:
 80092da:	b510      	push	{r4, lr}
 80092dc:	b16a      	cbz	r2, 80092fa <strncmp+0x20>
 80092de:	3901      	subs	r1, #1
 80092e0:	1884      	adds	r4, r0, r2
 80092e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d103      	bne.n	80092f6 <strncmp+0x1c>
 80092ee:	42a0      	cmp	r0, r4
 80092f0:	d001      	beq.n	80092f6 <strncmp+0x1c>
 80092f2:	2a00      	cmp	r2, #0
 80092f4:	d1f5      	bne.n	80092e2 <strncmp+0x8>
 80092f6:	1ad0      	subs	r0, r2, r3
 80092f8:	bd10      	pop	{r4, pc}
 80092fa:	4610      	mov	r0, r2
 80092fc:	e7fc      	b.n	80092f8 <strncmp+0x1e>
	...

08009300 <_close_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	4d06      	ldr	r5, [pc, #24]	; (800931c <_close_r+0x1c>)
 8009304:	2300      	movs	r3, #0
 8009306:	4604      	mov	r4, r0
 8009308:	4608      	mov	r0, r1
 800930a:	602b      	str	r3, [r5, #0]
 800930c:	f7f9 fb97 	bl	8002a3e <_close>
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	d102      	bne.n	800931a <_close_r+0x1a>
 8009314:	682b      	ldr	r3, [r5, #0]
 8009316:	b103      	cbz	r3, 800931a <_close_r+0x1a>
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	bd38      	pop	{r3, r4, r5, pc}
 800931c:	200005d0 	.word	0x200005d0

08009320 <_lseek_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d07      	ldr	r5, [pc, #28]	; (8009340 <_lseek_r+0x20>)
 8009324:	4604      	mov	r4, r0
 8009326:	4608      	mov	r0, r1
 8009328:	4611      	mov	r1, r2
 800932a:	2200      	movs	r2, #0
 800932c:	602a      	str	r2, [r5, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	f7f9 fbac 	bl	8002a8c <_lseek>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d102      	bne.n	800933e <_lseek_r+0x1e>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	b103      	cbz	r3, 800933e <_lseek_r+0x1e>
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	200005d0 	.word	0x200005d0

08009344 <_read_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d07      	ldr	r5, [pc, #28]	; (8009364 <_read_r+0x20>)
 8009348:	4604      	mov	r4, r0
 800934a:	4608      	mov	r0, r1
 800934c:	4611      	mov	r1, r2
 800934e:	2200      	movs	r2, #0
 8009350:	602a      	str	r2, [r5, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	f7f9 fb3a 	bl	80029cc <_read>
 8009358:	1c43      	adds	r3, r0, #1
 800935a:	d102      	bne.n	8009362 <_read_r+0x1e>
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	b103      	cbz	r3, 8009362 <_read_r+0x1e>
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	bd38      	pop	{r3, r4, r5, pc}
 8009364:	200005d0 	.word	0x200005d0

08009368 <_write_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4d07      	ldr	r5, [pc, #28]	; (8009388 <_write_r+0x20>)
 800936c:	4604      	mov	r4, r0
 800936e:	4608      	mov	r0, r1
 8009370:	4611      	mov	r1, r2
 8009372:	2200      	movs	r2, #0
 8009374:	602a      	str	r2, [r5, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	f7f9 fb45 	bl	8002a06 <_write>
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	d102      	bne.n	8009386 <_write_r+0x1e>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	b103      	cbz	r3, 8009386 <_write_r+0x1e>
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	bd38      	pop	{r3, r4, r5, pc}
 8009388:	200005d0 	.word	0x200005d0

0800938c <__errno>:
 800938c:	4b01      	ldr	r3, [pc, #4]	; (8009394 <__errno+0x8>)
 800938e:	6818      	ldr	r0, [r3, #0]
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	20000244 	.word	0x20000244

08009398 <__libc_init_array>:
 8009398:	b570      	push	{r4, r5, r6, lr}
 800939a:	4d0d      	ldr	r5, [pc, #52]	; (80093d0 <__libc_init_array+0x38>)
 800939c:	4c0d      	ldr	r4, [pc, #52]	; (80093d4 <__libc_init_array+0x3c>)
 800939e:	1b64      	subs	r4, r4, r5
 80093a0:	10a4      	asrs	r4, r4, #2
 80093a2:	2600      	movs	r6, #0
 80093a4:	42a6      	cmp	r6, r4
 80093a6:	d109      	bne.n	80093bc <__libc_init_array+0x24>
 80093a8:	4d0b      	ldr	r5, [pc, #44]	; (80093d8 <__libc_init_array+0x40>)
 80093aa:	4c0c      	ldr	r4, [pc, #48]	; (80093dc <__libc_init_array+0x44>)
 80093ac:	f002 f83e 	bl	800b42c <_init>
 80093b0:	1b64      	subs	r4, r4, r5
 80093b2:	10a4      	asrs	r4, r4, #2
 80093b4:	2600      	movs	r6, #0
 80093b6:	42a6      	cmp	r6, r4
 80093b8:	d105      	bne.n	80093c6 <__libc_init_array+0x2e>
 80093ba:	bd70      	pop	{r4, r5, r6, pc}
 80093bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80093c0:	4798      	blx	r3
 80093c2:	3601      	adds	r6, #1
 80093c4:	e7ee      	b.n	80093a4 <__libc_init_array+0xc>
 80093c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ca:	4798      	blx	r3
 80093cc:	3601      	adds	r6, #1
 80093ce:	e7f2      	b.n	80093b6 <__libc_init_array+0x1e>
 80093d0:	0800b85c 	.word	0x0800b85c
 80093d4:	0800b85c 	.word	0x0800b85c
 80093d8:	0800b85c 	.word	0x0800b85c
 80093dc:	0800b860 	.word	0x0800b860

080093e0 <__retarget_lock_init_recursive>:
 80093e0:	4770      	bx	lr

080093e2 <__retarget_lock_acquire_recursive>:
 80093e2:	4770      	bx	lr

080093e4 <__retarget_lock_release_recursive>:
 80093e4:	4770      	bx	lr

080093e6 <memcpy>:
 80093e6:	440a      	add	r2, r1
 80093e8:	4291      	cmp	r1, r2
 80093ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80093ee:	d100      	bne.n	80093f2 <memcpy+0xc>
 80093f0:	4770      	bx	lr
 80093f2:	b510      	push	{r4, lr}
 80093f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093fc:	4291      	cmp	r1, r2
 80093fe:	d1f9      	bne.n	80093f4 <memcpy+0xe>
 8009400:	bd10      	pop	{r4, pc}
 8009402:	0000      	movs	r0, r0
 8009404:	0000      	movs	r0, r0
	...

08009408 <nan>:
 8009408:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009410 <nan+0x8>
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	00000000 	.word	0x00000000
 8009414:	7ff80000 	.word	0x7ff80000

08009418 <_free_r>:
 8009418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800941a:	2900      	cmp	r1, #0
 800941c:	d044      	beq.n	80094a8 <_free_r+0x90>
 800941e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009422:	9001      	str	r0, [sp, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	f1a1 0404 	sub.w	r4, r1, #4
 800942a:	bfb8      	it	lt
 800942c:	18e4      	addlt	r4, r4, r3
 800942e:	f000 fc49 	bl	8009cc4 <__malloc_lock>
 8009432:	4a1e      	ldr	r2, [pc, #120]	; (80094ac <_free_r+0x94>)
 8009434:	9801      	ldr	r0, [sp, #4]
 8009436:	6813      	ldr	r3, [r2, #0]
 8009438:	b933      	cbnz	r3, 8009448 <_free_r+0x30>
 800943a:	6063      	str	r3, [r4, #4]
 800943c:	6014      	str	r4, [r2, #0]
 800943e:	b003      	add	sp, #12
 8009440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009444:	f000 bc44 	b.w	8009cd0 <__malloc_unlock>
 8009448:	42a3      	cmp	r3, r4
 800944a:	d908      	bls.n	800945e <_free_r+0x46>
 800944c:	6825      	ldr	r5, [r4, #0]
 800944e:	1961      	adds	r1, r4, r5
 8009450:	428b      	cmp	r3, r1
 8009452:	bf01      	itttt	eq
 8009454:	6819      	ldreq	r1, [r3, #0]
 8009456:	685b      	ldreq	r3, [r3, #4]
 8009458:	1949      	addeq	r1, r1, r5
 800945a:	6021      	streq	r1, [r4, #0]
 800945c:	e7ed      	b.n	800943a <_free_r+0x22>
 800945e:	461a      	mov	r2, r3
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	b10b      	cbz	r3, 8009468 <_free_r+0x50>
 8009464:	42a3      	cmp	r3, r4
 8009466:	d9fa      	bls.n	800945e <_free_r+0x46>
 8009468:	6811      	ldr	r1, [r2, #0]
 800946a:	1855      	adds	r5, r2, r1
 800946c:	42a5      	cmp	r5, r4
 800946e:	d10b      	bne.n	8009488 <_free_r+0x70>
 8009470:	6824      	ldr	r4, [r4, #0]
 8009472:	4421      	add	r1, r4
 8009474:	1854      	adds	r4, r2, r1
 8009476:	42a3      	cmp	r3, r4
 8009478:	6011      	str	r1, [r2, #0]
 800947a:	d1e0      	bne.n	800943e <_free_r+0x26>
 800947c:	681c      	ldr	r4, [r3, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	6053      	str	r3, [r2, #4]
 8009482:	440c      	add	r4, r1
 8009484:	6014      	str	r4, [r2, #0]
 8009486:	e7da      	b.n	800943e <_free_r+0x26>
 8009488:	d902      	bls.n	8009490 <_free_r+0x78>
 800948a:	230c      	movs	r3, #12
 800948c:	6003      	str	r3, [r0, #0]
 800948e:	e7d6      	b.n	800943e <_free_r+0x26>
 8009490:	6825      	ldr	r5, [r4, #0]
 8009492:	1961      	adds	r1, r4, r5
 8009494:	428b      	cmp	r3, r1
 8009496:	bf04      	itt	eq
 8009498:	6819      	ldreq	r1, [r3, #0]
 800949a:	685b      	ldreq	r3, [r3, #4]
 800949c:	6063      	str	r3, [r4, #4]
 800949e:	bf04      	itt	eq
 80094a0:	1949      	addeq	r1, r1, r5
 80094a2:	6021      	streq	r1, [r4, #0]
 80094a4:	6054      	str	r4, [r2, #4]
 80094a6:	e7ca      	b.n	800943e <_free_r+0x26>
 80094a8:	b003      	add	sp, #12
 80094aa:	bd30      	pop	{r4, r5, pc}
 80094ac:	200005d8 	.word	0x200005d8

080094b0 <rshift>:
 80094b0:	6903      	ldr	r3, [r0, #16]
 80094b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80094b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 80094be:	f100 0414 	add.w	r4, r0, #20
 80094c2:	dd45      	ble.n	8009550 <rshift+0xa0>
 80094c4:	f011 011f 	ands.w	r1, r1, #31
 80094c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80094cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80094d0:	d10c      	bne.n	80094ec <rshift+0x3c>
 80094d2:	f100 0710 	add.w	r7, r0, #16
 80094d6:	4629      	mov	r1, r5
 80094d8:	42b1      	cmp	r1, r6
 80094da:	d334      	bcc.n	8009546 <rshift+0x96>
 80094dc:	1a9b      	subs	r3, r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	1eea      	subs	r2, r5, #3
 80094e2:	4296      	cmp	r6, r2
 80094e4:	bf38      	it	cc
 80094e6:	2300      	movcc	r3, #0
 80094e8:	4423      	add	r3, r4
 80094ea:	e015      	b.n	8009518 <rshift+0x68>
 80094ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80094f0:	f1c1 0820 	rsb	r8, r1, #32
 80094f4:	40cf      	lsrs	r7, r1
 80094f6:	f105 0e04 	add.w	lr, r5, #4
 80094fa:	46a1      	mov	r9, r4
 80094fc:	4576      	cmp	r6, lr
 80094fe:	46f4      	mov	ip, lr
 8009500:	d815      	bhi.n	800952e <rshift+0x7e>
 8009502:	1a9a      	subs	r2, r3, r2
 8009504:	0092      	lsls	r2, r2, #2
 8009506:	3a04      	subs	r2, #4
 8009508:	3501      	adds	r5, #1
 800950a:	42ae      	cmp	r6, r5
 800950c:	bf38      	it	cc
 800950e:	2200      	movcc	r2, #0
 8009510:	18a3      	adds	r3, r4, r2
 8009512:	50a7      	str	r7, [r4, r2]
 8009514:	b107      	cbz	r7, 8009518 <rshift+0x68>
 8009516:	3304      	adds	r3, #4
 8009518:	1b1a      	subs	r2, r3, r4
 800951a:	42a3      	cmp	r3, r4
 800951c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009520:	bf08      	it	eq
 8009522:	2300      	moveq	r3, #0
 8009524:	6102      	str	r2, [r0, #16]
 8009526:	bf08      	it	eq
 8009528:	6143      	streq	r3, [r0, #20]
 800952a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800952e:	f8dc c000 	ldr.w	ip, [ip]
 8009532:	fa0c fc08 	lsl.w	ip, ip, r8
 8009536:	ea4c 0707 	orr.w	r7, ip, r7
 800953a:	f849 7b04 	str.w	r7, [r9], #4
 800953e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009542:	40cf      	lsrs	r7, r1
 8009544:	e7da      	b.n	80094fc <rshift+0x4c>
 8009546:	f851 cb04 	ldr.w	ip, [r1], #4
 800954a:	f847 cf04 	str.w	ip, [r7, #4]!
 800954e:	e7c3      	b.n	80094d8 <rshift+0x28>
 8009550:	4623      	mov	r3, r4
 8009552:	e7e1      	b.n	8009518 <rshift+0x68>

08009554 <__hexdig_fun>:
 8009554:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009558:	2b09      	cmp	r3, #9
 800955a:	d802      	bhi.n	8009562 <__hexdig_fun+0xe>
 800955c:	3820      	subs	r0, #32
 800955e:	b2c0      	uxtb	r0, r0
 8009560:	4770      	bx	lr
 8009562:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009566:	2b05      	cmp	r3, #5
 8009568:	d801      	bhi.n	800956e <__hexdig_fun+0x1a>
 800956a:	3847      	subs	r0, #71	; 0x47
 800956c:	e7f7      	b.n	800955e <__hexdig_fun+0xa>
 800956e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009572:	2b05      	cmp	r3, #5
 8009574:	d801      	bhi.n	800957a <__hexdig_fun+0x26>
 8009576:	3827      	subs	r0, #39	; 0x27
 8009578:	e7f1      	b.n	800955e <__hexdig_fun+0xa>
 800957a:	2000      	movs	r0, #0
 800957c:	4770      	bx	lr
	...

08009580 <__gethex>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	4617      	mov	r7, r2
 8009586:	680a      	ldr	r2, [r1, #0]
 8009588:	b085      	sub	sp, #20
 800958a:	f102 0b02 	add.w	fp, r2, #2
 800958e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009592:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009596:	4681      	mov	r9, r0
 8009598:	468a      	mov	sl, r1
 800959a:	9302      	str	r3, [sp, #8]
 800959c:	32fe      	adds	r2, #254	; 0xfe
 800959e:	eb02 030b 	add.w	r3, r2, fp
 80095a2:	46d8      	mov	r8, fp
 80095a4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	2830      	cmp	r0, #48	; 0x30
 80095ac:	d0f7      	beq.n	800959e <__gethex+0x1e>
 80095ae:	f7ff ffd1 	bl	8009554 <__hexdig_fun>
 80095b2:	4604      	mov	r4, r0
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d138      	bne.n	800962a <__gethex+0xaa>
 80095b8:	49a7      	ldr	r1, [pc, #668]	; (8009858 <__gethex+0x2d8>)
 80095ba:	2201      	movs	r2, #1
 80095bc:	4640      	mov	r0, r8
 80095be:	f7ff fe8c 	bl	80092da <strncmp>
 80095c2:	4606      	mov	r6, r0
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d169      	bne.n	800969c <__gethex+0x11c>
 80095c8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80095cc:	465d      	mov	r5, fp
 80095ce:	f7ff ffc1 	bl	8009554 <__hexdig_fun>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d064      	beq.n	80096a0 <__gethex+0x120>
 80095d6:	465a      	mov	r2, fp
 80095d8:	7810      	ldrb	r0, [r2, #0]
 80095da:	2830      	cmp	r0, #48	; 0x30
 80095dc:	4690      	mov	r8, r2
 80095de:	f102 0201 	add.w	r2, r2, #1
 80095e2:	d0f9      	beq.n	80095d8 <__gethex+0x58>
 80095e4:	f7ff ffb6 	bl	8009554 <__hexdig_fun>
 80095e8:	2301      	movs	r3, #1
 80095ea:	fab0 f480 	clz	r4, r0
 80095ee:	0964      	lsrs	r4, r4, #5
 80095f0:	465e      	mov	r6, fp
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	4642      	mov	r2, r8
 80095f6:	4615      	mov	r5, r2
 80095f8:	3201      	adds	r2, #1
 80095fa:	7828      	ldrb	r0, [r5, #0]
 80095fc:	f7ff ffaa 	bl	8009554 <__hexdig_fun>
 8009600:	2800      	cmp	r0, #0
 8009602:	d1f8      	bne.n	80095f6 <__gethex+0x76>
 8009604:	4994      	ldr	r1, [pc, #592]	; (8009858 <__gethex+0x2d8>)
 8009606:	2201      	movs	r2, #1
 8009608:	4628      	mov	r0, r5
 800960a:	f7ff fe66 	bl	80092da <strncmp>
 800960e:	b978      	cbnz	r0, 8009630 <__gethex+0xb0>
 8009610:	b946      	cbnz	r6, 8009624 <__gethex+0xa4>
 8009612:	1c6e      	adds	r6, r5, #1
 8009614:	4632      	mov	r2, r6
 8009616:	4615      	mov	r5, r2
 8009618:	3201      	adds	r2, #1
 800961a:	7828      	ldrb	r0, [r5, #0]
 800961c:	f7ff ff9a 	bl	8009554 <__hexdig_fun>
 8009620:	2800      	cmp	r0, #0
 8009622:	d1f8      	bne.n	8009616 <__gethex+0x96>
 8009624:	1b73      	subs	r3, r6, r5
 8009626:	009e      	lsls	r6, r3, #2
 8009628:	e004      	b.n	8009634 <__gethex+0xb4>
 800962a:	2400      	movs	r4, #0
 800962c:	4626      	mov	r6, r4
 800962e:	e7e1      	b.n	80095f4 <__gethex+0x74>
 8009630:	2e00      	cmp	r6, #0
 8009632:	d1f7      	bne.n	8009624 <__gethex+0xa4>
 8009634:	782b      	ldrb	r3, [r5, #0]
 8009636:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800963a:	2b50      	cmp	r3, #80	; 0x50
 800963c:	d13d      	bne.n	80096ba <__gethex+0x13a>
 800963e:	786b      	ldrb	r3, [r5, #1]
 8009640:	2b2b      	cmp	r3, #43	; 0x2b
 8009642:	d02f      	beq.n	80096a4 <__gethex+0x124>
 8009644:	2b2d      	cmp	r3, #45	; 0x2d
 8009646:	d031      	beq.n	80096ac <__gethex+0x12c>
 8009648:	1c69      	adds	r1, r5, #1
 800964a:	f04f 0b00 	mov.w	fp, #0
 800964e:	7808      	ldrb	r0, [r1, #0]
 8009650:	f7ff ff80 	bl	8009554 <__hexdig_fun>
 8009654:	1e42      	subs	r2, r0, #1
 8009656:	b2d2      	uxtb	r2, r2
 8009658:	2a18      	cmp	r2, #24
 800965a:	d82e      	bhi.n	80096ba <__gethex+0x13a>
 800965c:	f1a0 0210 	sub.w	r2, r0, #16
 8009660:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009664:	f7ff ff76 	bl	8009554 <__hexdig_fun>
 8009668:	f100 3cff 	add.w	ip, r0, #4294967295
 800966c:	fa5f fc8c 	uxtb.w	ip, ip
 8009670:	f1bc 0f18 	cmp.w	ip, #24
 8009674:	d91d      	bls.n	80096b2 <__gethex+0x132>
 8009676:	f1bb 0f00 	cmp.w	fp, #0
 800967a:	d000      	beq.n	800967e <__gethex+0xfe>
 800967c:	4252      	negs	r2, r2
 800967e:	4416      	add	r6, r2
 8009680:	f8ca 1000 	str.w	r1, [sl]
 8009684:	b1dc      	cbz	r4, 80096be <__gethex+0x13e>
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	bf14      	ite	ne
 800968c:	f04f 0800 	movne.w	r8, #0
 8009690:	f04f 0806 	moveq.w	r8, #6
 8009694:	4640      	mov	r0, r8
 8009696:	b005      	add	sp, #20
 8009698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969c:	4645      	mov	r5, r8
 800969e:	4626      	mov	r6, r4
 80096a0:	2401      	movs	r4, #1
 80096a2:	e7c7      	b.n	8009634 <__gethex+0xb4>
 80096a4:	f04f 0b00 	mov.w	fp, #0
 80096a8:	1ca9      	adds	r1, r5, #2
 80096aa:	e7d0      	b.n	800964e <__gethex+0xce>
 80096ac:	f04f 0b01 	mov.w	fp, #1
 80096b0:	e7fa      	b.n	80096a8 <__gethex+0x128>
 80096b2:	230a      	movs	r3, #10
 80096b4:	fb03 0002 	mla	r0, r3, r2, r0
 80096b8:	e7d0      	b.n	800965c <__gethex+0xdc>
 80096ba:	4629      	mov	r1, r5
 80096bc:	e7e0      	b.n	8009680 <__gethex+0x100>
 80096be:	eba5 0308 	sub.w	r3, r5, r8
 80096c2:	3b01      	subs	r3, #1
 80096c4:	4621      	mov	r1, r4
 80096c6:	2b07      	cmp	r3, #7
 80096c8:	dc0a      	bgt.n	80096e0 <__gethex+0x160>
 80096ca:	4648      	mov	r0, r9
 80096cc:	f000 fb06 	bl	8009cdc <_Balloc>
 80096d0:	4604      	mov	r4, r0
 80096d2:	b940      	cbnz	r0, 80096e6 <__gethex+0x166>
 80096d4:	4b61      	ldr	r3, [pc, #388]	; (800985c <__gethex+0x2dc>)
 80096d6:	4602      	mov	r2, r0
 80096d8:	21e4      	movs	r1, #228	; 0xe4
 80096da:	4861      	ldr	r0, [pc, #388]	; (8009860 <__gethex+0x2e0>)
 80096dc:	f001 fb78 	bl	800add0 <__assert_func>
 80096e0:	3101      	adds	r1, #1
 80096e2:	105b      	asrs	r3, r3, #1
 80096e4:	e7ef      	b.n	80096c6 <__gethex+0x146>
 80096e6:	f100 0a14 	add.w	sl, r0, #20
 80096ea:	2300      	movs	r3, #0
 80096ec:	495a      	ldr	r1, [pc, #360]	; (8009858 <__gethex+0x2d8>)
 80096ee:	f8cd a004 	str.w	sl, [sp, #4]
 80096f2:	469b      	mov	fp, r3
 80096f4:	45a8      	cmp	r8, r5
 80096f6:	d342      	bcc.n	800977e <__gethex+0x1fe>
 80096f8:	9801      	ldr	r0, [sp, #4]
 80096fa:	f840 bb04 	str.w	fp, [r0], #4
 80096fe:	eba0 000a 	sub.w	r0, r0, sl
 8009702:	1080      	asrs	r0, r0, #2
 8009704:	6120      	str	r0, [r4, #16]
 8009706:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800970a:	4658      	mov	r0, fp
 800970c:	f000 fbd8 	bl	8009ec0 <__hi0bits>
 8009710:	683d      	ldr	r5, [r7, #0]
 8009712:	eba8 0000 	sub.w	r0, r8, r0
 8009716:	42a8      	cmp	r0, r5
 8009718:	dd59      	ble.n	80097ce <__gethex+0x24e>
 800971a:	eba0 0805 	sub.w	r8, r0, r5
 800971e:	4641      	mov	r1, r8
 8009720:	4620      	mov	r0, r4
 8009722:	f000 ff67 	bl	800a5f4 <__any_on>
 8009726:	4683      	mov	fp, r0
 8009728:	b1b8      	cbz	r0, 800975a <__gethex+0x1da>
 800972a:	f108 33ff 	add.w	r3, r8, #4294967295
 800972e:	1159      	asrs	r1, r3, #5
 8009730:	f003 021f 	and.w	r2, r3, #31
 8009734:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009738:	f04f 0b01 	mov.w	fp, #1
 800973c:	fa0b f202 	lsl.w	r2, fp, r2
 8009740:	420a      	tst	r2, r1
 8009742:	d00a      	beq.n	800975a <__gethex+0x1da>
 8009744:	455b      	cmp	r3, fp
 8009746:	dd06      	ble.n	8009756 <__gethex+0x1d6>
 8009748:	f1a8 0102 	sub.w	r1, r8, #2
 800974c:	4620      	mov	r0, r4
 800974e:	f000 ff51 	bl	800a5f4 <__any_on>
 8009752:	2800      	cmp	r0, #0
 8009754:	d138      	bne.n	80097c8 <__gethex+0x248>
 8009756:	f04f 0b02 	mov.w	fp, #2
 800975a:	4641      	mov	r1, r8
 800975c:	4620      	mov	r0, r4
 800975e:	f7ff fea7 	bl	80094b0 <rshift>
 8009762:	4446      	add	r6, r8
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	42b3      	cmp	r3, r6
 8009768:	da41      	bge.n	80097ee <__gethex+0x26e>
 800976a:	4621      	mov	r1, r4
 800976c:	4648      	mov	r0, r9
 800976e:	f000 faf5 	bl	8009d5c <_Bfree>
 8009772:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009774:	2300      	movs	r3, #0
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800977c:	e78a      	b.n	8009694 <__gethex+0x114>
 800977e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009782:	2a2e      	cmp	r2, #46	; 0x2e
 8009784:	d014      	beq.n	80097b0 <__gethex+0x230>
 8009786:	2b20      	cmp	r3, #32
 8009788:	d106      	bne.n	8009798 <__gethex+0x218>
 800978a:	9b01      	ldr	r3, [sp, #4]
 800978c:	f843 bb04 	str.w	fp, [r3], #4
 8009790:	f04f 0b00 	mov.w	fp, #0
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	465b      	mov	r3, fp
 8009798:	7828      	ldrb	r0, [r5, #0]
 800979a:	9303      	str	r3, [sp, #12]
 800979c:	f7ff feda 	bl	8009554 <__hexdig_fun>
 80097a0:	9b03      	ldr	r3, [sp, #12]
 80097a2:	f000 000f 	and.w	r0, r0, #15
 80097a6:	4098      	lsls	r0, r3
 80097a8:	ea4b 0b00 	orr.w	fp, fp, r0
 80097ac:	3304      	adds	r3, #4
 80097ae:	e7a1      	b.n	80096f4 <__gethex+0x174>
 80097b0:	45a8      	cmp	r8, r5
 80097b2:	d8e8      	bhi.n	8009786 <__gethex+0x206>
 80097b4:	2201      	movs	r2, #1
 80097b6:	4628      	mov	r0, r5
 80097b8:	9303      	str	r3, [sp, #12]
 80097ba:	f7ff fd8e 	bl	80092da <strncmp>
 80097be:	4926      	ldr	r1, [pc, #152]	; (8009858 <__gethex+0x2d8>)
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d1df      	bne.n	8009786 <__gethex+0x206>
 80097c6:	e795      	b.n	80096f4 <__gethex+0x174>
 80097c8:	f04f 0b03 	mov.w	fp, #3
 80097cc:	e7c5      	b.n	800975a <__gethex+0x1da>
 80097ce:	da0b      	bge.n	80097e8 <__gethex+0x268>
 80097d0:	eba5 0800 	sub.w	r8, r5, r0
 80097d4:	4621      	mov	r1, r4
 80097d6:	4642      	mov	r2, r8
 80097d8:	4648      	mov	r0, r9
 80097da:	f000 fcd9 	bl	800a190 <__lshift>
 80097de:	eba6 0608 	sub.w	r6, r6, r8
 80097e2:	4604      	mov	r4, r0
 80097e4:	f100 0a14 	add.w	sl, r0, #20
 80097e8:	f04f 0b00 	mov.w	fp, #0
 80097ec:	e7ba      	b.n	8009764 <__gethex+0x1e4>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	42b3      	cmp	r3, r6
 80097f2:	dd73      	ble.n	80098dc <__gethex+0x35c>
 80097f4:	1b9e      	subs	r6, r3, r6
 80097f6:	42b5      	cmp	r5, r6
 80097f8:	dc34      	bgt.n	8009864 <__gethex+0x2e4>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d023      	beq.n	8009848 <__gethex+0x2c8>
 8009800:	2b03      	cmp	r3, #3
 8009802:	d025      	beq.n	8009850 <__gethex+0x2d0>
 8009804:	2b01      	cmp	r3, #1
 8009806:	d115      	bne.n	8009834 <__gethex+0x2b4>
 8009808:	42b5      	cmp	r5, r6
 800980a:	d113      	bne.n	8009834 <__gethex+0x2b4>
 800980c:	2d01      	cmp	r5, #1
 800980e:	d10b      	bne.n	8009828 <__gethex+0x2a8>
 8009810:	9a02      	ldr	r2, [sp, #8]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	2301      	movs	r3, #1
 8009818:	6123      	str	r3, [r4, #16]
 800981a:	f8ca 3000 	str.w	r3, [sl]
 800981e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009820:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009824:	601c      	str	r4, [r3, #0]
 8009826:	e735      	b.n	8009694 <__gethex+0x114>
 8009828:	1e69      	subs	r1, r5, #1
 800982a:	4620      	mov	r0, r4
 800982c:	f000 fee2 	bl	800a5f4 <__any_on>
 8009830:	2800      	cmp	r0, #0
 8009832:	d1ed      	bne.n	8009810 <__gethex+0x290>
 8009834:	4621      	mov	r1, r4
 8009836:	4648      	mov	r0, r9
 8009838:	f000 fa90 	bl	8009d5c <_Bfree>
 800983c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800983e:	2300      	movs	r3, #0
 8009840:	6013      	str	r3, [r2, #0]
 8009842:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009846:	e725      	b.n	8009694 <__gethex+0x114>
 8009848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1f2      	bne.n	8009834 <__gethex+0x2b4>
 800984e:	e7df      	b.n	8009810 <__gethex+0x290>
 8009850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1dc      	bne.n	8009810 <__gethex+0x290>
 8009856:	e7ed      	b.n	8009834 <__gethex+0x2b4>
 8009858:	0800b494 	.word	0x0800b494
 800985c:	0800b500 	.word	0x0800b500
 8009860:	0800b511 	.word	0x0800b511
 8009864:	f106 38ff 	add.w	r8, r6, #4294967295
 8009868:	f1bb 0f00 	cmp.w	fp, #0
 800986c:	d133      	bne.n	80098d6 <__gethex+0x356>
 800986e:	f1b8 0f00 	cmp.w	r8, #0
 8009872:	d004      	beq.n	800987e <__gethex+0x2fe>
 8009874:	4641      	mov	r1, r8
 8009876:	4620      	mov	r0, r4
 8009878:	f000 febc 	bl	800a5f4 <__any_on>
 800987c:	4683      	mov	fp, r0
 800987e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009882:	2301      	movs	r3, #1
 8009884:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009888:	f008 081f 	and.w	r8, r8, #31
 800988c:	fa03 f308 	lsl.w	r3, r3, r8
 8009890:	4213      	tst	r3, r2
 8009892:	4631      	mov	r1, r6
 8009894:	4620      	mov	r0, r4
 8009896:	bf18      	it	ne
 8009898:	f04b 0b02 	orrne.w	fp, fp, #2
 800989c:	1bad      	subs	r5, r5, r6
 800989e:	f7ff fe07 	bl	80094b0 <rshift>
 80098a2:	687e      	ldr	r6, [r7, #4]
 80098a4:	f04f 0802 	mov.w	r8, #2
 80098a8:	f1bb 0f00 	cmp.w	fp, #0
 80098ac:	d04a      	beq.n	8009944 <__gethex+0x3c4>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d016      	beq.n	80098e2 <__gethex+0x362>
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d018      	beq.n	80098ea <__gethex+0x36a>
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d109      	bne.n	80098d0 <__gethex+0x350>
 80098bc:	f01b 0f02 	tst.w	fp, #2
 80098c0:	d006      	beq.n	80098d0 <__gethex+0x350>
 80098c2:	f8da 3000 	ldr.w	r3, [sl]
 80098c6:	ea4b 0b03 	orr.w	fp, fp, r3
 80098ca:	f01b 0f01 	tst.w	fp, #1
 80098ce:	d10f      	bne.n	80098f0 <__gethex+0x370>
 80098d0:	f048 0810 	orr.w	r8, r8, #16
 80098d4:	e036      	b.n	8009944 <__gethex+0x3c4>
 80098d6:	f04f 0b01 	mov.w	fp, #1
 80098da:	e7d0      	b.n	800987e <__gethex+0x2fe>
 80098dc:	f04f 0801 	mov.w	r8, #1
 80098e0:	e7e2      	b.n	80098a8 <__gethex+0x328>
 80098e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098e4:	f1c3 0301 	rsb	r3, r3, #1
 80098e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80098ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d0ef      	beq.n	80098d0 <__gethex+0x350>
 80098f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80098f4:	f104 0214 	add.w	r2, r4, #20
 80098f8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009902:	2300      	movs	r3, #0
 8009904:	4694      	mov	ip, r2
 8009906:	f852 1b04 	ldr.w	r1, [r2], #4
 800990a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800990e:	d01e      	beq.n	800994e <__gethex+0x3ce>
 8009910:	3101      	adds	r1, #1
 8009912:	f8cc 1000 	str.w	r1, [ip]
 8009916:	f1b8 0f02 	cmp.w	r8, #2
 800991a:	f104 0214 	add.w	r2, r4, #20
 800991e:	d13d      	bne.n	800999c <__gethex+0x41c>
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	3b01      	subs	r3, #1
 8009924:	42ab      	cmp	r3, r5
 8009926:	d10b      	bne.n	8009940 <__gethex+0x3c0>
 8009928:	1169      	asrs	r1, r5, #5
 800992a:	2301      	movs	r3, #1
 800992c:	f005 051f 	and.w	r5, r5, #31
 8009930:	fa03 f505 	lsl.w	r5, r3, r5
 8009934:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009938:	421d      	tst	r5, r3
 800993a:	bf18      	it	ne
 800993c:	f04f 0801 	movne.w	r8, #1
 8009940:	f048 0820 	orr.w	r8, r8, #32
 8009944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009946:	601c      	str	r4, [r3, #0]
 8009948:	9b02      	ldr	r3, [sp, #8]
 800994a:	601e      	str	r6, [r3, #0]
 800994c:	e6a2      	b.n	8009694 <__gethex+0x114>
 800994e:	4290      	cmp	r0, r2
 8009950:	f842 3c04 	str.w	r3, [r2, #-4]
 8009954:	d8d6      	bhi.n	8009904 <__gethex+0x384>
 8009956:	68a2      	ldr	r2, [r4, #8]
 8009958:	4593      	cmp	fp, r2
 800995a:	db17      	blt.n	800998c <__gethex+0x40c>
 800995c:	6861      	ldr	r1, [r4, #4]
 800995e:	4648      	mov	r0, r9
 8009960:	3101      	adds	r1, #1
 8009962:	f000 f9bb 	bl	8009cdc <_Balloc>
 8009966:	4682      	mov	sl, r0
 8009968:	b918      	cbnz	r0, 8009972 <__gethex+0x3f2>
 800996a:	4b1b      	ldr	r3, [pc, #108]	; (80099d8 <__gethex+0x458>)
 800996c:	4602      	mov	r2, r0
 800996e:	2184      	movs	r1, #132	; 0x84
 8009970:	e6b3      	b.n	80096da <__gethex+0x15a>
 8009972:	6922      	ldr	r2, [r4, #16]
 8009974:	3202      	adds	r2, #2
 8009976:	f104 010c 	add.w	r1, r4, #12
 800997a:	0092      	lsls	r2, r2, #2
 800997c:	300c      	adds	r0, #12
 800997e:	f7ff fd32 	bl	80093e6 <memcpy>
 8009982:	4621      	mov	r1, r4
 8009984:	4648      	mov	r0, r9
 8009986:	f000 f9e9 	bl	8009d5c <_Bfree>
 800998a:	4654      	mov	r4, sl
 800998c:	6922      	ldr	r2, [r4, #16]
 800998e:	1c51      	adds	r1, r2, #1
 8009990:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009994:	6121      	str	r1, [r4, #16]
 8009996:	2101      	movs	r1, #1
 8009998:	6151      	str	r1, [r2, #20]
 800999a:	e7bc      	b.n	8009916 <__gethex+0x396>
 800999c:	6921      	ldr	r1, [r4, #16]
 800999e:	4559      	cmp	r1, fp
 80099a0:	dd0b      	ble.n	80099ba <__gethex+0x43a>
 80099a2:	2101      	movs	r1, #1
 80099a4:	4620      	mov	r0, r4
 80099a6:	f7ff fd83 	bl	80094b0 <rshift>
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	3601      	adds	r6, #1
 80099ae:	42b3      	cmp	r3, r6
 80099b0:	f6ff aedb 	blt.w	800976a <__gethex+0x1ea>
 80099b4:	f04f 0801 	mov.w	r8, #1
 80099b8:	e7c2      	b.n	8009940 <__gethex+0x3c0>
 80099ba:	f015 051f 	ands.w	r5, r5, #31
 80099be:	d0f9      	beq.n	80099b4 <__gethex+0x434>
 80099c0:	9b01      	ldr	r3, [sp, #4]
 80099c2:	441a      	add	r2, r3
 80099c4:	f1c5 0520 	rsb	r5, r5, #32
 80099c8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80099cc:	f000 fa78 	bl	8009ec0 <__hi0bits>
 80099d0:	42a8      	cmp	r0, r5
 80099d2:	dbe6      	blt.n	80099a2 <__gethex+0x422>
 80099d4:	e7ee      	b.n	80099b4 <__gethex+0x434>
 80099d6:	bf00      	nop
 80099d8:	0800b500 	.word	0x0800b500

080099dc <L_shift>:
 80099dc:	f1c2 0208 	rsb	r2, r2, #8
 80099e0:	0092      	lsls	r2, r2, #2
 80099e2:	b570      	push	{r4, r5, r6, lr}
 80099e4:	f1c2 0620 	rsb	r6, r2, #32
 80099e8:	6843      	ldr	r3, [r0, #4]
 80099ea:	6804      	ldr	r4, [r0, #0]
 80099ec:	fa03 f506 	lsl.w	r5, r3, r6
 80099f0:	432c      	orrs	r4, r5
 80099f2:	40d3      	lsrs	r3, r2
 80099f4:	6004      	str	r4, [r0, #0]
 80099f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80099fa:	4288      	cmp	r0, r1
 80099fc:	d3f4      	bcc.n	80099e8 <L_shift+0xc>
 80099fe:	bd70      	pop	{r4, r5, r6, pc}

08009a00 <__match>:
 8009a00:	b530      	push	{r4, r5, lr}
 8009a02:	6803      	ldr	r3, [r0, #0]
 8009a04:	3301      	adds	r3, #1
 8009a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a0a:	b914      	cbnz	r4, 8009a12 <__match+0x12>
 8009a0c:	6003      	str	r3, [r0, #0]
 8009a0e:	2001      	movs	r0, #1
 8009a10:	bd30      	pop	{r4, r5, pc}
 8009a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009a1a:	2d19      	cmp	r5, #25
 8009a1c:	bf98      	it	ls
 8009a1e:	3220      	addls	r2, #32
 8009a20:	42a2      	cmp	r2, r4
 8009a22:	d0f0      	beq.n	8009a06 <__match+0x6>
 8009a24:	2000      	movs	r0, #0
 8009a26:	e7f3      	b.n	8009a10 <__match+0x10>

08009a28 <__hexnan>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	680b      	ldr	r3, [r1, #0]
 8009a2e:	6801      	ldr	r1, [r0, #0]
 8009a30:	115e      	asrs	r6, r3, #5
 8009a32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a36:	f013 031f 	ands.w	r3, r3, #31
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	bf18      	it	ne
 8009a3e:	3604      	addne	r6, #4
 8009a40:	2500      	movs	r5, #0
 8009a42:	1f37      	subs	r7, r6, #4
 8009a44:	4682      	mov	sl, r0
 8009a46:	4690      	mov	r8, r2
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a4e:	46b9      	mov	r9, r7
 8009a50:	463c      	mov	r4, r7
 8009a52:	9502      	str	r5, [sp, #8]
 8009a54:	46ab      	mov	fp, r5
 8009a56:	784a      	ldrb	r2, [r1, #1]
 8009a58:	1c4b      	adds	r3, r1, #1
 8009a5a:	9303      	str	r3, [sp, #12]
 8009a5c:	b342      	cbz	r2, 8009ab0 <__hexnan+0x88>
 8009a5e:	4610      	mov	r0, r2
 8009a60:	9105      	str	r1, [sp, #20]
 8009a62:	9204      	str	r2, [sp, #16]
 8009a64:	f7ff fd76 	bl	8009554 <__hexdig_fun>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d14f      	bne.n	8009b0c <__hexnan+0xe4>
 8009a6c:	9a04      	ldr	r2, [sp, #16]
 8009a6e:	9905      	ldr	r1, [sp, #20]
 8009a70:	2a20      	cmp	r2, #32
 8009a72:	d818      	bhi.n	8009aa6 <__hexnan+0x7e>
 8009a74:	9b02      	ldr	r3, [sp, #8]
 8009a76:	459b      	cmp	fp, r3
 8009a78:	dd13      	ble.n	8009aa2 <__hexnan+0x7a>
 8009a7a:	454c      	cmp	r4, r9
 8009a7c:	d206      	bcs.n	8009a8c <__hexnan+0x64>
 8009a7e:	2d07      	cmp	r5, #7
 8009a80:	dc04      	bgt.n	8009a8c <__hexnan+0x64>
 8009a82:	462a      	mov	r2, r5
 8009a84:	4649      	mov	r1, r9
 8009a86:	4620      	mov	r0, r4
 8009a88:	f7ff ffa8 	bl	80099dc <L_shift>
 8009a8c:	4544      	cmp	r4, r8
 8009a8e:	d950      	bls.n	8009b32 <__hexnan+0x10a>
 8009a90:	2300      	movs	r3, #0
 8009a92:	f1a4 0904 	sub.w	r9, r4, #4
 8009a96:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a9a:	f8cd b008 	str.w	fp, [sp, #8]
 8009a9e:	464c      	mov	r4, r9
 8009aa0:	461d      	mov	r5, r3
 8009aa2:	9903      	ldr	r1, [sp, #12]
 8009aa4:	e7d7      	b.n	8009a56 <__hexnan+0x2e>
 8009aa6:	2a29      	cmp	r2, #41	; 0x29
 8009aa8:	d155      	bne.n	8009b56 <__hexnan+0x12e>
 8009aaa:	3102      	adds	r1, #2
 8009aac:	f8ca 1000 	str.w	r1, [sl]
 8009ab0:	f1bb 0f00 	cmp.w	fp, #0
 8009ab4:	d04f      	beq.n	8009b56 <__hexnan+0x12e>
 8009ab6:	454c      	cmp	r4, r9
 8009ab8:	d206      	bcs.n	8009ac8 <__hexnan+0xa0>
 8009aba:	2d07      	cmp	r5, #7
 8009abc:	dc04      	bgt.n	8009ac8 <__hexnan+0xa0>
 8009abe:	462a      	mov	r2, r5
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f7ff ff8a 	bl	80099dc <L_shift>
 8009ac8:	4544      	cmp	r4, r8
 8009aca:	d934      	bls.n	8009b36 <__hexnan+0x10e>
 8009acc:	f1a8 0204 	sub.w	r2, r8, #4
 8009ad0:	4623      	mov	r3, r4
 8009ad2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009ad6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009ada:	429f      	cmp	r7, r3
 8009adc:	d2f9      	bcs.n	8009ad2 <__hexnan+0xaa>
 8009ade:	1b3b      	subs	r3, r7, r4
 8009ae0:	f023 0303 	bic.w	r3, r3, #3
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	3e03      	subs	r6, #3
 8009ae8:	3401      	adds	r4, #1
 8009aea:	42a6      	cmp	r6, r4
 8009aec:	bf38      	it	cc
 8009aee:	2304      	movcc	r3, #4
 8009af0:	4443      	add	r3, r8
 8009af2:	2200      	movs	r2, #0
 8009af4:	f843 2b04 	str.w	r2, [r3], #4
 8009af8:	429f      	cmp	r7, r3
 8009afa:	d2fb      	bcs.n	8009af4 <__hexnan+0xcc>
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	b91b      	cbnz	r3, 8009b08 <__hexnan+0xe0>
 8009b00:	4547      	cmp	r7, r8
 8009b02:	d126      	bne.n	8009b52 <__hexnan+0x12a>
 8009b04:	2301      	movs	r3, #1
 8009b06:	603b      	str	r3, [r7, #0]
 8009b08:	2005      	movs	r0, #5
 8009b0a:	e025      	b.n	8009b58 <__hexnan+0x130>
 8009b0c:	3501      	adds	r5, #1
 8009b0e:	2d08      	cmp	r5, #8
 8009b10:	f10b 0b01 	add.w	fp, fp, #1
 8009b14:	dd06      	ble.n	8009b24 <__hexnan+0xfc>
 8009b16:	4544      	cmp	r4, r8
 8009b18:	d9c3      	bls.n	8009aa2 <__hexnan+0x7a>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b20:	2501      	movs	r5, #1
 8009b22:	3c04      	subs	r4, #4
 8009b24:	6822      	ldr	r2, [r4, #0]
 8009b26:	f000 000f 	and.w	r0, r0, #15
 8009b2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009b2e:	6020      	str	r0, [r4, #0]
 8009b30:	e7b7      	b.n	8009aa2 <__hexnan+0x7a>
 8009b32:	2508      	movs	r5, #8
 8009b34:	e7b5      	b.n	8009aa2 <__hexnan+0x7a>
 8009b36:	9b01      	ldr	r3, [sp, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d0df      	beq.n	8009afc <__hexnan+0xd4>
 8009b3c:	f1c3 0320 	rsb	r3, r3, #32
 8009b40:	f04f 32ff 	mov.w	r2, #4294967295
 8009b44:	40da      	lsrs	r2, r3
 8009b46:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009b50:	e7d4      	b.n	8009afc <__hexnan+0xd4>
 8009b52:	3f04      	subs	r7, #4
 8009b54:	e7d2      	b.n	8009afc <__hexnan+0xd4>
 8009b56:	2004      	movs	r0, #4
 8009b58:	b007      	add	sp, #28
 8009b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009b60 <sbrk_aligned>:
 8009b60:	b570      	push	{r4, r5, r6, lr}
 8009b62:	4e0e      	ldr	r6, [pc, #56]	; (8009b9c <sbrk_aligned+0x3c>)
 8009b64:	460c      	mov	r4, r1
 8009b66:	6831      	ldr	r1, [r6, #0]
 8009b68:	4605      	mov	r5, r0
 8009b6a:	b911      	cbnz	r1, 8009b72 <sbrk_aligned+0x12>
 8009b6c:	f001 f920 	bl	800adb0 <_sbrk_r>
 8009b70:	6030      	str	r0, [r6, #0]
 8009b72:	4621      	mov	r1, r4
 8009b74:	4628      	mov	r0, r5
 8009b76:	f001 f91b 	bl	800adb0 <_sbrk_r>
 8009b7a:	1c43      	adds	r3, r0, #1
 8009b7c:	d00a      	beq.n	8009b94 <sbrk_aligned+0x34>
 8009b7e:	1cc4      	adds	r4, r0, #3
 8009b80:	f024 0403 	bic.w	r4, r4, #3
 8009b84:	42a0      	cmp	r0, r4
 8009b86:	d007      	beq.n	8009b98 <sbrk_aligned+0x38>
 8009b88:	1a21      	subs	r1, r4, r0
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f001 f910 	bl	800adb0 <_sbrk_r>
 8009b90:	3001      	adds	r0, #1
 8009b92:	d101      	bne.n	8009b98 <sbrk_aligned+0x38>
 8009b94:	f04f 34ff 	mov.w	r4, #4294967295
 8009b98:	4620      	mov	r0, r4
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	200005dc 	.word	0x200005dc

08009ba0 <_malloc_r>:
 8009ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	1ccd      	adds	r5, r1, #3
 8009ba6:	f025 0503 	bic.w	r5, r5, #3
 8009baa:	3508      	adds	r5, #8
 8009bac:	2d0c      	cmp	r5, #12
 8009bae:	bf38      	it	cc
 8009bb0:	250c      	movcc	r5, #12
 8009bb2:	2d00      	cmp	r5, #0
 8009bb4:	4607      	mov	r7, r0
 8009bb6:	db01      	blt.n	8009bbc <_malloc_r+0x1c>
 8009bb8:	42a9      	cmp	r1, r5
 8009bba:	d905      	bls.n	8009bc8 <_malloc_r+0x28>
 8009bbc:	230c      	movs	r3, #12
 8009bbe:	603b      	str	r3, [r7, #0]
 8009bc0:	2600      	movs	r6, #0
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c9c <_malloc_r+0xfc>
 8009bcc:	f000 f87a 	bl	8009cc4 <__malloc_lock>
 8009bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd4:	461c      	mov	r4, r3
 8009bd6:	bb5c      	cbnz	r4, 8009c30 <_malloc_r+0x90>
 8009bd8:	4629      	mov	r1, r5
 8009bda:	4638      	mov	r0, r7
 8009bdc:	f7ff ffc0 	bl	8009b60 <sbrk_aligned>
 8009be0:	1c43      	adds	r3, r0, #1
 8009be2:	4604      	mov	r4, r0
 8009be4:	d155      	bne.n	8009c92 <_malloc_r+0xf2>
 8009be6:	f8d8 4000 	ldr.w	r4, [r8]
 8009bea:	4626      	mov	r6, r4
 8009bec:	2e00      	cmp	r6, #0
 8009bee:	d145      	bne.n	8009c7c <_malloc_r+0xdc>
 8009bf0:	2c00      	cmp	r4, #0
 8009bf2:	d048      	beq.n	8009c86 <_malloc_r+0xe6>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	eb04 0903 	add.w	r9, r4, r3
 8009bfe:	f001 f8d7 	bl	800adb0 <_sbrk_r>
 8009c02:	4581      	cmp	r9, r0
 8009c04:	d13f      	bne.n	8009c86 <_malloc_r+0xe6>
 8009c06:	6821      	ldr	r1, [r4, #0]
 8009c08:	1a6d      	subs	r5, r5, r1
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	f7ff ffa7 	bl	8009b60 <sbrk_aligned>
 8009c12:	3001      	adds	r0, #1
 8009c14:	d037      	beq.n	8009c86 <_malloc_r+0xe6>
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	442b      	add	r3, r5
 8009c1a:	6023      	str	r3, [r4, #0]
 8009c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d038      	beq.n	8009c96 <_malloc_r+0xf6>
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	42a2      	cmp	r2, r4
 8009c28:	d12b      	bne.n	8009c82 <_malloc_r+0xe2>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	605a      	str	r2, [r3, #4]
 8009c2e:	e00f      	b.n	8009c50 <_malloc_r+0xb0>
 8009c30:	6822      	ldr	r2, [r4, #0]
 8009c32:	1b52      	subs	r2, r2, r5
 8009c34:	d41f      	bmi.n	8009c76 <_malloc_r+0xd6>
 8009c36:	2a0b      	cmp	r2, #11
 8009c38:	d917      	bls.n	8009c6a <_malloc_r+0xca>
 8009c3a:	1961      	adds	r1, r4, r5
 8009c3c:	42a3      	cmp	r3, r4
 8009c3e:	6025      	str	r5, [r4, #0]
 8009c40:	bf18      	it	ne
 8009c42:	6059      	strne	r1, [r3, #4]
 8009c44:	6863      	ldr	r3, [r4, #4]
 8009c46:	bf08      	it	eq
 8009c48:	f8c8 1000 	streq.w	r1, [r8]
 8009c4c:	5162      	str	r2, [r4, r5]
 8009c4e:	604b      	str	r3, [r1, #4]
 8009c50:	4638      	mov	r0, r7
 8009c52:	f104 060b 	add.w	r6, r4, #11
 8009c56:	f000 f83b 	bl	8009cd0 <__malloc_unlock>
 8009c5a:	f026 0607 	bic.w	r6, r6, #7
 8009c5e:	1d23      	adds	r3, r4, #4
 8009c60:	1af2      	subs	r2, r6, r3
 8009c62:	d0ae      	beq.n	8009bc2 <_malloc_r+0x22>
 8009c64:	1b9b      	subs	r3, r3, r6
 8009c66:	50a3      	str	r3, [r4, r2]
 8009c68:	e7ab      	b.n	8009bc2 <_malloc_r+0x22>
 8009c6a:	42a3      	cmp	r3, r4
 8009c6c:	6862      	ldr	r2, [r4, #4]
 8009c6e:	d1dd      	bne.n	8009c2c <_malloc_r+0x8c>
 8009c70:	f8c8 2000 	str.w	r2, [r8]
 8009c74:	e7ec      	b.n	8009c50 <_malloc_r+0xb0>
 8009c76:	4623      	mov	r3, r4
 8009c78:	6864      	ldr	r4, [r4, #4]
 8009c7a:	e7ac      	b.n	8009bd6 <_malloc_r+0x36>
 8009c7c:	4634      	mov	r4, r6
 8009c7e:	6876      	ldr	r6, [r6, #4]
 8009c80:	e7b4      	b.n	8009bec <_malloc_r+0x4c>
 8009c82:	4613      	mov	r3, r2
 8009c84:	e7cc      	b.n	8009c20 <_malloc_r+0x80>
 8009c86:	230c      	movs	r3, #12
 8009c88:	603b      	str	r3, [r7, #0]
 8009c8a:	4638      	mov	r0, r7
 8009c8c:	f000 f820 	bl	8009cd0 <__malloc_unlock>
 8009c90:	e797      	b.n	8009bc2 <_malloc_r+0x22>
 8009c92:	6025      	str	r5, [r4, #0]
 8009c94:	e7dc      	b.n	8009c50 <_malloc_r+0xb0>
 8009c96:	605b      	str	r3, [r3, #4]
 8009c98:	deff      	udf	#255	; 0xff
 8009c9a:	bf00      	nop
 8009c9c:	200005d8 	.word	0x200005d8

08009ca0 <__ascii_mbtowc>:
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	b901      	cbnz	r1, 8009ca6 <__ascii_mbtowc+0x6>
 8009ca4:	a901      	add	r1, sp, #4
 8009ca6:	b142      	cbz	r2, 8009cba <__ascii_mbtowc+0x1a>
 8009ca8:	b14b      	cbz	r3, 8009cbe <__ascii_mbtowc+0x1e>
 8009caa:	7813      	ldrb	r3, [r2, #0]
 8009cac:	600b      	str	r3, [r1, #0]
 8009cae:	7812      	ldrb	r2, [r2, #0]
 8009cb0:	1e10      	subs	r0, r2, #0
 8009cb2:	bf18      	it	ne
 8009cb4:	2001      	movne	r0, #1
 8009cb6:	b002      	add	sp, #8
 8009cb8:	4770      	bx	lr
 8009cba:	4610      	mov	r0, r2
 8009cbc:	e7fb      	b.n	8009cb6 <__ascii_mbtowc+0x16>
 8009cbe:	f06f 0001 	mvn.w	r0, #1
 8009cc2:	e7f8      	b.n	8009cb6 <__ascii_mbtowc+0x16>

08009cc4 <__malloc_lock>:
 8009cc4:	4801      	ldr	r0, [pc, #4]	; (8009ccc <__malloc_lock+0x8>)
 8009cc6:	f7ff bb8c 	b.w	80093e2 <__retarget_lock_acquire_recursive>
 8009cca:	bf00      	nop
 8009ccc:	200005d4 	.word	0x200005d4

08009cd0 <__malloc_unlock>:
 8009cd0:	4801      	ldr	r0, [pc, #4]	; (8009cd8 <__malloc_unlock+0x8>)
 8009cd2:	f7ff bb87 	b.w	80093e4 <__retarget_lock_release_recursive>
 8009cd6:	bf00      	nop
 8009cd8:	200005d4 	.word	0x200005d4

08009cdc <_Balloc>:
 8009cdc:	b570      	push	{r4, r5, r6, lr}
 8009cde:	69c6      	ldr	r6, [r0, #28]
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	460d      	mov	r5, r1
 8009ce4:	b976      	cbnz	r6, 8009d04 <_Balloc+0x28>
 8009ce6:	2010      	movs	r0, #16
 8009ce8:	f001 f8a6 	bl	800ae38 <malloc>
 8009cec:	4602      	mov	r2, r0
 8009cee:	61e0      	str	r0, [r4, #28]
 8009cf0:	b920      	cbnz	r0, 8009cfc <_Balloc+0x20>
 8009cf2:	4b18      	ldr	r3, [pc, #96]	; (8009d54 <_Balloc+0x78>)
 8009cf4:	4818      	ldr	r0, [pc, #96]	; (8009d58 <_Balloc+0x7c>)
 8009cf6:	216b      	movs	r1, #107	; 0x6b
 8009cf8:	f001 f86a 	bl	800add0 <__assert_func>
 8009cfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d00:	6006      	str	r6, [r0, #0]
 8009d02:	60c6      	str	r6, [r0, #12]
 8009d04:	69e6      	ldr	r6, [r4, #28]
 8009d06:	68f3      	ldr	r3, [r6, #12]
 8009d08:	b183      	cbz	r3, 8009d2c <_Balloc+0x50>
 8009d0a:	69e3      	ldr	r3, [r4, #28]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d12:	b9b8      	cbnz	r0, 8009d44 <_Balloc+0x68>
 8009d14:	2101      	movs	r1, #1
 8009d16:	fa01 f605 	lsl.w	r6, r1, r5
 8009d1a:	1d72      	adds	r2, r6, #5
 8009d1c:	0092      	lsls	r2, r2, #2
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f001 f874 	bl	800ae0c <_calloc_r>
 8009d24:	b160      	cbz	r0, 8009d40 <_Balloc+0x64>
 8009d26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d2a:	e00e      	b.n	8009d4a <_Balloc+0x6e>
 8009d2c:	2221      	movs	r2, #33	; 0x21
 8009d2e:	2104      	movs	r1, #4
 8009d30:	4620      	mov	r0, r4
 8009d32:	f001 f86b 	bl	800ae0c <_calloc_r>
 8009d36:	69e3      	ldr	r3, [r4, #28]
 8009d38:	60f0      	str	r0, [r6, #12]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1e4      	bne.n	8009d0a <_Balloc+0x2e>
 8009d40:	2000      	movs	r0, #0
 8009d42:	bd70      	pop	{r4, r5, r6, pc}
 8009d44:	6802      	ldr	r2, [r0, #0]
 8009d46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d50:	e7f7      	b.n	8009d42 <_Balloc+0x66>
 8009d52:	bf00      	nop
 8009d54:	0800b571 	.word	0x0800b571
 8009d58:	0800b588 	.word	0x0800b588

08009d5c <_Bfree>:
 8009d5c:	b570      	push	{r4, r5, r6, lr}
 8009d5e:	69c6      	ldr	r6, [r0, #28]
 8009d60:	4605      	mov	r5, r0
 8009d62:	460c      	mov	r4, r1
 8009d64:	b976      	cbnz	r6, 8009d84 <_Bfree+0x28>
 8009d66:	2010      	movs	r0, #16
 8009d68:	f001 f866 	bl	800ae38 <malloc>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	61e8      	str	r0, [r5, #28]
 8009d70:	b920      	cbnz	r0, 8009d7c <_Bfree+0x20>
 8009d72:	4b09      	ldr	r3, [pc, #36]	; (8009d98 <_Bfree+0x3c>)
 8009d74:	4809      	ldr	r0, [pc, #36]	; (8009d9c <_Bfree+0x40>)
 8009d76:	218f      	movs	r1, #143	; 0x8f
 8009d78:	f001 f82a 	bl	800add0 <__assert_func>
 8009d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d80:	6006      	str	r6, [r0, #0]
 8009d82:	60c6      	str	r6, [r0, #12]
 8009d84:	b13c      	cbz	r4, 8009d96 <_Bfree+0x3a>
 8009d86:	69eb      	ldr	r3, [r5, #28]
 8009d88:	6862      	ldr	r2, [r4, #4]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d90:	6021      	str	r1, [r4, #0]
 8009d92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d96:	bd70      	pop	{r4, r5, r6, pc}
 8009d98:	0800b571 	.word	0x0800b571
 8009d9c:	0800b588 	.word	0x0800b588

08009da0 <__multadd>:
 8009da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da4:	690d      	ldr	r5, [r1, #16]
 8009da6:	4607      	mov	r7, r0
 8009da8:	460c      	mov	r4, r1
 8009daa:	461e      	mov	r6, r3
 8009dac:	f101 0c14 	add.w	ip, r1, #20
 8009db0:	2000      	movs	r0, #0
 8009db2:	f8dc 3000 	ldr.w	r3, [ip]
 8009db6:	b299      	uxth	r1, r3
 8009db8:	fb02 6101 	mla	r1, r2, r1, r6
 8009dbc:	0c1e      	lsrs	r6, r3, #16
 8009dbe:	0c0b      	lsrs	r3, r1, #16
 8009dc0:	fb02 3306 	mla	r3, r2, r6, r3
 8009dc4:	b289      	uxth	r1, r1
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009dcc:	4285      	cmp	r5, r0
 8009dce:	f84c 1b04 	str.w	r1, [ip], #4
 8009dd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009dd6:	dcec      	bgt.n	8009db2 <__multadd+0x12>
 8009dd8:	b30e      	cbz	r6, 8009e1e <__multadd+0x7e>
 8009dda:	68a3      	ldr	r3, [r4, #8]
 8009ddc:	42ab      	cmp	r3, r5
 8009dde:	dc19      	bgt.n	8009e14 <__multadd+0x74>
 8009de0:	6861      	ldr	r1, [r4, #4]
 8009de2:	4638      	mov	r0, r7
 8009de4:	3101      	adds	r1, #1
 8009de6:	f7ff ff79 	bl	8009cdc <_Balloc>
 8009dea:	4680      	mov	r8, r0
 8009dec:	b928      	cbnz	r0, 8009dfa <__multadd+0x5a>
 8009dee:	4602      	mov	r2, r0
 8009df0:	4b0c      	ldr	r3, [pc, #48]	; (8009e24 <__multadd+0x84>)
 8009df2:	480d      	ldr	r0, [pc, #52]	; (8009e28 <__multadd+0x88>)
 8009df4:	21ba      	movs	r1, #186	; 0xba
 8009df6:	f000 ffeb 	bl	800add0 <__assert_func>
 8009dfa:	6922      	ldr	r2, [r4, #16]
 8009dfc:	3202      	adds	r2, #2
 8009dfe:	f104 010c 	add.w	r1, r4, #12
 8009e02:	0092      	lsls	r2, r2, #2
 8009e04:	300c      	adds	r0, #12
 8009e06:	f7ff faee 	bl	80093e6 <memcpy>
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	f7ff ffa5 	bl	8009d5c <_Bfree>
 8009e12:	4644      	mov	r4, r8
 8009e14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e18:	3501      	adds	r5, #1
 8009e1a:	615e      	str	r6, [r3, #20]
 8009e1c:	6125      	str	r5, [r4, #16]
 8009e1e:	4620      	mov	r0, r4
 8009e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e24:	0800b500 	.word	0x0800b500
 8009e28:	0800b588 	.word	0x0800b588

08009e2c <__s2b>:
 8009e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e30:	460c      	mov	r4, r1
 8009e32:	4615      	mov	r5, r2
 8009e34:	461f      	mov	r7, r3
 8009e36:	2209      	movs	r2, #9
 8009e38:	3308      	adds	r3, #8
 8009e3a:	4606      	mov	r6, r0
 8009e3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e40:	2100      	movs	r1, #0
 8009e42:	2201      	movs	r2, #1
 8009e44:	429a      	cmp	r2, r3
 8009e46:	db09      	blt.n	8009e5c <__s2b+0x30>
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f7ff ff47 	bl	8009cdc <_Balloc>
 8009e4e:	b940      	cbnz	r0, 8009e62 <__s2b+0x36>
 8009e50:	4602      	mov	r2, r0
 8009e52:	4b19      	ldr	r3, [pc, #100]	; (8009eb8 <__s2b+0x8c>)
 8009e54:	4819      	ldr	r0, [pc, #100]	; (8009ebc <__s2b+0x90>)
 8009e56:	21d3      	movs	r1, #211	; 0xd3
 8009e58:	f000 ffba 	bl	800add0 <__assert_func>
 8009e5c:	0052      	lsls	r2, r2, #1
 8009e5e:	3101      	adds	r1, #1
 8009e60:	e7f0      	b.n	8009e44 <__s2b+0x18>
 8009e62:	9b08      	ldr	r3, [sp, #32]
 8009e64:	6143      	str	r3, [r0, #20]
 8009e66:	2d09      	cmp	r5, #9
 8009e68:	f04f 0301 	mov.w	r3, #1
 8009e6c:	6103      	str	r3, [r0, #16]
 8009e6e:	dd16      	ble.n	8009e9e <__s2b+0x72>
 8009e70:	f104 0909 	add.w	r9, r4, #9
 8009e74:	46c8      	mov	r8, r9
 8009e76:	442c      	add	r4, r5
 8009e78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e7c:	4601      	mov	r1, r0
 8009e7e:	3b30      	subs	r3, #48	; 0x30
 8009e80:	220a      	movs	r2, #10
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7ff ff8c 	bl	8009da0 <__multadd>
 8009e88:	45a0      	cmp	r8, r4
 8009e8a:	d1f5      	bne.n	8009e78 <__s2b+0x4c>
 8009e8c:	f1a5 0408 	sub.w	r4, r5, #8
 8009e90:	444c      	add	r4, r9
 8009e92:	1b2d      	subs	r5, r5, r4
 8009e94:	1963      	adds	r3, r4, r5
 8009e96:	42bb      	cmp	r3, r7
 8009e98:	db04      	blt.n	8009ea4 <__s2b+0x78>
 8009e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e9e:	340a      	adds	r4, #10
 8009ea0:	2509      	movs	r5, #9
 8009ea2:	e7f6      	b.n	8009e92 <__s2b+0x66>
 8009ea4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ea8:	4601      	mov	r1, r0
 8009eaa:	3b30      	subs	r3, #48	; 0x30
 8009eac:	220a      	movs	r2, #10
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f7ff ff76 	bl	8009da0 <__multadd>
 8009eb4:	e7ee      	b.n	8009e94 <__s2b+0x68>
 8009eb6:	bf00      	nop
 8009eb8:	0800b500 	.word	0x0800b500
 8009ebc:	0800b588 	.word	0x0800b588

08009ec0 <__hi0bits>:
 8009ec0:	0c03      	lsrs	r3, r0, #16
 8009ec2:	041b      	lsls	r3, r3, #16
 8009ec4:	b9d3      	cbnz	r3, 8009efc <__hi0bits+0x3c>
 8009ec6:	0400      	lsls	r0, r0, #16
 8009ec8:	2310      	movs	r3, #16
 8009eca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ece:	bf04      	itt	eq
 8009ed0:	0200      	lsleq	r0, r0, #8
 8009ed2:	3308      	addeq	r3, #8
 8009ed4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ed8:	bf04      	itt	eq
 8009eda:	0100      	lsleq	r0, r0, #4
 8009edc:	3304      	addeq	r3, #4
 8009ede:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ee2:	bf04      	itt	eq
 8009ee4:	0080      	lsleq	r0, r0, #2
 8009ee6:	3302      	addeq	r3, #2
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	db05      	blt.n	8009ef8 <__hi0bits+0x38>
 8009eec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ef0:	f103 0301 	add.w	r3, r3, #1
 8009ef4:	bf08      	it	eq
 8009ef6:	2320      	moveq	r3, #32
 8009ef8:	4618      	mov	r0, r3
 8009efa:	4770      	bx	lr
 8009efc:	2300      	movs	r3, #0
 8009efe:	e7e4      	b.n	8009eca <__hi0bits+0xa>

08009f00 <__lo0bits>:
 8009f00:	6803      	ldr	r3, [r0, #0]
 8009f02:	f013 0207 	ands.w	r2, r3, #7
 8009f06:	d00c      	beq.n	8009f22 <__lo0bits+0x22>
 8009f08:	07d9      	lsls	r1, r3, #31
 8009f0a:	d422      	bmi.n	8009f52 <__lo0bits+0x52>
 8009f0c:	079a      	lsls	r2, r3, #30
 8009f0e:	bf49      	itett	mi
 8009f10:	085b      	lsrmi	r3, r3, #1
 8009f12:	089b      	lsrpl	r3, r3, #2
 8009f14:	6003      	strmi	r3, [r0, #0]
 8009f16:	2201      	movmi	r2, #1
 8009f18:	bf5c      	itt	pl
 8009f1a:	6003      	strpl	r3, [r0, #0]
 8009f1c:	2202      	movpl	r2, #2
 8009f1e:	4610      	mov	r0, r2
 8009f20:	4770      	bx	lr
 8009f22:	b299      	uxth	r1, r3
 8009f24:	b909      	cbnz	r1, 8009f2a <__lo0bits+0x2a>
 8009f26:	0c1b      	lsrs	r3, r3, #16
 8009f28:	2210      	movs	r2, #16
 8009f2a:	b2d9      	uxtb	r1, r3
 8009f2c:	b909      	cbnz	r1, 8009f32 <__lo0bits+0x32>
 8009f2e:	3208      	adds	r2, #8
 8009f30:	0a1b      	lsrs	r3, r3, #8
 8009f32:	0719      	lsls	r1, r3, #28
 8009f34:	bf04      	itt	eq
 8009f36:	091b      	lsreq	r3, r3, #4
 8009f38:	3204      	addeq	r2, #4
 8009f3a:	0799      	lsls	r1, r3, #30
 8009f3c:	bf04      	itt	eq
 8009f3e:	089b      	lsreq	r3, r3, #2
 8009f40:	3202      	addeq	r2, #2
 8009f42:	07d9      	lsls	r1, r3, #31
 8009f44:	d403      	bmi.n	8009f4e <__lo0bits+0x4e>
 8009f46:	085b      	lsrs	r3, r3, #1
 8009f48:	f102 0201 	add.w	r2, r2, #1
 8009f4c:	d003      	beq.n	8009f56 <__lo0bits+0x56>
 8009f4e:	6003      	str	r3, [r0, #0]
 8009f50:	e7e5      	b.n	8009f1e <__lo0bits+0x1e>
 8009f52:	2200      	movs	r2, #0
 8009f54:	e7e3      	b.n	8009f1e <__lo0bits+0x1e>
 8009f56:	2220      	movs	r2, #32
 8009f58:	e7e1      	b.n	8009f1e <__lo0bits+0x1e>
	...

08009f5c <__i2b>:
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	460c      	mov	r4, r1
 8009f60:	2101      	movs	r1, #1
 8009f62:	f7ff febb 	bl	8009cdc <_Balloc>
 8009f66:	4602      	mov	r2, r0
 8009f68:	b928      	cbnz	r0, 8009f76 <__i2b+0x1a>
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <__i2b+0x24>)
 8009f6c:	4805      	ldr	r0, [pc, #20]	; (8009f84 <__i2b+0x28>)
 8009f6e:	f240 1145 	movw	r1, #325	; 0x145
 8009f72:	f000 ff2d 	bl	800add0 <__assert_func>
 8009f76:	2301      	movs	r3, #1
 8009f78:	6144      	str	r4, [r0, #20]
 8009f7a:	6103      	str	r3, [r0, #16]
 8009f7c:	bd10      	pop	{r4, pc}
 8009f7e:	bf00      	nop
 8009f80:	0800b500 	.word	0x0800b500
 8009f84:	0800b588 	.word	0x0800b588

08009f88 <__multiply>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	4691      	mov	r9, r2
 8009f8e:	690a      	ldr	r2, [r1, #16]
 8009f90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	bfb8      	it	lt
 8009f98:	460b      	movlt	r3, r1
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	bfbc      	itt	lt
 8009f9e:	464c      	movlt	r4, r9
 8009fa0:	4699      	movlt	r9, r3
 8009fa2:	6927      	ldr	r7, [r4, #16]
 8009fa4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fa8:	68a3      	ldr	r3, [r4, #8]
 8009faa:	6861      	ldr	r1, [r4, #4]
 8009fac:	eb07 060a 	add.w	r6, r7, sl
 8009fb0:	42b3      	cmp	r3, r6
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	bfb8      	it	lt
 8009fb6:	3101      	addlt	r1, #1
 8009fb8:	f7ff fe90 	bl	8009cdc <_Balloc>
 8009fbc:	b930      	cbnz	r0, 8009fcc <__multiply+0x44>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	4b44      	ldr	r3, [pc, #272]	; (800a0d4 <__multiply+0x14c>)
 8009fc2:	4845      	ldr	r0, [pc, #276]	; (800a0d8 <__multiply+0x150>)
 8009fc4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009fc8:	f000 ff02 	bl	800add0 <__assert_func>
 8009fcc:	f100 0514 	add.w	r5, r0, #20
 8009fd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fd4:	462b      	mov	r3, r5
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	4543      	cmp	r3, r8
 8009fda:	d321      	bcc.n	800a020 <__multiply+0x98>
 8009fdc:	f104 0314 	add.w	r3, r4, #20
 8009fe0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009fe4:	f109 0314 	add.w	r3, r9, #20
 8009fe8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009fec:	9202      	str	r2, [sp, #8]
 8009fee:	1b3a      	subs	r2, r7, r4
 8009ff0:	3a15      	subs	r2, #21
 8009ff2:	f022 0203 	bic.w	r2, r2, #3
 8009ff6:	3204      	adds	r2, #4
 8009ff8:	f104 0115 	add.w	r1, r4, #21
 8009ffc:	428f      	cmp	r7, r1
 8009ffe:	bf38      	it	cc
 800a000:	2204      	movcc	r2, #4
 800a002:	9201      	str	r2, [sp, #4]
 800a004:	9a02      	ldr	r2, [sp, #8]
 800a006:	9303      	str	r3, [sp, #12]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d80c      	bhi.n	800a026 <__multiply+0x9e>
 800a00c:	2e00      	cmp	r6, #0
 800a00e:	dd03      	ble.n	800a018 <__multiply+0x90>
 800a010:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a014:	2b00      	cmp	r3, #0
 800a016:	d05b      	beq.n	800a0d0 <__multiply+0x148>
 800a018:	6106      	str	r6, [r0, #16]
 800a01a:	b005      	add	sp, #20
 800a01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a020:	f843 2b04 	str.w	r2, [r3], #4
 800a024:	e7d8      	b.n	8009fd8 <__multiply+0x50>
 800a026:	f8b3 a000 	ldrh.w	sl, [r3]
 800a02a:	f1ba 0f00 	cmp.w	sl, #0
 800a02e:	d024      	beq.n	800a07a <__multiply+0xf2>
 800a030:	f104 0e14 	add.w	lr, r4, #20
 800a034:	46a9      	mov	r9, r5
 800a036:	f04f 0c00 	mov.w	ip, #0
 800a03a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a03e:	f8d9 1000 	ldr.w	r1, [r9]
 800a042:	fa1f fb82 	uxth.w	fp, r2
 800a046:	b289      	uxth	r1, r1
 800a048:	fb0a 110b 	mla	r1, sl, fp, r1
 800a04c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a050:	f8d9 2000 	ldr.w	r2, [r9]
 800a054:	4461      	add	r1, ip
 800a056:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a05a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a05e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a062:	b289      	uxth	r1, r1
 800a064:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a068:	4577      	cmp	r7, lr
 800a06a:	f849 1b04 	str.w	r1, [r9], #4
 800a06e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a072:	d8e2      	bhi.n	800a03a <__multiply+0xb2>
 800a074:	9a01      	ldr	r2, [sp, #4]
 800a076:	f845 c002 	str.w	ip, [r5, r2]
 800a07a:	9a03      	ldr	r2, [sp, #12]
 800a07c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a080:	3304      	adds	r3, #4
 800a082:	f1b9 0f00 	cmp.w	r9, #0
 800a086:	d021      	beq.n	800a0cc <__multiply+0x144>
 800a088:	6829      	ldr	r1, [r5, #0]
 800a08a:	f104 0c14 	add.w	ip, r4, #20
 800a08e:	46ae      	mov	lr, r5
 800a090:	f04f 0a00 	mov.w	sl, #0
 800a094:	f8bc b000 	ldrh.w	fp, [ip]
 800a098:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a09c:	fb09 220b 	mla	r2, r9, fp, r2
 800a0a0:	4452      	add	r2, sl
 800a0a2:	b289      	uxth	r1, r1
 800a0a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0a8:	f84e 1b04 	str.w	r1, [lr], #4
 800a0ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a0b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0b4:	f8be 1000 	ldrh.w	r1, [lr]
 800a0b8:	fb09 110a 	mla	r1, r9, sl, r1
 800a0bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a0c0:	4567      	cmp	r7, ip
 800a0c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0c6:	d8e5      	bhi.n	800a094 <__multiply+0x10c>
 800a0c8:	9a01      	ldr	r2, [sp, #4]
 800a0ca:	50a9      	str	r1, [r5, r2]
 800a0cc:	3504      	adds	r5, #4
 800a0ce:	e799      	b.n	800a004 <__multiply+0x7c>
 800a0d0:	3e01      	subs	r6, #1
 800a0d2:	e79b      	b.n	800a00c <__multiply+0x84>
 800a0d4:	0800b500 	.word	0x0800b500
 800a0d8:	0800b588 	.word	0x0800b588

0800a0dc <__pow5mult>:
 800a0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e0:	4615      	mov	r5, r2
 800a0e2:	f012 0203 	ands.w	r2, r2, #3
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	460f      	mov	r7, r1
 800a0ea:	d007      	beq.n	800a0fc <__pow5mult+0x20>
 800a0ec:	4c25      	ldr	r4, [pc, #148]	; (800a184 <__pow5mult+0xa8>)
 800a0ee:	3a01      	subs	r2, #1
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0f6:	f7ff fe53 	bl	8009da0 <__multadd>
 800a0fa:	4607      	mov	r7, r0
 800a0fc:	10ad      	asrs	r5, r5, #2
 800a0fe:	d03d      	beq.n	800a17c <__pow5mult+0xa0>
 800a100:	69f4      	ldr	r4, [r6, #28]
 800a102:	b97c      	cbnz	r4, 800a124 <__pow5mult+0x48>
 800a104:	2010      	movs	r0, #16
 800a106:	f000 fe97 	bl	800ae38 <malloc>
 800a10a:	4602      	mov	r2, r0
 800a10c:	61f0      	str	r0, [r6, #28]
 800a10e:	b928      	cbnz	r0, 800a11c <__pow5mult+0x40>
 800a110:	4b1d      	ldr	r3, [pc, #116]	; (800a188 <__pow5mult+0xac>)
 800a112:	481e      	ldr	r0, [pc, #120]	; (800a18c <__pow5mult+0xb0>)
 800a114:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a118:	f000 fe5a 	bl	800add0 <__assert_func>
 800a11c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a120:	6004      	str	r4, [r0, #0]
 800a122:	60c4      	str	r4, [r0, #12]
 800a124:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a128:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a12c:	b94c      	cbnz	r4, 800a142 <__pow5mult+0x66>
 800a12e:	f240 2171 	movw	r1, #625	; 0x271
 800a132:	4630      	mov	r0, r6
 800a134:	f7ff ff12 	bl	8009f5c <__i2b>
 800a138:	2300      	movs	r3, #0
 800a13a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a13e:	4604      	mov	r4, r0
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	f04f 0900 	mov.w	r9, #0
 800a146:	07eb      	lsls	r3, r5, #31
 800a148:	d50a      	bpl.n	800a160 <__pow5mult+0x84>
 800a14a:	4639      	mov	r1, r7
 800a14c:	4622      	mov	r2, r4
 800a14e:	4630      	mov	r0, r6
 800a150:	f7ff ff1a 	bl	8009f88 <__multiply>
 800a154:	4639      	mov	r1, r7
 800a156:	4680      	mov	r8, r0
 800a158:	4630      	mov	r0, r6
 800a15a:	f7ff fdff 	bl	8009d5c <_Bfree>
 800a15e:	4647      	mov	r7, r8
 800a160:	106d      	asrs	r5, r5, #1
 800a162:	d00b      	beq.n	800a17c <__pow5mult+0xa0>
 800a164:	6820      	ldr	r0, [r4, #0]
 800a166:	b938      	cbnz	r0, 800a178 <__pow5mult+0x9c>
 800a168:	4622      	mov	r2, r4
 800a16a:	4621      	mov	r1, r4
 800a16c:	4630      	mov	r0, r6
 800a16e:	f7ff ff0b 	bl	8009f88 <__multiply>
 800a172:	6020      	str	r0, [r4, #0]
 800a174:	f8c0 9000 	str.w	r9, [r0]
 800a178:	4604      	mov	r4, r0
 800a17a:	e7e4      	b.n	800a146 <__pow5mult+0x6a>
 800a17c:	4638      	mov	r0, r7
 800a17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a182:	bf00      	nop
 800a184:	0800b6d8 	.word	0x0800b6d8
 800a188:	0800b571 	.word	0x0800b571
 800a18c:	0800b588 	.word	0x0800b588

0800a190 <__lshift>:
 800a190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a194:	460c      	mov	r4, r1
 800a196:	6849      	ldr	r1, [r1, #4]
 800a198:	6923      	ldr	r3, [r4, #16]
 800a19a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a19e:	68a3      	ldr	r3, [r4, #8]
 800a1a0:	4607      	mov	r7, r0
 800a1a2:	4691      	mov	r9, r2
 800a1a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1a8:	f108 0601 	add.w	r6, r8, #1
 800a1ac:	42b3      	cmp	r3, r6
 800a1ae:	db0b      	blt.n	800a1c8 <__lshift+0x38>
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	f7ff fd93 	bl	8009cdc <_Balloc>
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	b948      	cbnz	r0, 800a1ce <__lshift+0x3e>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	4b28      	ldr	r3, [pc, #160]	; (800a260 <__lshift+0xd0>)
 800a1be:	4829      	ldr	r0, [pc, #164]	; (800a264 <__lshift+0xd4>)
 800a1c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a1c4:	f000 fe04 	bl	800add0 <__assert_func>
 800a1c8:	3101      	adds	r1, #1
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	e7ee      	b.n	800a1ac <__lshift+0x1c>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f100 0114 	add.w	r1, r0, #20
 800a1d4:	f100 0210 	add.w	r2, r0, #16
 800a1d8:	4618      	mov	r0, r3
 800a1da:	4553      	cmp	r3, sl
 800a1dc:	db33      	blt.n	800a246 <__lshift+0xb6>
 800a1de:	6920      	ldr	r0, [r4, #16]
 800a1e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1e4:	f104 0314 	add.w	r3, r4, #20
 800a1e8:	f019 091f 	ands.w	r9, r9, #31
 800a1ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1f4:	d02b      	beq.n	800a24e <__lshift+0xbe>
 800a1f6:	f1c9 0e20 	rsb	lr, r9, #32
 800a1fa:	468a      	mov	sl, r1
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	6818      	ldr	r0, [r3, #0]
 800a200:	fa00 f009 	lsl.w	r0, r0, r9
 800a204:	4310      	orrs	r0, r2
 800a206:	f84a 0b04 	str.w	r0, [sl], #4
 800a20a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a20e:	459c      	cmp	ip, r3
 800a210:	fa22 f20e 	lsr.w	r2, r2, lr
 800a214:	d8f3      	bhi.n	800a1fe <__lshift+0x6e>
 800a216:	ebac 0304 	sub.w	r3, ip, r4
 800a21a:	3b15      	subs	r3, #21
 800a21c:	f023 0303 	bic.w	r3, r3, #3
 800a220:	3304      	adds	r3, #4
 800a222:	f104 0015 	add.w	r0, r4, #21
 800a226:	4584      	cmp	ip, r0
 800a228:	bf38      	it	cc
 800a22a:	2304      	movcc	r3, #4
 800a22c:	50ca      	str	r2, [r1, r3]
 800a22e:	b10a      	cbz	r2, 800a234 <__lshift+0xa4>
 800a230:	f108 0602 	add.w	r6, r8, #2
 800a234:	3e01      	subs	r6, #1
 800a236:	4638      	mov	r0, r7
 800a238:	612e      	str	r6, [r5, #16]
 800a23a:	4621      	mov	r1, r4
 800a23c:	f7ff fd8e 	bl	8009d5c <_Bfree>
 800a240:	4628      	mov	r0, r5
 800a242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a246:	f842 0f04 	str.w	r0, [r2, #4]!
 800a24a:	3301      	adds	r3, #1
 800a24c:	e7c5      	b.n	800a1da <__lshift+0x4a>
 800a24e:	3904      	subs	r1, #4
 800a250:	f853 2b04 	ldr.w	r2, [r3], #4
 800a254:	f841 2f04 	str.w	r2, [r1, #4]!
 800a258:	459c      	cmp	ip, r3
 800a25a:	d8f9      	bhi.n	800a250 <__lshift+0xc0>
 800a25c:	e7ea      	b.n	800a234 <__lshift+0xa4>
 800a25e:	bf00      	nop
 800a260:	0800b500 	.word	0x0800b500
 800a264:	0800b588 	.word	0x0800b588

0800a268 <__mcmp>:
 800a268:	b530      	push	{r4, r5, lr}
 800a26a:	6902      	ldr	r2, [r0, #16]
 800a26c:	690c      	ldr	r4, [r1, #16]
 800a26e:	1b12      	subs	r2, r2, r4
 800a270:	d10e      	bne.n	800a290 <__mcmp+0x28>
 800a272:	f100 0314 	add.w	r3, r0, #20
 800a276:	3114      	adds	r1, #20
 800a278:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a27c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a280:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a284:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a288:	42a5      	cmp	r5, r4
 800a28a:	d003      	beq.n	800a294 <__mcmp+0x2c>
 800a28c:	d305      	bcc.n	800a29a <__mcmp+0x32>
 800a28e:	2201      	movs	r2, #1
 800a290:	4610      	mov	r0, r2
 800a292:	bd30      	pop	{r4, r5, pc}
 800a294:	4283      	cmp	r3, r0
 800a296:	d3f3      	bcc.n	800a280 <__mcmp+0x18>
 800a298:	e7fa      	b.n	800a290 <__mcmp+0x28>
 800a29a:	f04f 32ff 	mov.w	r2, #4294967295
 800a29e:	e7f7      	b.n	800a290 <__mcmp+0x28>

0800a2a0 <__mdiff>:
 800a2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	460c      	mov	r4, r1
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	4690      	mov	r8, r2
 800a2ae:	f7ff ffdb 	bl	800a268 <__mcmp>
 800a2b2:	1e05      	subs	r5, r0, #0
 800a2b4:	d110      	bne.n	800a2d8 <__mdiff+0x38>
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f7ff fd0f 	bl	8009cdc <_Balloc>
 800a2be:	b930      	cbnz	r0, 800a2ce <__mdiff+0x2e>
 800a2c0:	4b3a      	ldr	r3, [pc, #232]	; (800a3ac <__mdiff+0x10c>)
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	f240 2137 	movw	r1, #567	; 0x237
 800a2c8:	4839      	ldr	r0, [pc, #228]	; (800a3b0 <__mdiff+0x110>)
 800a2ca:	f000 fd81 	bl	800add0 <__assert_func>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d8:	bfa4      	itt	ge
 800a2da:	4643      	movge	r3, r8
 800a2dc:	46a0      	movge	r8, r4
 800a2de:	4630      	mov	r0, r6
 800a2e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2e4:	bfa6      	itte	ge
 800a2e6:	461c      	movge	r4, r3
 800a2e8:	2500      	movge	r5, #0
 800a2ea:	2501      	movlt	r5, #1
 800a2ec:	f7ff fcf6 	bl	8009cdc <_Balloc>
 800a2f0:	b920      	cbnz	r0, 800a2fc <__mdiff+0x5c>
 800a2f2:	4b2e      	ldr	r3, [pc, #184]	; (800a3ac <__mdiff+0x10c>)
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	f240 2145 	movw	r1, #581	; 0x245
 800a2fa:	e7e5      	b.n	800a2c8 <__mdiff+0x28>
 800a2fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a300:	6926      	ldr	r6, [r4, #16]
 800a302:	60c5      	str	r5, [r0, #12]
 800a304:	f104 0914 	add.w	r9, r4, #20
 800a308:	f108 0514 	add.w	r5, r8, #20
 800a30c:	f100 0e14 	add.w	lr, r0, #20
 800a310:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a314:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a318:	f108 0210 	add.w	r2, r8, #16
 800a31c:	46f2      	mov	sl, lr
 800a31e:	2100      	movs	r1, #0
 800a320:	f859 3b04 	ldr.w	r3, [r9], #4
 800a324:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a328:	fa11 f88b 	uxtah	r8, r1, fp
 800a32c:	b299      	uxth	r1, r3
 800a32e:	0c1b      	lsrs	r3, r3, #16
 800a330:	eba8 0801 	sub.w	r8, r8, r1
 800a334:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a338:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a33c:	fa1f f888 	uxth.w	r8, r8
 800a340:	1419      	asrs	r1, r3, #16
 800a342:	454e      	cmp	r6, r9
 800a344:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a348:	f84a 3b04 	str.w	r3, [sl], #4
 800a34c:	d8e8      	bhi.n	800a320 <__mdiff+0x80>
 800a34e:	1b33      	subs	r3, r6, r4
 800a350:	3b15      	subs	r3, #21
 800a352:	f023 0303 	bic.w	r3, r3, #3
 800a356:	3304      	adds	r3, #4
 800a358:	3415      	adds	r4, #21
 800a35a:	42a6      	cmp	r6, r4
 800a35c:	bf38      	it	cc
 800a35e:	2304      	movcc	r3, #4
 800a360:	441d      	add	r5, r3
 800a362:	4473      	add	r3, lr
 800a364:	469e      	mov	lr, r3
 800a366:	462e      	mov	r6, r5
 800a368:	4566      	cmp	r6, ip
 800a36a:	d30e      	bcc.n	800a38a <__mdiff+0xea>
 800a36c:	f10c 0203 	add.w	r2, ip, #3
 800a370:	1b52      	subs	r2, r2, r5
 800a372:	f022 0203 	bic.w	r2, r2, #3
 800a376:	3d03      	subs	r5, #3
 800a378:	45ac      	cmp	ip, r5
 800a37a:	bf38      	it	cc
 800a37c:	2200      	movcc	r2, #0
 800a37e:	4413      	add	r3, r2
 800a380:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a384:	b17a      	cbz	r2, 800a3a6 <__mdiff+0x106>
 800a386:	6107      	str	r7, [r0, #16]
 800a388:	e7a4      	b.n	800a2d4 <__mdiff+0x34>
 800a38a:	f856 8b04 	ldr.w	r8, [r6], #4
 800a38e:	fa11 f288 	uxtah	r2, r1, r8
 800a392:	1414      	asrs	r4, r2, #16
 800a394:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a398:	b292      	uxth	r2, r2
 800a39a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a39e:	f84e 2b04 	str.w	r2, [lr], #4
 800a3a2:	1421      	asrs	r1, r4, #16
 800a3a4:	e7e0      	b.n	800a368 <__mdiff+0xc8>
 800a3a6:	3f01      	subs	r7, #1
 800a3a8:	e7ea      	b.n	800a380 <__mdiff+0xe0>
 800a3aa:	bf00      	nop
 800a3ac:	0800b500 	.word	0x0800b500
 800a3b0:	0800b588 	.word	0x0800b588

0800a3b4 <__ulp>:
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	ed8d 0b00 	vstr	d0, [sp]
 800a3ba:	9a01      	ldr	r2, [sp, #4]
 800a3bc:	4b0f      	ldr	r3, [pc, #60]	; (800a3fc <__ulp+0x48>)
 800a3be:	4013      	ands	r3, r2
 800a3c0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	dc08      	bgt.n	800a3da <__ulp+0x26>
 800a3c8:	425b      	negs	r3, r3
 800a3ca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a3ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a3d2:	da04      	bge.n	800a3de <__ulp+0x2a>
 800a3d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a3d8:	4113      	asrs	r3, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	e008      	b.n	800a3f0 <__ulp+0x3c>
 800a3de:	f1a2 0314 	sub.w	r3, r2, #20
 800a3e2:	2b1e      	cmp	r3, #30
 800a3e4:	bfda      	itte	le
 800a3e6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a3ea:	40da      	lsrle	r2, r3
 800a3ec:	2201      	movgt	r2, #1
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	4610      	mov	r0, r2
 800a3f4:	ec41 0b10 	vmov	d0, r0, r1
 800a3f8:	b002      	add	sp, #8
 800a3fa:	4770      	bx	lr
 800a3fc:	7ff00000 	.word	0x7ff00000

0800a400 <__b2d>:
 800a400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a404:	6906      	ldr	r6, [r0, #16]
 800a406:	f100 0814 	add.w	r8, r0, #20
 800a40a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a40e:	1f37      	subs	r7, r6, #4
 800a410:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a414:	4610      	mov	r0, r2
 800a416:	f7ff fd53 	bl	8009ec0 <__hi0bits>
 800a41a:	f1c0 0320 	rsb	r3, r0, #32
 800a41e:	280a      	cmp	r0, #10
 800a420:	600b      	str	r3, [r1, #0]
 800a422:	491b      	ldr	r1, [pc, #108]	; (800a490 <__b2d+0x90>)
 800a424:	dc15      	bgt.n	800a452 <__b2d+0x52>
 800a426:	f1c0 0c0b 	rsb	ip, r0, #11
 800a42a:	fa22 f30c 	lsr.w	r3, r2, ip
 800a42e:	45b8      	cmp	r8, r7
 800a430:	ea43 0501 	orr.w	r5, r3, r1
 800a434:	bf34      	ite	cc
 800a436:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a43a:	2300      	movcs	r3, #0
 800a43c:	3015      	adds	r0, #21
 800a43e:	fa02 f000 	lsl.w	r0, r2, r0
 800a442:	fa23 f30c 	lsr.w	r3, r3, ip
 800a446:	4303      	orrs	r3, r0
 800a448:	461c      	mov	r4, r3
 800a44a:	ec45 4b10 	vmov	d0, r4, r5
 800a44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a452:	45b8      	cmp	r8, r7
 800a454:	bf3a      	itte	cc
 800a456:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a45a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a45e:	2300      	movcs	r3, #0
 800a460:	380b      	subs	r0, #11
 800a462:	d012      	beq.n	800a48a <__b2d+0x8a>
 800a464:	f1c0 0120 	rsb	r1, r0, #32
 800a468:	fa23 f401 	lsr.w	r4, r3, r1
 800a46c:	4082      	lsls	r2, r0
 800a46e:	4322      	orrs	r2, r4
 800a470:	4547      	cmp	r7, r8
 800a472:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a476:	bf8c      	ite	hi
 800a478:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a47c:	2200      	movls	r2, #0
 800a47e:	4083      	lsls	r3, r0
 800a480:	40ca      	lsrs	r2, r1
 800a482:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a486:	4313      	orrs	r3, r2
 800a488:	e7de      	b.n	800a448 <__b2d+0x48>
 800a48a:	ea42 0501 	orr.w	r5, r2, r1
 800a48e:	e7db      	b.n	800a448 <__b2d+0x48>
 800a490:	3ff00000 	.word	0x3ff00000

0800a494 <__d2b>:
 800a494:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a498:	460f      	mov	r7, r1
 800a49a:	2101      	movs	r1, #1
 800a49c:	ec59 8b10 	vmov	r8, r9, d0
 800a4a0:	4616      	mov	r6, r2
 800a4a2:	f7ff fc1b 	bl	8009cdc <_Balloc>
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	b930      	cbnz	r0, 800a4b8 <__d2b+0x24>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	4b24      	ldr	r3, [pc, #144]	; (800a540 <__d2b+0xac>)
 800a4ae:	4825      	ldr	r0, [pc, #148]	; (800a544 <__d2b+0xb0>)
 800a4b0:	f240 310f 	movw	r1, #783	; 0x30f
 800a4b4:	f000 fc8c 	bl	800add0 <__assert_func>
 800a4b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4c0:	bb2d      	cbnz	r5, 800a50e <__d2b+0x7a>
 800a4c2:	9301      	str	r3, [sp, #4]
 800a4c4:	f1b8 0300 	subs.w	r3, r8, #0
 800a4c8:	d026      	beq.n	800a518 <__d2b+0x84>
 800a4ca:	4668      	mov	r0, sp
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	f7ff fd17 	bl	8009f00 <__lo0bits>
 800a4d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a4d6:	b1e8      	cbz	r0, 800a514 <__d2b+0x80>
 800a4d8:	f1c0 0320 	rsb	r3, r0, #32
 800a4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e0:	430b      	orrs	r3, r1
 800a4e2:	40c2      	lsrs	r2, r0
 800a4e4:	6163      	str	r3, [r4, #20]
 800a4e6:	9201      	str	r2, [sp, #4]
 800a4e8:	9b01      	ldr	r3, [sp, #4]
 800a4ea:	61a3      	str	r3, [r4, #24]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	bf14      	ite	ne
 800a4f0:	2202      	movne	r2, #2
 800a4f2:	2201      	moveq	r2, #1
 800a4f4:	6122      	str	r2, [r4, #16]
 800a4f6:	b1bd      	cbz	r5, 800a528 <__d2b+0x94>
 800a4f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a4fc:	4405      	add	r5, r0
 800a4fe:	603d      	str	r5, [r7, #0]
 800a500:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a504:	6030      	str	r0, [r6, #0]
 800a506:	4620      	mov	r0, r4
 800a508:	b003      	add	sp, #12
 800a50a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a50e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a512:	e7d6      	b.n	800a4c2 <__d2b+0x2e>
 800a514:	6161      	str	r1, [r4, #20]
 800a516:	e7e7      	b.n	800a4e8 <__d2b+0x54>
 800a518:	a801      	add	r0, sp, #4
 800a51a:	f7ff fcf1 	bl	8009f00 <__lo0bits>
 800a51e:	9b01      	ldr	r3, [sp, #4]
 800a520:	6163      	str	r3, [r4, #20]
 800a522:	3020      	adds	r0, #32
 800a524:	2201      	movs	r2, #1
 800a526:	e7e5      	b.n	800a4f4 <__d2b+0x60>
 800a528:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a52c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a530:	6038      	str	r0, [r7, #0]
 800a532:	6918      	ldr	r0, [r3, #16]
 800a534:	f7ff fcc4 	bl	8009ec0 <__hi0bits>
 800a538:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a53c:	e7e2      	b.n	800a504 <__d2b+0x70>
 800a53e:	bf00      	nop
 800a540:	0800b500 	.word	0x0800b500
 800a544:	0800b588 	.word	0x0800b588

0800a548 <__ratio>:
 800a548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	4688      	mov	r8, r1
 800a54e:	4669      	mov	r1, sp
 800a550:	4681      	mov	r9, r0
 800a552:	f7ff ff55 	bl	800a400 <__b2d>
 800a556:	a901      	add	r1, sp, #4
 800a558:	4640      	mov	r0, r8
 800a55a:	ec55 4b10 	vmov	r4, r5, d0
 800a55e:	f7ff ff4f 	bl	800a400 <__b2d>
 800a562:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a566:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a56a:	eba3 0c02 	sub.w	ip, r3, r2
 800a56e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a572:	1a9b      	subs	r3, r3, r2
 800a574:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a578:	ec51 0b10 	vmov	r0, r1, d0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	bfd6      	itet	le
 800a580:	460a      	movle	r2, r1
 800a582:	462a      	movgt	r2, r5
 800a584:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a588:	468b      	mov	fp, r1
 800a58a:	462f      	mov	r7, r5
 800a58c:	bfd4      	ite	le
 800a58e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a592:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a596:	4620      	mov	r0, r4
 800a598:	ee10 2a10 	vmov	r2, s0
 800a59c:	465b      	mov	r3, fp
 800a59e:	4639      	mov	r1, r7
 800a5a0:	f7f6 f96c 	bl	800087c <__aeabi_ddiv>
 800a5a4:	ec41 0b10 	vmov	d0, r0, r1
 800a5a8:	b003      	add	sp, #12
 800a5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5ae <__copybits>:
 800a5ae:	3901      	subs	r1, #1
 800a5b0:	b570      	push	{r4, r5, r6, lr}
 800a5b2:	1149      	asrs	r1, r1, #5
 800a5b4:	6914      	ldr	r4, [r2, #16]
 800a5b6:	3101      	adds	r1, #1
 800a5b8:	f102 0314 	add.w	r3, r2, #20
 800a5bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a5c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a5c4:	1f05      	subs	r5, r0, #4
 800a5c6:	42a3      	cmp	r3, r4
 800a5c8:	d30c      	bcc.n	800a5e4 <__copybits+0x36>
 800a5ca:	1aa3      	subs	r3, r4, r2
 800a5cc:	3b11      	subs	r3, #17
 800a5ce:	f023 0303 	bic.w	r3, r3, #3
 800a5d2:	3211      	adds	r2, #17
 800a5d4:	42a2      	cmp	r2, r4
 800a5d6:	bf88      	it	hi
 800a5d8:	2300      	movhi	r3, #0
 800a5da:	4418      	add	r0, r3
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4288      	cmp	r0, r1
 800a5e0:	d305      	bcc.n	800a5ee <__copybits+0x40>
 800a5e2:	bd70      	pop	{r4, r5, r6, pc}
 800a5e4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a5e8:	f845 6f04 	str.w	r6, [r5, #4]!
 800a5ec:	e7eb      	b.n	800a5c6 <__copybits+0x18>
 800a5ee:	f840 3b04 	str.w	r3, [r0], #4
 800a5f2:	e7f4      	b.n	800a5de <__copybits+0x30>

0800a5f4 <__any_on>:
 800a5f4:	f100 0214 	add.w	r2, r0, #20
 800a5f8:	6900      	ldr	r0, [r0, #16]
 800a5fa:	114b      	asrs	r3, r1, #5
 800a5fc:	4298      	cmp	r0, r3
 800a5fe:	b510      	push	{r4, lr}
 800a600:	db11      	blt.n	800a626 <__any_on+0x32>
 800a602:	dd0a      	ble.n	800a61a <__any_on+0x26>
 800a604:	f011 011f 	ands.w	r1, r1, #31
 800a608:	d007      	beq.n	800a61a <__any_on+0x26>
 800a60a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a60e:	fa24 f001 	lsr.w	r0, r4, r1
 800a612:	fa00 f101 	lsl.w	r1, r0, r1
 800a616:	428c      	cmp	r4, r1
 800a618:	d10b      	bne.n	800a632 <__any_on+0x3e>
 800a61a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a61e:	4293      	cmp	r3, r2
 800a620:	d803      	bhi.n	800a62a <__any_on+0x36>
 800a622:	2000      	movs	r0, #0
 800a624:	bd10      	pop	{r4, pc}
 800a626:	4603      	mov	r3, r0
 800a628:	e7f7      	b.n	800a61a <__any_on+0x26>
 800a62a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a62e:	2900      	cmp	r1, #0
 800a630:	d0f5      	beq.n	800a61e <__any_on+0x2a>
 800a632:	2001      	movs	r0, #1
 800a634:	e7f6      	b.n	800a624 <__any_on+0x30>

0800a636 <__ascii_wctomb>:
 800a636:	b149      	cbz	r1, 800a64c <__ascii_wctomb+0x16>
 800a638:	2aff      	cmp	r2, #255	; 0xff
 800a63a:	bf85      	ittet	hi
 800a63c:	238a      	movhi	r3, #138	; 0x8a
 800a63e:	6003      	strhi	r3, [r0, #0]
 800a640:	700a      	strbls	r2, [r1, #0]
 800a642:	f04f 30ff 	movhi.w	r0, #4294967295
 800a646:	bf98      	it	ls
 800a648:	2001      	movls	r0, #1
 800a64a:	4770      	bx	lr
 800a64c:	4608      	mov	r0, r1
 800a64e:	4770      	bx	lr

0800a650 <__ssputs_r>:
 800a650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a654:	688e      	ldr	r6, [r1, #8]
 800a656:	461f      	mov	r7, r3
 800a658:	42be      	cmp	r6, r7
 800a65a:	680b      	ldr	r3, [r1, #0]
 800a65c:	4682      	mov	sl, r0
 800a65e:	460c      	mov	r4, r1
 800a660:	4690      	mov	r8, r2
 800a662:	d82c      	bhi.n	800a6be <__ssputs_r+0x6e>
 800a664:	898a      	ldrh	r2, [r1, #12]
 800a666:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a66a:	d026      	beq.n	800a6ba <__ssputs_r+0x6a>
 800a66c:	6965      	ldr	r5, [r4, #20]
 800a66e:	6909      	ldr	r1, [r1, #16]
 800a670:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a674:	eba3 0901 	sub.w	r9, r3, r1
 800a678:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a67c:	1c7b      	adds	r3, r7, #1
 800a67e:	444b      	add	r3, r9
 800a680:	106d      	asrs	r5, r5, #1
 800a682:	429d      	cmp	r5, r3
 800a684:	bf38      	it	cc
 800a686:	461d      	movcc	r5, r3
 800a688:	0553      	lsls	r3, r2, #21
 800a68a:	d527      	bpl.n	800a6dc <__ssputs_r+0x8c>
 800a68c:	4629      	mov	r1, r5
 800a68e:	f7ff fa87 	bl	8009ba0 <_malloc_r>
 800a692:	4606      	mov	r6, r0
 800a694:	b360      	cbz	r0, 800a6f0 <__ssputs_r+0xa0>
 800a696:	6921      	ldr	r1, [r4, #16]
 800a698:	464a      	mov	r2, r9
 800a69a:	f7fe fea4 	bl	80093e6 <memcpy>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	6126      	str	r6, [r4, #16]
 800a6ac:	6165      	str	r5, [r4, #20]
 800a6ae:	444e      	add	r6, r9
 800a6b0:	eba5 0509 	sub.w	r5, r5, r9
 800a6b4:	6026      	str	r6, [r4, #0]
 800a6b6:	60a5      	str	r5, [r4, #8]
 800a6b8:	463e      	mov	r6, r7
 800a6ba:	42be      	cmp	r6, r7
 800a6bc:	d900      	bls.n	800a6c0 <__ssputs_r+0x70>
 800a6be:	463e      	mov	r6, r7
 800a6c0:	6820      	ldr	r0, [r4, #0]
 800a6c2:	4632      	mov	r2, r6
 800a6c4:	4641      	mov	r1, r8
 800a6c6:	f000 fb59 	bl	800ad7c <memmove>
 800a6ca:	68a3      	ldr	r3, [r4, #8]
 800a6cc:	1b9b      	subs	r3, r3, r6
 800a6ce:	60a3      	str	r3, [r4, #8]
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	4433      	add	r3, r6
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6dc:	462a      	mov	r2, r5
 800a6de:	f000 fbb3 	bl	800ae48 <_realloc_r>
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d1e0      	bne.n	800a6aa <__ssputs_r+0x5a>
 800a6e8:	6921      	ldr	r1, [r4, #16]
 800a6ea:	4650      	mov	r0, sl
 800a6ec:	f7fe fe94 	bl	8009418 <_free_r>
 800a6f0:	230c      	movs	r3, #12
 800a6f2:	f8ca 3000 	str.w	r3, [sl]
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6fc:	81a3      	strh	r3, [r4, #12]
 800a6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a702:	e7e9      	b.n	800a6d8 <__ssputs_r+0x88>

0800a704 <_svfiprintf_r>:
 800a704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	4698      	mov	r8, r3
 800a70a:	898b      	ldrh	r3, [r1, #12]
 800a70c:	061b      	lsls	r3, r3, #24
 800a70e:	b09d      	sub	sp, #116	; 0x74
 800a710:	4607      	mov	r7, r0
 800a712:	460d      	mov	r5, r1
 800a714:	4614      	mov	r4, r2
 800a716:	d50e      	bpl.n	800a736 <_svfiprintf_r+0x32>
 800a718:	690b      	ldr	r3, [r1, #16]
 800a71a:	b963      	cbnz	r3, 800a736 <_svfiprintf_r+0x32>
 800a71c:	2140      	movs	r1, #64	; 0x40
 800a71e:	f7ff fa3f 	bl	8009ba0 <_malloc_r>
 800a722:	6028      	str	r0, [r5, #0]
 800a724:	6128      	str	r0, [r5, #16]
 800a726:	b920      	cbnz	r0, 800a732 <_svfiprintf_r+0x2e>
 800a728:	230c      	movs	r3, #12
 800a72a:	603b      	str	r3, [r7, #0]
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295
 800a730:	e0d0      	b.n	800a8d4 <_svfiprintf_r+0x1d0>
 800a732:	2340      	movs	r3, #64	; 0x40
 800a734:	616b      	str	r3, [r5, #20]
 800a736:	2300      	movs	r3, #0
 800a738:	9309      	str	r3, [sp, #36]	; 0x24
 800a73a:	2320      	movs	r3, #32
 800a73c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a740:	f8cd 800c 	str.w	r8, [sp, #12]
 800a744:	2330      	movs	r3, #48	; 0x30
 800a746:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a8ec <_svfiprintf_r+0x1e8>
 800a74a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a74e:	f04f 0901 	mov.w	r9, #1
 800a752:	4623      	mov	r3, r4
 800a754:	469a      	mov	sl, r3
 800a756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a75a:	b10a      	cbz	r2, 800a760 <_svfiprintf_r+0x5c>
 800a75c:	2a25      	cmp	r2, #37	; 0x25
 800a75e:	d1f9      	bne.n	800a754 <_svfiprintf_r+0x50>
 800a760:	ebba 0b04 	subs.w	fp, sl, r4
 800a764:	d00b      	beq.n	800a77e <_svfiprintf_r+0x7a>
 800a766:	465b      	mov	r3, fp
 800a768:	4622      	mov	r2, r4
 800a76a:	4629      	mov	r1, r5
 800a76c:	4638      	mov	r0, r7
 800a76e:	f7ff ff6f 	bl	800a650 <__ssputs_r>
 800a772:	3001      	adds	r0, #1
 800a774:	f000 80a9 	beq.w	800a8ca <_svfiprintf_r+0x1c6>
 800a778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77a:	445a      	add	r2, fp
 800a77c:	9209      	str	r2, [sp, #36]	; 0x24
 800a77e:	f89a 3000 	ldrb.w	r3, [sl]
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 80a1 	beq.w	800a8ca <_svfiprintf_r+0x1c6>
 800a788:	2300      	movs	r3, #0
 800a78a:	f04f 32ff 	mov.w	r2, #4294967295
 800a78e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a792:	f10a 0a01 	add.w	sl, sl, #1
 800a796:	9304      	str	r3, [sp, #16]
 800a798:	9307      	str	r3, [sp, #28]
 800a79a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a79e:	931a      	str	r3, [sp, #104]	; 0x68
 800a7a0:	4654      	mov	r4, sl
 800a7a2:	2205      	movs	r2, #5
 800a7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a8:	4850      	ldr	r0, [pc, #320]	; (800a8ec <_svfiprintf_r+0x1e8>)
 800a7aa:	f7f5 fd31 	bl	8000210 <memchr>
 800a7ae:	9a04      	ldr	r2, [sp, #16]
 800a7b0:	b9d8      	cbnz	r0, 800a7ea <_svfiprintf_r+0xe6>
 800a7b2:	06d0      	lsls	r0, r2, #27
 800a7b4:	bf44      	itt	mi
 800a7b6:	2320      	movmi	r3, #32
 800a7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7bc:	0711      	lsls	r1, r2, #28
 800a7be:	bf44      	itt	mi
 800a7c0:	232b      	movmi	r3, #43	; 0x2b
 800a7c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a7cc:	d015      	beq.n	800a7fa <_svfiprintf_r+0xf6>
 800a7ce:	9a07      	ldr	r2, [sp, #28]
 800a7d0:	4654      	mov	r4, sl
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	f04f 0c0a 	mov.w	ip, #10
 800a7d8:	4621      	mov	r1, r4
 800a7da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7de:	3b30      	subs	r3, #48	; 0x30
 800a7e0:	2b09      	cmp	r3, #9
 800a7e2:	d94d      	bls.n	800a880 <_svfiprintf_r+0x17c>
 800a7e4:	b1b0      	cbz	r0, 800a814 <_svfiprintf_r+0x110>
 800a7e6:	9207      	str	r2, [sp, #28]
 800a7e8:	e014      	b.n	800a814 <_svfiprintf_r+0x110>
 800a7ea:	eba0 0308 	sub.w	r3, r0, r8
 800a7ee:	fa09 f303 	lsl.w	r3, r9, r3
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	9304      	str	r3, [sp, #16]
 800a7f6:	46a2      	mov	sl, r4
 800a7f8:	e7d2      	b.n	800a7a0 <_svfiprintf_r+0x9c>
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	1d19      	adds	r1, r3, #4
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	9103      	str	r1, [sp, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	bfbb      	ittet	lt
 800a806:	425b      	neglt	r3, r3
 800a808:	f042 0202 	orrlt.w	r2, r2, #2
 800a80c:	9307      	strge	r3, [sp, #28]
 800a80e:	9307      	strlt	r3, [sp, #28]
 800a810:	bfb8      	it	lt
 800a812:	9204      	strlt	r2, [sp, #16]
 800a814:	7823      	ldrb	r3, [r4, #0]
 800a816:	2b2e      	cmp	r3, #46	; 0x2e
 800a818:	d10c      	bne.n	800a834 <_svfiprintf_r+0x130>
 800a81a:	7863      	ldrb	r3, [r4, #1]
 800a81c:	2b2a      	cmp	r3, #42	; 0x2a
 800a81e:	d134      	bne.n	800a88a <_svfiprintf_r+0x186>
 800a820:	9b03      	ldr	r3, [sp, #12]
 800a822:	1d1a      	adds	r2, r3, #4
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	9203      	str	r2, [sp, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	bfb8      	it	lt
 800a82c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a830:	3402      	adds	r4, #2
 800a832:	9305      	str	r3, [sp, #20]
 800a834:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a8fc <_svfiprintf_r+0x1f8>
 800a838:	7821      	ldrb	r1, [r4, #0]
 800a83a:	2203      	movs	r2, #3
 800a83c:	4650      	mov	r0, sl
 800a83e:	f7f5 fce7 	bl	8000210 <memchr>
 800a842:	b138      	cbz	r0, 800a854 <_svfiprintf_r+0x150>
 800a844:	9b04      	ldr	r3, [sp, #16]
 800a846:	eba0 000a 	sub.w	r0, r0, sl
 800a84a:	2240      	movs	r2, #64	; 0x40
 800a84c:	4082      	lsls	r2, r0
 800a84e:	4313      	orrs	r3, r2
 800a850:	3401      	adds	r4, #1
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a858:	4825      	ldr	r0, [pc, #148]	; (800a8f0 <_svfiprintf_r+0x1ec>)
 800a85a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a85e:	2206      	movs	r2, #6
 800a860:	f7f5 fcd6 	bl	8000210 <memchr>
 800a864:	2800      	cmp	r0, #0
 800a866:	d038      	beq.n	800a8da <_svfiprintf_r+0x1d6>
 800a868:	4b22      	ldr	r3, [pc, #136]	; (800a8f4 <_svfiprintf_r+0x1f0>)
 800a86a:	bb1b      	cbnz	r3, 800a8b4 <_svfiprintf_r+0x1b0>
 800a86c:	9b03      	ldr	r3, [sp, #12]
 800a86e:	3307      	adds	r3, #7
 800a870:	f023 0307 	bic.w	r3, r3, #7
 800a874:	3308      	adds	r3, #8
 800a876:	9303      	str	r3, [sp, #12]
 800a878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87a:	4433      	add	r3, r6
 800a87c:	9309      	str	r3, [sp, #36]	; 0x24
 800a87e:	e768      	b.n	800a752 <_svfiprintf_r+0x4e>
 800a880:	fb0c 3202 	mla	r2, ip, r2, r3
 800a884:	460c      	mov	r4, r1
 800a886:	2001      	movs	r0, #1
 800a888:	e7a6      	b.n	800a7d8 <_svfiprintf_r+0xd4>
 800a88a:	2300      	movs	r3, #0
 800a88c:	3401      	adds	r4, #1
 800a88e:	9305      	str	r3, [sp, #20]
 800a890:	4619      	mov	r1, r3
 800a892:	f04f 0c0a 	mov.w	ip, #10
 800a896:	4620      	mov	r0, r4
 800a898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a89c:	3a30      	subs	r2, #48	; 0x30
 800a89e:	2a09      	cmp	r2, #9
 800a8a0:	d903      	bls.n	800a8aa <_svfiprintf_r+0x1a6>
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d0c6      	beq.n	800a834 <_svfiprintf_r+0x130>
 800a8a6:	9105      	str	r1, [sp, #20]
 800a8a8:	e7c4      	b.n	800a834 <_svfiprintf_r+0x130>
 800a8aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e7f0      	b.n	800a896 <_svfiprintf_r+0x192>
 800a8b4:	ab03      	add	r3, sp, #12
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	462a      	mov	r2, r5
 800a8ba:	4b0f      	ldr	r3, [pc, #60]	; (800a8f8 <_svfiprintf_r+0x1f4>)
 800a8bc:	a904      	add	r1, sp, #16
 800a8be:	4638      	mov	r0, r7
 800a8c0:	f3af 8000 	nop.w
 800a8c4:	1c42      	adds	r2, r0, #1
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	d1d6      	bne.n	800a878 <_svfiprintf_r+0x174>
 800a8ca:	89ab      	ldrh	r3, [r5, #12]
 800a8cc:	065b      	lsls	r3, r3, #25
 800a8ce:	f53f af2d 	bmi.w	800a72c <_svfiprintf_r+0x28>
 800a8d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8d4:	b01d      	add	sp, #116	; 0x74
 800a8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8da:	ab03      	add	r3, sp, #12
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	462a      	mov	r2, r5
 800a8e0:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <_svfiprintf_r+0x1f4>)
 800a8e2:	a904      	add	r1, sp, #16
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	f000 f879 	bl	800a9dc <_printf_i>
 800a8ea:	e7eb      	b.n	800a8c4 <_svfiprintf_r+0x1c0>
 800a8ec:	0800b7e5 	.word	0x0800b7e5
 800a8f0:	0800b7ef 	.word	0x0800b7ef
 800a8f4:	00000000 	.word	0x00000000
 800a8f8:	0800a651 	.word	0x0800a651
 800a8fc:	0800b7eb 	.word	0x0800b7eb

0800a900 <_printf_common>:
 800a900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a904:	4616      	mov	r6, r2
 800a906:	4699      	mov	r9, r3
 800a908:	688a      	ldr	r2, [r1, #8]
 800a90a:	690b      	ldr	r3, [r1, #16]
 800a90c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a910:	4293      	cmp	r3, r2
 800a912:	bfb8      	it	lt
 800a914:	4613      	movlt	r3, r2
 800a916:	6033      	str	r3, [r6, #0]
 800a918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a91c:	4607      	mov	r7, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	b10a      	cbz	r2, 800a926 <_printf_common+0x26>
 800a922:	3301      	adds	r3, #1
 800a924:	6033      	str	r3, [r6, #0]
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	0699      	lsls	r1, r3, #26
 800a92a:	bf42      	ittt	mi
 800a92c:	6833      	ldrmi	r3, [r6, #0]
 800a92e:	3302      	addmi	r3, #2
 800a930:	6033      	strmi	r3, [r6, #0]
 800a932:	6825      	ldr	r5, [r4, #0]
 800a934:	f015 0506 	ands.w	r5, r5, #6
 800a938:	d106      	bne.n	800a948 <_printf_common+0x48>
 800a93a:	f104 0a19 	add.w	sl, r4, #25
 800a93e:	68e3      	ldr	r3, [r4, #12]
 800a940:	6832      	ldr	r2, [r6, #0]
 800a942:	1a9b      	subs	r3, r3, r2
 800a944:	42ab      	cmp	r3, r5
 800a946:	dc26      	bgt.n	800a996 <_printf_common+0x96>
 800a948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a94c:	1e13      	subs	r3, r2, #0
 800a94e:	6822      	ldr	r2, [r4, #0]
 800a950:	bf18      	it	ne
 800a952:	2301      	movne	r3, #1
 800a954:	0692      	lsls	r2, r2, #26
 800a956:	d42b      	bmi.n	800a9b0 <_printf_common+0xb0>
 800a958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a95c:	4649      	mov	r1, r9
 800a95e:	4638      	mov	r0, r7
 800a960:	47c0      	blx	r8
 800a962:	3001      	adds	r0, #1
 800a964:	d01e      	beq.n	800a9a4 <_printf_common+0xa4>
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	6922      	ldr	r2, [r4, #16]
 800a96a:	f003 0306 	and.w	r3, r3, #6
 800a96e:	2b04      	cmp	r3, #4
 800a970:	bf02      	ittt	eq
 800a972:	68e5      	ldreq	r5, [r4, #12]
 800a974:	6833      	ldreq	r3, [r6, #0]
 800a976:	1aed      	subeq	r5, r5, r3
 800a978:	68a3      	ldr	r3, [r4, #8]
 800a97a:	bf0c      	ite	eq
 800a97c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a980:	2500      	movne	r5, #0
 800a982:	4293      	cmp	r3, r2
 800a984:	bfc4      	itt	gt
 800a986:	1a9b      	subgt	r3, r3, r2
 800a988:	18ed      	addgt	r5, r5, r3
 800a98a:	2600      	movs	r6, #0
 800a98c:	341a      	adds	r4, #26
 800a98e:	42b5      	cmp	r5, r6
 800a990:	d11a      	bne.n	800a9c8 <_printf_common+0xc8>
 800a992:	2000      	movs	r0, #0
 800a994:	e008      	b.n	800a9a8 <_printf_common+0xa8>
 800a996:	2301      	movs	r3, #1
 800a998:	4652      	mov	r2, sl
 800a99a:	4649      	mov	r1, r9
 800a99c:	4638      	mov	r0, r7
 800a99e:	47c0      	blx	r8
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	d103      	bne.n	800a9ac <_printf_common+0xac>
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ac:	3501      	adds	r5, #1
 800a9ae:	e7c6      	b.n	800a93e <_printf_common+0x3e>
 800a9b0:	18e1      	adds	r1, r4, r3
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	2030      	movs	r0, #48	; 0x30
 800a9b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9ba:	4422      	add	r2, r4
 800a9bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9c4:	3302      	adds	r3, #2
 800a9c6:	e7c7      	b.n	800a958 <_printf_common+0x58>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	4622      	mov	r2, r4
 800a9cc:	4649      	mov	r1, r9
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	47c0      	blx	r8
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	d0e6      	beq.n	800a9a4 <_printf_common+0xa4>
 800a9d6:	3601      	adds	r6, #1
 800a9d8:	e7d9      	b.n	800a98e <_printf_common+0x8e>
	...

0800a9dc <_printf_i>:
 800a9dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e0:	7e0f      	ldrb	r7, [r1, #24]
 800a9e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9e4:	2f78      	cmp	r7, #120	; 0x78
 800a9e6:	4691      	mov	r9, r2
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	469a      	mov	sl, r3
 800a9ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9f2:	d807      	bhi.n	800aa04 <_printf_i+0x28>
 800a9f4:	2f62      	cmp	r7, #98	; 0x62
 800a9f6:	d80a      	bhi.n	800aa0e <_printf_i+0x32>
 800a9f8:	2f00      	cmp	r7, #0
 800a9fa:	f000 80d4 	beq.w	800aba6 <_printf_i+0x1ca>
 800a9fe:	2f58      	cmp	r7, #88	; 0x58
 800aa00:	f000 80c0 	beq.w	800ab84 <_printf_i+0x1a8>
 800aa04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa0c:	e03a      	b.n	800aa84 <_printf_i+0xa8>
 800aa0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa12:	2b15      	cmp	r3, #21
 800aa14:	d8f6      	bhi.n	800aa04 <_printf_i+0x28>
 800aa16:	a101      	add	r1, pc, #4	; (adr r1, 800aa1c <_printf_i+0x40>)
 800aa18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa1c:	0800aa75 	.word	0x0800aa75
 800aa20:	0800aa89 	.word	0x0800aa89
 800aa24:	0800aa05 	.word	0x0800aa05
 800aa28:	0800aa05 	.word	0x0800aa05
 800aa2c:	0800aa05 	.word	0x0800aa05
 800aa30:	0800aa05 	.word	0x0800aa05
 800aa34:	0800aa89 	.word	0x0800aa89
 800aa38:	0800aa05 	.word	0x0800aa05
 800aa3c:	0800aa05 	.word	0x0800aa05
 800aa40:	0800aa05 	.word	0x0800aa05
 800aa44:	0800aa05 	.word	0x0800aa05
 800aa48:	0800ab8d 	.word	0x0800ab8d
 800aa4c:	0800aab5 	.word	0x0800aab5
 800aa50:	0800ab47 	.word	0x0800ab47
 800aa54:	0800aa05 	.word	0x0800aa05
 800aa58:	0800aa05 	.word	0x0800aa05
 800aa5c:	0800abaf 	.word	0x0800abaf
 800aa60:	0800aa05 	.word	0x0800aa05
 800aa64:	0800aab5 	.word	0x0800aab5
 800aa68:	0800aa05 	.word	0x0800aa05
 800aa6c:	0800aa05 	.word	0x0800aa05
 800aa70:	0800ab4f 	.word	0x0800ab4f
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	1d1a      	adds	r2, r3, #4
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	602a      	str	r2, [r5, #0]
 800aa7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa84:	2301      	movs	r3, #1
 800aa86:	e09f      	b.n	800abc8 <_printf_i+0x1ec>
 800aa88:	6820      	ldr	r0, [r4, #0]
 800aa8a:	682b      	ldr	r3, [r5, #0]
 800aa8c:	0607      	lsls	r7, r0, #24
 800aa8e:	f103 0104 	add.w	r1, r3, #4
 800aa92:	6029      	str	r1, [r5, #0]
 800aa94:	d501      	bpl.n	800aa9a <_printf_i+0xbe>
 800aa96:	681e      	ldr	r6, [r3, #0]
 800aa98:	e003      	b.n	800aaa2 <_printf_i+0xc6>
 800aa9a:	0646      	lsls	r6, r0, #25
 800aa9c:	d5fb      	bpl.n	800aa96 <_printf_i+0xba>
 800aa9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aaa2:	2e00      	cmp	r6, #0
 800aaa4:	da03      	bge.n	800aaae <_printf_i+0xd2>
 800aaa6:	232d      	movs	r3, #45	; 0x2d
 800aaa8:	4276      	negs	r6, r6
 800aaaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaae:	485a      	ldr	r0, [pc, #360]	; (800ac18 <_printf_i+0x23c>)
 800aab0:	230a      	movs	r3, #10
 800aab2:	e012      	b.n	800aada <_printf_i+0xfe>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	6820      	ldr	r0, [r4, #0]
 800aab8:	1d19      	adds	r1, r3, #4
 800aaba:	6029      	str	r1, [r5, #0]
 800aabc:	0605      	lsls	r5, r0, #24
 800aabe:	d501      	bpl.n	800aac4 <_printf_i+0xe8>
 800aac0:	681e      	ldr	r6, [r3, #0]
 800aac2:	e002      	b.n	800aaca <_printf_i+0xee>
 800aac4:	0641      	lsls	r1, r0, #25
 800aac6:	d5fb      	bpl.n	800aac0 <_printf_i+0xe4>
 800aac8:	881e      	ldrh	r6, [r3, #0]
 800aaca:	4853      	ldr	r0, [pc, #332]	; (800ac18 <_printf_i+0x23c>)
 800aacc:	2f6f      	cmp	r7, #111	; 0x6f
 800aace:	bf0c      	ite	eq
 800aad0:	2308      	moveq	r3, #8
 800aad2:	230a      	movne	r3, #10
 800aad4:	2100      	movs	r1, #0
 800aad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aada:	6865      	ldr	r5, [r4, #4]
 800aadc:	60a5      	str	r5, [r4, #8]
 800aade:	2d00      	cmp	r5, #0
 800aae0:	bfa2      	ittt	ge
 800aae2:	6821      	ldrge	r1, [r4, #0]
 800aae4:	f021 0104 	bicge.w	r1, r1, #4
 800aae8:	6021      	strge	r1, [r4, #0]
 800aaea:	b90e      	cbnz	r6, 800aaf0 <_printf_i+0x114>
 800aaec:	2d00      	cmp	r5, #0
 800aaee:	d04b      	beq.n	800ab88 <_printf_i+0x1ac>
 800aaf0:	4615      	mov	r5, r2
 800aaf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800aaf6:	fb03 6711 	mls	r7, r3, r1, r6
 800aafa:	5dc7      	ldrb	r7, [r0, r7]
 800aafc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab00:	4637      	mov	r7, r6
 800ab02:	42bb      	cmp	r3, r7
 800ab04:	460e      	mov	r6, r1
 800ab06:	d9f4      	bls.n	800aaf2 <_printf_i+0x116>
 800ab08:	2b08      	cmp	r3, #8
 800ab0a:	d10b      	bne.n	800ab24 <_printf_i+0x148>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	07de      	lsls	r6, r3, #31
 800ab10:	d508      	bpl.n	800ab24 <_printf_i+0x148>
 800ab12:	6923      	ldr	r3, [r4, #16]
 800ab14:	6861      	ldr	r1, [r4, #4]
 800ab16:	4299      	cmp	r1, r3
 800ab18:	bfde      	ittt	le
 800ab1a:	2330      	movle	r3, #48	; 0x30
 800ab1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab24:	1b52      	subs	r2, r2, r5
 800ab26:	6122      	str	r2, [r4, #16]
 800ab28:	f8cd a000 	str.w	sl, [sp]
 800ab2c:	464b      	mov	r3, r9
 800ab2e:	aa03      	add	r2, sp, #12
 800ab30:	4621      	mov	r1, r4
 800ab32:	4640      	mov	r0, r8
 800ab34:	f7ff fee4 	bl	800a900 <_printf_common>
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d14a      	bne.n	800abd2 <_printf_i+0x1f6>
 800ab3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab40:	b004      	add	sp, #16
 800ab42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	f043 0320 	orr.w	r3, r3, #32
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	4833      	ldr	r0, [pc, #204]	; (800ac1c <_printf_i+0x240>)
 800ab50:	2778      	movs	r7, #120	; 0x78
 800ab52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	6829      	ldr	r1, [r5, #0]
 800ab5a:	061f      	lsls	r7, r3, #24
 800ab5c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab60:	d402      	bmi.n	800ab68 <_printf_i+0x18c>
 800ab62:	065f      	lsls	r7, r3, #25
 800ab64:	bf48      	it	mi
 800ab66:	b2b6      	uxthmi	r6, r6
 800ab68:	07df      	lsls	r7, r3, #31
 800ab6a:	bf48      	it	mi
 800ab6c:	f043 0320 	orrmi.w	r3, r3, #32
 800ab70:	6029      	str	r1, [r5, #0]
 800ab72:	bf48      	it	mi
 800ab74:	6023      	strmi	r3, [r4, #0]
 800ab76:	b91e      	cbnz	r6, 800ab80 <_printf_i+0x1a4>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	f023 0320 	bic.w	r3, r3, #32
 800ab7e:	6023      	str	r3, [r4, #0]
 800ab80:	2310      	movs	r3, #16
 800ab82:	e7a7      	b.n	800aad4 <_printf_i+0xf8>
 800ab84:	4824      	ldr	r0, [pc, #144]	; (800ac18 <_printf_i+0x23c>)
 800ab86:	e7e4      	b.n	800ab52 <_printf_i+0x176>
 800ab88:	4615      	mov	r5, r2
 800ab8a:	e7bd      	b.n	800ab08 <_printf_i+0x12c>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	6826      	ldr	r6, [r4, #0]
 800ab90:	6961      	ldr	r1, [r4, #20]
 800ab92:	1d18      	adds	r0, r3, #4
 800ab94:	6028      	str	r0, [r5, #0]
 800ab96:	0635      	lsls	r5, r6, #24
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	d501      	bpl.n	800aba0 <_printf_i+0x1c4>
 800ab9c:	6019      	str	r1, [r3, #0]
 800ab9e:	e002      	b.n	800aba6 <_printf_i+0x1ca>
 800aba0:	0670      	lsls	r0, r6, #25
 800aba2:	d5fb      	bpl.n	800ab9c <_printf_i+0x1c0>
 800aba4:	8019      	strh	r1, [r3, #0]
 800aba6:	2300      	movs	r3, #0
 800aba8:	6123      	str	r3, [r4, #16]
 800abaa:	4615      	mov	r5, r2
 800abac:	e7bc      	b.n	800ab28 <_printf_i+0x14c>
 800abae:	682b      	ldr	r3, [r5, #0]
 800abb0:	1d1a      	adds	r2, r3, #4
 800abb2:	602a      	str	r2, [r5, #0]
 800abb4:	681d      	ldr	r5, [r3, #0]
 800abb6:	6862      	ldr	r2, [r4, #4]
 800abb8:	2100      	movs	r1, #0
 800abba:	4628      	mov	r0, r5
 800abbc:	f7f5 fb28 	bl	8000210 <memchr>
 800abc0:	b108      	cbz	r0, 800abc6 <_printf_i+0x1ea>
 800abc2:	1b40      	subs	r0, r0, r5
 800abc4:	6060      	str	r0, [r4, #4]
 800abc6:	6863      	ldr	r3, [r4, #4]
 800abc8:	6123      	str	r3, [r4, #16]
 800abca:	2300      	movs	r3, #0
 800abcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd0:	e7aa      	b.n	800ab28 <_printf_i+0x14c>
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	462a      	mov	r2, r5
 800abd6:	4649      	mov	r1, r9
 800abd8:	4640      	mov	r0, r8
 800abda:	47d0      	blx	sl
 800abdc:	3001      	adds	r0, #1
 800abde:	d0ad      	beq.n	800ab3c <_printf_i+0x160>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	079b      	lsls	r3, r3, #30
 800abe4:	d413      	bmi.n	800ac0e <_printf_i+0x232>
 800abe6:	68e0      	ldr	r0, [r4, #12]
 800abe8:	9b03      	ldr	r3, [sp, #12]
 800abea:	4298      	cmp	r0, r3
 800abec:	bfb8      	it	lt
 800abee:	4618      	movlt	r0, r3
 800abf0:	e7a6      	b.n	800ab40 <_printf_i+0x164>
 800abf2:	2301      	movs	r3, #1
 800abf4:	4632      	mov	r2, r6
 800abf6:	4649      	mov	r1, r9
 800abf8:	4640      	mov	r0, r8
 800abfa:	47d0      	blx	sl
 800abfc:	3001      	adds	r0, #1
 800abfe:	d09d      	beq.n	800ab3c <_printf_i+0x160>
 800ac00:	3501      	adds	r5, #1
 800ac02:	68e3      	ldr	r3, [r4, #12]
 800ac04:	9903      	ldr	r1, [sp, #12]
 800ac06:	1a5b      	subs	r3, r3, r1
 800ac08:	42ab      	cmp	r3, r5
 800ac0a:	dcf2      	bgt.n	800abf2 <_printf_i+0x216>
 800ac0c:	e7eb      	b.n	800abe6 <_printf_i+0x20a>
 800ac0e:	2500      	movs	r5, #0
 800ac10:	f104 0619 	add.w	r6, r4, #25
 800ac14:	e7f5      	b.n	800ac02 <_printf_i+0x226>
 800ac16:	bf00      	nop
 800ac18:	0800b7f6 	.word	0x0800b7f6
 800ac1c:	0800b807 	.word	0x0800b807

0800ac20 <__sflush_r>:
 800ac20:	898a      	ldrh	r2, [r1, #12]
 800ac22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac26:	4605      	mov	r5, r0
 800ac28:	0710      	lsls	r0, r2, #28
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	d458      	bmi.n	800ace0 <__sflush_r+0xc0>
 800ac2e:	684b      	ldr	r3, [r1, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	dc05      	bgt.n	800ac40 <__sflush_r+0x20>
 800ac34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	dc02      	bgt.n	800ac40 <__sflush_r+0x20>
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac42:	2e00      	cmp	r6, #0
 800ac44:	d0f9      	beq.n	800ac3a <__sflush_r+0x1a>
 800ac46:	2300      	movs	r3, #0
 800ac48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac4c:	682f      	ldr	r7, [r5, #0]
 800ac4e:	6a21      	ldr	r1, [r4, #32]
 800ac50:	602b      	str	r3, [r5, #0]
 800ac52:	d032      	beq.n	800acba <__sflush_r+0x9a>
 800ac54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac56:	89a3      	ldrh	r3, [r4, #12]
 800ac58:	075a      	lsls	r2, r3, #29
 800ac5a:	d505      	bpl.n	800ac68 <__sflush_r+0x48>
 800ac5c:	6863      	ldr	r3, [r4, #4]
 800ac5e:	1ac0      	subs	r0, r0, r3
 800ac60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac62:	b10b      	cbz	r3, 800ac68 <__sflush_r+0x48>
 800ac64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac66:	1ac0      	subs	r0, r0, r3
 800ac68:	2300      	movs	r3, #0
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac6e:	6a21      	ldr	r1, [r4, #32]
 800ac70:	4628      	mov	r0, r5
 800ac72:	47b0      	blx	r6
 800ac74:	1c43      	adds	r3, r0, #1
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	d106      	bne.n	800ac88 <__sflush_r+0x68>
 800ac7a:	6829      	ldr	r1, [r5, #0]
 800ac7c:	291d      	cmp	r1, #29
 800ac7e:	d82b      	bhi.n	800acd8 <__sflush_r+0xb8>
 800ac80:	4a29      	ldr	r2, [pc, #164]	; (800ad28 <__sflush_r+0x108>)
 800ac82:	410a      	asrs	r2, r1
 800ac84:	07d6      	lsls	r6, r2, #31
 800ac86:	d427      	bmi.n	800acd8 <__sflush_r+0xb8>
 800ac88:	2200      	movs	r2, #0
 800ac8a:	6062      	str	r2, [r4, #4]
 800ac8c:	04d9      	lsls	r1, r3, #19
 800ac8e:	6922      	ldr	r2, [r4, #16]
 800ac90:	6022      	str	r2, [r4, #0]
 800ac92:	d504      	bpl.n	800ac9e <__sflush_r+0x7e>
 800ac94:	1c42      	adds	r2, r0, #1
 800ac96:	d101      	bne.n	800ac9c <__sflush_r+0x7c>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	b903      	cbnz	r3, 800ac9e <__sflush_r+0x7e>
 800ac9c:	6560      	str	r0, [r4, #84]	; 0x54
 800ac9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aca0:	602f      	str	r7, [r5, #0]
 800aca2:	2900      	cmp	r1, #0
 800aca4:	d0c9      	beq.n	800ac3a <__sflush_r+0x1a>
 800aca6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acaa:	4299      	cmp	r1, r3
 800acac:	d002      	beq.n	800acb4 <__sflush_r+0x94>
 800acae:	4628      	mov	r0, r5
 800acb0:	f7fe fbb2 	bl	8009418 <_free_r>
 800acb4:	2000      	movs	r0, #0
 800acb6:	6360      	str	r0, [r4, #52]	; 0x34
 800acb8:	e7c0      	b.n	800ac3c <__sflush_r+0x1c>
 800acba:	2301      	movs	r3, #1
 800acbc:	4628      	mov	r0, r5
 800acbe:	47b0      	blx	r6
 800acc0:	1c41      	adds	r1, r0, #1
 800acc2:	d1c8      	bne.n	800ac56 <__sflush_r+0x36>
 800acc4:	682b      	ldr	r3, [r5, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0c5      	beq.n	800ac56 <__sflush_r+0x36>
 800acca:	2b1d      	cmp	r3, #29
 800accc:	d001      	beq.n	800acd2 <__sflush_r+0xb2>
 800acce:	2b16      	cmp	r3, #22
 800acd0:	d101      	bne.n	800acd6 <__sflush_r+0xb6>
 800acd2:	602f      	str	r7, [r5, #0]
 800acd4:	e7b1      	b.n	800ac3a <__sflush_r+0x1a>
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acdc:	81a3      	strh	r3, [r4, #12]
 800acde:	e7ad      	b.n	800ac3c <__sflush_r+0x1c>
 800ace0:	690f      	ldr	r7, [r1, #16]
 800ace2:	2f00      	cmp	r7, #0
 800ace4:	d0a9      	beq.n	800ac3a <__sflush_r+0x1a>
 800ace6:	0793      	lsls	r3, r2, #30
 800ace8:	680e      	ldr	r6, [r1, #0]
 800acea:	bf08      	it	eq
 800acec:	694b      	ldreq	r3, [r1, #20]
 800acee:	600f      	str	r7, [r1, #0]
 800acf0:	bf18      	it	ne
 800acf2:	2300      	movne	r3, #0
 800acf4:	eba6 0807 	sub.w	r8, r6, r7
 800acf8:	608b      	str	r3, [r1, #8]
 800acfa:	f1b8 0f00 	cmp.w	r8, #0
 800acfe:	dd9c      	ble.n	800ac3a <__sflush_r+0x1a>
 800ad00:	6a21      	ldr	r1, [r4, #32]
 800ad02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad04:	4643      	mov	r3, r8
 800ad06:	463a      	mov	r2, r7
 800ad08:	4628      	mov	r0, r5
 800ad0a:	47b0      	blx	r6
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	dc06      	bgt.n	800ad1e <__sflush_r+0xfe>
 800ad10:	89a3      	ldrh	r3, [r4, #12]
 800ad12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad16:	81a3      	strh	r3, [r4, #12]
 800ad18:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1c:	e78e      	b.n	800ac3c <__sflush_r+0x1c>
 800ad1e:	4407      	add	r7, r0
 800ad20:	eba8 0800 	sub.w	r8, r8, r0
 800ad24:	e7e9      	b.n	800acfa <__sflush_r+0xda>
 800ad26:	bf00      	nop
 800ad28:	dfbffffe 	.word	0xdfbffffe

0800ad2c <_fflush_r>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	690b      	ldr	r3, [r1, #16]
 800ad30:	4605      	mov	r5, r0
 800ad32:	460c      	mov	r4, r1
 800ad34:	b913      	cbnz	r3, 800ad3c <_fflush_r+0x10>
 800ad36:	2500      	movs	r5, #0
 800ad38:	4628      	mov	r0, r5
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	b118      	cbz	r0, 800ad46 <_fflush_r+0x1a>
 800ad3e:	6a03      	ldr	r3, [r0, #32]
 800ad40:	b90b      	cbnz	r3, 800ad46 <_fflush_r+0x1a>
 800ad42:	f7fe fa29 	bl	8009198 <__sinit>
 800ad46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d0f3      	beq.n	800ad36 <_fflush_r+0xa>
 800ad4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad50:	07d0      	lsls	r0, r2, #31
 800ad52:	d404      	bmi.n	800ad5e <_fflush_r+0x32>
 800ad54:	0599      	lsls	r1, r3, #22
 800ad56:	d402      	bmi.n	800ad5e <_fflush_r+0x32>
 800ad58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad5a:	f7fe fb42 	bl	80093e2 <__retarget_lock_acquire_recursive>
 800ad5e:	4628      	mov	r0, r5
 800ad60:	4621      	mov	r1, r4
 800ad62:	f7ff ff5d 	bl	800ac20 <__sflush_r>
 800ad66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad68:	07da      	lsls	r2, r3, #31
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	d4e4      	bmi.n	800ad38 <_fflush_r+0xc>
 800ad6e:	89a3      	ldrh	r3, [r4, #12]
 800ad70:	059b      	lsls	r3, r3, #22
 800ad72:	d4e1      	bmi.n	800ad38 <_fflush_r+0xc>
 800ad74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad76:	f7fe fb35 	bl	80093e4 <__retarget_lock_release_recursive>
 800ad7a:	e7dd      	b.n	800ad38 <_fflush_r+0xc>

0800ad7c <memmove>:
 800ad7c:	4288      	cmp	r0, r1
 800ad7e:	b510      	push	{r4, lr}
 800ad80:	eb01 0402 	add.w	r4, r1, r2
 800ad84:	d902      	bls.n	800ad8c <memmove+0x10>
 800ad86:	4284      	cmp	r4, r0
 800ad88:	4623      	mov	r3, r4
 800ad8a:	d807      	bhi.n	800ad9c <memmove+0x20>
 800ad8c:	1e43      	subs	r3, r0, #1
 800ad8e:	42a1      	cmp	r1, r4
 800ad90:	d008      	beq.n	800ada4 <memmove+0x28>
 800ad92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad9a:	e7f8      	b.n	800ad8e <memmove+0x12>
 800ad9c:	4402      	add	r2, r0
 800ad9e:	4601      	mov	r1, r0
 800ada0:	428a      	cmp	r2, r1
 800ada2:	d100      	bne.n	800ada6 <memmove+0x2a>
 800ada4:	bd10      	pop	{r4, pc}
 800ada6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adae:	e7f7      	b.n	800ada0 <memmove+0x24>

0800adb0 <_sbrk_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d06      	ldr	r5, [pc, #24]	; (800adcc <_sbrk_r+0x1c>)
 800adb4:	2300      	movs	r3, #0
 800adb6:	4604      	mov	r4, r0
 800adb8:	4608      	mov	r0, r1
 800adba:	602b      	str	r3, [r5, #0]
 800adbc:	f7f7 fe74 	bl	8002aa8 <_sbrk>
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	d102      	bne.n	800adca <_sbrk_r+0x1a>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	b103      	cbz	r3, 800adca <_sbrk_r+0x1a>
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	bd38      	pop	{r3, r4, r5, pc}
 800adcc:	200005d0 	.word	0x200005d0

0800add0 <__assert_func>:
 800add0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800add2:	4614      	mov	r4, r2
 800add4:	461a      	mov	r2, r3
 800add6:	4b09      	ldr	r3, [pc, #36]	; (800adfc <__assert_func+0x2c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4605      	mov	r5, r0
 800addc:	68d8      	ldr	r0, [r3, #12]
 800adde:	b14c      	cbz	r4, 800adf4 <__assert_func+0x24>
 800ade0:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <__assert_func+0x30>)
 800ade2:	9100      	str	r1, [sp, #0]
 800ade4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ade8:	4906      	ldr	r1, [pc, #24]	; (800ae04 <__assert_func+0x34>)
 800adea:	462b      	mov	r3, r5
 800adec:	f000 f85c 	bl	800aea8 <fiprintf>
 800adf0:	f000 f86c 	bl	800aecc <abort>
 800adf4:	4b04      	ldr	r3, [pc, #16]	; (800ae08 <__assert_func+0x38>)
 800adf6:	461c      	mov	r4, r3
 800adf8:	e7f3      	b.n	800ade2 <__assert_func+0x12>
 800adfa:	bf00      	nop
 800adfc:	20000244 	.word	0x20000244
 800ae00:	0800b818 	.word	0x0800b818
 800ae04:	0800b825 	.word	0x0800b825
 800ae08:	0800b853 	.word	0x0800b853

0800ae0c <_calloc_r>:
 800ae0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae0e:	fba1 2402 	umull	r2, r4, r1, r2
 800ae12:	b94c      	cbnz	r4, 800ae28 <_calloc_r+0x1c>
 800ae14:	4611      	mov	r1, r2
 800ae16:	9201      	str	r2, [sp, #4]
 800ae18:	f7fe fec2 	bl	8009ba0 <_malloc_r>
 800ae1c:	9a01      	ldr	r2, [sp, #4]
 800ae1e:	4605      	mov	r5, r0
 800ae20:	b930      	cbnz	r0, 800ae30 <_calloc_r+0x24>
 800ae22:	4628      	mov	r0, r5
 800ae24:	b003      	add	sp, #12
 800ae26:	bd30      	pop	{r4, r5, pc}
 800ae28:	220c      	movs	r2, #12
 800ae2a:	6002      	str	r2, [r0, #0]
 800ae2c:	2500      	movs	r5, #0
 800ae2e:	e7f8      	b.n	800ae22 <_calloc_r+0x16>
 800ae30:	4621      	mov	r1, r4
 800ae32:	f7fe fa4a 	bl	80092ca <memset>
 800ae36:	e7f4      	b.n	800ae22 <_calloc_r+0x16>

0800ae38 <malloc>:
 800ae38:	4b02      	ldr	r3, [pc, #8]	; (800ae44 <malloc+0xc>)
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	6818      	ldr	r0, [r3, #0]
 800ae3e:	f7fe beaf 	b.w	8009ba0 <_malloc_r>
 800ae42:	bf00      	nop
 800ae44:	20000244 	.word	0x20000244

0800ae48 <_realloc_r>:
 800ae48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4c:	4680      	mov	r8, r0
 800ae4e:	4614      	mov	r4, r2
 800ae50:	460e      	mov	r6, r1
 800ae52:	b921      	cbnz	r1, 800ae5e <_realloc_r+0x16>
 800ae54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae58:	4611      	mov	r1, r2
 800ae5a:	f7fe bea1 	b.w	8009ba0 <_malloc_r>
 800ae5e:	b92a      	cbnz	r2, 800ae6c <_realloc_r+0x24>
 800ae60:	f7fe fada 	bl	8009418 <_free_r>
 800ae64:	4625      	mov	r5, r4
 800ae66:	4628      	mov	r0, r5
 800ae68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae6c:	f000 f835 	bl	800aeda <_malloc_usable_size_r>
 800ae70:	4284      	cmp	r4, r0
 800ae72:	4607      	mov	r7, r0
 800ae74:	d802      	bhi.n	800ae7c <_realloc_r+0x34>
 800ae76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae7a:	d812      	bhi.n	800aea2 <_realloc_r+0x5a>
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4640      	mov	r0, r8
 800ae80:	f7fe fe8e 	bl	8009ba0 <_malloc_r>
 800ae84:	4605      	mov	r5, r0
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d0ed      	beq.n	800ae66 <_realloc_r+0x1e>
 800ae8a:	42bc      	cmp	r4, r7
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	4631      	mov	r1, r6
 800ae90:	bf28      	it	cs
 800ae92:	463a      	movcs	r2, r7
 800ae94:	f7fe faa7 	bl	80093e6 <memcpy>
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4640      	mov	r0, r8
 800ae9c:	f7fe fabc 	bl	8009418 <_free_r>
 800aea0:	e7e1      	b.n	800ae66 <_realloc_r+0x1e>
 800aea2:	4635      	mov	r5, r6
 800aea4:	e7df      	b.n	800ae66 <_realloc_r+0x1e>
	...

0800aea8 <fiprintf>:
 800aea8:	b40e      	push	{r1, r2, r3}
 800aeaa:	b503      	push	{r0, r1, lr}
 800aeac:	4601      	mov	r1, r0
 800aeae:	ab03      	add	r3, sp, #12
 800aeb0:	4805      	ldr	r0, [pc, #20]	; (800aec8 <fiprintf+0x20>)
 800aeb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb6:	6800      	ldr	r0, [r0, #0]
 800aeb8:	9301      	str	r3, [sp, #4]
 800aeba:	f000 f83f 	bl	800af3c <_vfiprintf_r>
 800aebe:	b002      	add	sp, #8
 800aec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aec4:	b003      	add	sp, #12
 800aec6:	4770      	bx	lr
 800aec8:	20000244 	.word	0x20000244

0800aecc <abort>:
 800aecc:	b508      	push	{r3, lr}
 800aece:	2006      	movs	r0, #6
 800aed0:	f000 fa0c 	bl	800b2ec <raise>
 800aed4:	2001      	movs	r0, #1
 800aed6:	f7f7 fd6f 	bl	80029b8 <_exit>

0800aeda <_malloc_usable_size_r>:
 800aeda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aede:	1f18      	subs	r0, r3, #4
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	bfbc      	itt	lt
 800aee4:	580b      	ldrlt	r3, [r1, r0]
 800aee6:	18c0      	addlt	r0, r0, r3
 800aee8:	4770      	bx	lr

0800aeea <__sfputc_r>:
 800aeea:	6893      	ldr	r3, [r2, #8]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	b410      	push	{r4}
 800aef2:	6093      	str	r3, [r2, #8]
 800aef4:	da08      	bge.n	800af08 <__sfputc_r+0x1e>
 800aef6:	6994      	ldr	r4, [r2, #24]
 800aef8:	42a3      	cmp	r3, r4
 800aefa:	db01      	blt.n	800af00 <__sfputc_r+0x16>
 800aefc:	290a      	cmp	r1, #10
 800aefe:	d103      	bne.n	800af08 <__sfputc_r+0x1e>
 800af00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af04:	f000 b934 	b.w	800b170 <__swbuf_r>
 800af08:	6813      	ldr	r3, [r2, #0]
 800af0a:	1c58      	adds	r0, r3, #1
 800af0c:	6010      	str	r0, [r2, #0]
 800af0e:	7019      	strb	r1, [r3, #0]
 800af10:	4608      	mov	r0, r1
 800af12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <__sfputs_r>:
 800af18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1a:	4606      	mov	r6, r0
 800af1c:	460f      	mov	r7, r1
 800af1e:	4614      	mov	r4, r2
 800af20:	18d5      	adds	r5, r2, r3
 800af22:	42ac      	cmp	r4, r5
 800af24:	d101      	bne.n	800af2a <__sfputs_r+0x12>
 800af26:	2000      	movs	r0, #0
 800af28:	e007      	b.n	800af3a <__sfputs_r+0x22>
 800af2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af2e:	463a      	mov	r2, r7
 800af30:	4630      	mov	r0, r6
 800af32:	f7ff ffda 	bl	800aeea <__sfputc_r>
 800af36:	1c43      	adds	r3, r0, #1
 800af38:	d1f3      	bne.n	800af22 <__sfputs_r+0xa>
 800af3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af3c <_vfiprintf_r>:
 800af3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af40:	460d      	mov	r5, r1
 800af42:	b09d      	sub	sp, #116	; 0x74
 800af44:	4614      	mov	r4, r2
 800af46:	4698      	mov	r8, r3
 800af48:	4606      	mov	r6, r0
 800af4a:	b118      	cbz	r0, 800af54 <_vfiprintf_r+0x18>
 800af4c:	6a03      	ldr	r3, [r0, #32]
 800af4e:	b90b      	cbnz	r3, 800af54 <_vfiprintf_r+0x18>
 800af50:	f7fe f922 	bl	8009198 <__sinit>
 800af54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af56:	07d9      	lsls	r1, r3, #31
 800af58:	d405      	bmi.n	800af66 <_vfiprintf_r+0x2a>
 800af5a:	89ab      	ldrh	r3, [r5, #12]
 800af5c:	059a      	lsls	r2, r3, #22
 800af5e:	d402      	bmi.n	800af66 <_vfiprintf_r+0x2a>
 800af60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af62:	f7fe fa3e 	bl	80093e2 <__retarget_lock_acquire_recursive>
 800af66:	89ab      	ldrh	r3, [r5, #12]
 800af68:	071b      	lsls	r3, r3, #28
 800af6a:	d501      	bpl.n	800af70 <_vfiprintf_r+0x34>
 800af6c:	692b      	ldr	r3, [r5, #16]
 800af6e:	b99b      	cbnz	r3, 800af98 <_vfiprintf_r+0x5c>
 800af70:	4629      	mov	r1, r5
 800af72:	4630      	mov	r0, r6
 800af74:	f000 f93a 	bl	800b1ec <__swsetup_r>
 800af78:	b170      	cbz	r0, 800af98 <_vfiprintf_r+0x5c>
 800af7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af7c:	07dc      	lsls	r4, r3, #31
 800af7e:	d504      	bpl.n	800af8a <_vfiprintf_r+0x4e>
 800af80:	f04f 30ff 	mov.w	r0, #4294967295
 800af84:	b01d      	add	sp, #116	; 0x74
 800af86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8a:	89ab      	ldrh	r3, [r5, #12]
 800af8c:	0598      	lsls	r0, r3, #22
 800af8e:	d4f7      	bmi.n	800af80 <_vfiprintf_r+0x44>
 800af90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af92:	f7fe fa27 	bl	80093e4 <__retarget_lock_release_recursive>
 800af96:	e7f3      	b.n	800af80 <_vfiprintf_r+0x44>
 800af98:	2300      	movs	r3, #0
 800af9a:	9309      	str	r3, [sp, #36]	; 0x24
 800af9c:	2320      	movs	r3, #32
 800af9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afa2:	f8cd 800c 	str.w	r8, [sp, #12]
 800afa6:	2330      	movs	r3, #48	; 0x30
 800afa8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b15c <_vfiprintf_r+0x220>
 800afac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afb0:	f04f 0901 	mov.w	r9, #1
 800afb4:	4623      	mov	r3, r4
 800afb6:	469a      	mov	sl, r3
 800afb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afbc:	b10a      	cbz	r2, 800afc2 <_vfiprintf_r+0x86>
 800afbe:	2a25      	cmp	r2, #37	; 0x25
 800afc0:	d1f9      	bne.n	800afb6 <_vfiprintf_r+0x7a>
 800afc2:	ebba 0b04 	subs.w	fp, sl, r4
 800afc6:	d00b      	beq.n	800afe0 <_vfiprintf_r+0xa4>
 800afc8:	465b      	mov	r3, fp
 800afca:	4622      	mov	r2, r4
 800afcc:	4629      	mov	r1, r5
 800afce:	4630      	mov	r0, r6
 800afd0:	f7ff ffa2 	bl	800af18 <__sfputs_r>
 800afd4:	3001      	adds	r0, #1
 800afd6:	f000 80a9 	beq.w	800b12c <_vfiprintf_r+0x1f0>
 800afda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afdc:	445a      	add	r2, fp
 800afde:	9209      	str	r2, [sp, #36]	; 0x24
 800afe0:	f89a 3000 	ldrb.w	r3, [sl]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f000 80a1 	beq.w	800b12c <_vfiprintf_r+0x1f0>
 800afea:	2300      	movs	r3, #0
 800afec:	f04f 32ff 	mov.w	r2, #4294967295
 800aff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aff4:	f10a 0a01 	add.w	sl, sl, #1
 800aff8:	9304      	str	r3, [sp, #16]
 800affa:	9307      	str	r3, [sp, #28]
 800affc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b000:	931a      	str	r3, [sp, #104]	; 0x68
 800b002:	4654      	mov	r4, sl
 800b004:	2205      	movs	r2, #5
 800b006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b00a:	4854      	ldr	r0, [pc, #336]	; (800b15c <_vfiprintf_r+0x220>)
 800b00c:	f7f5 f900 	bl	8000210 <memchr>
 800b010:	9a04      	ldr	r2, [sp, #16]
 800b012:	b9d8      	cbnz	r0, 800b04c <_vfiprintf_r+0x110>
 800b014:	06d1      	lsls	r1, r2, #27
 800b016:	bf44      	itt	mi
 800b018:	2320      	movmi	r3, #32
 800b01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b01e:	0713      	lsls	r3, r2, #28
 800b020:	bf44      	itt	mi
 800b022:	232b      	movmi	r3, #43	; 0x2b
 800b024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b028:	f89a 3000 	ldrb.w	r3, [sl]
 800b02c:	2b2a      	cmp	r3, #42	; 0x2a
 800b02e:	d015      	beq.n	800b05c <_vfiprintf_r+0x120>
 800b030:	9a07      	ldr	r2, [sp, #28]
 800b032:	4654      	mov	r4, sl
 800b034:	2000      	movs	r0, #0
 800b036:	f04f 0c0a 	mov.w	ip, #10
 800b03a:	4621      	mov	r1, r4
 800b03c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b040:	3b30      	subs	r3, #48	; 0x30
 800b042:	2b09      	cmp	r3, #9
 800b044:	d94d      	bls.n	800b0e2 <_vfiprintf_r+0x1a6>
 800b046:	b1b0      	cbz	r0, 800b076 <_vfiprintf_r+0x13a>
 800b048:	9207      	str	r2, [sp, #28]
 800b04a:	e014      	b.n	800b076 <_vfiprintf_r+0x13a>
 800b04c:	eba0 0308 	sub.w	r3, r0, r8
 800b050:	fa09 f303 	lsl.w	r3, r9, r3
 800b054:	4313      	orrs	r3, r2
 800b056:	9304      	str	r3, [sp, #16]
 800b058:	46a2      	mov	sl, r4
 800b05a:	e7d2      	b.n	800b002 <_vfiprintf_r+0xc6>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	1d19      	adds	r1, r3, #4
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	9103      	str	r1, [sp, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	bfbb      	ittet	lt
 800b068:	425b      	neglt	r3, r3
 800b06a:	f042 0202 	orrlt.w	r2, r2, #2
 800b06e:	9307      	strge	r3, [sp, #28]
 800b070:	9307      	strlt	r3, [sp, #28]
 800b072:	bfb8      	it	lt
 800b074:	9204      	strlt	r2, [sp, #16]
 800b076:	7823      	ldrb	r3, [r4, #0]
 800b078:	2b2e      	cmp	r3, #46	; 0x2e
 800b07a:	d10c      	bne.n	800b096 <_vfiprintf_r+0x15a>
 800b07c:	7863      	ldrb	r3, [r4, #1]
 800b07e:	2b2a      	cmp	r3, #42	; 0x2a
 800b080:	d134      	bne.n	800b0ec <_vfiprintf_r+0x1b0>
 800b082:	9b03      	ldr	r3, [sp, #12]
 800b084:	1d1a      	adds	r2, r3, #4
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	9203      	str	r2, [sp, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	bfb8      	it	lt
 800b08e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b092:	3402      	adds	r4, #2
 800b094:	9305      	str	r3, [sp, #20]
 800b096:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b16c <_vfiprintf_r+0x230>
 800b09a:	7821      	ldrb	r1, [r4, #0]
 800b09c:	2203      	movs	r2, #3
 800b09e:	4650      	mov	r0, sl
 800b0a0:	f7f5 f8b6 	bl	8000210 <memchr>
 800b0a4:	b138      	cbz	r0, 800b0b6 <_vfiprintf_r+0x17a>
 800b0a6:	9b04      	ldr	r3, [sp, #16]
 800b0a8:	eba0 000a 	sub.w	r0, r0, sl
 800b0ac:	2240      	movs	r2, #64	; 0x40
 800b0ae:	4082      	lsls	r2, r0
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	3401      	adds	r4, #1
 800b0b4:	9304      	str	r3, [sp, #16]
 800b0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ba:	4829      	ldr	r0, [pc, #164]	; (800b160 <_vfiprintf_r+0x224>)
 800b0bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0c0:	2206      	movs	r2, #6
 800b0c2:	f7f5 f8a5 	bl	8000210 <memchr>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d03f      	beq.n	800b14a <_vfiprintf_r+0x20e>
 800b0ca:	4b26      	ldr	r3, [pc, #152]	; (800b164 <_vfiprintf_r+0x228>)
 800b0cc:	bb1b      	cbnz	r3, 800b116 <_vfiprintf_r+0x1da>
 800b0ce:	9b03      	ldr	r3, [sp, #12]
 800b0d0:	3307      	adds	r3, #7
 800b0d2:	f023 0307 	bic.w	r3, r3, #7
 800b0d6:	3308      	adds	r3, #8
 800b0d8:	9303      	str	r3, [sp, #12]
 800b0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0dc:	443b      	add	r3, r7
 800b0de:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e0:	e768      	b.n	800afb4 <_vfiprintf_r+0x78>
 800b0e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	2001      	movs	r0, #1
 800b0ea:	e7a6      	b.n	800b03a <_vfiprintf_r+0xfe>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	3401      	adds	r4, #1
 800b0f0:	9305      	str	r3, [sp, #20]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	f04f 0c0a 	mov.w	ip, #10
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0fe:	3a30      	subs	r2, #48	; 0x30
 800b100:	2a09      	cmp	r2, #9
 800b102:	d903      	bls.n	800b10c <_vfiprintf_r+0x1d0>
 800b104:	2b00      	cmp	r3, #0
 800b106:	d0c6      	beq.n	800b096 <_vfiprintf_r+0x15a>
 800b108:	9105      	str	r1, [sp, #20]
 800b10a:	e7c4      	b.n	800b096 <_vfiprintf_r+0x15a>
 800b10c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b110:	4604      	mov	r4, r0
 800b112:	2301      	movs	r3, #1
 800b114:	e7f0      	b.n	800b0f8 <_vfiprintf_r+0x1bc>
 800b116:	ab03      	add	r3, sp, #12
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	462a      	mov	r2, r5
 800b11c:	4b12      	ldr	r3, [pc, #72]	; (800b168 <_vfiprintf_r+0x22c>)
 800b11e:	a904      	add	r1, sp, #16
 800b120:	4630      	mov	r0, r6
 800b122:	f3af 8000 	nop.w
 800b126:	4607      	mov	r7, r0
 800b128:	1c78      	adds	r0, r7, #1
 800b12a:	d1d6      	bne.n	800b0da <_vfiprintf_r+0x19e>
 800b12c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b12e:	07d9      	lsls	r1, r3, #31
 800b130:	d405      	bmi.n	800b13e <_vfiprintf_r+0x202>
 800b132:	89ab      	ldrh	r3, [r5, #12]
 800b134:	059a      	lsls	r2, r3, #22
 800b136:	d402      	bmi.n	800b13e <_vfiprintf_r+0x202>
 800b138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b13a:	f7fe f953 	bl	80093e4 <__retarget_lock_release_recursive>
 800b13e:	89ab      	ldrh	r3, [r5, #12]
 800b140:	065b      	lsls	r3, r3, #25
 800b142:	f53f af1d 	bmi.w	800af80 <_vfiprintf_r+0x44>
 800b146:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b148:	e71c      	b.n	800af84 <_vfiprintf_r+0x48>
 800b14a:	ab03      	add	r3, sp, #12
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	462a      	mov	r2, r5
 800b150:	4b05      	ldr	r3, [pc, #20]	; (800b168 <_vfiprintf_r+0x22c>)
 800b152:	a904      	add	r1, sp, #16
 800b154:	4630      	mov	r0, r6
 800b156:	f7ff fc41 	bl	800a9dc <_printf_i>
 800b15a:	e7e4      	b.n	800b126 <_vfiprintf_r+0x1ea>
 800b15c:	0800b7e5 	.word	0x0800b7e5
 800b160:	0800b7ef 	.word	0x0800b7ef
 800b164:	00000000 	.word	0x00000000
 800b168:	0800af19 	.word	0x0800af19
 800b16c:	0800b7eb 	.word	0x0800b7eb

0800b170 <__swbuf_r>:
 800b170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b172:	460e      	mov	r6, r1
 800b174:	4614      	mov	r4, r2
 800b176:	4605      	mov	r5, r0
 800b178:	b118      	cbz	r0, 800b182 <__swbuf_r+0x12>
 800b17a:	6a03      	ldr	r3, [r0, #32]
 800b17c:	b90b      	cbnz	r3, 800b182 <__swbuf_r+0x12>
 800b17e:	f7fe f80b 	bl	8009198 <__sinit>
 800b182:	69a3      	ldr	r3, [r4, #24]
 800b184:	60a3      	str	r3, [r4, #8]
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	071a      	lsls	r2, r3, #28
 800b18a:	d525      	bpl.n	800b1d8 <__swbuf_r+0x68>
 800b18c:	6923      	ldr	r3, [r4, #16]
 800b18e:	b31b      	cbz	r3, 800b1d8 <__swbuf_r+0x68>
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	6922      	ldr	r2, [r4, #16]
 800b194:	1a98      	subs	r0, r3, r2
 800b196:	6963      	ldr	r3, [r4, #20]
 800b198:	b2f6      	uxtb	r6, r6
 800b19a:	4283      	cmp	r3, r0
 800b19c:	4637      	mov	r7, r6
 800b19e:	dc04      	bgt.n	800b1aa <__swbuf_r+0x3a>
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f7ff fdc2 	bl	800ad2c <_fflush_r>
 800b1a8:	b9e0      	cbnz	r0, 800b1e4 <__swbuf_r+0x74>
 800b1aa:	68a3      	ldr	r3, [r4, #8]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	60a3      	str	r3, [r4, #8]
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	6022      	str	r2, [r4, #0]
 800b1b6:	701e      	strb	r6, [r3, #0]
 800b1b8:	6962      	ldr	r2, [r4, #20]
 800b1ba:	1c43      	adds	r3, r0, #1
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d004      	beq.n	800b1ca <__swbuf_r+0x5a>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	07db      	lsls	r3, r3, #31
 800b1c4:	d506      	bpl.n	800b1d4 <__swbuf_r+0x64>
 800b1c6:	2e0a      	cmp	r6, #10
 800b1c8:	d104      	bne.n	800b1d4 <__swbuf_r+0x64>
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	f7ff fdad 	bl	800ad2c <_fflush_r>
 800b1d2:	b938      	cbnz	r0, 800b1e4 <__swbuf_r+0x74>
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d8:	4621      	mov	r1, r4
 800b1da:	4628      	mov	r0, r5
 800b1dc:	f000 f806 	bl	800b1ec <__swsetup_r>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	d0d5      	beq.n	800b190 <__swbuf_r+0x20>
 800b1e4:	f04f 37ff 	mov.w	r7, #4294967295
 800b1e8:	e7f4      	b.n	800b1d4 <__swbuf_r+0x64>
	...

0800b1ec <__swsetup_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4b2a      	ldr	r3, [pc, #168]	; (800b298 <__swsetup_r+0xac>)
 800b1f0:	4605      	mov	r5, r0
 800b1f2:	6818      	ldr	r0, [r3, #0]
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	b118      	cbz	r0, 800b200 <__swsetup_r+0x14>
 800b1f8:	6a03      	ldr	r3, [r0, #32]
 800b1fa:	b90b      	cbnz	r3, 800b200 <__swsetup_r+0x14>
 800b1fc:	f7fd ffcc 	bl	8009198 <__sinit>
 800b200:	89a3      	ldrh	r3, [r4, #12]
 800b202:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b206:	0718      	lsls	r0, r3, #28
 800b208:	d422      	bmi.n	800b250 <__swsetup_r+0x64>
 800b20a:	06d9      	lsls	r1, r3, #27
 800b20c:	d407      	bmi.n	800b21e <__swsetup_r+0x32>
 800b20e:	2309      	movs	r3, #9
 800b210:	602b      	str	r3, [r5, #0]
 800b212:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b216:	81a3      	strh	r3, [r4, #12]
 800b218:	f04f 30ff 	mov.w	r0, #4294967295
 800b21c:	e034      	b.n	800b288 <__swsetup_r+0x9c>
 800b21e:	0758      	lsls	r0, r3, #29
 800b220:	d512      	bpl.n	800b248 <__swsetup_r+0x5c>
 800b222:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b224:	b141      	cbz	r1, 800b238 <__swsetup_r+0x4c>
 800b226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b22a:	4299      	cmp	r1, r3
 800b22c:	d002      	beq.n	800b234 <__swsetup_r+0x48>
 800b22e:	4628      	mov	r0, r5
 800b230:	f7fe f8f2 	bl	8009418 <_free_r>
 800b234:	2300      	movs	r3, #0
 800b236:	6363      	str	r3, [r4, #52]	; 0x34
 800b238:	89a3      	ldrh	r3, [r4, #12]
 800b23a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b23e:	81a3      	strh	r3, [r4, #12]
 800b240:	2300      	movs	r3, #0
 800b242:	6063      	str	r3, [r4, #4]
 800b244:	6923      	ldr	r3, [r4, #16]
 800b246:	6023      	str	r3, [r4, #0]
 800b248:	89a3      	ldrh	r3, [r4, #12]
 800b24a:	f043 0308 	orr.w	r3, r3, #8
 800b24e:	81a3      	strh	r3, [r4, #12]
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	b94b      	cbnz	r3, 800b268 <__swsetup_r+0x7c>
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b25a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b25e:	d003      	beq.n	800b268 <__swsetup_r+0x7c>
 800b260:	4621      	mov	r1, r4
 800b262:	4628      	mov	r0, r5
 800b264:	f000 f884 	bl	800b370 <__smakebuf_r>
 800b268:	89a0      	ldrh	r0, [r4, #12]
 800b26a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b26e:	f010 0301 	ands.w	r3, r0, #1
 800b272:	d00a      	beq.n	800b28a <__swsetup_r+0x9e>
 800b274:	2300      	movs	r3, #0
 800b276:	60a3      	str	r3, [r4, #8]
 800b278:	6963      	ldr	r3, [r4, #20]
 800b27a:	425b      	negs	r3, r3
 800b27c:	61a3      	str	r3, [r4, #24]
 800b27e:	6923      	ldr	r3, [r4, #16]
 800b280:	b943      	cbnz	r3, 800b294 <__swsetup_r+0xa8>
 800b282:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b286:	d1c4      	bne.n	800b212 <__swsetup_r+0x26>
 800b288:	bd38      	pop	{r3, r4, r5, pc}
 800b28a:	0781      	lsls	r1, r0, #30
 800b28c:	bf58      	it	pl
 800b28e:	6963      	ldrpl	r3, [r4, #20]
 800b290:	60a3      	str	r3, [r4, #8]
 800b292:	e7f4      	b.n	800b27e <__swsetup_r+0x92>
 800b294:	2000      	movs	r0, #0
 800b296:	e7f7      	b.n	800b288 <__swsetup_r+0x9c>
 800b298:	20000244 	.word	0x20000244

0800b29c <_raise_r>:
 800b29c:	291f      	cmp	r1, #31
 800b29e:	b538      	push	{r3, r4, r5, lr}
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	460d      	mov	r5, r1
 800b2a4:	d904      	bls.n	800b2b0 <_raise_r+0x14>
 800b2a6:	2316      	movs	r3, #22
 800b2a8:	6003      	str	r3, [r0, #0]
 800b2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b2b2:	b112      	cbz	r2, 800b2ba <_raise_r+0x1e>
 800b2b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2b8:	b94b      	cbnz	r3, 800b2ce <_raise_r+0x32>
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 f830 	bl	800b320 <_getpid_r>
 800b2c0:	462a      	mov	r2, r5
 800b2c2:	4601      	mov	r1, r0
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2ca:	f000 b817 	b.w	800b2fc <_kill_r>
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d00a      	beq.n	800b2e8 <_raise_r+0x4c>
 800b2d2:	1c59      	adds	r1, r3, #1
 800b2d4:	d103      	bne.n	800b2de <_raise_r+0x42>
 800b2d6:	2316      	movs	r3, #22
 800b2d8:	6003      	str	r3, [r0, #0]
 800b2da:	2001      	movs	r0, #1
 800b2dc:	e7e7      	b.n	800b2ae <_raise_r+0x12>
 800b2de:	2400      	movs	r4, #0
 800b2e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	4798      	blx	r3
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e7e0      	b.n	800b2ae <_raise_r+0x12>

0800b2ec <raise>:
 800b2ec:	4b02      	ldr	r3, [pc, #8]	; (800b2f8 <raise+0xc>)
 800b2ee:	4601      	mov	r1, r0
 800b2f0:	6818      	ldr	r0, [r3, #0]
 800b2f2:	f7ff bfd3 	b.w	800b29c <_raise_r>
 800b2f6:	bf00      	nop
 800b2f8:	20000244 	.word	0x20000244

0800b2fc <_kill_r>:
 800b2fc:	b538      	push	{r3, r4, r5, lr}
 800b2fe:	4d07      	ldr	r5, [pc, #28]	; (800b31c <_kill_r+0x20>)
 800b300:	2300      	movs	r3, #0
 800b302:	4604      	mov	r4, r0
 800b304:	4608      	mov	r0, r1
 800b306:	4611      	mov	r1, r2
 800b308:	602b      	str	r3, [r5, #0]
 800b30a:	f7f7 fb45 	bl	8002998 <_kill>
 800b30e:	1c43      	adds	r3, r0, #1
 800b310:	d102      	bne.n	800b318 <_kill_r+0x1c>
 800b312:	682b      	ldr	r3, [r5, #0]
 800b314:	b103      	cbz	r3, 800b318 <_kill_r+0x1c>
 800b316:	6023      	str	r3, [r4, #0]
 800b318:	bd38      	pop	{r3, r4, r5, pc}
 800b31a:	bf00      	nop
 800b31c:	200005d0 	.word	0x200005d0

0800b320 <_getpid_r>:
 800b320:	f7f7 bb32 	b.w	8002988 <_getpid>

0800b324 <__swhatbuf_r>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	460c      	mov	r4, r1
 800b328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b32c:	2900      	cmp	r1, #0
 800b32e:	b096      	sub	sp, #88	; 0x58
 800b330:	4615      	mov	r5, r2
 800b332:	461e      	mov	r6, r3
 800b334:	da0d      	bge.n	800b352 <__swhatbuf_r+0x2e>
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b33c:	f04f 0100 	mov.w	r1, #0
 800b340:	bf0c      	ite	eq
 800b342:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b346:	2340      	movne	r3, #64	; 0x40
 800b348:	2000      	movs	r0, #0
 800b34a:	6031      	str	r1, [r6, #0]
 800b34c:	602b      	str	r3, [r5, #0]
 800b34e:	b016      	add	sp, #88	; 0x58
 800b350:	bd70      	pop	{r4, r5, r6, pc}
 800b352:	466a      	mov	r2, sp
 800b354:	f000 f848 	bl	800b3e8 <_fstat_r>
 800b358:	2800      	cmp	r0, #0
 800b35a:	dbec      	blt.n	800b336 <__swhatbuf_r+0x12>
 800b35c:	9901      	ldr	r1, [sp, #4]
 800b35e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b362:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b366:	4259      	negs	r1, r3
 800b368:	4159      	adcs	r1, r3
 800b36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b36e:	e7eb      	b.n	800b348 <__swhatbuf_r+0x24>

0800b370 <__smakebuf_r>:
 800b370:	898b      	ldrh	r3, [r1, #12]
 800b372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b374:	079d      	lsls	r5, r3, #30
 800b376:	4606      	mov	r6, r0
 800b378:	460c      	mov	r4, r1
 800b37a:	d507      	bpl.n	800b38c <__smakebuf_r+0x1c>
 800b37c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	6123      	str	r3, [r4, #16]
 800b384:	2301      	movs	r3, #1
 800b386:	6163      	str	r3, [r4, #20]
 800b388:	b002      	add	sp, #8
 800b38a:	bd70      	pop	{r4, r5, r6, pc}
 800b38c:	ab01      	add	r3, sp, #4
 800b38e:	466a      	mov	r2, sp
 800b390:	f7ff ffc8 	bl	800b324 <__swhatbuf_r>
 800b394:	9900      	ldr	r1, [sp, #0]
 800b396:	4605      	mov	r5, r0
 800b398:	4630      	mov	r0, r6
 800b39a:	f7fe fc01 	bl	8009ba0 <_malloc_r>
 800b39e:	b948      	cbnz	r0, 800b3b4 <__smakebuf_r+0x44>
 800b3a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a4:	059a      	lsls	r2, r3, #22
 800b3a6:	d4ef      	bmi.n	800b388 <__smakebuf_r+0x18>
 800b3a8:	f023 0303 	bic.w	r3, r3, #3
 800b3ac:	f043 0302 	orr.w	r3, r3, #2
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	e7e3      	b.n	800b37c <__smakebuf_r+0xc>
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	6020      	str	r0, [r4, #0]
 800b3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3bc:	81a3      	strh	r3, [r4, #12]
 800b3be:	9b00      	ldr	r3, [sp, #0]
 800b3c0:	6163      	str	r3, [r4, #20]
 800b3c2:	9b01      	ldr	r3, [sp, #4]
 800b3c4:	6120      	str	r0, [r4, #16]
 800b3c6:	b15b      	cbz	r3, 800b3e0 <__smakebuf_r+0x70>
 800b3c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	f000 f81d 	bl	800b40c <_isatty_r>
 800b3d2:	b128      	cbz	r0, 800b3e0 <__smakebuf_r+0x70>
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	f023 0303 	bic.w	r3, r3, #3
 800b3da:	f043 0301 	orr.w	r3, r3, #1
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	431d      	orrs	r5, r3
 800b3e4:	81a5      	strh	r5, [r4, #12]
 800b3e6:	e7cf      	b.n	800b388 <__smakebuf_r+0x18>

0800b3e8 <_fstat_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4d07      	ldr	r5, [pc, #28]	; (800b408 <_fstat_r+0x20>)
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	4611      	mov	r1, r2
 800b3f4:	602b      	str	r3, [r5, #0]
 800b3f6:	f7f7 fb2e 	bl	8002a56 <_fstat>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	d102      	bne.n	800b404 <_fstat_r+0x1c>
 800b3fe:	682b      	ldr	r3, [r5, #0]
 800b400:	b103      	cbz	r3, 800b404 <_fstat_r+0x1c>
 800b402:	6023      	str	r3, [r4, #0]
 800b404:	bd38      	pop	{r3, r4, r5, pc}
 800b406:	bf00      	nop
 800b408:	200005d0 	.word	0x200005d0

0800b40c <_isatty_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	4d06      	ldr	r5, [pc, #24]	; (800b428 <_isatty_r+0x1c>)
 800b410:	2300      	movs	r3, #0
 800b412:	4604      	mov	r4, r0
 800b414:	4608      	mov	r0, r1
 800b416:	602b      	str	r3, [r5, #0]
 800b418:	f7f7 fb2d 	bl	8002a76 <_isatty>
 800b41c:	1c43      	adds	r3, r0, #1
 800b41e:	d102      	bne.n	800b426 <_isatty_r+0x1a>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	b103      	cbz	r3, 800b426 <_isatty_r+0x1a>
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	bd38      	pop	{r3, r4, r5, pc}
 800b428:	200005d0 	.word	0x200005d0

0800b42c <_init>:
 800b42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42e:	bf00      	nop
 800b430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b432:	bc08      	pop	{r3}
 800b434:	469e      	mov	lr, r3
 800b436:	4770      	bx	lr

0800b438 <_fini>:
 800b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43a:	bf00      	nop
 800b43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b43e:	bc08      	pop	{r3}
 800b440:	469e      	mov	lr, r3
 800b442:	4770      	bx	lr
