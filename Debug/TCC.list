
TCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000780c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080079d4  080079d4  000179d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a20  08007a20  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a28  08007a28  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a2c  08007a2c  00017a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000006c  08007a9c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08007a9c  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d51  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e91  00000000  00000000  00034e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00037cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7f  00000000  00000000  00038e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a14  00000000  00000000  00039b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b56  00000000  00000000  000615b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4d15  00000000  00000000  00078109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049b8  00000000  00000000  0016ce20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001717d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080079bc 	.word	0x080079bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000070 	.word	0x20000070
 8000204:	080079bc 	.word	0x080079bc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b970 	b.w	8000e9c <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4694      	mov	ip, r2
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0xe2>
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	b143      	cbz	r3, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf4:	f1c3 0220 	rsb	r2, r3, #32
 8000bf8:	409f      	lsls	r7, r3
 8000bfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c06:	fa1f f58c 	uxth.w	r5, ip
 8000c0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0e:	0c22      	lsrs	r2, r4, #16
 8000c10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c18:	fb01 f005 	mul.w	r0, r1, r5
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c20:	eb1c 0202 	adds.w	r2, ip, r2
 8000c24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c28:	f080 811c 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	f240 8119 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c32:	3902      	subs	r1, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c46:	fb00 f505 	mul.w	r5, r0, r5
 8000c4a:	42a5      	cmp	r5, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x90>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x294>
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x294>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11e      	cbz	r6, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	e9c6 4300 	strd	r4, r3, [r6]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0xbc>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80ed 	beq.w	8000e5e <__udivmoddi4+0x28a>
 8000c84:	2100      	movs	r1, #0
 8000c86:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d149      	bne.n	8000d2c <__udivmoddi4+0x158>
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d302      	bcc.n	8000ca2 <__udivmoddi4+0xce>
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	f200 80f8 	bhi.w	8000e92 <__udivmoddi4+0x2be>
 8000ca2:	1a84      	subs	r4, r0, r2
 8000ca4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4617      	mov	r7, r2
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d0e2      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb4:	e7df      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xe6>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd8:	0c22      	lsrs	r2, r4, #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb0e f005 	mul.w	r0, lr, r5
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2b8>
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	1a12      	subs	r2, r2, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d00:	fb07 2210 	mls	r2, r7, r0, r2
 8000d04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x14e>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x14c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2c2>
 8000d20:	4610      	mov	r0, r2
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2a:	e79f      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d2c:	f1c1 0720 	rsb	r7, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d42:	40fd      	lsrs	r5, r7
 8000d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	fb09 5518 	mls	r5, r9, r8, r5
 8000d56:	0c1c      	lsrs	r4, r3, #16
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2b4>
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2b4>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4464      	add	r4, ip
 8000d84:	1b64      	subs	r4, r4, r5
 8000d86:	b29d      	uxth	r5, r3
 8000d88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2ac>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2ac>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	4464      	add	r4, ip
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fba3 9502 	umull	r9, r5, r3, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46ae      	mov	lr, r5
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x29c>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x298>
 8000dc4:	b156      	cbz	r6, 8000ddc <__udivmoddi4+0x208>
 8000dc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dca:	eb64 040e 	sbc.w	r4, r4, lr
 8000dce:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	f1c3 0120 	rsb	r1, r3, #32
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	fa20 f201 	lsr.w	r2, r0, r1
 8000df0:	fa25 f101 	lsr.w	r1, r5, r1
 8000df4:	409d      	lsls	r5, r3
 8000df6:	432a      	orrs	r2, r5
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1510 	mls	r5, r7, r0, r1
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e12:	428d      	cmp	r5, r1
 8000e14:	fa04 f403 	lsl.w	r4, r4, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x258>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b0>
 8000e24:	428d      	cmp	r5, r1
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b0>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4461      	add	r1, ip
 8000e2c:	1b49      	subs	r1, r1, r5
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e34:	fb07 1115 	mls	r1, r7, r5, r1
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x282>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000e4e:	4291      	cmp	r1, r2
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000e52:	3d02      	subs	r5, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0xfc>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000e64:	4639      	mov	r1, r7
 8000e66:	e6e6      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x90>
 8000e6c:	4548      	cmp	r0, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7c:	4645      	mov	r5, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e80:	462b      	mov	r3, r5
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x258>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8c:	3d02      	subs	r5, #2
 8000e8e:	4462      	add	r2, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e70a      	b.n	8000cac <__udivmoddi4+0xd8>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x14e>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 fa47 	bl	800133c <null_ptr_check>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d117      	bne.n	8000eea <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	20d0      	movs	r0, #208	; 0xd0
 8000ec2:	f000 f818 	bl	8000ef6 <bmp2_get_regs>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10b      	bne.n	8000eea <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b58      	cmp	r3, #88	; 0x58
 8000ed8:	d105      	bne.n	8000ee6 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 fa79 	bl	80013d2 <get_calib_param>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e001      	b.n	8000eea <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000ee6:	23fc      	movs	r3, #252	; 0xfc
 8000ee8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000ef6:	b590      	push	{r4, r7, lr}
 8000ef8:	b087      	sub	sp, #28
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f06:	6838      	ldr	r0, [r7, #0]
 8000f08:	f000 fa18 	bl	800133c <null_ptr_check>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d11e      	bne.n	8000f56 <bmp2_get_regs+0x60>
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d01b      	beq.n	8000f56 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	785b      	ldrb	r3, [r3, #1]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d103      	bne.n	8000f2e <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f2c:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68dc      	ldr	r4, [r3, #12]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	7bf8      	ldrb	r0, [r7, #15]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	47a0      	blx	r4
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d004      	beq.n	8000f5a <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8000f50:	23fe      	movs	r3, #254	; 0xfe
 8000f52:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8000f54:	e001      	b.n	8000f5a <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8000f56:	23ff      	movs	r3, #255	; 0xff
 8000f58:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}

08000f66 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000f66:	b590      	push	{r4, r7, lr}
 8000f68:	b08b      	sub	sp, #44	; 0x2c
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d901      	bls.n	8000f7e <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8000f7e:	6838      	ldr	r0, [r7, #0]
 8000f80:	f000 f9dc 	bl	800133c <null_ptr_check>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000f8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d150      	bne.n	8001034 <bmp2_set_regs+0xce>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d04d      	beq.n	8001034 <bmp2_set_regs+0xce>
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d04a      	beq.n	8001034 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d043      	beq.n	800102c <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d114      	bne.n	8000fdc <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	77fb      	strb	r3, [r7, #31]
 8000fb6:	e00d      	b.n	8000fd4 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8000fb8:	7ffb      	ldrb	r3, [r7, #31]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	7ffb      	ldrb	r3, [r7, #31]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	440b      	add	r3, r1
 8000fc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000fce:	7ffb      	ldrb	r3, [r7, #31]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	77fb      	strb	r3, [r7, #31]
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8ed      	bhi.n	8000fb8 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d90b      	bls.n	8000ffa <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000fe2:	f107 0114 	add.w	r1, r7, #20
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f000 f9c6 	bl	800137c <interleave_data>
                temp_len = ((len * 2) - 1);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
 8000ff8:	e001      	b.n	8000ffe <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	691c      	ldr	r4, [r3, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	7818      	ldrb	r0, [r3, #0]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f107 0114 	add.w	r1, r7, #20
 800100e:	6a3a      	ldr	r2, [r7, #32]
 8001010:	47a0      	blx	r4
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00b      	beq.n	800103c <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 8001024:	23fe      	movs	r3, #254	; 0xfe
 8001026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 800102a:	e007      	b.n	800103c <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 800102c:	23fd      	movs	r3, #253	; 0xfd
 800102e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001032:	e003      	b.n	800103c <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001034:	23ff      	movs	r3, #255	; 0xff
 8001036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800103a:	e000      	b.n	800103e <bmp2_set_regs+0xd8>
        if (len > 0)
 800103c:	bf00      	nop
    }

    return rslt;
 800103e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001042:	4618      	mov	r0, r3
 8001044:	372c      	adds	r7, #44	; 0x2c
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}

0800104a <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 8001052:	23e0      	movs	r3, #224	; 0xe0
 8001054:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8001056:	23b6      	movs	r3, #182	; 0xb6
 8001058:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800105a:	f107 010d 	add.w	r1, r7, #13
 800105e:	f107 000e 	add.w	r0, r7, #14
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f7ff ff7e 	bl	8000f66 <bmp2_set_regs>
 800106a:	4603      	mov	r3, r0
 800106c:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001084:	2300      	movs	r3, #0
 8001086:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d02d      	beq.n	80010ea <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800108e:	f107 010c 	add.w	r1, r7, #12
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2202      	movs	r2, #2
 8001096:	20f4      	movs	r0, #244	; 0xf4
 8001098:	f7ff ff2d 	bl	8000ef6 <bmp2_get_regs>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80010a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d122      	bne.n	80010ee <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 80010a8:	7b3b      	ldrb	r3, [r7, #12]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 80010b2:	7b3b      	ldrb	r3, [r7, #12]
 80010b4:	109b      	asrs	r3, r3, #2
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	095b      	lsrs	r3, r3, #5
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80010cc:	7b7b      	ldrb	r3, [r7, #13]
 80010ce:	109b      	asrs	r3, r3, #2
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80010dc:	7b7b      	ldrb	r3, [r7, #13]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	715a      	strb	r2, [r3, #5]
 80010e8:	e001      	b.n	80010ee <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010ea:	23ff      	movs	r3, #255	; 0xff
 80010ec:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	2000      	movs	r0, #0
 800110a:	f000 f9fd 	bl	8001508 <conf_sensor>
 800110e:	4603      	mov	r3, r0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d01b      	beq.n	8001160 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001128:	f107 010e 	add.w	r1, r7, #14
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	2201      	movs	r2, #1
 8001130:	20f3      	movs	r0, #243	; 0xf3
 8001132:	f7ff fee0 	bl	8000ef6 <bmp2_get_regs>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d110      	bne.n	8001164 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 8001142:	7bbb      	ldrb	r3, [r7, #14]
 8001144:	10db      	asrs	r3, r3, #3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	b2da      	uxtb	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 8001152:	7bbb      	ldrb	r3, [r7, #14]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	705a      	strb	r2, [r3, #1]
 800115e:	e001      	b.n	8001164 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001160:	23ff      	movs	r3, #255	; 0xff
 8001162:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001164:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f9bf 	bl	8001508 <conf_sensor>
 800118a:	4603      	mov	r3, r0
 800118c:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800118e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	2300      	movs	r3, #0
 80011aa:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d024      	beq.n	8001206 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 80011bc:	f107 0110 	add.w	r1, r7, #16
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2206      	movs	r2, #6
 80011c4:	20f7      	movs	r0, #247	; 0xf7
 80011c6:	f7ff fe96 	bl	8000ef6 <bmp2_get_regs>
 80011ca:	4603      	mov	r3, r0
 80011cc:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80011ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d119      	bne.n	800120a <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80011d6:	f107 0208 	add.w	r2, r7, #8
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fab9 	bl	8001758 <parse_sensor_data>
 80011e6:	4603      	mov	r3, r0
 80011e8:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80011ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10b      	bne.n	800120a <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f80b 	bl	8001216 <bmp2_compensate_data>
 8001200:	4603      	mov	r3, r0
 8001202:	75fb      	strb	r3, [r7, #23]
 8001204:	e001      	b.n	800120a <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001206:	23ff      	movs	r3, #255	; 0xff
 8001208:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800120a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f88a 	bl	800133c <null_ptr_check>
 8001228:	4603      	mov	r3, r0
 800122a:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 800122c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d129      	bne.n	8001288 <bmp2_compensate_data+0x72>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d026      	beq.n	8001288 <bmp2_compensate_data+0x72>
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d023      	beq.n	8001288 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3308      	adds	r3, #8
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fabb 	bl	80017e0 <compensate_temperature>
 800126a:	4603      	mov	r3, r0
 800126c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800126e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10a      	bne.n	800128c <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68f9      	ldr	r1, [r7, #12]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fba7 	bl	80019d0 <compensate_pressure>
 8001282:	4603      	mov	r3, r0
 8001284:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001286:	e001      	b.n	800128c <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001288:	23ff      	movs	r3, #255	; 0xff
 800128a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800128c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b092      	sub	sp, #72	; 0x48
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <bmp2_compute_meas_time+0x9c>)
 80012a6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80012aa:	461d      	mov	r5, r3
 80012ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 80012b4:	4b20      	ldr	r3, [pc, #128]	; (8001338 <bmp2_compute_meas_time+0xa0>)
 80012b6:	f107 0410 	add.w	r4, r7, #16
 80012ba:	461d      	mov	r5, r3
 80012bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f837 	bl	800133c <null_ptr_check>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80012d4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d122      	bne.n	8001322 <bmp2_compute_meas_time+0x8a>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d01f      	beq.n	8001322 <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7e1b      	ldrb	r3, [r3, #24]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d111      	bne.n	800130e <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	78db      	ldrb	r3, [r3, #3]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	3348      	adds	r3, #72	; 0x48
 80012f2:	443b      	add	r3, r7
 80012f4:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	789b      	ldrb	r3, [r3, #2]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	3348      	adds	r3, #72	; 0x48
 8001300:	443b      	add	r3, r7
 8001302:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001306:	441a      	add	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 800130c:	e00c      	b.n	8001328 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	78db      	ldrb	r3, [r3, #3]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	3348      	adds	r3, #72	; 0x48
 8001316:	443b      	add	r3, r7
 8001318:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001320:	e002      	b.n	8001328 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001322:	23ff      	movs	r3, #255	; 0xff
 8001324:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8001328:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800132c:	4618      	mov	r0, r3
 800132e:	3748      	adds	r7, #72	; 0x48
 8001330:	46bd      	mov	sp, r7
 8001332:	bdb0      	pop	{r4, r5, r7, pc}
 8001334:	080079d4 	.word	0x080079d4
 8001338:	080079e8 	.word	0x080079e8

0800133c <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <null_ptr_check+0x26>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d007      	beq.n	8001362 <null_ptr_check+0x26>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <null_ptr_check+0x26>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 8001362:	23ff      	movs	r3, #255	; 0xff
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	e001      	b.n	800136c <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800136c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800138a:	2301      	movs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e015      	b.n	80013bc <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	441a      	add	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	3b01      	subs	r3, #1
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	440b      	add	r3, r1
 80013a0:	7812      	ldrb	r2, [r2, #0]
 80013a2:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	441a      	add	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	440b      	add	r3, r1
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3e5      	bcc.n	8001390 <interleave_data+0x14>
    }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b08a      	sub	sp, #40	; 0x28
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80013f0:	f107 010c 	add.w	r1, r7, #12
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2219      	movs	r2, #25
 80013f8:	2088      	movs	r0, #136	; 0x88
 80013fa:	f7ff fd7c 	bl	8000ef6 <bmp2_get_regs>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 8001404:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001408:	2b00      	cmp	r3, #0
 800140a:	d177      	bne.n	80014fc <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 800140c:	7b7b      	ldrb	r3, [r7, #13]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b21a      	sxth	r2, r3
 8001412:	7b3b      	ldrb	r3, [r7, #12]
 8001414:	b21b      	sxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b21b      	sxth	r3, r3
 800141a:	b29a      	uxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	7bbb      	ldrb	r3, [r7, #14]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21a      	sxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 8001432:	7c7b      	ldrb	r3, [r7, #17]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	b21a      	sxth	r2, r3
 8001438:	7c3b      	ldrb	r3, [r7, #16]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21a      	sxth	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001444:	7cfb      	ldrb	r3, [r7, #19]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	7cbb      	ldrb	r3, [r7, #18]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b21b      	sxth	r3, r3
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001458:	7d7b      	ldrb	r3, [r7, #21]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21a      	sxth	r2, r3
 800145e:	7d3b      	ldrb	r3, [r7, #20]
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21a      	sxth	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	7dbb      	ldrb	r3, [r7, #22]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 800147c:	7e7b      	ldrb	r3, [r7, #25]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	7e3b      	ldrb	r3, [r7, #24]
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21a      	sxth	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 800148e:	7efb      	ldrb	r3, [r7, #27]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b21a      	sxth	r2, r3
 8001494:	7ebb      	ldrb	r3, [r7, #26]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21a      	sxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 80014a0:	7f7b      	ldrb	r3, [r7, #29]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	7f3b      	ldrb	r3, [r7, #28]
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 80014b2:	7ffb      	ldrb	r3, [r7, #31]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	7fbb      	ldrb	r3, [r7, #30]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21a      	sxth	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 80014c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80014da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80014f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014f4:	b25a      	sxtb	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 80014fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001500:	4618      	mov	r0, r3
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001516:	2300      	movs	r3, #0
 8001518:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 800151a:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 800151e:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d074      	beq.n	8001610 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001526:	f107 0114 	add.w	r1, r7, #20
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2202      	movs	r2, #2
 800152e:	20f4      	movs	r0, #244	; 0xf4
 8001530:	f7ff fce1 	bl	8000ef6 <bmp2_get_regs>
 8001534:	4603      	mov	r3, r0
 8001536:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d169      	bne.n	8001614 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff fd82 	bl	800104a <bmp2_soft_reset>
 8001546:	4603      	mov	r3, r0
 8001548:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 800154a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d160      	bne.n	8001614 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f861 	bl	8001620 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 800155e:	7d7b      	ldrb	r3, [r7, #21]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	b25a      	sxtb	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	789b      	ldrb	r3, [r3, #2]
 800156c:	015b      	lsls	r3, r3, #5
 800156e:	b25b      	sxtb	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b25b      	sxtb	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001578:	7d7b      	ldrb	r3, [r7, #21]
 800157a:	b25b      	sxtb	r3, r3
 800157c:	f023 031c 	bic.w	r3, r3, #28
 8001580:	b25a      	sxtb	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	791b      	ldrb	r3, [r3, #4]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	b25b      	sxtb	r3, r3
 800158a:	f003 031c 	and.w	r3, r3, #28
 800158e:	b25b      	sxtb	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b25b      	sxtb	r3, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001598:	7d7b      	ldrb	r3, [r7, #21]
 800159a:	b25b      	sxtb	r3, r3
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	b25a      	sxtb	r2, r3
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	795b      	ldrb	r3, [r3, #5]
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 80015b6:	f107 0114 	add.w	r1, r7, #20
 80015ba:	f107 0010 	add.w	r0, r7, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2202      	movs	r2, #2
 80015c2:	f7ff fcd0 	bl	8000f66 <bmp2_set_regs>
 80015c6:	4603      	mov	r3, r0
 80015c8:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 80015ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d120      	bne.n	8001614 <conf_sensor+0x10c>
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01d      	beq.n	8001614 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80015de:	7d3b      	ldrb	r3, [r7, #20]
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	f023 0303 	bic.w	r3, r3, #3
 80015e6:	b25a      	sxtb	r2, r3
 80015e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80015fa:	f107 0114 	add.w	r1, r7, #20
 80015fe:	f107 0010 	add.w	r0, r7, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f7ff fcae 	bl	8000f66 <bmp2_set_regs>
 800160a:	4603      	mov	r3, r0
 800160c:	75fb      	strb	r3, [r7, #23]
 800160e:	e001      	b.n	8001614 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001610:	23ff      	movs	r3, #255	; 0xff
 8001612:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001614:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	78db      	ldrb	r3, [r3, #3]
 800162e:	2b04      	cmp	r3, #4
 8001630:	f200 808b 	bhi.w	800174a <set_os_mode+0x12a>
 8001634:	a201      	add	r2, pc, #4	; (adr r2, 800163c <set_os_mode+0x1c>)
 8001636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163a:	bf00      	nop
 800163c:	08001651 	.word	0x08001651
 8001640:	08001683 	.word	0x08001683
 8001644:	080016b5 	.word	0x080016b5
 8001648:	080016e7 	.word	0x080016e7
 800164c:	08001719 	.word	0x08001719
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b25b      	sxtb	r3, r3
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	b25b      	sxtb	r3, r3
 800165c:	f043 0320 	orr.w	r3, r3, #32
 8001660:	b25b      	sxtb	r3, r3
 8001662:	b2da      	uxtb	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b25b      	sxtb	r3, r3
 800166e:	f023 031c 	bic.w	r3, r3, #28
 8001672:	b25b      	sxtb	r3, r3
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	b25b      	sxtb	r3, r3
 800167a:	b2da      	uxtb	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	701a      	strb	r2, [r3, #0]
            break;
 8001680:	e064      	b.n	800174c <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b25b      	sxtb	r3, r3
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	b25b      	sxtb	r3, r3
 800168e:	f043 0320 	orr.w	r3, r3, #32
 8001692:	b25b      	sxtb	r3, r3
 8001694:	b2da      	uxtb	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	f023 031c 	bic.w	r3, r3, #28
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	701a      	strb	r2, [r3, #0]
            break;
 80016b2:	e04b      	b.n	800174c <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	f043 0320 	orr.w	r3, r3, #32
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	f023 031c 	bic.w	r3, r3, #28
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	f043 030c 	orr.w	r3, r3, #12
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	701a      	strb	r2, [r3, #0]
            break;
 80016e4:	e032      	b.n	800174c <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	f043 0320 	orr.w	r3, r3, #32
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b25b      	sxtb	r3, r3
 8001704:	f023 031c 	bic.w	r3, r3, #28
 8001708:	b25b      	sxtb	r3, r3
 800170a:	f043 0310 	orr.w	r3, r3, #16
 800170e:	b25b      	sxtb	r3, r3
 8001710:	b2da      	uxtb	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	701a      	strb	r2, [r3, #0]
            break;
 8001716:	e019      	b.n	800174c <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b25b      	sxtb	r3, r3
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	b25b      	sxtb	r3, r3
 8001724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001728:	b25b      	sxtb	r3, r3
 800172a:	b2da      	uxtb	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b25b      	sxtb	r3, r3
 8001736:	f023 031c 	bic.w	r3, r3, #28
 800173a:	b25b      	sxtb	r3, r3
 800173c:	f043 0314 	orr.w	r3, r3, #20
 8001740:	b25b      	sxtb	r3, r3
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	701a      	strb	r2, [r3, #0]
            break;
 8001748:	e000      	b.n	800174c <set_os_mode+0x12c>
        default:
            break;
 800174a:	bf00      	nop
    }
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	031b      	lsls	r3, r3, #12
 8001768:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3301      	adds	r3, #1
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3302      	adds	r3, #2
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	b2db      	uxtb	r3, r3
 800177e:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	431a      	orrs	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	431a      	orrs	r2, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3303      	adds	r3, #3
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	031b      	lsls	r3, r3, #12
 8001796:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3304      	adds	r3, #4
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3305      	adds	r3, #5
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	461a      	mov	r2, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f000 fae5 	bl	8001d98 <st_check_boundaries>
 80017ce:	4603      	mov	r3, r0
 80017d0:	72fb      	strb	r3, [r7, #11]

    return rslt;
 80017d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80017e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017e4:	b08c      	sub	sp, #48	; 0x30
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe57 	bl	80004ac <__aeabi_i2d>
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	4b6c      	ldr	r3, [pc, #432]	; (80019b4 <compensate_temperature+0x1d4>)
 8001804:	f7fe ffe6 	bl	80007d4 <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4614      	mov	r4, r2
 800180e:	461d      	mov	r5, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	8b9b      	ldrh	r3, [r3, #28]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe39 	bl	800048c <__aeabi_ui2d>
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <compensate_temperature+0x1d8>)
 8001820:	f7fe ffd8 	bl	80007d4 <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4620      	mov	r0, r4
 800182a:	4629      	mov	r1, r5
 800182c:	f7fe fcf0 	bl	8000210 <__aeabi_dsub>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4614      	mov	r4, r2
 8001836:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe34 	bl	80004ac <__aeabi_i2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001848:	4620      	mov	r0, r4
 800184a:	4629      	mov	r1, r5
 800184c:	f7fe fe98 	bl	8000580 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe25 	bl	80004ac <__aeabi_i2d>
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800186a:	f7fe ffb3 	bl	80007d4 <__aeabi_ddiv>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4614      	mov	r4, r2
 8001874:	461d      	mov	r5, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	8b9b      	ldrh	r3, [r3, #28]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe06 	bl	800048c <__aeabi_ui2d>
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <compensate_temperature+0x1dc>)
 8001886:	f7fe ffa5 	bl	80007d4 <__aeabi_ddiv>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7fe fcbd 	bl	8000210 <__aeabi_dsub>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4614      	mov	r4, r2
 800189c:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe02 	bl	80004ac <__aeabi_i2d>
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80018b0:	f7fe ff90 	bl	80007d4 <__aeabi_ddiv>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4690      	mov	r8, r2
 80018ba:	4699      	mov	r9, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	8b9b      	ldrh	r3, [r3, #28]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fde3 	bl	800048c <__aeabi_ui2d>
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <compensate_temperature+0x1dc>)
 80018cc:	f7fe ff82 	bl	80007d4 <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4640      	mov	r0, r8
 80018d6:	4649      	mov	r1, r9
 80018d8:	f7fe fc9a 	bl	8000210 <__aeabi_dsub>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80018e0:	4620      	mov	r0, r4
 80018e2:	4629      	mov	r1, r5
 80018e4:	f7fe fe4c 	bl	8000580 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4614      	mov	r4, r2
 80018ee:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fdd8 	bl	80004ac <__aeabi_i2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
    var2 =
 8001900:	4620      	mov	r0, r4
 8001902:	4629      	mov	r1, r5
 8001904:	f7fe fe3c 	bl	8000580 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001910:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001914:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001918:	f7fe fc7c 	bl	8000214 <__adddf3>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f8c6 	bl	8000ab4 <__aeabi_d2iz>
 8001928:	4602      	mov	r2, r0
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 800192e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001932:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001936:	f7fe fc6d 	bl	8000214 <__adddf3>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <compensate_temperature+0x1e0>)
 8001948:	f7fe ff44 	bl	80007d4 <__aeabi_ddiv>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <compensate_temperature+0x1e4>)
 800195a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800195e:	f7ff f881 	bl	8000a64 <__aeabi_dcmplt>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d007      	beq.n	8001978 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <compensate_temperature+0x1e4>)
 800196e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001972:	2301      	movs	r3, #1
 8001974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <compensate_temperature+0x1e8>)
 800197e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001982:	f7ff f88d 	bl	8000aa0 <__aeabi_dcmpgt>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <compensate_temperature+0x1e8>)
 8001992:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001996:	2302      	movs	r3, #2
 8001998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 800199c:	68f9      	ldr	r1, [r7, #12]
 800199e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019a2:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80019a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3730      	adds	r7, #48	; 0x30
 80019ae:	46bd      	mov	sp, r7
 80019b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019b4:	40d00000 	.word	0x40d00000
 80019b8:	40900000 	.word	0x40900000
 80019bc:	40c00000 	.word	0x40c00000
 80019c0:	40b40000 	.word	0x40b40000
 80019c4:	c0440000 	.word	0xc0440000
 80019c8:	40554000 	.word	0x40554000
 80019cc:	00000000 	.word	0x00000000

080019d0 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	b08c      	sub	sp, #48	; 0x30
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fd5a 	bl	80004ac <__aeabi_i2d>
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a00:	f7fe fee8 	bl	80007d4 <__aeabi_ddiv>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	4bcb      	ldr	r3, [pc, #812]	; (8001d40 <compensate_pressure+0x370>)
 8001a12:	f7fe fbfd 	bl	8000210 <__aeabi_dsub>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001a1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a26:	f7fe fdab 	bl	8000580 <__aeabi_dmul>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4614      	mov	r4, r2
 8001a30:	461d      	mov	r5, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd37 	bl	80004ac <__aeabi_i2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f7fe fd9b 	bl	8000580 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4bbb      	ldr	r3, [pc, #748]	; (8001d44 <compensate_pressure+0x374>)
 8001a58:	f7fe febc 	bl	80007d4 <__aeabi_ddiv>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fd1e 	bl	80004ac <__aeabi_i2d>
 8001a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a74:	f7fe fd84 	bl	8000580 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	f7fe fbc6 	bl	8000214 <__adddf3>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a90:	f7fe fbc0 	bl	8000214 <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4ba9      	ldr	r3, [pc, #676]	; (8001d48 <compensate_pressure+0x378>)
 8001aa2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aa6:	f7fe fe95 	bl	80007d4 <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4614      	mov	r4, r2
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fcf7 	bl	80004ac <__aeabi_i2d>
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	4ba2      	ldr	r3, [pc, #648]	; (8001d4c <compensate_pressure+0x37c>)
 8001ac4:	f7fe fd5c 	bl	8000580 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4620      	mov	r0, r4
 8001ace:	4629      	mov	r1, r5
 8001ad0:	f7fe fba0 	bl	8000214 <__adddf3>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fce2 	bl	80004ac <__aeabi_i2d>
 8001ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aec:	f7fe fd48 	bl	8000580 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001afc:	f7fe fd40 	bl	8000580 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	4b90      	ldr	r3, [pc, #576]	; (8001d50 <compensate_pressure+0x380>)
 8001b0e:	f7fe fe61 	bl	80007d4 <__aeabi_ddiv>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4614      	mov	r4, r2
 8001b18:	461d      	mov	r5, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fcc3 	bl	80004ac <__aeabi_i2d>
 8001b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b2a:	f7fe fd29 	bl	8000580 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f7fe fb6d 	bl	8000214 <__adddf3>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	4b82      	ldr	r3, [pc, #520]	; (8001d50 <compensate_pressure+0x380>)
 8001b48:	f7fe fe44 	bl	80007d4 <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b7a      	ldr	r3, [pc, #488]	; (8001d44 <compensate_pressure+0x374>)
 8001b5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b5e:	f7fe fe39 	bl	80007d4 <__aeabi_ddiv>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b79      	ldr	r3, [pc, #484]	; (8001d54 <compensate_pressure+0x384>)
 8001b70:	f7fe fb50 	bl	8000214 <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4614      	mov	r4, r2
 8001b7a:	461d      	mov	r5, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fc83 	bl	800048c <__aeabi_ui2d>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe fcf7 	bl	8000580 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ba6:	f7fe ff5d 	bl	8000a64 <__aeabi_dcmplt>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10b      	bne.n	8001bc8 <compensate_pressure+0x1f8>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bbc:	f7fe ff70 	bl	8000aa0 <__aeabi_dcmpgt>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80de 	beq.w	8001d84 <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fc5d 	bl	800048c <__aeabi_ui2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	f04f 0000 	mov.w	r0, #0
 8001bda:	495f      	ldr	r1, [pc, #380]	; (8001d58 <compensate_pressure+0x388>)
 8001bdc:	f7fe fb18 	bl	8000210 <__aeabi_dsub>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b5b      	ldr	r3, [pc, #364]	; (8001d5c <compensate_pressure+0x38c>)
 8001bee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bf2:	f7fe fdef 	bl	80007d4 <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bfe:	f7fe fb07 	bl	8000210 <__aeabi_dsub>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	a347      	add	r3, pc, #284	; (adr r3, 8001d28 <compensate_pressure+0x358>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f7fe fcb6 	bl	8000580 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c20:	f7fe fdd8 	bl	80007d4 <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc3a 	bl	80004ac <__aeabi_i2d>
 8001c38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c3c:	f7fe fca0 	bl	8000580 <__aeabi_dmul>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c4c:	f7fe fc98 	bl	8000580 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <compensate_pressure+0x390>)
 8001c5e:	f7fe fdb9 	bl	80007d4 <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc1b 	bl	80004ac <__aeabi_i2d>
 8001c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c7a:	f7fe fc81 	bl	8000580 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <compensate_pressure+0x374>)
 8001c8c:	f7fe fda2 	bl	80007d4 <__aeabi_ddiv>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001c98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca0:	f7fe fab8 	bl	8000214 <__adddf3>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4614      	mov	r4, r2
 8001caa:	461d      	mov	r5, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fbfa 	bl	80004ac <__aeabi_i2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe faa8 	bl	8000214 <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <compensate_pressure+0x394>)
 8001cd2:	f7fe fd7f 	bl	80007d4 <__aeabi_ddiv>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cde:	f7fe fa99 	bl	8000214 <__adddf3>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001cea:	a311      	add	r3, pc, #68	; (adr r3, 8001d30 <compensate_pressure+0x360>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cf4:	f7fe feb6 	bl	8000a64 <__aeabi_dcmplt>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001cfe:	a30c      	add	r3, pc, #48	; (adr r3, 8001d30 <compensate_pressure+0x360>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001d0e:	a30a      	add	r3, pc, #40	; (adr r3, 8001d38 <compensate_pressure+0x368>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d18:	f7fe fec2 	bl	8000aa0 <__aeabi_dcmpgt>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	e022      	b.n	8001d68 <compensate_pressure+0x398>
 8001d22:	bf00      	nop
 8001d24:	f3af 8000 	nop.w
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	40b86a00 	.word	0x40b86a00
 8001d30:	00000000 	.word	0x00000000
 8001d34:	40dd4c00 	.word	0x40dd4c00
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	40fadb00 	.word	0x40fadb00
 8001d40:	40ef4000 	.word	0x40ef4000
 8001d44:	40e00000 	.word	0x40e00000
 8001d48:	40100000 	.word	0x40100000
 8001d4c:	40f00000 	.word	0x40f00000
 8001d50:	41200000 	.word	0x41200000
 8001d54:	3ff00000 	.word	0x3ff00000
 8001d58:	41300000 	.word	0x41300000
 8001d5c:	40b00000 	.word	0x40b00000
 8001d60:	41e00000 	.word	0x41e00000
 8001d64:	40300000 	.word	0x40300000
 8001d68:	d007      	beq.n	8001d7a <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001d6a:	a309      	add	r3, pc, #36	; (adr r3, 8001d90 <compensate_pressure+0x3c0>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001d74:	2304      	movs	r3, #4
 8001d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001d7a:	68f9      	ldr	r1, [r7, #12]
 8001d7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d80:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001d84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3730      	adds	r7, #48	; 0x30
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d90:	00000000 	.word	0x00000000
 8001d94:	40fadb00 	.word	0x40fadb00

08001d98 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db03      	blt.n	8001db4 <st_check_boundaries+0x1c>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4a1c      	ldr	r2, [pc, #112]	; (8001e20 <st_check_boundaries+0x88>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	dd09      	ble.n	8001dc8 <st_check_boundaries+0x30>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db06      	blt.n	8001dc8 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <st_check_boundaries+0x88>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	dc02      	bgt.n	8001dc8 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001dc2:	23fa      	movs	r3, #250	; 0xfa
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e023      	b.n	8001e10 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db03      	blt.n	8001dd6 <st_check_boundaries+0x3e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <st_check_boundaries+0x88>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	dd09      	ble.n	8001dea <st_check_boundaries+0x52>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db06      	blt.n	8001dea <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <st_check_boundaries+0x88>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	dc02      	bgt.n	8001dea <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001de4:	23fb      	movs	r3, #251	; 0xfb
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	e012      	b.n	8001e10 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db03      	blt.n	8001df8 <st_check_boundaries+0x60>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <st_check_boundaries+0x88>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	dd09      	ble.n	8001e0c <st_check_boundaries+0x74>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db03      	blt.n	8001e06 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <st_check_boundaries+0x88>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	dd02      	ble.n	8001e0c <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001e06:	23f9      	movs	r3, #249	; 0xf9
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	e001      	b.n	8001e10 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	000ffff0 	.word	0x000ffff0

08001e24 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff f837 	bl	8000ea0 <bmp2_init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f91c 	bl	800107a <bmp2_get_config>
 8001e42:	4603      	mov	r3, r0
 8001e44:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001e46:	2303      	movs	r3, #3
 8001e48:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff f94e 	bl	80010fa <bmp2_set_config>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	f7ff f980 	bl	8001170 <bmp2_set_power_mode>
 8001e70:	4603      	mov	r3, r0
 8001e72:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001e74:	f107 0108 	add.w	r1, r7, #8
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fa0a 	bl	8001298 <bmp2_compute_meas_time>
 8001e84:	4603      	mov	r3, r0
 8001e86:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001e88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	6858      	ldr	r0, [r3, #4]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	891b      	ldrh	r3, [r3, #8]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f001 fa10 	bl	80032e0 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	f107 010f 	add.w	r1, r7, #15
 8001ec8:	2305      	movs	r3, #5
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f002 fbe7 	bl	800469e <HAL_SPI_Transmit>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	2305      	movs	r3, #5
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	f002 fd4b 	bl	800497a <HAL_SPI_Receive>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	7dbb      	ldrb	r3, [r7, #22]
 8001eea:	4413      	add	r3, r2
 8001eec:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6858      	ldr	r0, [r3, #4]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	891b      	ldrh	r3, [r3, #8]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f001 f9f1 	bl	80032e0 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001efe:	7dbb      	ldrb	r3, [r7, #22]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <bmp2_spi_read+0x74>
    iError = -1;
 8001f04:	23ff      	movs	r3, #255	; 0xff
 8001f06:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	4603      	mov	r3, r0
 8001f22:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	6858      	ldr	r0, [r3, #4]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	891b      	ldrh	r3, [r3, #8]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f001 f9d0 	bl	80032e0 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	f107 010f 	add.w	r1, r7, #15
 8001f48:	2305      	movs	r3, #5
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f002 fba7 	bl	800469e <HAL_SPI_Transmit>
 8001f50:	4603      	mov	r3, r0
 8001f52:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	2305      	movs	r3, #5
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	f002 fb9d 	bl	800469e <HAL_SPI_Transmit>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	7dbb      	ldrb	r3, [r7, #22]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	6858      	ldr	r0, [r3, #4]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	891b      	ldrh	r3, [r3, #8]
 8001f76:	2201      	movs	r2, #1
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f001 f9b1 	bl	80032e0 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001f7e:	7dbb      	ldrb	r3, [r7, #22]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <bmp2_spi_write+0x74>
    iError = -1;
 8001f84:	23ff      	movs	r3, #255	; 0xff
 8001f86:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <bmp2_delay_us+0x24>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	099b      	lsrs	r3, r3, #6
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fe25 	bl	8002bf8 <HAL_Delay>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	10624dd3 	.word	0x10624dd3

08001fbc <BMP2_ReadTemperature_degC>:
 *  @param[in]  dev   : BMP2xx device structure
 *
 *  @return Temperature measurement [degC]
 */
double BMP2_ReadTemperature_degC(struct bmp2_dev *dev)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b08d      	sub	sp, #52	; 0x34
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8001fc4:	23ff      	movs	r3, #255	; 0xff
 8001fc6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  struct bmp2_status status;
  struct bmp2_data comp_data;
  double temp = NAN;
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	4b22      	ldr	r3, [pc, #136]	; (8002058 <BMP2_ReadTemperature_degC+0x9c>)
 8001fd0:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	899b      	ldrh	r3, [r3, #12]
 8001fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff f897 	bl	8001118 <bmp2_get_status>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 8001ff0:	f107 0308 	add.w	r3, r7, #8
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f8cf 	bl	800119a <bmp2_get_sensor_data>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    temp = comp_data.temperature;
 8002002:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002006:	e9c7 2308 	strd	r2, r3, [r7, #32]
    try--;
 800200a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800200e:	b2db      	uxtb	r3, r3
 8002010:	3b01      	subs	r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002018:	7f3b      	ldrb	r3, [r7, #28]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <BMP2_ReadTemperature_degC+0x6a>
 800201e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002022:	2b00      	cmp	r3, #0
 8002024:	dcdb      	bgt.n	8001fde <BMP2_ReadTemperature_degC+0x22>

  /* Save reading result in sensor handler */
  BMP2_GET_TEMP(dev) = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685c      	ldr	r4, [r3, #4]
 800202a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800202e:	f7fe fd69 	bl	8000b04 <__aeabi_d2f>
 8002032:	4603      	mov	r3, r0
 8002034:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800203e:	729a      	strb	r2, [r3, #10]

  return temp;
 8002040:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002044:	ec43 2b17 	vmov	d7, r2, r3
}
 8002048:	eeb0 0a47 	vmov.f32	s0, s14
 800204c:	eef0 0a67 	vmov.f32	s1, s15
 8002050:	3734      	adds	r7, #52	; 0x34
 8002052:	46bd      	mov	sp, r7
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	bf00      	nop
 8002058:	7ff80000 	.word	0x7ff80000

0800205c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	; 0x30
 8002060:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002072:	4b86      	ldr	r3, [pc, #536]	; (800228c <MX_GPIO_Init+0x230>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a85      	ldr	r2, [pc, #532]	; (800228c <MX_GPIO_Init+0x230>)
 8002078:	f043 0310 	orr.w	r3, r3, #16
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b83      	ldr	r3, [pc, #524]	; (800228c <MX_GPIO_Init+0x230>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800208a:	4b80      	ldr	r3, [pc, #512]	; (800228c <MX_GPIO_Init+0x230>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a7f      	ldr	r2, [pc, #508]	; (800228c <MX_GPIO_Init+0x230>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b7d      	ldr	r3, [pc, #500]	; (800228c <MX_GPIO_Init+0x230>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a2:	4b7a      	ldr	r3, [pc, #488]	; (800228c <MX_GPIO_Init+0x230>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a79      	ldr	r2, [pc, #484]	; (800228c <MX_GPIO_Init+0x230>)
 80020a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b77      	ldr	r3, [pc, #476]	; (800228c <MX_GPIO_Init+0x230>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	4b74      	ldr	r3, [pc, #464]	; (800228c <MX_GPIO_Init+0x230>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a73      	ldr	r2, [pc, #460]	; (800228c <MX_GPIO_Init+0x230>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b71      	ldr	r3, [pc, #452]	; (800228c <MX_GPIO_Init+0x230>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	4b6e      	ldr	r3, [pc, #440]	; (800228c <MX_GPIO_Init+0x230>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a6d      	ldr	r2, [pc, #436]	; (800228c <MX_GPIO_Init+0x230>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b6b      	ldr	r3, [pc, #428]	; (800228c <MX_GPIO_Init+0x230>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ea:	4b68      	ldr	r3, [pc, #416]	; (800228c <MX_GPIO_Init+0x230>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a67      	ldr	r2, [pc, #412]	; (800228c <MX_GPIO_Init+0x230>)
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b65      	ldr	r3, [pc, #404]	; (800228c <MX_GPIO_Init+0x230>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002102:	4b62      	ldr	r3, [pc, #392]	; (800228c <MX_GPIO_Init+0x230>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a61      	ldr	r2, [pc, #388]	; (800228c <MX_GPIO_Init+0x230>)
 8002108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b5f      	ldr	r3, [pc, #380]	; (800228c <MX_GPIO_Init+0x230>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	2110      	movs	r1, #16
 800211e:	485c      	ldr	r0, [pc, #368]	; (8002290 <MX_GPIO_Init+0x234>)
 8002120:	f001 f8de 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002124:	2200      	movs	r2, #0
 8002126:	f244 0181 	movw	r1, #16513	; 0x4081
 800212a:	485a      	ldr	r0, [pc, #360]	; (8002294 <MX_GPIO_Init+0x238>)
 800212c:	f001 f8d8 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002130:	2200      	movs	r2, #0
 8002132:	2140      	movs	r1, #64	; 0x40
 8002134:	4858      	ldr	r0, [pc, #352]	; (8002298 <MX_GPIO_Init+0x23c>)
 8002136:	f001 f8d3 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 800213a:	2310      	movs	r3, #16
 800213c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2301      	movs	r3, #1
 8002140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	4619      	mov	r1, r3
 8002150:	484f      	ldr	r0, [pc, #316]	; (8002290 <MX_GPIO_Init+0x234>)
 8002152:	f000 ff19 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800215a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800215c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	4619      	mov	r1, r3
 800216c:	484b      	ldr	r0, [pc, #300]	; (800229c <MX_GPIO_Init+0x240>)
 800216e:	f000 ff0b 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002172:	2332      	movs	r3, #50	; 0x32
 8002174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217e:	2303      	movs	r3, #3
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002182:	230b      	movs	r3, #11
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002186:	f107 031c 	add.w	r3, r7, #28
 800218a:	4619      	mov	r1, r3
 800218c:	4843      	ldr	r0, [pc, #268]	; (800229c <MX_GPIO_Init+0x240>)
 800218e:	f000 fefb 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002192:	2386      	movs	r3, #134	; 0x86
 8002194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219e:	2303      	movs	r3, #3
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021a2:	230b      	movs	r3, #11
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	483c      	ldr	r0, [pc, #240]	; (80022a0 <MX_GPIO_Init+0x244>)
 80021ae:	f000 feeb 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80021b2:	f244 0381 	movw	r3, #16513	; 0x4081
 80021b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	4832      	ldr	r0, [pc, #200]	; (8002294 <MX_GPIO_Init+0x238>)
 80021cc:	f000 fedc 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80021d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021e2:	230b      	movs	r3, #11
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	4619      	mov	r1, r3
 80021ec:	4829      	ldr	r0, [pc, #164]	; (8002294 <MX_GPIO_Init+0x238>)
 80021ee:	f000 fecb 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80021f2:	2340      	movs	r3, #64	; 0x40
 80021f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f6:	2301      	movs	r3, #1
 80021f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	4823      	ldr	r0, [pc, #140]	; (8002298 <MX_GPIO_Init+0x23c>)
 800220a:	f000 febd 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002212:	2300      	movs	r3, #0
 8002214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800221a:	f107 031c 	add.w	r3, r7, #28
 800221e:	4619      	mov	r1, r3
 8002220:	481d      	ldr	r0, [pc, #116]	; (8002298 <MX_GPIO_Init+0x23c>)
 8002222:	f000 feb1 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002226:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800222a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002238:	230a      	movs	r3, #10
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	4817      	ldr	r0, [pc, #92]	; (80022a0 <MX_GPIO_Init+0x244>)
 8002244:	f000 fea0 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800224c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	4619      	mov	r1, r3
 800225c:	4810      	ldr	r0, [pc, #64]	; (80022a0 <MX_GPIO_Init+0x244>)
 800225e:	f000 fe93 	bl	8002f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002262:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002274:	230b      	movs	r3, #11
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	4619      	mov	r1, r3
 800227e:	4806      	ldr	r0, [pc, #24]	; (8002298 <MX_GPIO_Init+0x23c>)
 8002280:	f000 fe82 	bl	8002f88 <HAL_GPIO_Init>

}
 8002284:	bf00      	nop
 8002286:	3730      	adds	r7, #48	; 0x30
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800
 8002290:	40021000 	.word	0x40021000
 8002294:	40020400 	.word	0x40020400
 8002298:	40021800 	.word	0x40021800
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020000 	.word	0x40020000

080022a4 <HAL_TIM_PeriodElapsedCallback>:


float PWMValue = 0;
float error = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if(htim==&htim2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a49      	ldr	r2, [pc, #292]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	f040 808b 	bne.w	80023cc <HAL_TIM_PeriodElapsedCallback+0x128>
  {
//	  preassure = BMP2_ReadPressure_hPa(&bmp2dev_1);
	  temp = BMP2_ReadTemperature_degC(&bmp2dev_1);
 80022b6:	4848      	ldr	r0, [pc, #288]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80022b8:	f7ff fe80 	bl	8001fbc <BMP2_ReadTemperature_degC>
 80022bc:	ec53 2b10 	vmov	r2, r3, d0
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fc1e 	bl	8000b04 <__aeabi_d2f>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a44      	ldr	r2, [pc, #272]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80022cc:	6013      	str	r3, [r2, #0]
//	  newTemp = (int)(temp*1000);
	  error = set_point - temp;
 80022ce:	4b44      	ldr	r3, [pc, #272]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80022d0:	ed93 7a00 	vldr	s14, [r3]
 80022d4:	4b41      	ldr	r3, [pc, #260]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022de:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80022e0:	edc3 7a00 	vstr	s15, [r3]
	  if(error > -3 && error < 3){
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80022e6:	edd3 7a00 	vldr	s15, [r3]
 80022ea:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 80022ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	dd19      	ble.n	800232c <HAL_TIM_PeriodElapsedCallback+0x88>
 80022f8:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230a:	d50f      	bpl.n	800232c <HAL_TIM_PeriodElapsedCallback+0x88>
		  I = prev_I+error+prev_error;
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800230e:	ed93 7a00 	vldr	s14, [r3]
 8002312:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ee37 7a27 	vadd.f32	s14, s14, s15
 800231c:	4b33      	ldr	r3, [pc, #204]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x148>)
 800231e:	edd3 7a00 	vldr	s15, [r3]
 8002322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002328:	edc3 7a00 	vstr	s15, [r3]
	  }
	  pwm_i = I*ki;
 800232c:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800232e:	ed93 7a00 	vldr	s14, [r3]
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233c:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800233e:	edc3 7a00 	vstr	s15, [r3]
	  prev_I = I;
 8002342:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a28      	ldr	r2, [pc, #160]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002348:	6013      	str	r3, [r2, #0]
	  prev_error = error;
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a27      	ldr	r2, [pc, #156]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002350:	6013      	str	r3, [r2, #0]
	  pwm_p = kp*error;
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002354:	ed93 7a00 	vldr	s14, [r3]
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002362:	4b27      	ldr	r3, [pc, #156]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002364:	edc3 7a00 	vstr	s15, [r3]
	  PWMValue = 100*(pwm_p + pwm_i);
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800236a:	ed93 7a00 	vldr	s14, [r3]
 800236e:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002378:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002404 <HAL_TIM_PeriodElapsedCallback+0x160>
 800237c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002382:	edc3 7a00 	vstr	s15, [r3]
	  if (PWMValue > 999) {
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800240c <HAL_TIM_PeriodElapsedCallback+0x168>
 8002390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002398:	dd02      	ble.n	80023a0 <HAL_TIM_PeriodElapsedCallback+0xfc>
		  PWMValue = 1000;
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800239c:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800239e:	601a      	str	r2, [r3, #0]
	  }
	  if(PWMValue < 0){
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	d503      	bpl.n	80023b8 <HAL_TIM_PeriodElapsedCallback+0x114>
		  PWMValue = 0;
 80023b0:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (int)PWMValue);
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	ee17 2a90 	vmov	r2, s15
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34
//	  int afterKropkaTemp = newTemp%1000;
//	  int afterKropkaPressure = newPreassure%1000;
//	  int daneD=sprintf(dane,"%d\r\n",newTemp);
//	  HAL_UART_Transmit_IT(&huart3,(uint8_t*)dane , daneD);
  }
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	2000010c 	.word	0x2000010c
 80023d8:	20000018 	.word	0x20000018
 80023dc:	20000088 	.word	0x20000088
 80023e0:	20000054 	.word	0x20000054
 80023e4:	20000094 	.word	0x20000094
 80023e8:	20000090 	.word	0x20000090
 80023ec:	20000098 	.word	0x20000098
 80023f0:	2000008c 	.word	0x2000008c
 80023f4:	2000005c 	.word	0x2000005c
 80023f8:	2000009c 	.word	0x2000009c
 80023fc:	20000058 	.word	0x20000058
 8002400:	200000a0 	.word	0x200000a0
 8002404:	42c80000 	.word	0x42c80000
 8002408:	200000a4 	.word	0x200000a4
 800240c:	4479c000 	.word	0x4479c000
 8002410:	447a0000 	.word	0x447a0000
 8002414:	20000158 	.word	0x20000158

08002418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800241c:	f000 fb8f 	bl	8002b3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002420:	f000 f81c 	bl	800245c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002424:	f7ff fe1a 	bl	800205c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002428:	f000 fac8 	bl	80029bc <MX_USART3_UART_Init>
  MX_SPI4_Init();
 800242c:	f000 f88a 	bl	8002544 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002430:	f000 f99a 	bl	8002768 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002434:	f000 f9e6 	bl	8002804 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev_1);
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <main+0x38>)
 800243a:	f7ff fcf3 	bl	8001e24 <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <main+0x3c>)
 8002440:	f003 f94e 	bl	80056e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002444:	2100      	movs	r1, #0
 8002446:	4804      	ldr	r0, [pc, #16]	; (8002458 <main+0x40>)
 8002448:	f003 fa1a 	bl	8005880 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800244c:	e7fe      	b.n	800244c <main+0x34>
 800244e:	bf00      	nop
 8002450:	20000018 	.word	0x20000018
 8002454:	2000010c 	.word	0x2000010c
 8002458:	20000158 	.word	0x20000158

0800245c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b094      	sub	sp, #80	; 0x50
 8002460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002462:	f107 0320 	add.w	r3, r7, #32
 8002466:	2230      	movs	r2, #48	; 0x30
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f005 fa79 	bl	8007962 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002480:	f000 ff48 	bl	8003314 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002484:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <SystemClock_Config+0xd4>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	4a29      	ldr	r2, [pc, #164]	; (8002530 <SystemClock_Config+0xd4>)
 800248a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248e:	6413      	str	r3, [r2, #64]	; 0x40
 8002490:	4b27      	ldr	r3, [pc, #156]	; (8002530 <SystemClock_Config+0xd4>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800249c:	4b25      	ldr	r3, [pc, #148]	; (8002534 <SystemClock_Config+0xd8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a24      	ldr	r2, [pc, #144]	; (8002534 <SystemClock_Config+0xd8>)
 80024a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b22      	ldr	r3, [pc, #136]	; (8002534 <SystemClock_Config+0xd8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024b4:	2301      	movs	r3, #1
 80024b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80024b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024be:	2302      	movs	r3, #2
 80024c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024c8:	2304      	movs	r3, #4
 80024ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80024cc:	23d8      	movs	r3, #216	; 0xd8
 80024ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024d0:	2302      	movs	r3, #2
 80024d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80024d4:	2303      	movs	r3, #3
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 ff79 	bl	80033d4 <HAL_RCC_OscConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <SystemClock_Config+0x90>
  {
    Error_Handler();
 80024e8:	f000 f826 	bl	8002538 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80024ec:	f000 ff22 	bl	8003334 <HAL_PWREx_EnableOverDrive>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80024f6:	f000 f81f 	bl	8002538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024fa:	230f      	movs	r3, #15
 80024fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024fe:	2302      	movs	r3, #2
 8002500:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002506:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800250a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800250c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002510:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	2107      	movs	r1, #7
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f9ff 	bl	800391c <HAL_RCC_ClockConfig>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002524:	f000 f808 	bl	8002538 <Error_Handler>
  }
}
 8002528:	bf00      	nop
 800252a:	3750      	adds	r7, #80	; 0x50
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	40007000 	.word	0x40007000

08002538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800253c:	b672      	cpsid	i
}
 800253e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002540:	e7fe      	b.n	8002540 <Error_Handler+0x8>
	...

08002544 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <MX_SPI4_Init+0x74>)
 800254a:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <MX_SPI4_Init+0x78>)
 800254c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <MX_SPI4_Init+0x74>)
 8002550:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002554:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <MX_SPI4_Init+0x74>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <MX_SPI4_Init+0x74>)
 800255e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002562:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <MX_SPI4_Init+0x74>)
 8002566:	2202      	movs	r2, #2
 8002568:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <MX_SPI4_Init+0x74>)
 800256c:	2201      	movs	r2, #1
 800256e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <MX_SPI4_Init+0x74>)
 8002572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002576:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <MX_SPI4_Init+0x74>)
 800257a:	2210      	movs	r2, #16
 800257c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <MX_SPI4_Init+0x74>)
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <MX_SPI4_Init+0x74>)
 8002586:	2200      	movs	r2, #0
 8002588:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <MX_SPI4_Init+0x74>)
 800258c:	2200      	movs	r2, #0
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <MX_SPI4_Init+0x74>)
 8002592:	2207      	movs	r2, #7
 8002594:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <MX_SPI4_Init+0x74>)
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <MX_SPI4_Init+0x74>)
 800259e:	2200      	movs	r2, #0
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_SPI4_Init+0x74>)
 80025a4:	f001 ffd0 	bl	8004548 <HAL_SPI_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80025ae:	f7ff ffc3 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200000a8 	.word	0x200000a8
 80025bc:	40013400 	.word	0x40013400

080025c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1b      	ldr	r2, [pc, #108]	; (800264c <HAL_SPI_MspInit+0x8c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d12f      	bne.n	8002642 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_SPI_MspInit+0x90>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	4a1a      	ldr	r2, [pc, #104]	; (8002650 <HAL_SPI_MspInit+0x90>)
 80025e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025ec:	6453      	str	r3, [r2, #68]	; 0x44
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_SPI_MspInit+0x90>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_SPI_MspInit+0x90>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a14      	ldr	r2, [pc, #80]	; (8002650 <HAL_SPI_MspInit+0x90>)
 8002600:	f043 0310 	orr.w	r3, r3, #16
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_SPI_MspInit+0x90>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002612:	2364      	movs	r3, #100	; 0x64
 8002614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002622:	2305      	movs	r3, #5
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4619      	mov	r1, r3
 800262c:	4809      	ldr	r0, [pc, #36]	; (8002654 <HAL_SPI_MspInit+0x94>)
 800262e:	f000 fcab 	bl	8002f88 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	2054      	movs	r0, #84	; 0x54
 8002638:	f000 fbdd 	bl	8002df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800263c:	2054      	movs	r0, #84	; 0x54
 800263e:	f000 fbf6 	bl	8002e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002642:	bf00      	nop
 8002644:	3728      	adds	r7, #40	; 0x28
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40013400 	.word	0x40013400
 8002650:	40023800 	.word	0x40023800
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_MspInit+0x44>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a0e      	ldr	r2, [pc, #56]	; (800269c <HAL_MspInit+0x44>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <HAL_MspInit+0x44>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_MspInit+0x44>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_MspInit+0x44>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_MspInit+0x44>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800

080026a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <NMI_Handler+0x4>

080026a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026aa:	e7fe      	b.n	80026aa <HardFault_Handler+0x4>

080026ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <MemManage_Handler+0x4>

080026b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b6:	e7fe      	b.n	80026b6 <BusFault_Handler+0x4>

080026b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <UsageFault_Handler+0x4>

080026be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ec:	f000 fa64 	bl	8002bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <TIM2_IRQHandler+0x10>)
 80026fa:	f003 f9bb 	bl	8005a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	2000010c 	.word	0x2000010c

08002708 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <TIM3_IRQHandler+0x10>)
 800270e:	f003 f9b1 	bl	8005a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000158 	.word	0x20000158

0800271c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <USART3_IRQHandler+0x10>)
 8002722:	f004 f985 	bl	8006a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200001a4 	.word	0x200001a4

08002730 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <SPI4_IRQHandler+0x10>)
 8002736:	f002 fc63 	bl	8005000 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200000a8 	.word	0x200000a8

08002744 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <SystemInit+0x20>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <SystemInit+0x20>)
 8002750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276e:	f107 0310 	add.w	r3, r7, #16
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <MX_TIM2_Init+0x98>)
 8002788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800278c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <MX_TIM2_Init+0x98>)
 8002790:	226b      	movs	r2, #107	; 0x6b
 8002792:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002794:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <MX_TIM2_Init+0x98>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <MX_TIM2_Init+0x98>)
 800279c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <MX_TIM2_Init+0x98>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a8:	4b15      	ldr	r3, [pc, #84]	; (8002800 <MX_TIM2_Init+0x98>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027ae:	4814      	ldr	r0, [pc, #80]	; (8002800 <MX_TIM2_Init+0x98>)
 80027b0:	f002 ff3e 	bl	8005630 <HAL_TIM_Base_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80027ba:	f7ff febd 	bl	8002538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	4619      	mov	r1, r3
 80027ca:	480d      	ldr	r0, [pc, #52]	; (8002800 <MX_TIM2_Init+0x98>)
 80027cc:	f003 fb86 	bl	8005edc <HAL_TIM_ConfigClockSource>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80027d6:	f7ff feaf 	bl	8002538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4806      	ldr	r0, [pc, #24]	; (8002800 <MX_TIM2_Init+0x98>)
 80027e8:	f004 f828 	bl	800683c <HAL_TIMEx_MasterConfigSynchronization>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80027f2:	f7ff fea1 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2000010c 	.word	0x2000010c

08002804 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800280a:	f107 031c 	add.w	r3, r7, #28
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002816:	463b      	mov	r3, r7
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
 8002824:	615a      	str	r2, [r3, #20]
 8002826:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <MX_TIM3_Init+0xac>)
 800282a:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <MX_TIM3_Init+0xb0>)
 800282c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <MX_TIM3_Init+0xac>)
 8002830:	226b      	movs	r2, #107	; 0x6b
 8002832:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <MX_TIM3_Init+0xac>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <MX_TIM3_Init+0xac>)
 800283c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002840:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <MX_TIM3_Init+0xac>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <MX_TIM3_Init+0xac>)
 800284a:	2200      	movs	r2, #0
 800284c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800284e:	4818      	ldr	r0, [pc, #96]	; (80028b0 <MX_TIM3_Init+0xac>)
 8002850:	f002 ffbe 	bl	80057d0 <HAL_TIM_PWM_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800285a:	f7ff fe6d 	bl	8002538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002866:	f107 031c 	add.w	r3, r7, #28
 800286a:	4619      	mov	r1, r3
 800286c:	4810      	ldr	r0, [pc, #64]	; (80028b0 <MX_TIM3_Init+0xac>)
 800286e:	f003 ffe5 	bl	800683c <HAL_TIMEx_MasterConfigSynchronization>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002878:	f7ff fe5e 	bl	8002538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800287c:	2360      	movs	r3, #96	; 0x60
 800287e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800288c:	463b      	mov	r3, r7
 800288e:	2200      	movs	r2, #0
 8002890:	4619      	mov	r1, r3
 8002892:	4807      	ldr	r0, [pc, #28]	; (80028b0 <MX_TIM3_Init+0xac>)
 8002894:	f003 fa0e 	bl	8005cb4 <HAL_TIM_PWM_ConfigChannel>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800289e:	f7ff fe4b 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028a2:	4803      	ldr	r0, [pc, #12]	; (80028b0 <MX_TIM3_Init+0xac>)
 80028a4:	f000 f852 	bl	800294c <HAL_TIM_MspPostInit>

}
 80028a8:	bf00      	nop
 80028aa:	3728      	adds	r7, #40	; 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000158 	.word	0x20000158
 80028b4:	40000400 	.word	0x40000400

080028b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c8:	d113      	bne.n	80028f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <HAL_TIM_Base_MspInit+0x44>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <HAL_TIM_Base_MspInit+0x44>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_TIM_Base_MspInit+0x44>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	201c      	movs	r0, #28
 80028e8:	f000 fa85 	bl	8002df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028ec:	201c      	movs	r0, #28
 80028ee:	f000 fa9e 	bl	8002e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800

08002900 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <HAL_TIM_PWM_MspInit+0x44>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d113      	bne.n	800293a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <HAL_TIM_PWM_MspInit+0x48>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <HAL_TIM_PWM_MspInit+0x48>)
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	6413      	str	r3, [r2, #64]	; 0x40
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_TIM_PWM_MspInit+0x48>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	201d      	movs	r0, #29
 8002930:	f000 fa61 	bl	8002df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002934:	201d      	movs	r0, #29
 8002936:	f000 fa7a 	bl	8002e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40000400 	.word	0x40000400
 8002948:	40023800 	.word	0x40023800

0800294c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 030c 	add.w	r3, r7, #12
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a11      	ldr	r2, [pc, #68]	; (80029b0 <HAL_TIM_MspPostInit+0x64>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d11b      	bne.n	80029a6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_TIM_MspPostInit+0x68>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_TIM_MspPostInit+0x68>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_TIM_MspPostInit+0x68>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002986:	2340      	movs	r3, #64	; 0x40
 8002988:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002996:	2302      	movs	r3, #2
 8002998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	f107 030c 	add.w	r3, r7, #12
 800299e:	4619      	mov	r1, r3
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <HAL_TIM_MspPostInit+0x6c>)
 80029a2:	f000 faf1 	bl	8002f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80029a6:	bf00      	nop
 80029a8:	3720      	adds	r7, #32
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020000 	.word	0x40020000

080029bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029c0:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <MX_USART3_UART_Init+0x58>)
 80029c2:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <MX_USART3_UART_Init+0x5c>)
 80029c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <MX_USART3_UART_Init+0x58>)
 80029c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <MX_USART3_UART_Init+0x58>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <MX_USART3_UART_Init+0x58>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_USART3_UART_Init+0x58>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <MX_USART3_UART_Init+0x58>)
 80029e2:	220c      	movs	r2, #12
 80029e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <MX_USART3_UART_Init+0x58>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MX_USART3_UART_Init+0x58>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <MX_USART3_UART_Init+0x58>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <MX_USART3_UART_Init+0x58>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029fe:	4805      	ldr	r0, [pc, #20]	; (8002a14 <MX_USART3_UART_Init+0x58>)
 8002a00:	f003 ffc8 	bl	8006994 <HAL_UART_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002a0a:	f7ff fd95 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200001a4 	.word	0x200001a4
 8002a18:	40004800 	.word	0x40004800

08002a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b0aa      	sub	sp, #168	; 0xa8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a34:	f107 0310 	add.w	r3, r7, #16
 8002a38:	2284      	movs	r2, #132	; 0x84
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f004 ff90 	bl	8007962 <memset>
  if(uartHandle->Instance==USART3)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a26      	ldr	r2, [pc, #152]	; (8002ae0 <HAL_UART_MspInit+0xc4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d144      	bne.n	8002ad6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a52:	2300      	movs	r3, #0
 8002a54:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a56:	f107 0310 	add.w	r3, r7, #16
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 f984 	bl	8003d68 <HAL_RCCEx_PeriphCLKConfig>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a66:	f7ff fd67 	bl	8002538 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <HAL_UART_MspInit+0xc8>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <HAL_UART_MspInit+0xc8>)
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_UART_MspInit+0xc8>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a82:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <HAL_UART_MspInit+0xc8>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a17      	ldr	r2, [pc, #92]	; (8002ae4 <HAL_UART_MspInit+0xc8>)
 8002a88:	f043 0308 	orr.w	r3, r3, #8
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <HAL_UART_MspInit+0xc8>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ab4:	2307      	movs	r3, #7
 8002ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4809      	ldr	r0, [pc, #36]	; (8002ae8 <HAL_UART_MspInit+0xcc>)
 8002ac2:	f000 fa61 	bl	8002f88 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2027      	movs	r0, #39	; 0x27
 8002acc:	f000 f993 	bl	8002df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ad0:	2027      	movs	r0, #39	; 0x27
 8002ad2:	f000 f9ac 	bl	8002e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	37a8      	adds	r7, #168	; 0xa8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40004800 	.word	0x40004800
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020c00 	.word	0x40020c00

08002aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002af0:	480d      	ldr	r0, [pc, #52]	; (8002b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002af2:	490e      	ldr	r1, [pc, #56]	; (8002b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002af4:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af8:	e002      	b.n	8002b00 <LoopCopyDataInit>

08002afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afe:	3304      	adds	r3, #4

08002b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b04:	d3f9      	bcc.n	8002afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b06:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b08:	4c0b      	ldr	r4, [pc, #44]	; (8002b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b0c:	e001      	b.n	8002b12 <LoopFillZerobss>

08002b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b10:	3204      	adds	r2, #4

08002b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b14:	d3fb      	bcc.n	8002b0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b16:	f7ff fe15 	bl	8002744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b1a:	f004 ff2b 	bl	8007974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b1e:	f7ff fc7b 	bl	8002418 <main>
  bx  lr    
 8002b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b24:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b2c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002b30:	08007a30 	.word	0x08007a30
  ldr r2, =_sbss
 8002b34:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002b38:	20000230 	.word	0x20000230

08002b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b3c:	e7fe      	b.n	8002b3c <ADC_IRQHandler>

08002b3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b42:	2003      	movs	r0, #3
 8002b44:	f000 f94c 	bl	8002de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f000 f805 	bl	8002b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b4e:	f7ff fd83 	bl	8002658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_InitTick+0x54>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_InitTick+0x58>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f967 	bl	8002e4a <HAL_SYSTICK_Config>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00e      	b.n	8002ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b0f      	cmp	r3, #15
 8002b8a:	d80a      	bhi.n	8002ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	f000 f92f 	bl	8002df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b98:	4a06      	ldr	r2, [pc, #24]	; (8002bb4 <HAL_InitTick+0x5c>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e000      	b.n	8002ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000060 	.word	0x20000060
 8002bb0:	20000068 	.word	0x20000068
 8002bb4:	20000064 	.word	0x20000064

08002bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_IncTick+0x20>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_IncTick+0x24>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <HAL_IncTick+0x24>)
 8002bca:	6013      	str	r3, [r2, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000068 	.word	0x20000068
 8002bdc:	2000022c 	.word	0x2000022c

08002be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return uwTick;
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <HAL_GetTick+0x14>)
 8002be6:	681b      	ldr	r3, [r3, #0]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	2000022c 	.word	0x2000022c

08002bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7ff ffee 	bl	8002be0 <HAL_GetTick>
 8002c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d005      	beq.n	8002c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_Delay+0x44>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c1e:	bf00      	nop
 8002c20:	f7ff ffde 	bl	8002be0 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d8f7      	bhi.n	8002c20 <HAL_Delay+0x28>
  {
  }
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000068 	.word	0x20000068

08002c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <__NVIC_SetPriorityGrouping+0x40>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <__NVIC_SetPriorityGrouping+0x44>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6e:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <__NVIC_SetPriorityGrouping+0x40>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00
 8002c84:	05fa0000 	.word	0x05fa0000

08002c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	f003 0307 	and.w	r3, r3, #7
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	db0b      	blt.n	8002cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	4907      	ldr	r1, [pc, #28]	; (8002cdc <__NVIC_EnableIRQ+0x38>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000e100 	.word	0xe000e100

08002ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	db0a      	blt.n	8002d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	490c      	ldr	r1, [pc, #48]	; (8002d2c <__NVIC_SetPriority+0x4c>)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	0112      	lsls	r2, r2, #4
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	440b      	add	r3, r1
 8002d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d08:	e00a      	b.n	8002d20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4908      	ldr	r1, [pc, #32]	; (8002d30 <__NVIC_SetPriority+0x50>)
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	3b04      	subs	r3, #4
 8002d18:	0112      	lsls	r2, r2, #4
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	761a      	strb	r2, [r3, #24]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000e100 	.word	0xe000e100
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	; 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f1c3 0307 	rsb	r3, r3, #7
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	bf28      	it	cs
 8002d52:	2304      	movcs	r3, #4
 8002d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d902      	bls.n	8002d64 <NVIC_EncodePriority+0x30>
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3b03      	subs	r3, #3
 8002d62:	e000      	b.n	8002d66 <NVIC_EncodePriority+0x32>
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43da      	mvns	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	401a      	ands	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	43d9      	mvns	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	4313      	orrs	r3, r2
         );
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3724      	adds	r7, #36	; 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dac:	d301      	bcc.n	8002db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00f      	b.n	8002dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <SysTick_Config+0x40>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dba:	210f      	movs	r1, #15
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	f7ff ff8e 	bl	8002ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <SysTick_Config+0x40>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dca:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <SysTick_Config+0x40>)
 8002dcc:	2207      	movs	r2, #7
 8002dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	e000e010 	.word	0xe000e010

08002de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff29 	bl	8002c40 <__NVIC_SetPriorityGrouping>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e08:	f7ff ff3e 	bl	8002c88 <__NVIC_GetPriorityGrouping>
 8002e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	6978      	ldr	r0, [r7, #20]
 8002e14:	f7ff ff8e 	bl	8002d34 <NVIC_EncodePriority>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff5d 	bl	8002ce0 <__NVIC_SetPriority>
}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff31 	bl	8002ca4 <__NVIC_EnableIRQ>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff ffa2 	bl	8002d9c <SysTick_Config>
 8002e58:	4603      	mov	r3, r0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff feb6 	bl	8002be0 <HAL_GetTick>
 8002e74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d008      	beq.n	8002e94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2280      	movs	r2, #128	; 0x80
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e052      	b.n	8002f3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0216 	bic.w	r2, r2, #22
 8002ea2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d103      	bne.n	8002ec4 <HAL_DMA_Abort+0x62>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0208 	bic.w	r2, r2, #8
 8002ed2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee4:	e013      	b.n	8002f0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ee6:	f7ff fe7b 	bl	8002be0 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d90c      	bls.n	8002f0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2203      	movs	r2, #3
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e015      	b.n	8002f3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e4      	bne.n	8002ee6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	223f      	movs	r2, #63	; 0x3f
 8002f22:	409a      	lsls	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d004      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e00c      	b.n	8002f7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2205      	movs	r2, #5
 8002f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	; 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e175      	b.n	8003294 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fa8:	2201      	movs	r2, #1
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	f040 8164 	bne.w	800328e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d005      	beq.n	8002fde <HAL_GPIO_Init+0x56>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d130      	bne.n	8003040 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	2203      	movs	r2, #3
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003014:	2201      	movs	r2, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 0201 	and.w	r2, r3, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b03      	cmp	r3, #3
 800304a:	d017      	beq.n	800307c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	2203      	movs	r2, #3
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d123      	bne.n	80030d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	08da      	lsrs	r2, r3, #3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3208      	adds	r2, #8
 8003090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	220f      	movs	r2, #15
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	08da      	lsrs	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3208      	adds	r2, #8
 80030ca:	69b9      	ldr	r1, [r7, #24]
 80030cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	2203      	movs	r2, #3
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 0203 	and.w	r2, r3, #3
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80be 	beq.w	800328e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003112:	4b66      	ldr	r3, [pc, #408]	; (80032ac <HAL_GPIO_Init+0x324>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	4a65      	ldr	r2, [pc, #404]	; (80032ac <HAL_GPIO_Init+0x324>)
 8003118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800311c:	6453      	str	r3, [r2, #68]	; 0x44
 800311e:	4b63      	ldr	r3, [pc, #396]	; (80032ac <HAL_GPIO_Init+0x324>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800312a:	4a61      	ldr	r2, [pc, #388]	; (80032b0 <HAL_GPIO_Init+0x328>)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	3302      	adds	r3, #2
 8003132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a58      	ldr	r2, [pc, #352]	; (80032b4 <HAL_GPIO_Init+0x32c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d037      	beq.n	80031c6 <HAL_GPIO_Init+0x23e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a57      	ldr	r2, [pc, #348]	; (80032b8 <HAL_GPIO_Init+0x330>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d031      	beq.n	80031c2 <HAL_GPIO_Init+0x23a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a56      	ldr	r2, [pc, #344]	; (80032bc <HAL_GPIO_Init+0x334>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d02b      	beq.n	80031be <HAL_GPIO_Init+0x236>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a55      	ldr	r2, [pc, #340]	; (80032c0 <HAL_GPIO_Init+0x338>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d025      	beq.n	80031ba <HAL_GPIO_Init+0x232>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a54      	ldr	r2, [pc, #336]	; (80032c4 <HAL_GPIO_Init+0x33c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01f      	beq.n	80031b6 <HAL_GPIO_Init+0x22e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a53      	ldr	r2, [pc, #332]	; (80032c8 <HAL_GPIO_Init+0x340>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d019      	beq.n	80031b2 <HAL_GPIO_Init+0x22a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a52      	ldr	r2, [pc, #328]	; (80032cc <HAL_GPIO_Init+0x344>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_GPIO_Init+0x226>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <HAL_GPIO_Init+0x348>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00d      	beq.n	80031aa <HAL_GPIO_Init+0x222>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a50      	ldr	r2, [pc, #320]	; (80032d4 <HAL_GPIO_Init+0x34c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <HAL_GPIO_Init+0x21e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4f      	ldr	r2, [pc, #316]	; (80032d8 <HAL_GPIO_Init+0x350>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d101      	bne.n	80031a2 <HAL_GPIO_Init+0x21a>
 800319e:	2309      	movs	r3, #9
 80031a0:	e012      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031a2:	230a      	movs	r3, #10
 80031a4:	e010      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031a6:	2308      	movs	r3, #8
 80031a8:	e00e      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031aa:	2307      	movs	r3, #7
 80031ac:	e00c      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031ae:	2306      	movs	r3, #6
 80031b0:	e00a      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031b2:	2305      	movs	r3, #5
 80031b4:	e008      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031b6:	2304      	movs	r3, #4
 80031b8:	e006      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031ba:	2303      	movs	r3, #3
 80031bc:	e004      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031be:	2302      	movs	r3, #2
 80031c0:	e002      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_GPIO_Init+0x240>
 80031c6:	2300      	movs	r3, #0
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	f002 0203 	and.w	r2, r2, #3
 80031ce:	0092      	lsls	r2, r2, #2
 80031d0:	4093      	lsls	r3, r2
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031d8:	4935      	ldr	r1, [pc, #212]	; (80032b0 <HAL_GPIO_Init+0x328>)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	3302      	adds	r3, #2
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031e6:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <HAL_GPIO_Init+0x354>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800320a:	4a34      	ldr	r2, [pc, #208]	; (80032dc <HAL_GPIO_Init+0x354>)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003210:	4b32      	ldr	r3, [pc, #200]	; (80032dc <HAL_GPIO_Init+0x354>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003234:	4a29      	ldr	r2, [pc, #164]	; (80032dc <HAL_GPIO_Init+0x354>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800323a:	4b28      	ldr	r3, [pc, #160]	; (80032dc <HAL_GPIO_Init+0x354>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800325e:	4a1f      	ldr	r2, [pc, #124]	; (80032dc <HAL_GPIO_Init+0x354>)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_GPIO_Init+0x354>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003288:	4a14      	ldr	r2, [pc, #80]	; (80032dc <HAL_GPIO_Init+0x354>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3301      	adds	r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b0f      	cmp	r3, #15
 8003298:	f67f ae86 	bls.w	8002fa8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3724      	adds	r7, #36	; 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40013800 	.word	0x40013800
 80032b4:	40020000 	.word	0x40020000
 80032b8:	40020400 	.word	0x40020400
 80032bc:	40020800 	.word	0x40020800
 80032c0:	40020c00 	.word	0x40020c00
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40021400 	.word	0x40021400
 80032cc:	40021800 	.word	0x40021800
 80032d0:	40021c00 	.word	0x40021c00
 80032d4:	40022000 	.word	0x40022000
 80032d8:	40022400 	.word	0x40022400
 80032dc:	40013c00 	.word	0x40013c00

080032e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
 80032ec:	4613      	mov	r3, r2
 80032ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f0:	787b      	ldrb	r3, [r7, #1]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032fc:	e003      	b.n	8003306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032fe:	887b      	ldrh	r3, [r7, #2]
 8003300:	041a      	lsls	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	619a      	str	r2, [r3, #24]
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a04      	ldr	r2, [pc, #16]	; (8003330 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800331e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003322:	6013      	str	r3, [r2, #0]
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40007000 	.word	0x40007000

08003334 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	4b23      	ldr	r3, [pc, #140]	; (80033cc <HAL_PWREx_EnableOverDrive+0x98>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a22      	ldr	r2, [pc, #136]	; (80033cc <HAL_PWREx_EnableOverDrive+0x98>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_PWREx_EnableOverDrive+0x98>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003356:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003362:	f7ff fc3d 	bl	8002be0 <HAL_GetTick>
 8003366:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003368:	e009      	b.n	800337e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800336a:	f7ff fc39 	bl	8002be0 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003378:	d901      	bls.n	800337e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e022      	b.n	80033c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338a:	d1ee      	bne.n	800336a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003396:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003398:	f7ff fc22 	bl	8002be0 <HAL_GetTick>
 800339c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800339e:	e009      	b.n	80033b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033a0:	f7ff fc1e 	bl	8002be0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033ae:	d901      	bls.n	80033b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e007      	b.n	80033c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c0:	d1ee      	bne.n	80033a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40007000 	.word	0x40007000

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e291      	b.n	800390e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8087 	beq.w	8003506 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033f8:	4b96      	ldr	r3, [pc, #600]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b04      	cmp	r3, #4
 8003402:	d00c      	beq.n	800341e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003404:	4b93      	ldr	r3, [pc, #588]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b08      	cmp	r3, #8
 800340e:	d112      	bne.n	8003436 <HAL_RCC_OscConfig+0x62>
 8003410:	4b90      	ldr	r3, [pc, #576]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341c:	d10b      	bne.n	8003436 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341e:	4b8d      	ldr	r3, [pc, #564]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d06c      	beq.n	8003504 <HAL_RCC_OscConfig+0x130>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d168      	bne.n	8003504 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e26b      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343e:	d106      	bne.n	800344e <HAL_RCC_OscConfig+0x7a>
 8003440:	4b84      	ldr	r3, [pc, #528]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a83      	ldr	r2, [pc, #524]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	e02e      	b.n	80034ac <HAL_RCC_OscConfig+0xd8>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x9c>
 8003456:	4b7f      	ldr	r3, [pc, #508]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7e      	ldr	r2, [pc, #504]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800345c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b7c      	ldr	r3, [pc, #496]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7b      	ldr	r2, [pc, #492]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e01d      	b.n	80034ac <HAL_RCC_OscConfig+0xd8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0xc0>
 800347a:	4b76      	ldr	r3, [pc, #472]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a75      	ldr	r2, [pc, #468]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b73      	ldr	r3, [pc, #460]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a72      	ldr	r2, [pc, #456]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800348c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e00b      	b.n	80034ac <HAL_RCC_OscConfig+0xd8>
 8003494:	4b6f      	ldr	r3, [pc, #444]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a6e      	ldr	r2, [pc, #440]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800349a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	4b6c      	ldr	r3, [pc, #432]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a6b      	ldr	r2, [pc, #428]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80034a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d013      	beq.n	80034dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7ff fb94 	bl	8002be0 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7ff fb90 	bl	8002be0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e21f      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	4b61      	ldr	r3, [pc, #388]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0xe8>
 80034da:	e014      	b.n	8003506 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7ff fb80 	bl	8002be0 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e4:	f7ff fb7c 	bl	8002be0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e20b      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	4b57      	ldr	r3, [pc, #348]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x110>
 8003502:	e000      	b.n	8003506 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d069      	beq.n	80035e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003512:	4b50      	ldr	r3, [pc, #320]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800351e:	4b4d      	ldr	r3, [pc, #308]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b08      	cmp	r3, #8
 8003528:	d11c      	bne.n	8003564 <HAL_RCC_OscConfig+0x190>
 800352a:	4b4a      	ldr	r3, [pc, #296]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d116      	bne.n	8003564 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	4b47      	ldr	r3, [pc, #284]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_RCC_OscConfig+0x17a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d001      	beq.n	800354e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e1df      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354e:	4b41      	ldr	r3, [pc, #260]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	493d      	ldr	r1, [pc, #244]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003562:	e040      	b.n	80035e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d023      	beq.n	80035b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356c:	4b39      	ldr	r3, [pc, #228]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a38      	ldr	r2, [pc, #224]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7ff fb32 	bl	8002be0 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003580:	f7ff fb2e 	bl	8002be0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1bd      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359e:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4929      	ldr	r1, [pc, #164]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
 80035b2:	e018      	b.n	80035e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b4:	4b27      	ldr	r3, [pc, #156]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a26      	ldr	r2, [pc, #152]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7ff fb0e 	bl	8002be0 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c8:	f7ff fb0a 	bl	8002be0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e199      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035da:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d038      	beq.n	8003664 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d019      	beq.n	800362e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fa:	4b16      	ldr	r3, [pc, #88]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80035fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fe:	4a15      	ldr	r2, [pc, #84]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003606:	f7ff faeb 	bl	8002be0 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800360e:	f7ff fae7 	bl	8002be0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e176      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x23a>
 800362c:	e01a      	b.n	8003664 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003632:	4a08      	ldr	r2, [pc, #32]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7ff fad1 	bl	8002be0 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	e00a      	b.n	8003658 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003642:	f7ff facd 	bl	8002be0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d903      	bls.n	8003658 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e15c      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
 8003654:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	4b91      	ldr	r3, [pc, #580]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800365a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1ee      	bne.n	8003642 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a4 	beq.w	80037ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003672:	4b8b      	ldr	r3, [pc, #556]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10d      	bne.n	800369a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	4b88      	ldr	r3, [pc, #544]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4a87      	ldr	r2, [pc, #540]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003688:	6413      	str	r3, [r2, #64]	; 0x40
 800368a:	4b85      	ldr	r3, [pc, #532]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003696:	2301      	movs	r3, #1
 8003698:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369a:	4b82      	ldr	r3, [pc, #520]	; (80038a4 <HAL_RCC_OscConfig+0x4d0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d118      	bne.n	80036d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036a6:	4b7f      	ldr	r3, [pc, #508]	; (80038a4 <HAL_RCC_OscConfig+0x4d0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7e      	ldr	r2, [pc, #504]	; (80038a4 <HAL_RCC_OscConfig+0x4d0>)
 80036ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b2:	f7ff fa95 	bl	8002be0 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ba:	f7ff fa91 	bl	8002be0 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b64      	cmp	r3, #100	; 0x64
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e120      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036cc:	4b75      	ldr	r3, [pc, #468]	; (80038a4 <HAL_RCC_OscConfig+0x4d0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x31a>
 80036e0:	4b6f      	ldr	r3, [pc, #444]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	4a6e      	ldr	r2, [pc, #440]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6713      	str	r3, [r2, #112]	; 0x70
 80036ec:	e02d      	b.n	800374a <HAL_RCC_OscConfig+0x376>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0x33c>
 80036f6:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	4a69      	ldr	r2, [pc, #420]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	6713      	str	r3, [r2, #112]	; 0x70
 8003702:	4b67      	ldr	r3, [pc, #412]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a66      	ldr	r2, [pc, #408]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003708:	f023 0304 	bic.w	r3, r3, #4
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
 800370e:	e01c      	b.n	800374a <HAL_RCC_OscConfig+0x376>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b05      	cmp	r3, #5
 8003716:	d10c      	bne.n	8003732 <HAL_RCC_OscConfig+0x35e>
 8003718:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	4a60      	ldr	r2, [pc, #384]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800371e:	f043 0304 	orr.w	r3, r3, #4
 8003722:	6713      	str	r3, [r2, #112]	; 0x70
 8003724:	4b5e      	ldr	r3, [pc, #376]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
 8003730:	e00b      	b.n	800374a <HAL_RCC_OscConfig+0x376>
 8003732:	4b5b      	ldr	r3, [pc, #364]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	4a5a      	ldr	r2, [pc, #360]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	6713      	str	r3, [r2, #112]	; 0x70
 800373e:	4b58      	ldr	r3, [pc, #352]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a57      	ldr	r2, [pc, #348]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d015      	beq.n	800377e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7ff fa45 	bl	8002be0 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7ff fa41 	bl	8002be0 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	; 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0ce      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003770:	4b4b      	ldr	r3, [pc, #300]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0ee      	beq.n	800375a <HAL_RCC_OscConfig+0x386>
 800377c:	e014      	b.n	80037a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377e:	f7ff fa2f 	bl	8002be0 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7ff fa2b 	bl	8002be0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0b8      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379c:	4b40      	ldr	r3, [pc, #256]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ee      	bne.n	8003786 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d105      	bne.n	80037ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ae:	4b3c      	ldr	r3, [pc, #240]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a3b      	ldr	r2, [pc, #236]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80037b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80a4 	beq.w	800390c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c4:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d06b      	beq.n	80038a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d149      	bne.n	800386c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d8:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a30      	ldr	r2, [pc, #192]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80037de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7ff f9fc 	bl	8002be0 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7ff f9f8 	bl	8002be0 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e087      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	019b      	lsls	r3, r3, #6
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	3b01      	subs	r3, #1
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	4313      	orrs	r3, r2
 8003830:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003832:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003836:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7ff f9cc 	bl	8002be0 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384c:	f7ff f9c8 	bl	8002be0 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e057      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x478>
 800386a:	e04f      	b.n	800390c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7ff f9b2 	bl	8002be0 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003880:	f7ff f9ae 	bl	8002be0 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e03d      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x4ac>
 800389e:	e035      	b.n	800390c <HAL_RCC_OscConfig+0x538>
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_RCC_OscConfig+0x544>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d028      	beq.n	8003908 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d121      	bne.n	8003908 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d11a      	bne.n	8003908 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038d8:	4013      	ands	r3, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d111      	bne.n	8003908 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	3b01      	subs	r3, #1
 80038f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800

0800391c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0d0      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003934:	4b6a      	ldr	r3, [pc, #424]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d910      	bls.n	8003964 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b67      	ldr	r3, [pc, #412]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 020f 	bic.w	r2, r3, #15
 800394a:	4965      	ldr	r1, [pc, #404]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b63      	ldr	r3, [pc, #396]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0b8      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d020      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800397c:	4b59      	ldr	r3, [pc, #356]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a58      	ldr	r2, [pc, #352]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003986:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003994:	4b53      	ldr	r3, [pc, #332]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4a52      	ldr	r2, [pc, #328]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 800399a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800399e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a0:	4b50      	ldr	r3, [pc, #320]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	494d      	ldr	r1, [pc, #308]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d040      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d115      	bne.n	80039fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e07f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039de:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e073      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ee:	4b3d      	ldr	r3, [pc, #244]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e06b      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fe:	4b39      	ldr	r3, [pc, #228]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4936      	ldr	r1, [pc, #216]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a10:	f7ff f8e6 	bl	8002be0 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a18:	f7ff f8e2 	bl	8002be0 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e053      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 020c 	and.w	r2, r3, #12
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d1eb      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a40:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d210      	bcs.n	8003a70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 020f 	bic.w	r2, r3, #15
 8003a56:	4922      	ldr	r1, [pc, #136]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e032      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a7c:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4916      	ldr	r1, [pc, #88]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a9a:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	490e      	ldr	r1, [pc, #56]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aae:	f000 f821 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	490a      	ldr	r1, [pc, #40]	; (8003ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ac0:	5ccb      	ldrb	r3, [r1, r3]
 8003ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac6:	4a09      	ldr	r2, [pc, #36]	; (8003aec <HAL_RCC_ClockConfig+0x1d0>)
 8003ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aca:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <HAL_RCC_ClockConfig+0x1d4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff f842 	bl	8002b58 <HAL_InitTick>

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023c00 	.word	0x40023c00
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	08007a08 	.word	0x08007a08
 8003aec:	20000060 	.word	0x20000060
 8003af0:	20000064 	.word	0x20000064

08003af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af8:	b094      	sub	sp, #80	; 0x50
 8003afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	647b      	str	r3, [r7, #68]	; 0x44
 8003b00:	2300      	movs	r3, #0
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b04:	2300      	movs	r3, #0
 8003b06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b0c:	4b79      	ldr	r3, [pc, #484]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d00d      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x40>
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	f200 80e1 	bhi.w	8003ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x34>
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b26:	e0db      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4b73      	ldr	r3, [pc, #460]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b2c:	e0db      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b2e:	4b73      	ldr	r3, [pc, #460]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x208>)
 8003b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b32:	e0d8      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b34:	4b6f      	ldr	r3, [pc, #444]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b3c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d063      	beq.n	8003c12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4a:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	099b      	lsrs	r3, r3, #6
 8003b50:	2200      	movs	r2, #0
 8003b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b5e:	2300      	movs	r3, #0
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
 8003b62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b66:	4622      	mov	r2, r4
 8003b68:	462b      	mov	r3, r5
 8003b6a:	f04f 0000 	mov.w	r0, #0
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	0159      	lsls	r1, r3, #5
 8003b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b78:	0150      	lsls	r0, r2, #5
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4621      	mov	r1, r4
 8003b80:	1a51      	subs	r1, r2, r1
 8003b82:	6139      	str	r1, [r7, #16]
 8003b84:	4629      	mov	r1, r5
 8003b86:	eb63 0301 	sbc.w	r3, r3, r1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b98:	4659      	mov	r1, fp
 8003b9a:	018b      	lsls	r3, r1, #6
 8003b9c:	4651      	mov	r1, sl
 8003b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ba2:	4651      	mov	r1, sl
 8003ba4:	018a      	lsls	r2, r1, #6
 8003ba6:	4651      	mov	r1, sl
 8003ba8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bac:	4659      	mov	r1, fp
 8003bae:	eb63 0901 	sbc.w	r9, r3, r1
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bc6:	4690      	mov	r8, r2
 8003bc8:	4699      	mov	r9, r3
 8003bca:	4623      	mov	r3, r4
 8003bcc:	eb18 0303 	adds.w	r3, r8, r3
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	eb49 0303 	adc.w	r3, r9, r3
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003be6:	4629      	mov	r1, r5
 8003be8:	024b      	lsls	r3, r1, #9
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	024a      	lsls	r2, r1, #9
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c04:	f7fc ffce 	bl	8000ba4 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c10:	e058      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c12:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
 8003c28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	f04f 0000 	mov.w	r0, #0
 8003c34:	f04f 0100 	mov.w	r1, #0
 8003c38:	0159      	lsls	r1, r3, #5
 8003c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c3e:	0150      	lsls	r0, r2, #5
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4641      	mov	r1, r8
 8003c46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c64:	ebb2 040a 	subs.w	r4, r2, sl
 8003c68:	eb63 050b 	sbc.w	r5, r3, fp
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	00eb      	lsls	r3, r5, #3
 8003c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c7a:	00e2      	lsls	r2, r4, #3
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	461d      	mov	r5, r3
 8003c80:	4643      	mov	r3, r8
 8003c82:	18e3      	adds	r3, r4, r3
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	464b      	mov	r3, r9
 8003c88:	eb45 0303 	adc.w	r3, r5, r3
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	028b      	lsls	r3, r1, #10
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	028a      	lsls	r2, r1, #10
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cae:	2200      	movs	r2, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	61fa      	str	r2, [r7, #28]
 8003cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb8:	f7fc ff74 	bl	8000ba4 <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	0c1b      	lsrs	r3, r3, #16
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003cd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cde:	e002      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ce2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3750      	adds	r7, #80	; 0x50
 8003cec:	46bd      	mov	sp, r7
 8003cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	007a1200 	.word	0x007a1200

08003d00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000060 	.word	0x20000060

08003d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d1c:	f7ff fff0 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0a9b      	lsrs	r3, r3, #10
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4903      	ldr	r1, [pc, #12]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	08007a18 	.word	0x08007a18

08003d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d44:	f7ff ffdc 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	0b5b      	lsrs	r3, r3, #13
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	4903      	ldr	r1, [pc, #12]	; (8003d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40023800 	.word	0x40023800
 8003d64:	08007a18 	.word	0x08007a18

08003d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d012      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d90:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4a68      	ldr	r2, [pc, #416]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d9a:	6093      	str	r3, [r2, #8]
 8003d9c:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	4964      	ldr	r1, [pc, #400]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003db2:	2301      	movs	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d017      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc2:	4b5d      	ldr	r3, [pc, #372]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	4959      	ldr	r1, [pc, #356]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de0:	d101      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003de2:	2301      	movs	r3, #1
 8003de4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d017      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dfe:	4b4e      	ldr	r3, [pc, #312]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	494a      	ldr	r1, [pc, #296]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 808b 	beq.w	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	4a39      	ldr	r2, [pc, #228]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e56:	6413      	str	r3, [r2, #64]	; 0x40
 8003e58:	4b37      	ldr	r3, [pc, #220]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e64:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a34      	ldr	r2, [pc, #208]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e70:	f7fe feb6 	bl	8002be0 <HAL_GetTick>
 8003e74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e78:	f7fe feb2 	bl	8002be0 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e357      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e8a:	4b2c      	ldr	r3, [pc, #176]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e96:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d035      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d02e      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb4:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eca:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	4a1a      	ldr	r2, [pc, #104]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ed6:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003edc:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d114      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fe fe7a 	bl	8002be0 <HAL_GetTick>
 8003eec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fe fe76 	bl	8002be0 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e319      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0ee      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f1e:	d111      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f2e:	400b      	ands	r3, r1
 8003f30:	4901      	ldr	r1, [pc, #4]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	608b      	str	r3, [r1, #8]
 8003f36:	e00b      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	0ffffcff 	.word	0x0ffffcff
 8003f44:	4baa      	ldr	r3, [pc, #680]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4aa9      	ldr	r2, [pc, #676]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f4e:	6093      	str	r3, [r2, #8]
 8003f50:	4ba7      	ldr	r3, [pc, #668]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5c:	49a4      	ldr	r1, [pc, #656]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f6e:	4ba0      	ldr	r3, [pc, #640]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f74:	4a9e      	ldr	r2, [pc, #632]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f7e:	4b9c      	ldr	r3, [pc, #624]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	4999      	ldr	r1, [pc, #612]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f9c:	4b94      	ldr	r3, [pc, #592]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003faa:	4991      	ldr	r1, [pc, #580]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fbe:	4b8c      	ldr	r3, [pc, #560]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fcc:	4988      	ldr	r1, [pc, #544]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fe0:	4b83      	ldr	r3, [pc, #524]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fee:	4980      	ldr	r1, [pc, #512]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004002:	4b7b      	ldr	r3, [pc, #492]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	4977      	ldr	r1, [pc, #476]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004024:	4b72      	ldr	r3, [pc, #456]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	f023 0203 	bic.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	496f      	ldr	r1, [pc, #444]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004046:	4b6a      	ldr	r3, [pc, #424]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f023 020c 	bic.w	r2, r3, #12
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004054:	4966      	ldr	r1, [pc, #408]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004068:	4b61      	ldr	r3, [pc, #388]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004076:	495e      	ldr	r1, [pc, #376]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800408a:	4b59      	ldr	r3, [pc, #356]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004098:	4955      	ldr	r1, [pc, #340]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040ac:	4b50      	ldr	r3, [pc, #320]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	494d      	ldr	r1, [pc, #308]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040ce:	4b48      	ldr	r3, [pc, #288]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040dc:	4944      	ldr	r1, [pc, #272]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040f0:	4b3f      	ldr	r3, [pc, #252]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	493c      	ldr	r1, [pc, #240]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004112:	4b37      	ldr	r3, [pc, #220]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004120:	4933      	ldr	r1, [pc, #204]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004134:	4b2e      	ldr	r3, [pc, #184]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004142:	492b      	ldr	r1, [pc, #172]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d011      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004156:	4b26      	ldr	r3, [pc, #152]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004164:	4922      	ldr	r1, [pc, #136]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004174:	d101      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004186:	2301      	movs	r3, #1
 8004188:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004196:	4b16      	ldr	r3, [pc, #88]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a4:	4912      	ldr	r1, [pc, #72]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c8:	4909      	ldr	r1, [pc, #36]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d006      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80d9 	beq.w	8004396 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041e4:	4b02      	ldr	r3, [pc, #8]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a01      	ldr	r2, [pc, #4]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041ee:	e001      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80041f0:	40023800 	.word	0x40023800
 80041f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f6:	f7fe fcf3 	bl	8002be0 <HAL_GetTick>
 80041fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041fe:	f7fe fcef 	bl	8002be0 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b64      	cmp	r3, #100	; 0x64
 800420a:	d901      	bls.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e194      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004210:	4b6c      	ldr	r3, [pc, #432]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f0      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d021      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422c:	2b00      	cmp	r3, #0
 800422e:	d11d      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004230:	4b64      	ldr	r3, [pc, #400]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004236:	0c1b      	lsrs	r3, r3, #16
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800423e:	4b61      	ldr	r3, [pc, #388]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004244:	0e1b      	lsrs	r3, r3, #24
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	019a      	lsls	r2, r3, #6
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	431a      	orrs	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	061b      	lsls	r3, r3, #24
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	071b      	lsls	r3, r3, #28
 8004264:	4957      	ldr	r1, [pc, #348]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800428a:	2b00      	cmp	r3, #0
 800428c:	d02e      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004296:	d129      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004298:	4b4a      	ldr	r3, [pc, #296]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800429a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429e:	0c1b      	lsrs	r3, r3, #16
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042a6:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ac:	0f1b      	lsrs	r3, r3, #28
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	019a      	lsls	r2, r3, #6
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	041b      	lsls	r3, r3, #16
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	431a      	orrs	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	071b      	lsls	r3, r3, #28
 80042cc:	493d      	ldr	r1, [pc, #244]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042d4:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042da:	f023 021f 	bic.w	r2, r3, #31
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	3b01      	subs	r3, #1
 80042e4:	4937      	ldr	r1, [pc, #220]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01d      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042f8:	4b32      	ldr	r3, [pc, #200]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042fe:	0e1b      	lsrs	r3, r3, #24
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004306:	4b2f      	ldr	r3, [pc, #188]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800430c:	0f1b      	lsrs	r3, r3, #28
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	019a      	lsls	r2, r3, #6
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	041b      	lsls	r3, r3, #16
 8004320:	431a      	orrs	r2, r3
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	061b      	lsls	r3, r3, #24
 8004326:	431a      	orrs	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	071b      	lsls	r3, r3, #28
 800432c:	4925      	ldr	r1, [pc, #148]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d011      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	019a      	lsls	r2, r3, #6
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	041b      	lsls	r3, r3, #16
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	071b      	lsls	r3, r3, #28
 800435c:	4919      	ldr	r1, [pc, #100]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004364:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800436a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800436e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004370:	f7fe fc36 	bl	8002be0 <HAL_GetTick>
 8004374:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004376:	e008      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004378:	f7fe fc32 	bl	8002be0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	; 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0d7      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800438a:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b01      	cmp	r3, #1
 800439a:	f040 80cd 	bne.w	8004538 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043aa:	f7fe fc19 	bl	8002be0 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043b0:	e00a      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043b2:	f7fe fc15 	bl	8002be0 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b64      	cmp	r3, #100	; 0x64
 80043be:	d903      	bls.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e0ba      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80043c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043c8:	4b5e      	ldr	r3, [pc, #376]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043d4:	d0ed      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x682>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d02e      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d12a      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043fe:	4b51      	ldr	r3, [pc, #324]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800440c:	4b4d      	ldr	r3, [pc, #308]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	0f1b      	lsrs	r3, r3, #28
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	019a      	lsls	r2, r3, #6
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	061b      	lsls	r3, r3, #24
 800442c:	431a      	orrs	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	071b      	lsls	r3, r3, #28
 8004432:	4944      	ldr	r1, [pc, #272]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800443a:	4b42      	ldr	r3, [pc, #264]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800443c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004440:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	3b01      	subs	r3, #1
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	493d      	ldr	r1, [pc, #244]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d022      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004468:	d11d      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800446a:	4b36      	ldr	r3, [pc, #216]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	0e1b      	lsrs	r3, r3, #24
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004478:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	0f1b      	lsrs	r3, r3, #28
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	019a      	lsls	r2, r3, #6
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	431a      	orrs	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	061b      	lsls	r3, r3, #24
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	071b      	lsls	r3, r3, #28
 800449e:	4929      	ldr	r1, [pc, #164]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d028      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044b2:	4b24      	ldr	r3, [pc, #144]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	0e1b      	lsrs	r3, r3, #24
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044c0:	4b20      	ldr	r3, [pc, #128]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	0c1b      	lsrs	r3, r3, #16
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	019a      	lsls	r2, r3, #6
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	041b      	lsls	r3, r3, #16
 80044d8:	431a      	orrs	r2, r3
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	061b      	lsls	r3, r3, #24
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	071b      	lsls	r3, r3, #28
 80044e6:	4917      	ldr	r1, [pc, #92]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044ee:	4b15      	ldr	r3, [pc, #84]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	4911      	ldr	r1, [pc, #68]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800450a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004510:	f7fe fb66 	bl	8002be0 <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004516:	e008      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004518:	f7fe fb62 	bl	8002be0 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	; 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e007      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004536:	d1ef      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800

08004548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e09d      	b.n	8004696 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b00      	cmp	r3, #0
 8004560:	d108      	bne.n	8004574 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800456a:	d009      	beq.n	8004580 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	61da      	str	r2, [r3, #28]
 8004572:	e005      	b.n	8004580 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fe f810 	bl	80025c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045c0:	d902      	bls.n	80045c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	e002      	b.n	80045ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045d6:	d007      	beq.n	80045e8 <HAL_SPI_Init+0xa0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045e0:	d002      	beq.n	80045e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	ea42 0103 	orr.w	r1, r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	0c1b      	lsrs	r3, r3, #16
 8004644:	f003 0204 	and.w	r2, r3, #4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004664:	ea42 0103 	orr.w	r1, r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004684:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b088      	sub	sp, #32
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	4613      	mov	r3, r2
 80046ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_SPI_Transmit+0x22>
 80046bc:	2302      	movs	r3, #2
 80046be:	e158      	b.n	8004972 <HAL_SPI_Transmit+0x2d4>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046c8:	f7fe fa8a 	bl	8002be0 <HAL_GetTick>
 80046cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d002      	beq.n	80046e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046de:	2302      	movs	r3, #2
 80046e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046e2:	e13d      	b.n	8004960 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_Transmit+0x52>
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046f4:	e134      	b.n	8004960 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2203      	movs	r2, #3
 80046fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	88fa      	ldrh	r2, [r7, #6]
 800470e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	88fa      	ldrh	r2, [r7, #6]
 8004714:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004740:	d10f      	bne.n	8004762 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004750:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004760:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d007      	beq.n	8004780 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800477e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004788:	d94b      	bls.n	8004822 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <HAL_SPI_Transmit+0xfa>
 8004792:	8afb      	ldrh	r3, [r7, #22]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d13e      	bne.n	8004816 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	881a      	ldrh	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	1c9a      	adds	r2, r3, #2
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047bc:	e02b      	b.n	8004816 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d112      	bne.n	80047f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	881a      	ldrh	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	1c9a      	adds	r2, r3, #2
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047f0:	e011      	b.n	8004816 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047f2:	f7fe f9f5 	bl	8002be0 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d803      	bhi.n	800480a <HAL_SPI_Transmit+0x16c>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d102      	bne.n	8004810 <HAL_SPI_Transmit+0x172>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004814:	e0a4      	b.n	8004960 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1ce      	bne.n	80047be <HAL_SPI_Transmit+0x120>
 8004820:	e07c      	b.n	800491c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_SPI_Transmit+0x192>
 800482a:	8afb      	ldrh	r3, [r7, #22]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d170      	bne.n	8004912 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b01      	cmp	r3, #1
 8004838:	d912      	bls.n	8004860 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	881a      	ldrh	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	1c9a      	adds	r2, r3, #2
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b02      	subs	r3, #2
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800485e:	e058      	b.n	8004912 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	7812      	ldrb	r2, [r2, #0]
 800486c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004886:	e044      	b.n	8004912 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d12b      	bne.n	80048ee <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d912      	bls.n	80048c6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	881a      	ldrh	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	1c9a      	adds	r2, r3, #2
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b02      	subs	r3, #2
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048c4:	e025      	b.n	8004912 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	7812      	ldrb	r2, [r2, #0]
 80048d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048ec:	e011      	b.n	8004912 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ee:	f7fe f977 	bl	8002be0 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d803      	bhi.n	8004906 <HAL_SPI_Transmit+0x268>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d102      	bne.n	800490c <HAL_SPI_Transmit+0x26e>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d102      	bne.n	8004912 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004910:	e026      	b.n	8004960 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1b5      	bne.n	8004888 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	6839      	ldr	r1, [r7, #0]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fe1b 	bl	800555c <SPI_EndRxTxTransaction>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e000      	b.n	8004960 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800495e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004970:	7ffb      	ldrb	r3, [r7, #31]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3720      	adds	r7, #32
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b088      	sub	sp, #32
 800497e:	af02      	add	r7, sp, #8
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004996:	d112      	bne.n	80049be <HAL_SPI_Receive+0x44>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10e      	bne.n	80049be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2204      	movs	r2, #4
 80049a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049a8:	88fa      	ldrh	r2, [r7, #6]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	4613      	mov	r3, r2
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f910 	bl	8004bda <HAL_SPI_TransmitReceive>
 80049ba:	4603      	mov	r3, r0
 80049bc:	e109      	b.n	8004bd2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_SPI_Receive+0x52>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e102      	b.n	8004bd2 <HAL_SPI_Receive+0x258>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049d4:	f7fe f904 	bl	8002be0 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d002      	beq.n	80049ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
 80049e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049ea:	e0e9      	b.n	8004bc0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_SPI_Receive+0x7e>
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049fc:	e0e0      	b.n	8004bc0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2204      	movs	r2, #4
 8004a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	88fa      	ldrh	r2, [r7, #6]
 8004a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	88fa      	ldrh	r2, [r7, #6]
 8004a1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a48:	d908      	bls.n	8004a5c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	e007      	b.n	8004a6c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a6a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a74:	d10f      	bne.n	8004a96 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d007      	beq.n	8004ab4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ab2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004abc:	d867      	bhi.n	8004b8e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004abe:	e030      	b.n	8004b22 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d117      	bne.n	8004afe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f103 020c 	add.w	r2, r3, #12
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	7812      	ldrb	r2, [r2, #0]
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004afc:	e011      	b.n	8004b22 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004afe:	f7fe f86f 	bl	8002be0 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d803      	bhi.n	8004b16 <HAL_SPI_Receive+0x19c>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d102      	bne.n	8004b1c <HAL_SPI_Receive+0x1a2>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d102      	bne.n	8004b22 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b20:	e04e      	b.n	8004bc0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1c8      	bne.n	8004ac0 <HAL_SPI_Receive+0x146>
 8004b2e:	e034      	b.n	8004b9a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d115      	bne.n	8004b6a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	b292      	uxth	r2, r2
 8004b4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	1c9a      	adds	r2, r3, #2
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004b68:	e011      	b.n	8004b8e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b6a:	f7fe f839 	bl	8002be0 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d803      	bhi.n	8004b82 <HAL_SPI_Receive+0x208>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d102      	bne.n	8004b88 <HAL_SPI_Receive+0x20e>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b8c:	e018      	b.n	8004bc0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1ca      	bne.n	8004b30 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	6839      	ldr	r1, [r7, #0]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fc60 	bl	8005464 <SPI_EndRxTransaction>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	75fb      	strb	r3, [r7, #23]
 8004bbc:	e000      	b.n	8004bc0 <HAL_SPI_Receive+0x246>
  }

error :
 8004bbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b08a      	sub	sp, #40	; 0x28
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004be8:	2301      	movs	r3, #1
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_SPI_TransmitReceive+0x26>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e1fb      	b.n	8004ff8 <HAL_SPI_TransmitReceive+0x41e>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c08:	f7fd ffea 	bl	8002be0 <HAL_GetTick>
 8004c0c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c14:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004c1c:	887b      	ldrh	r3, [r7, #2]
 8004c1e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004c20:	887b      	ldrh	r3, [r7, #2]
 8004c22:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c24:	7efb      	ldrb	r3, [r7, #27]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d00e      	beq.n	8004c48 <HAL_SPI_TransmitReceive+0x6e>
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c30:	d106      	bne.n	8004c40 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <HAL_SPI_TransmitReceive+0x66>
 8004c3a:	7efb      	ldrb	r3, [r7, #27]
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d003      	beq.n	8004c48 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c46:	e1cd      	b.n	8004fe4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <HAL_SPI_TransmitReceive+0x80>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_SPI_TransmitReceive+0x80>
 8004c54:	887b      	ldrh	r3, [r7, #2]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d103      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c60:	e1c0      	b.n	8004fe4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d003      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2205      	movs	r2, #5
 8004c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	887a      	ldrh	r2, [r7, #2]
 8004c86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	887a      	ldrh	r2, [r7, #2]
 8004c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	887a      	ldrh	r2, [r7, #2]
 8004c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	887a      	ldrh	r2, [r7, #2]
 8004ca2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cb8:	d802      	bhi.n	8004cc0 <HAL_SPI_TransmitReceive+0xe6>
 8004cba:	8a3b      	ldrh	r3, [r7, #16]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d908      	bls.n	8004cd2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cce:	605a      	str	r2, [r3, #4]
 8004cd0:	e007      	b.n	8004ce2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ce0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d007      	beq.n	8004d00 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d08:	d97c      	bls.n	8004e04 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_SPI_TransmitReceive+0x13e>
 8004d12:	8a7b      	ldrh	r3, [r7, #18]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d169      	bne.n	8004dec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	881a      	ldrh	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	1c9a      	adds	r2, r3, #2
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d3c:	e056      	b.n	8004dec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d11b      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x1aa>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <HAL_SPI_TransmitReceive+0x1aa>
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d113      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	881a      	ldrh	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	1c9a      	adds	r2, r3, #2
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d11c      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x1f2>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d016      	beq.n	8004dcc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	b292      	uxth	r2, r2
 8004daa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	1c9a      	adds	r2, r3, #2
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dcc:	f7fd ff08 	bl	8002be0 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d807      	bhi.n	8004dec <HAL_SPI_TransmitReceive+0x212>
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de2:	d003      	beq.n	8004dec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004dea:	e0fb      	b.n	8004fe4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1a3      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x164>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d19d      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x164>
 8004e02:	e0df      	b.n	8004fc4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_SPI_TransmitReceive+0x23a>
 8004e0c:	8a7b      	ldrh	r3, [r7, #18]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	f040 80cb 	bne.w	8004faa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d912      	bls.n	8004e44 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	881a      	ldrh	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	1c9a      	adds	r2, r3, #2
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b02      	subs	r3, #2
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e42:	e0b2      	b.n	8004faa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	7812      	ldrb	r2, [r2, #0]
 8004e50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e6a:	e09e      	b.n	8004faa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d134      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x30a>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d02f      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x30a>
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d12c      	bne.n	8004ee4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d912      	bls.n	8004eba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	881a      	ldrh	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	1c9a      	adds	r2, r3, #2
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b02      	subs	r3, #2
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eb8:	e012      	b.n	8004ee0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	7812      	ldrb	r2, [r2, #0]
 8004ec6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d148      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x3aa>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d042      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d923      	bls.n	8004f52 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	b292      	uxth	r2, r2
 8004f16:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	1c9a      	adds	r2, r3, #2
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b02      	subs	r3, #2
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d81f      	bhi.n	8004f80 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f4e:	605a      	str	r2, [r3, #4]
 8004f50:	e016      	b.n	8004f80 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f103 020c 	add.w	r2, r3, #12
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	7812      	ldrb	r2, [r2, #0]
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f80:	2301      	movs	r3, #1
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f84:	f7fd fe2c 	bl	8002be0 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d803      	bhi.n	8004f9c <HAL_SPI_TransmitReceive+0x3c2>
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d102      	bne.n	8004fa2 <HAL_SPI_TransmitReceive+0x3c8>
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d103      	bne.n	8004faa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004fa8:	e01c      	b.n	8004fe4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f47f af5b 	bne.w	8004e6c <HAL_SPI_TransmitReceive+0x292>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f47f af54 	bne.w	8004e6c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fac7 	bl	800555c <SPI_EndRxTxTransaction>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d006      	beq.n	8004fe2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	661a      	str	r2, [r3, #96]	; 0x60
 8004fe0:	e000      	b.n	8004fe4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004fe2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3728      	adds	r7, #40	; 0x28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10e      	bne.n	8005040 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005028:	2b00      	cmp	r3, #0
 800502a:	d009      	beq.n	8005040 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	4798      	blx	r3
    return;
 800503e:	e0ce      	b.n	80051de <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HAL_SPI_IRQHandler+0x5e>
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005050:	2b00      	cmp	r3, #0
 8005052:	d004      	beq.n	800505e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	4798      	blx	r3
    return;
 800505c:	e0bf      	b.n	80051de <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <HAL_SPI_IRQHandler+0x7e>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d105      	bne.n	800507e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80b0 	beq.w	80051de <HAL_SPI_IRQHandler+0x1de>
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80aa 	beq.w	80051de <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d023      	beq.n	80050dc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b03      	cmp	r3, #3
 800509e:	d011      	beq.n	80050c4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a4:	f043 0204 	orr.w	r2, r3, #4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	e00b      	b.n	80050dc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	693b      	ldr	r3, [r7, #16]
        return;
 80050da:	e080      	b.n	80051de <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d014      	beq.n	8005110 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ea:	f043 0201 	orr.w	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511e:	f043 0208 	orr.w	r2, r3, #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005138:	2b00      	cmp	r3, #0
 800513a:	d04f      	beq.n	80051dc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800514a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <HAL_SPI_IRQHandler+0x168>
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d034      	beq.n	80051d2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0203 	bic.w	r2, r2, #3
 8005176:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517c:	2b00      	cmp	r3, #0
 800517e:	d011      	beq.n	80051a4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005184:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <HAL_SPI_IRQHandler+0x1e4>)
 8005186:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518c:	4618      	mov	r0, r3
 800518e:	f7fd fed8 	bl	8002f42 <HAL_DMA_Abort_IT>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d016      	beq.n	80051da <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	4a0c      	ldr	r2, [pc, #48]	; (80051e4 <HAL_SPI_IRQHandler+0x1e4>)
 80051b2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fd fec2 	bl	8002f42 <HAL_DMA_Abort_IT>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80051d0:	e003      	b.n	80051da <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f808 	bl	80051e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80051d8:	e000      	b.n	80051dc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80051da:	bf00      	nop
    return;
 80051dc:	bf00      	nop
  }
}
 80051de:	3720      	adds	r7, #32
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	080051fd 	.word	0x080051fd

080051e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff ffe5 	bl	80051e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800521e:	bf00      	nop
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005238:	f7fd fcd2 	bl	8002be0 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	4413      	add	r3, r2
 8005246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005248:	f7fd fcca 	bl	8002be0 <HAL_GetTick>
 800524c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800524e:	4b39      	ldr	r3, [pc, #228]	; (8005334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	015b      	lsls	r3, r3, #5
 8005254:	0d1b      	lsrs	r3, r3, #20
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	fb02 f303 	mul.w	r3, r2, r3
 800525c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800525e:	e054      	b.n	800530a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005266:	d050      	beq.n	800530a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005268:	f7fd fcba 	bl	8002be0 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	429a      	cmp	r2, r3
 8005276:	d902      	bls.n	800527e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d13d      	bne.n	80052fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800528c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005296:	d111      	bne.n	80052bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a0:	d004      	beq.n	80052ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052aa:	d107      	bne.n	80052bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c4:	d10f      	bne.n	80052e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e017      	b.n	800532a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	3b01      	subs	r3, #1
 8005308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4013      	ands	r3, r2
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	429a      	cmp	r2, r3
 8005318:	bf0c      	ite	eq
 800531a:	2301      	moveq	r3, #1
 800531c:	2300      	movne	r3, #0
 800531e:	b2db      	uxtb	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	429a      	cmp	r2, r3
 8005326:	d19b      	bne.n	8005260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000060 	.word	0x20000060

08005338 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	; 0x28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800534a:	f7fd fc49 	bl	8002be0 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	4413      	add	r3, r2
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800535a:	f7fd fc41 	bl	8002be0 <HAL_GetTick>
 800535e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005368:	4b3d      	ldr	r3, [pc, #244]	; (8005460 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	00da      	lsls	r2, r3, #3
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	0d1b      	lsrs	r3, r3, #20
 8005378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537a:	fb02 f303 	mul.w	r3, r2, r3
 800537e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005380:	e060      	b.n	8005444 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005388:	d107      	bne.n	800539a <SPI_WaitFifoStateUntilTimeout+0x62>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005398:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a0:	d050      	beq.n	8005444 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053a2:	f7fd fc1d 	bl	8002be0 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d902      	bls.n	80053b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d13d      	bne.n	8005434 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d0:	d111      	bne.n	80053f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053da:	d004      	beq.n	80053e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e4:	d107      	bne.n	80053f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fe:	d10f      	bne.n	8005420 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800541e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e010      	b.n	8005456 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	3b01      	subs	r3, #1
 8005442:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4013      	ands	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d196      	bne.n	8005382 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3728      	adds	r7, #40	; 0x28
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000060 	.word	0x20000060

08005464 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af02      	add	r7, sp, #8
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005478:	d111      	bne.n	800549e <SPI_EndRxTransaction+0x3a>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005482:	d004      	beq.n	800548e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548c:	d107      	bne.n	800549e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a6:	d112      	bne.n	80054ce <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2200      	movs	r2, #0
 80054b0:	2180      	movs	r1, #128	; 0x80
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f7ff feb8 	bl	8005228 <SPI_WaitFlagStateUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d021      	beq.n	8005502 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c2:	f043 0220 	orr.w	r2, r3, #32
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e03d      	b.n	800554a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054ce:	4b21      	ldr	r3, [pc, #132]	; (8005554 <SPI_EndRxTransaction+0xf0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a21      	ldr	r2, [pc, #132]	; (8005558 <SPI_EndRxTransaction+0xf4>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	0d5b      	lsrs	r3, r3, #21
 80054da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054de:	fb02 f303 	mul.w	r3, r2, r3
 80054e2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fa:	2b80      	cmp	r3, #128	; 0x80
 80054fc:	d0f2      	beq.n	80054e4 <SPI_EndRxTransaction+0x80>
 80054fe:	e000      	b.n	8005502 <SPI_EndRxTransaction+0x9e>
        break;
 8005500:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800550a:	d11d      	bne.n	8005548 <SPI_EndRxTransaction+0xe4>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005514:	d004      	beq.n	8005520 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551e:	d113      	bne.n	8005548 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2200      	movs	r2, #0
 8005528:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f7ff ff03 	bl	8005338 <SPI_WaitFifoStateUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d007      	beq.n	8005548 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553c:	f043 0220 	orr.w	r2, r3, #32
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e000      	b.n	800554a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000060 	.word	0x20000060
 8005558:	165e9f81 	.word	0x165e9f81

0800555c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7ff fedf 	bl	8005338 <SPI_WaitFifoStateUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e046      	b.n	800561e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005590:	4b25      	ldr	r3, [pc, #148]	; (8005628 <SPI_EndRxTxTransaction+0xcc>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a25      	ldr	r2, [pc, #148]	; (800562c <SPI_EndRxTxTransaction+0xd0>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	0d5b      	lsrs	r3, r3, #21
 800559c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055a0:	fb02 f303 	mul.w	r3, r2, r3
 80055a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ae:	d112      	bne.n	80055d6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2200      	movs	r2, #0
 80055b8:	2180      	movs	r1, #128	; 0x80
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f7ff fe34 	bl	8005228 <SPI_WaitFlagStateUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d016      	beq.n	80055f4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ca:	f043 0220 	orr.w	r2, r3, #32
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e023      	b.n	800561e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	3b01      	subs	r3, #1
 80055e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ec:	2b80      	cmp	r3, #128	; 0x80
 80055ee:	d0f2      	beq.n	80055d6 <SPI_EndRxTxTransaction+0x7a>
 80055f0:	e000      	b.n	80055f4 <SPI_EndRxTxTransaction+0x98>
        break;
 80055f2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7ff fe99 	bl	8005338 <SPI_WaitFifoStateUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005610:	f043 0220 	orr.w	r2, r3, #32
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e000      	b.n	800561e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000060 	.word	0x20000060
 800562c:	165e9f81 	.word	0x165e9f81

08005630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e049      	b.n	80056d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fd f92e 	bl	80028b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3304      	adds	r3, #4
 800566c:	4619      	mov	r1, r3
 800566e:	4610      	mov	r0, r2
 8005670:	f000 fd26 	bl	80060c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d001      	beq.n	80056f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e054      	b.n	80057a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d022      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005722:	d01d      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d018      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a21      	ldr	r2, [pc, #132]	; (80057b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <HAL_TIM_Base_Start_IT+0xdc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00e      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1e      	ldr	r2, [pc, #120]	; (80057c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d009      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1b      	ldr	r2, [pc, #108]	; (80057c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d115      	bne.n	800578c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	4b19      	ldr	r3, [pc, #100]	; (80057cc <HAL_TIM_Base_Start_IT+0xec>)
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b06      	cmp	r3, #6
 8005770:	d015      	beq.n	800579e <HAL_TIM_Base_Start_IT+0xbe>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005778:	d011      	beq.n	800579e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578a:	e008      	b.n	800579e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e000      	b.n	80057a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800
 80057bc:	40000c00 	.word	0x40000c00
 80057c0:	40010400 	.word	0x40010400
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40001800 	.word	0x40001800
 80057cc:	00010007 	.word	0x00010007

080057d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e049      	b.n	8005876 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fd f882 	bl	8002900 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3304      	adds	r3, #4
 800580c:	4619      	mov	r1, r3
 800580e:	4610      	mov	r0, r2
 8005810:	f000 fc56 	bl	80060c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d109      	bne.n	80058a4 <HAL_TIM_PWM_Start+0x24>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	bf14      	ite	ne
 800589c:	2301      	movne	r3, #1
 800589e:	2300      	moveq	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e03c      	b.n	800591e <HAL_TIM_PWM_Start+0x9e>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d109      	bne.n	80058be <HAL_TIM_PWM_Start+0x3e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	bf14      	ite	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	2300      	moveq	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	e02f      	b.n	800591e <HAL_TIM_PWM_Start+0x9e>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d109      	bne.n	80058d8 <HAL_TIM_PWM_Start+0x58>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e022      	b.n	800591e <HAL_TIM_PWM_Start+0x9e>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d109      	bne.n	80058f2 <HAL_TIM_PWM_Start+0x72>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	bf14      	ite	ne
 80058ea:	2301      	movne	r3, #1
 80058ec:	2300      	moveq	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	e015      	b.n	800591e <HAL_TIM_PWM_Start+0x9e>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b10      	cmp	r3, #16
 80058f6:	d109      	bne.n	800590c <HAL_TIM_PWM_Start+0x8c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e008      	b.n	800591e <HAL_TIM_PWM_Start+0x9e>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e092      	b.n	8005a4c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Start+0xb6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005934:	e023      	b.n	800597e <HAL_TIM_PWM_Start+0xfe>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d104      	bne.n	8005946 <HAL_TIM_PWM_Start+0xc6>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005944:	e01b      	b.n	800597e <HAL_TIM_PWM_Start+0xfe>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d104      	bne.n	8005956 <HAL_TIM_PWM_Start+0xd6>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005954:	e013      	b.n	800597e <HAL_TIM_PWM_Start+0xfe>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b0c      	cmp	r3, #12
 800595a:	d104      	bne.n	8005966 <HAL_TIM_PWM_Start+0xe6>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005964:	e00b      	b.n	800597e <HAL_TIM_PWM_Start+0xfe>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b10      	cmp	r3, #16
 800596a:	d104      	bne.n	8005976 <HAL_TIM_PWM_Start+0xf6>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005974:	e003      	b.n	800597e <HAL_TIM_PWM_Start+0xfe>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2201      	movs	r2, #1
 8005984:	6839      	ldr	r1, [r7, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 ff32 	bl	80067f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a30      	ldr	r2, [pc, #192]	; (8005a54 <HAL_TIM_PWM_Start+0x1d4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_TIM_PWM_Start+0x120>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a2f      	ldr	r2, [pc, #188]	; (8005a58 <HAL_TIM_PWM_Start+0x1d8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d101      	bne.n	80059a4 <HAL_TIM_PWM_Start+0x124>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <HAL_TIM_PWM_Start+0x126>
 80059a4:	2300      	movs	r3, #0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a25      	ldr	r2, [pc, #148]	; (8005a54 <HAL_TIM_PWM_Start+0x1d4>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d022      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x18a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059cc:	d01d      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x18a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a22      	ldr	r2, [pc, #136]	; (8005a5c <HAL_TIM_PWM_Start+0x1dc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d018      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x18a>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a20      	ldr	r2, [pc, #128]	; (8005a60 <HAL_TIM_PWM_Start+0x1e0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x18a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1f      	ldr	r2, [pc, #124]	; (8005a64 <HAL_TIM_PWM_Start+0x1e4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00e      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x18a>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <HAL_TIM_PWM_Start+0x1d8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x18a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <HAL_TIM_PWM_Start+0x1e8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x18a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a19      	ldr	r2, [pc, #100]	; (8005a6c <HAL_TIM_PWM_Start+0x1ec>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d115      	bne.n	8005a36 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <HAL_TIM_PWM_Start+0x1f0>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b06      	cmp	r3, #6
 8005a1a:	d015      	beq.n	8005a48 <HAL_TIM_PWM_Start+0x1c8>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a22:	d011      	beq.n	8005a48 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a34:	e008      	b.n	8005a48 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0201 	orr.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e000      	b.n	8005a4a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40010000 	.word	0x40010000
 8005a58:	40010400 	.word	0x40010400
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40000c00 	.word	0x40000c00
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40001800 	.word	0x40001800
 8005a70:	00010007 	.word	0x00010007

08005a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d122      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d11b      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0202 	mvn.w	r2, #2
 8005aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fae4 	bl	8006084 <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fad6 	bl	8006070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fae7 	bl	8006098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d122      	bne.n	8005b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d11b      	bne.n	8005b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0204 	mvn.w	r2, #4
 8005af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 faba 	bl	8006084 <HAL_TIM_IC_CaptureCallback>
 8005b10:	e005      	b.n	8005b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 faac 	bl	8006070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fabd 	bl	8006098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d122      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d11b      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0208 	mvn.w	r2, #8
 8005b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa90 	bl	8006084 <HAL_TIM_IC_CaptureCallback>
 8005b64:	e005      	b.n	8005b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fa82 	bl	8006070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fa93 	bl	8006098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d122      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d11b      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0210 	mvn.w	r2, #16
 8005b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fa66 	bl	8006084 <HAL_TIM_IC_CaptureCallback>
 8005bb8:	e005      	b.n	8005bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa58 	bl	8006070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fa69 	bl	8006098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d10e      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d107      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0201 	mvn.w	r2, #1
 8005bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fc fb56 	bl	80022a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	d10e      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c10:	2b80      	cmp	r3, #128	; 0x80
 8005c12:	d107      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fea4 	bl	800696c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c32:	d10e      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3e:	2b80      	cmp	r3, #128	; 0x80
 8005c40:	d107      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fe97 	bl	8006980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d10e      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d107      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fa17 	bl	80060ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d10e      	bne.n	8005caa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d107      	bne.n	8005caa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f06f 0220 	mvn.w	r2, #32
 8005ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fe57 	bl	8006958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005caa:	bf00      	nop
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e0ff      	b.n	8005ed2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b14      	cmp	r3, #20
 8005cde:	f200 80f0 	bhi.w	8005ec2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ce2:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d3d 	.word	0x08005d3d
 8005cec:	08005ec3 	.word	0x08005ec3
 8005cf0:	08005ec3 	.word	0x08005ec3
 8005cf4:	08005ec3 	.word	0x08005ec3
 8005cf8:	08005d7d 	.word	0x08005d7d
 8005cfc:	08005ec3 	.word	0x08005ec3
 8005d00:	08005ec3 	.word	0x08005ec3
 8005d04:	08005ec3 	.word	0x08005ec3
 8005d08:	08005dbf 	.word	0x08005dbf
 8005d0c:	08005ec3 	.word	0x08005ec3
 8005d10:	08005ec3 	.word	0x08005ec3
 8005d14:	08005ec3 	.word	0x08005ec3
 8005d18:	08005dff 	.word	0x08005dff
 8005d1c:	08005ec3 	.word	0x08005ec3
 8005d20:	08005ec3 	.word	0x08005ec3
 8005d24:	08005ec3 	.word	0x08005ec3
 8005d28:	08005e41 	.word	0x08005e41
 8005d2c:	08005ec3 	.word	0x08005ec3
 8005d30:	08005ec3 	.word	0x08005ec3
 8005d34:	08005ec3 	.word	0x08005ec3
 8005d38:	08005e81 	.word	0x08005e81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fa5c 	bl	8006200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0208 	orr.w	r2, r2, #8
 8005d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0204 	bic.w	r2, r2, #4
 8005d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6999      	ldr	r1, [r3, #24]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	619a      	str	r2, [r3, #24]
      break;
 8005d7a:	e0a5      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68b9      	ldr	r1, [r7, #8]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 faae 	bl	80062e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6999      	ldr	r1, [r3, #24]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	021a      	lsls	r2, r3, #8
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	619a      	str	r2, [r3, #24]
      break;
 8005dbc:	e084      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fb05 	bl	80063d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0208 	orr.w	r2, r2, #8
 8005dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0204 	bic.w	r2, r2, #4
 8005de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69d9      	ldr	r1, [r3, #28]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	61da      	str	r2, [r3, #28]
      break;
 8005dfc:	e064      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68b9      	ldr	r1, [r7, #8]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fb5b 	bl	80064c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69da      	ldr	r2, [r3, #28]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69d9      	ldr	r1, [r3, #28]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	021a      	lsls	r2, r3, #8
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	61da      	str	r2, [r3, #28]
      break;
 8005e3e:	e043      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fb92 	bl	8006570 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0208 	orr.w	r2, r2, #8
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0204 	bic.w	r2, r2, #4
 8005e6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e7e:	e023      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fbc4 	bl	8006614 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	021a      	lsls	r2, r3, #8
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ec0:	e002      	b.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop

08005edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e0b4      	b.n	8006062 <HAL_TIM_ConfigClockSource+0x186>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	4b56      	ldr	r3, [pc, #344]	; (800606c <HAL_TIM_ConfigClockSource+0x190>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f30:	d03e      	beq.n	8005fb0 <HAL_TIM_ConfigClockSource+0xd4>
 8005f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f36:	f200 8087 	bhi.w	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3e:	f000 8086 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x172>
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f46:	d87f      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f48:	2b70      	cmp	r3, #112	; 0x70
 8005f4a:	d01a      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0xa6>
 8005f4c:	2b70      	cmp	r3, #112	; 0x70
 8005f4e:	d87b      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f50:	2b60      	cmp	r3, #96	; 0x60
 8005f52:	d050      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8005f54:	2b60      	cmp	r3, #96	; 0x60
 8005f56:	d877      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f58:	2b50      	cmp	r3, #80	; 0x50
 8005f5a:	d03c      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0xfa>
 8005f5c:	2b50      	cmp	r3, #80	; 0x50
 8005f5e:	d873      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f60:	2b40      	cmp	r3, #64	; 0x40
 8005f62:	d058      	beq.n	8006016 <HAL_TIM_ConfigClockSource+0x13a>
 8005f64:	2b40      	cmp	r3, #64	; 0x40
 8005f66:	d86f      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f68:	2b30      	cmp	r3, #48	; 0x30
 8005f6a:	d064      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f6c:	2b30      	cmp	r3, #48	; 0x30
 8005f6e:	d86b      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d060      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d867      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d05c      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d05a      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f80:	e062      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f92:	f000 fc0d 	bl	80067b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	609a      	str	r2, [r3, #8]
      break;
 8005fae:	e04f      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc0:	f000 fbf6 	bl	80067b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fd2:	609a      	str	r2, [r3, #8]
      break;
 8005fd4:	e03c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f000 fb6a 	bl	80066bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2150      	movs	r1, #80	; 0x50
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fbc3 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 8005ff4:	e02c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006002:	461a      	mov	r2, r3
 8006004:	f000 fb89 	bl	800671a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2160      	movs	r1, #96	; 0x60
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fbb3 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 8006014:	e01c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006022:	461a      	mov	r2, r3
 8006024:	f000 fb4a 	bl	80066bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2140      	movs	r1, #64	; 0x40
 800602e:	4618      	mov	r0, r3
 8006030:	f000 fba3 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 8006034:	e00c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f000 fb9a 	bl	800677a <TIM_ITRx_SetConfig>
      break;
 8006046:	e003      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
      break;
 800604c:	e000      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800604e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	fffeff88 	.word	0xfffeff88

08006070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a40      	ldr	r2, [pc, #256]	; (80061d4 <TIM_Base_SetConfig+0x114>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d013      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060de:	d00f      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a3d      	ldr	r2, [pc, #244]	; (80061d8 <TIM_Base_SetConfig+0x118>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00b      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a3c      	ldr	r2, [pc, #240]	; (80061dc <TIM_Base_SetConfig+0x11c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d007      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a3b      	ldr	r2, [pc, #236]	; (80061e0 <TIM_Base_SetConfig+0x120>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a3a      	ldr	r2, [pc, #232]	; (80061e4 <TIM_Base_SetConfig+0x124>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d108      	bne.n	8006112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a2f      	ldr	r2, [pc, #188]	; (80061d4 <TIM_Base_SetConfig+0x114>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d02b      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006120:	d027      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a2c      	ldr	r2, [pc, #176]	; (80061d8 <TIM_Base_SetConfig+0x118>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d023      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a2b      	ldr	r2, [pc, #172]	; (80061dc <TIM_Base_SetConfig+0x11c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01f      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2a      	ldr	r2, [pc, #168]	; (80061e0 <TIM_Base_SetConfig+0x120>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01b      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a29      	ldr	r2, [pc, #164]	; (80061e4 <TIM_Base_SetConfig+0x124>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d017      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a28      	ldr	r2, [pc, #160]	; (80061e8 <TIM_Base_SetConfig+0x128>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a27      	ldr	r2, [pc, #156]	; (80061ec <TIM_Base_SetConfig+0x12c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00f      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a26      	ldr	r2, [pc, #152]	; (80061f0 <TIM_Base_SetConfig+0x130>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00b      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a25      	ldr	r2, [pc, #148]	; (80061f4 <TIM_Base_SetConfig+0x134>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d007      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a24      	ldr	r2, [pc, #144]	; (80061f8 <TIM_Base_SetConfig+0x138>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d003      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a23      	ldr	r2, [pc, #140]	; (80061fc <TIM_Base_SetConfig+0x13c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d108      	bne.n	8006184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a0a      	ldr	r2, [pc, #40]	; (80061d4 <TIM_Base_SetConfig+0x114>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_Base_SetConfig+0xf8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a0c      	ldr	r2, [pc, #48]	; (80061e4 <TIM_Base_SetConfig+0x124>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d103      	bne.n	80061c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	615a      	str	r2, [r3, #20]
}
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40010000 	.word	0x40010000
 80061d8:	40000400 	.word	0x40000400
 80061dc:	40000800 	.word	0x40000800
 80061e0:	40000c00 	.word	0x40000c00
 80061e4:	40010400 	.word	0x40010400
 80061e8:	40014000 	.word	0x40014000
 80061ec:	40014400 	.word	0x40014400
 80061f0:	40014800 	.word	0x40014800
 80061f4:	40001800 	.word	0x40001800
 80061f8:	40001c00 	.word	0x40001c00
 80061fc:	40002000 	.word	0x40002000

08006200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f023 0201 	bic.w	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4b2b      	ldr	r3, [pc, #172]	; (80062d8 <TIM_OC1_SetConfig+0xd8>)
 800622c:	4013      	ands	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0303 	bic.w	r3, r3, #3
 8006236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f023 0302 	bic.w	r3, r3, #2
 8006248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a21      	ldr	r2, [pc, #132]	; (80062dc <TIM_OC1_SetConfig+0xdc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_OC1_SetConfig+0x64>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a20      	ldr	r2, [pc, #128]	; (80062e0 <TIM_OC1_SetConfig+0xe0>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d10c      	bne.n	800627e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f023 0308 	bic.w	r3, r3, #8
 800626a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f023 0304 	bic.w	r3, r3, #4
 800627c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a16      	ldr	r2, [pc, #88]	; (80062dc <TIM_OC1_SetConfig+0xdc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d003      	beq.n	800628e <TIM_OC1_SetConfig+0x8e>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a15      	ldr	r2, [pc, #84]	; (80062e0 <TIM_OC1_SetConfig+0xe0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d111      	bne.n	80062b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800629c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	621a      	str	r2, [r3, #32]
}
 80062cc:	bf00      	nop
 80062ce:	371c      	adds	r7, #28
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	fffeff8f 	.word	0xfffeff8f
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40010400 	.word	0x40010400

080062e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f023 0210 	bic.w	r2, r3, #16
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4b2e      	ldr	r3, [pc, #184]	; (80063c8 <TIM_OC2_SetConfig+0xe4>)
 8006310:	4013      	ands	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800631a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 0320 	bic.w	r3, r3, #32
 800632e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a23      	ldr	r2, [pc, #140]	; (80063cc <TIM_OC2_SetConfig+0xe8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_OC2_SetConfig+0x68>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a22      	ldr	r2, [pc, #136]	; (80063d0 <TIM_OC2_SetConfig+0xec>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d10d      	bne.n	8006368 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006366:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a18      	ldr	r2, [pc, #96]	; (80063cc <TIM_OC2_SetConfig+0xe8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d003      	beq.n	8006378 <TIM_OC2_SetConfig+0x94>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a17      	ldr	r2, [pc, #92]	; (80063d0 <TIM_OC2_SetConfig+0xec>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d113      	bne.n	80063a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800637e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006386:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	feff8fff 	.word	0xfeff8fff
 80063cc:	40010000 	.word	0x40010000
 80063d0:	40010400 	.word	0x40010400

080063d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4b2d      	ldr	r3, [pc, #180]	; (80064b4 <TIM_OC3_SetConfig+0xe0>)
 8006400:	4013      	ands	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0303 	bic.w	r3, r3, #3
 800640a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800641c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	021b      	lsls	r3, r3, #8
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a22      	ldr	r2, [pc, #136]	; (80064b8 <TIM_OC3_SetConfig+0xe4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d003      	beq.n	800643a <TIM_OC3_SetConfig+0x66>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a21      	ldr	r2, [pc, #132]	; (80064bc <TIM_OC3_SetConfig+0xe8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d10d      	bne.n	8006456 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	021b      	lsls	r3, r3, #8
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a17      	ldr	r2, [pc, #92]	; (80064b8 <TIM_OC3_SetConfig+0xe4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d003      	beq.n	8006466 <TIM_OC3_SetConfig+0x92>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a16      	ldr	r2, [pc, #88]	; (80064bc <TIM_OC3_SetConfig+0xe8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d113      	bne.n	800648e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800646c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	621a      	str	r2, [r3, #32]
}
 80064a8:	bf00      	nop
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	fffeff8f 	.word	0xfffeff8f
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40010400 	.word	0x40010400

080064c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4b1e      	ldr	r3, [pc, #120]	; (8006564 <TIM_OC4_SetConfig+0xa4>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4313      	orrs	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800650a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	031b      	lsls	r3, r3, #12
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a13      	ldr	r2, [pc, #76]	; (8006568 <TIM_OC4_SetConfig+0xa8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d003      	beq.n	8006528 <TIM_OC4_SetConfig+0x68>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a12      	ldr	r2, [pc, #72]	; (800656c <TIM_OC4_SetConfig+0xac>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d109      	bne.n	800653c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800652e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	019b      	lsls	r3, r3, #6
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	621a      	str	r2, [r3, #32]
}
 8006556:	bf00      	nop
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	feff8fff 	.word	0xfeff8fff
 8006568:	40010000 	.word	0x40010000
 800656c:	40010400 	.word	0x40010400

08006570 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <TIM_OC5_SetConfig+0x98>)
 800659c:	4013      	ands	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a12      	ldr	r2, [pc, #72]	; (800660c <TIM_OC5_SetConfig+0x9c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_OC5_SetConfig+0x5e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a11      	ldr	r2, [pc, #68]	; (8006610 <TIM_OC5_SetConfig+0xa0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d109      	bne.n	80065e2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	621a      	str	r2, [r3, #32]
}
 80065fc:	bf00      	nop
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	fffeff8f 	.word	0xfffeff8f
 800660c:	40010000 	.word	0x40010000
 8006610:	40010400 	.word	0x40010400

08006614 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <TIM_OC6_SetConfig+0x9c>)
 8006640:	4013      	ands	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	051b      	lsls	r3, r3, #20
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a13      	ldr	r2, [pc, #76]	; (80066b4 <TIM_OC6_SetConfig+0xa0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC6_SetConfig+0x60>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a12      	ldr	r2, [pc, #72]	; (80066b8 <TIM_OC6_SetConfig+0xa4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d109      	bne.n	8006688 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800667a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	029b      	lsls	r3, r3, #10
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	feff8fff 	.word	0xfeff8fff
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40010400 	.word	0x40010400

080066bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f023 0201 	bic.w	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f023 030a 	bic.w	r3, r3, #10
 80066f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800671a:	b480      	push	{r7}
 800671c:	b087      	sub	sp, #28
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f023 0210 	bic.w	r2, r3, #16
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	031b      	lsls	r3, r3, #12
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	f043 0307 	orr.w	r3, r3, #7
 800679c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	609a      	str	r2, [r3, #8]
}
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	021a      	lsls	r2, r3, #8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	609a      	str	r2, [r3, #8]
}
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f003 031f 	and.w	r3, r3, #31
 8006802:	2201      	movs	r2, #1
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1a      	ldr	r2, [r3, #32]
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	43db      	mvns	r3, r3
 8006812:	401a      	ands	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1a      	ldr	r2, [r3, #32]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	fa01 f303 	lsl.w	r3, r1, r3
 8006828:	431a      	orrs	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
	...

0800683c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006850:	2302      	movs	r3, #2
 8006852:	e06d      	b.n	8006930 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a30      	ldr	r2, [pc, #192]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d004      	beq.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a2f      	ldr	r2, [pc, #188]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800688e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a20      	ldr	r2, [pc, #128]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d022      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c6:	d01d      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1d      	ldr	r2, [pc, #116]	; (8006944 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d018      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1c      	ldr	r2, [pc, #112]	; (8006948 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d013      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a1a      	ldr	r2, [pc, #104]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a15      	ldr	r2, [pc, #84]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a16      	ldr	r2, [pc, #88]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a15      	ldr	r2, [pc, #84]	; (8006954 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d10c      	bne.n	800691e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800690a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	4313      	orrs	r3, r2
 8006914:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	40010000 	.word	0x40010000
 8006940:	40010400 	.word	0x40010400
 8006944:	40000400 	.word	0x40000400
 8006948:	40000800 	.word	0x40000800
 800694c:	40000c00 	.word	0x40000c00
 8006950:	40014000 	.word	0x40014000
 8006954:	40001800 	.word	0x40001800

08006958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e040      	b.n	8006a28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fc f830 	bl	8002a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2224      	movs	r2, #36	; 0x24
 80069c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0201 	bic.w	r2, r2, #1
 80069d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fb1e 	bl	8007014 <UART_SetConfig>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e022      	b.n	8006a28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fd76 	bl	80074dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fdfd 	bl	8007620 <UART_CheckIdleState>
 8006a26:	4603      	mov	r3, r0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b0ba      	sub	sp, #232	; 0xe8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a5e:	4013      	ands	r3, r2
 8006a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d115      	bne.n	8006a98 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00f      	beq.n	8006a98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d009      	beq.n	8006a98 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8297 	beq.w	8006fbc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
      }
      return;
 8006a96:	e291      	b.n	8006fbc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 8117 	beq.w	8006cd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d106      	bne.n	8006abc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006aae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ab2:	4b85      	ldr	r3, [pc, #532]	; (8006cc8 <HAL_UART_IRQHandler+0x298>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 810a 	beq.w	8006cd0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d011      	beq.n	8006aec <HAL_UART_IRQHandler+0xbc>
 8006ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00b      	beq.n	8006aec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ae2:	f043 0201 	orr.w	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d011      	beq.n	8006b1c <HAL_UART_IRQHandler+0xec>
 8006af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00b      	beq.n	8006b1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b12:	f043 0204 	orr.w	r2, r3, #4
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d011      	beq.n	8006b4c <HAL_UART_IRQHandler+0x11c>
 8006b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2204      	movs	r2, #4
 8006b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b42:	f043 0202 	orr.w	r2, r3, #2
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d017      	beq.n	8006b88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d105      	bne.n	8006b70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00b      	beq.n	8006b88 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2208      	movs	r2, #8
 8006b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b7e:	f043 0208 	orr.w	r2, r3, #8
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d012      	beq.n	8006bba <HAL_UART_IRQHandler+0x18a>
 8006b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00c      	beq.n	8006bba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bb0:	f043 0220 	orr.w	r2, r3, #32
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 81fd 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00d      	beq.n	8006bee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c02:	2b40      	cmp	r3, #64	; 0x40
 8006c04:	d005      	beq.n	8006c12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d04f      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fe01 	bl	800781a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c22:	2b40      	cmp	r3, #64	; 0x40
 8006c24:	d141      	bne.n	8006caa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1d9      	bne.n	8006c26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d013      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7e:	4a13      	ldr	r2, [pc, #76]	; (8006ccc <HAL_UART_IRQHandler+0x29c>)
 8006c80:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fc f95b 	bl	8002f42 <HAL_DMA_Abort_IT>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d017      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca0:	e00f      	b.n	8006cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f9a0 	bl	8006fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca8:	e00b      	b.n	8006cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f99c 	bl	8006fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb0:	e007      	b.n	8006cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f998 	bl	8006fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006cc0:	e17e      	b.n	8006fc0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc2:	bf00      	nop
    return;
 8006cc4:	e17c      	b.n	8006fc0 <HAL_UART_IRQHandler+0x590>
 8006cc6:	bf00      	nop
 8006cc8:	04000120 	.word	0x04000120
 8006ccc:	080078e3 	.word	0x080078e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	f040 814c 	bne.w	8006f72 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cde:	f003 0310 	and.w	r3, r3, #16
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8145 	beq.w	8006f72 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cec:	f003 0310 	and.w	r3, r3, #16
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 813e 	beq.w	8006f72 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2210      	movs	r2, #16
 8006cfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d08:	2b40      	cmp	r3, #64	; 0x40
 8006d0a:	f040 80b6 	bne.w	8006e7a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 8150 	beq.w	8006fc4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	f080 8148 	bcs.w	8006fc4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d48:	f000 8086 	beq.w	8006e58 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d7a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1da      	bne.n	8006d4c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006da8:	f023 0301 	bic.w	r3, r3, #1
 8006dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3308      	adds	r3, #8
 8006db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e1      	bne.n	8006d96 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3308      	adds	r3, #8
 8006df2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006df6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006df8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006dfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e3      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e28:	f023 0310 	bic.w	r3, r3, #16
 8006e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e4      	bne.n	8006e18 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fc f805 	bl	8002e62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f8c2 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e78:	e0a4      	b.n	8006fc4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 8096 	beq.w	8006fc8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8091 	beq.w	8006fc8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8006eca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e4      	bne.n	8006ea6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	623b      	str	r3, [r7, #32]
   return(result);
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	f023 0301 	bic.w	r3, r3, #1
 8006ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3308      	adds	r3, #8
 8006efc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f00:	633a      	str	r2, [r7, #48]	; 0x30
 8006f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e3      	bne.n	8006edc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f023 0310 	bic.w	r3, r3, #16
 8006f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f4a:	61fb      	str	r3, [r7, #28]
 8006f4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	69b9      	ldr	r1, [r7, #24]
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	617b      	str	r3, [r7, #20]
   return(result);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e4      	bne.n	8006f28 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2202      	movs	r2, #2
 8006f62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f846 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f70:	e02a      	b.n	8006fc8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00e      	beq.n	8006f9c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d008      	beq.n	8006f9c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d01c      	beq.n	8006fcc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3
    }
    return;
 8006f9a:	e017      	b.n	8006fcc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d012      	beq.n	8006fce <HAL_UART_IRQHandler+0x59e>
 8006fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00c      	beq.n	8006fce <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fcaa 	bl	800790e <UART_EndTransmit_IT>
    return;
 8006fba:	e008      	b.n	8006fce <HAL_UART_IRQHandler+0x59e>
      return;
 8006fbc:	bf00      	nop
 8006fbe:	e006      	b.n	8006fce <HAL_UART_IRQHandler+0x59e>
    return;
 8006fc0:	bf00      	nop
 8006fc2:	e004      	b.n	8006fce <HAL_UART_IRQHandler+0x59e>
      return;
 8006fc4:	bf00      	nop
 8006fc6:	e002      	b.n	8006fce <HAL_UART_IRQHandler+0x59e>
      return;
 8006fc8:	bf00      	nop
 8006fca:	e000      	b.n	8006fce <HAL_UART_IRQHandler+0x59e>
    return;
 8006fcc:	bf00      	nop
  }

}
 8006fce:	37e8      	adds	r7, #232	; 0xe8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	4313      	orrs	r3, r2
 8007036:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4ba6      	ldr	r3, [pc, #664]	; (80072d8 <UART_SetConfig+0x2c4>)
 8007040:	4013      	ands	r3, r2
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	6979      	ldr	r1, [r7, #20]
 8007048:	430b      	orrs	r3, r1
 800704a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	4313      	orrs	r3, r2
 8007070:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	430a      	orrs	r2, r1
 8007084:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a94      	ldr	r2, [pc, #592]	; (80072dc <UART_SetConfig+0x2c8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d120      	bne.n	80070d2 <UART_SetConfig+0xbe>
 8007090:	4b93      	ldr	r3, [pc, #588]	; (80072e0 <UART_SetConfig+0x2cc>)
 8007092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	2b03      	cmp	r3, #3
 800709c:	d816      	bhi.n	80070cc <UART_SetConfig+0xb8>
 800709e:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <UART_SetConfig+0x90>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070b5 	.word	0x080070b5
 80070a8:	080070c1 	.word	0x080070c1
 80070ac:	080070bb 	.word	0x080070bb
 80070b0:	080070c7 	.word	0x080070c7
 80070b4:	2301      	movs	r3, #1
 80070b6:	77fb      	strb	r3, [r7, #31]
 80070b8:	e150      	b.n	800735c <UART_SetConfig+0x348>
 80070ba:	2302      	movs	r3, #2
 80070bc:	77fb      	strb	r3, [r7, #31]
 80070be:	e14d      	b.n	800735c <UART_SetConfig+0x348>
 80070c0:	2304      	movs	r3, #4
 80070c2:	77fb      	strb	r3, [r7, #31]
 80070c4:	e14a      	b.n	800735c <UART_SetConfig+0x348>
 80070c6:	2308      	movs	r3, #8
 80070c8:	77fb      	strb	r3, [r7, #31]
 80070ca:	e147      	b.n	800735c <UART_SetConfig+0x348>
 80070cc:	2310      	movs	r3, #16
 80070ce:	77fb      	strb	r3, [r7, #31]
 80070d0:	e144      	b.n	800735c <UART_SetConfig+0x348>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a83      	ldr	r2, [pc, #524]	; (80072e4 <UART_SetConfig+0x2d0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d132      	bne.n	8007142 <UART_SetConfig+0x12e>
 80070dc:	4b80      	ldr	r3, [pc, #512]	; (80072e0 <UART_SetConfig+0x2cc>)
 80070de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e2:	f003 030c 	and.w	r3, r3, #12
 80070e6:	2b0c      	cmp	r3, #12
 80070e8:	d828      	bhi.n	800713c <UART_SetConfig+0x128>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <UART_SetConfig+0xdc>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007125 	.word	0x08007125
 80070f4:	0800713d 	.word	0x0800713d
 80070f8:	0800713d 	.word	0x0800713d
 80070fc:	0800713d 	.word	0x0800713d
 8007100:	08007131 	.word	0x08007131
 8007104:	0800713d 	.word	0x0800713d
 8007108:	0800713d 	.word	0x0800713d
 800710c:	0800713d 	.word	0x0800713d
 8007110:	0800712b 	.word	0x0800712b
 8007114:	0800713d 	.word	0x0800713d
 8007118:	0800713d 	.word	0x0800713d
 800711c:	0800713d 	.word	0x0800713d
 8007120:	08007137 	.word	0x08007137
 8007124:	2300      	movs	r3, #0
 8007126:	77fb      	strb	r3, [r7, #31]
 8007128:	e118      	b.n	800735c <UART_SetConfig+0x348>
 800712a:	2302      	movs	r3, #2
 800712c:	77fb      	strb	r3, [r7, #31]
 800712e:	e115      	b.n	800735c <UART_SetConfig+0x348>
 8007130:	2304      	movs	r3, #4
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	e112      	b.n	800735c <UART_SetConfig+0x348>
 8007136:	2308      	movs	r3, #8
 8007138:	77fb      	strb	r3, [r7, #31]
 800713a:	e10f      	b.n	800735c <UART_SetConfig+0x348>
 800713c:	2310      	movs	r3, #16
 800713e:	77fb      	strb	r3, [r7, #31]
 8007140:	e10c      	b.n	800735c <UART_SetConfig+0x348>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a68      	ldr	r2, [pc, #416]	; (80072e8 <UART_SetConfig+0x2d4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d120      	bne.n	800718e <UART_SetConfig+0x17a>
 800714c:	4b64      	ldr	r3, [pc, #400]	; (80072e0 <UART_SetConfig+0x2cc>)
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007152:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007156:	2b30      	cmp	r3, #48	; 0x30
 8007158:	d013      	beq.n	8007182 <UART_SetConfig+0x16e>
 800715a:	2b30      	cmp	r3, #48	; 0x30
 800715c:	d814      	bhi.n	8007188 <UART_SetConfig+0x174>
 800715e:	2b20      	cmp	r3, #32
 8007160:	d009      	beq.n	8007176 <UART_SetConfig+0x162>
 8007162:	2b20      	cmp	r3, #32
 8007164:	d810      	bhi.n	8007188 <UART_SetConfig+0x174>
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <UART_SetConfig+0x15c>
 800716a:	2b10      	cmp	r3, #16
 800716c:	d006      	beq.n	800717c <UART_SetConfig+0x168>
 800716e:	e00b      	b.n	8007188 <UART_SetConfig+0x174>
 8007170:	2300      	movs	r3, #0
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e0f2      	b.n	800735c <UART_SetConfig+0x348>
 8007176:	2302      	movs	r3, #2
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e0ef      	b.n	800735c <UART_SetConfig+0x348>
 800717c:	2304      	movs	r3, #4
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e0ec      	b.n	800735c <UART_SetConfig+0x348>
 8007182:	2308      	movs	r3, #8
 8007184:	77fb      	strb	r3, [r7, #31]
 8007186:	e0e9      	b.n	800735c <UART_SetConfig+0x348>
 8007188:	2310      	movs	r3, #16
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e0e6      	b.n	800735c <UART_SetConfig+0x348>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a56      	ldr	r2, [pc, #344]	; (80072ec <UART_SetConfig+0x2d8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d120      	bne.n	80071da <UART_SetConfig+0x1c6>
 8007198:	4b51      	ldr	r3, [pc, #324]	; (80072e0 <UART_SetConfig+0x2cc>)
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071a2:	2bc0      	cmp	r3, #192	; 0xc0
 80071a4:	d013      	beq.n	80071ce <UART_SetConfig+0x1ba>
 80071a6:	2bc0      	cmp	r3, #192	; 0xc0
 80071a8:	d814      	bhi.n	80071d4 <UART_SetConfig+0x1c0>
 80071aa:	2b80      	cmp	r3, #128	; 0x80
 80071ac:	d009      	beq.n	80071c2 <UART_SetConfig+0x1ae>
 80071ae:	2b80      	cmp	r3, #128	; 0x80
 80071b0:	d810      	bhi.n	80071d4 <UART_SetConfig+0x1c0>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <UART_SetConfig+0x1a8>
 80071b6:	2b40      	cmp	r3, #64	; 0x40
 80071b8:	d006      	beq.n	80071c8 <UART_SetConfig+0x1b4>
 80071ba:	e00b      	b.n	80071d4 <UART_SetConfig+0x1c0>
 80071bc:	2300      	movs	r3, #0
 80071be:	77fb      	strb	r3, [r7, #31]
 80071c0:	e0cc      	b.n	800735c <UART_SetConfig+0x348>
 80071c2:	2302      	movs	r3, #2
 80071c4:	77fb      	strb	r3, [r7, #31]
 80071c6:	e0c9      	b.n	800735c <UART_SetConfig+0x348>
 80071c8:	2304      	movs	r3, #4
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	e0c6      	b.n	800735c <UART_SetConfig+0x348>
 80071ce:	2308      	movs	r3, #8
 80071d0:	77fb      	strb	r3, [r7, #31]
 80071d2:	e0c3      	b.n	800735c <UART_SetConfig+0x348>
 80071d4:	2310      	movs	r3, #16
 80071d6:	77fb      	strb	r3, [r7, #31]
 80071d8:	e0c0      	b.n	800735c <UART_SetConfig+0x348>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a44      	ldr	r2, [pc, #272]	; (80072f0 <UART_SetConfig+0x2dc>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d125      	bne.n	8007230 <UART_SetConfig+0x21c>
 80071e4:	4b3e      	ldr	r3, [pc, #248]	; (80072e0 <UART_SetConfig+0x2cc>)
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071f2:	d017      	beq.n	8007224 <UART_SetConfig+0x210>
 80071f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071f8:	d817      	bhi.n	800722a <UART_SetConfig+0x216>
 80071fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071fe:	d00b      	beq.n	8007218 <UART_SetConfig+0x204>
 8007200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007204:	d811      	bhi.n	800722a <UART_SetConfig+0x216>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <UART_SetConfig+0x1fe>
 800720a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720e:	d006      	beq.n	800721e <UART_SetConfig+0x20a>
 8007210:	e00b      	b.n	800722a <UART_SetConfig+0x216>
 8007212:	2300      	movs	r3, #0
 8007214:	77fb      	strb	r3, [r7, #31]
 8007216:	e0a1      	b.n	800735c <UART_SetConfig+0x348>
 8007218:	2302      	movs	r3, #2
 800721a:	77fb      	strb	r3, [r7, #31]
 800721c:	e09e      	b.n	800735c <UART_SetConfig+0x348>
 800721e:	2304      	movs	r3, #4
 8007220:	77fb      	strb	r3, [r7, #31]
 8007222:	e09b      	b.n	800735c <UART_SetConfig+0x348>
 8007224:	2308      	movs	r3, #8
 8007226:	77fb      	strb	r3, [r7, #31]
 8007228:	e098      	b.n	800735c <UART_SetConfig+0x348>
 800722a:	2310      	movs	r3, #16
 800722c:	77fb      	strb	r3, [r7, #31]
 800722e:	e095      	b.n	800735c <UART_SetConfig+0x348>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a2f      	ldr	r2, [pc, #188]	; (80072f4 <UART_SetConfig+0x2e0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d125      	bne.n	8007286 <UART_SetConfig+0x272>
 800723a:	4b29      	ldr	r3, [pc, #164]	; (80072e0 <UART_SetConfig+0x2cc>)
 800723c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007240:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007244:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007248:	d017      	beq.n	800727a <UART_SetConfig+0x266>
 800724a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800724e:	d817      	bhi.n	8007280 <UART_SetConfig+0x26c>
 8007250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007254:	d00b      	beq.n	800726e <UART_SetConfig+0x25a>
 8007256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800725a:	d811      	bhi.n	8007280 <UART_SetConfig+0x26c>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <UART_SetConfig+0x254>
 8007260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007264:	d006      	beq.n	8007274 <UART_SetConfig+0x260>
 8007266:	e00b      	b.n	8007280 <UART_SetConfig+0x26c>
 8007268:	2301      	movs	r3, #1
 800726a:	77fb      	strb	r3, [r7, #31]
 800726c:	e076      	b.n	800735c <UART_SetConfig+0x348>
 800726e:	2302      	movs	r3, #2
 8007270:	77fb      	strb	r3, [r7, #31]
 8007272:	e073      	b.n	800735c <UART_SetConfig+0x348>
 8007274:	2304      	movs	r3, #4
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	e070      	b.n	800735c <UART_SetConfig+0x348>
 800727a:	2308      	movs	r3, #8
 800727c:	77fb      	strb	r3, [r7, #31]
 800727e:	e06d      	b.n	800735c <UART_SetConfig+0x348>
 8007280:	2310      	movs	r3, #16
 8007282:	77fb      	strb	r3, [r7, #31]
 8007284:	e06a      	b.n	800735c <UART_SetConfig+0x348>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1b      	ldr	r2, [pc, #108]	; (80072f8 <UART_SetConfig+0x2e4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d138      	bne.n	8007302 <UART_SetConfig+0x2ee>
 8007290:	4b13      	ldr	r3, [pc, #76]	; (80072e0 <UART_SetConfig+0x2cc>)
 8007292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007296:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800729a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800729e:	d017      	beq.n	80072d0 <UART_SetConfig+0x2bc>
 80072a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072a4:	d82a      	bhi.n	80072fc <UART_SetConfig+0x2e8>
 80072a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072aa:	d00b      	beq.n	80072c4 <UART_SetConfig+0x2b0>
 80072ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b0:	d824      	bhi.n	80072fc <UART_SetConfig+0x2e8>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <UART_SetConfig+0x2aa>
 80072b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ba:	d006      	beq.n	80072ca <UART_SetConfig+0x2b6>
 80072bc:	e01e      	b.n	80072fc <UART_SetConfig+0x2e8>
 80072be:	2300      	movs	r3, #0
 80072c0:	77fb      	strb	r3, [r7, #31]
 80072c2:	e04b      	b.n	800735c <UART_SetConfig+0x348>
 80072c4:	2302      	movs	r3, #2
 80072c6:	77fb      	strb	r3, [r7, #31]
 80072c8:	e048      	b.n	800735c <UART_SetConfig+0x348>
 80072ca:	2304      	movs	r3, #4
 80072cc:	77fb      	strb	r3, [r7, #31]
 80072ce:	e045      	b.n	800735c <UART_SetConfig+0x348>
 80072d0:	2308      	movs	r3, #8
 80072d2:	77fb      	strb	r3, [r7, #31]
 80072d4:	e042      	b.n	800735c <UART_SetConfig+0x348>
 80072d6:	bf00      	nop
 80072d8:	efff69f3 	.word	0xefff69f3
 80072dc:	40011000 	.word	0x40011000
 80072e0:	40023800 	.word	0x40023800
 80072e4:	40004400 	.word	0x40004400
 80072e8:	40004800 	.word	0x40004800
 80072ec:	40004c00 	.word	0x40004c00
 80072f0:	40005000 	.word	0x40005000
 80072f4:	40011400 	.word	0x40011400
 80072f8:	40007800 	.word	0x40007800
 80072fc:	2310      	movs	r3, #16
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e02c      	b.n	800735c <UART_SetConfig+0x348>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a72      	ldr	r2, [pc, #456]	; (80074d0 <UART_SetConfig+0x4bc>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d125      	bne.n	8007358 <UART_SetConfig+0x344>
 800730c:	4b71      	ldr	r3, [pc, #452]	; (80074d4 <UART_SetConfig+0x4c0>)
 800730e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007312:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007316:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800731a:	d017      	beq.n	800734c <UART_SetConfig+0x338>
 800731c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007320:	d817      	bhi.n	8007352 <UART_SetConfig+0x33e>
 8007322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007326:	d00b      	beq.n	8007340 <UART_SetConfig+0x32c>
 8007328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800732c:	d811      	bhi.n	8007352 <UART_SetConfig+0x33e>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <UART_SetConfig+0x326>
 8007332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007336:	d006      	beq.n	8007346 <UART_SetConfig+0x332>
 8007338:	e00b      	b.n	8007352 <UART_SetConfig+0x33e>
 800733a:	2300      	movs	r3, #0
 800733c:	77fb      	strb	r3, [r7, #31]
 800733e:	e00d      	b.n	800735c <UART_SetConfig+0x348>
 8007340:	2302      	movs	r3, #2
 8007342:	77fb      	strb	r3, [r7, #31]
 8007344:	e00a      	b.n	800735c <UART_SetConfig+0x348>
 8007346:	2304      	movs	r3, #4
 8007348:	77fb      	strb	r3, [r7, #31]
 800734a:	e007      	b.n	800735c <UART_SetConfig+0x348>
 800734c:	2308      	movs	r3, #8
 800734e:	77fb      	strb	r3, [r7, #31]
 8007350:	e004      	b.n	800735c <UART_SetConfig+0x348>
 8007352:	2310      	movs	r3, #16
 8007354:	77fb      	strb	r3, [r7, #31]
 8007356:	e001      	b.n	800735c <UART_SetConfig+0x348>
 8007358:	2310      	movs	r3, #16
 800735a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	69db      	ldr	r3, [r3, #28]
 8007360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007364:	d15b      	bne.n	800741e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007366:	7ffb      	ldrb	r3, [r7, #31]
 8007368:	2b08      	cmp	r3, #8
 800736a:	d828      	bhi.n	80073be <UART_SetConfig+0x3aa>
 800736c:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <UART_SetConfig+0x360>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	08007399 	.word	0x08007399
 8007378:	080073a1 	.word	0x080073a1
 800737c:	080073a9 	.word	0x080073a9
 8007380:	080073bf 	.word	0x080073bf
 8007384:	080073af 	.word	0x080073af
 8007388:	080073bf 	.word	0x080073bf
 800738c:	080073bf 	.word	0x080073bf
 8007390:	080073bf 	.word	0x080073bf
 8007394:	080073b7 	.word	0x080073b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007398:	f7fc fcbe 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 800739c:	61b8      	str	r0, [r7, #24]
        break;
 800739e:	e013      	b.n	80073c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073a0:	f7fc fcce 	bl	8003d40 <HAL_RCC_GetPCLK2Freq>
 80073a4:	61b8      	str	r0, [r7, #24]
        break;
 80073a6:	e00f      	b.n	80073c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073a8:	4b4b      	ldr	r3, [pc, #300]	; (80074d8 <UART_SetConfig+0x4c4>)
 80073aa:	61bb      	str	r3, [r7, #24]
        break;
 80073ac:	e00c      	b.n	80073c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ae:	f7fc fba1 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 80073b2:	61b8      	str	r0, [r7, #24]
        break;
 80073b4:	e008      	b.n	80073c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ba:	61bb      	str	r3, [r7, #24]
        break;
 80073bc:	e004      	b.n	80073c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	77bb      	strb	r3, [r7, #30]
        break;
 80073c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d074      	beq.n	80074b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	005a      	lsls	r2, r3, #1
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	441a      	add	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	2b0f      	cmp	r3, #15
 80073e8:	d916      	bls.n	8007418 <UART_SetConfig+0x404>
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f0:	d212      	bcs.n	8007418 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f023 030f 	bic.w	r3, r3, #15
 80073fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	b29b      	uxth	r3, r3
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	b29a      	uxth	r2, r3
 8007408:	89fb      	ldrh	r3, [r7, #14]
 800740a:	4313      	orrs	r3, r2
 800740c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	89fa      	ldrh	r2, [r7, #14]
 8007414:	60da      	str	r2, [r3, #12]
 8007416:	e04f      	b.n	80074b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	77bb      	strb	r3, [r7, #30]
 800741c:	e04c      	b.n	80074b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800741e:	7ffb      	ldrb	r3, [r7, #31]
 8007420:	2b08      	cmp	r3, #8
 8007422:	d828      	bhi.n	8007476 <UART_SetConfig+0x462>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <UART_SetConfig+0x418>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	08007451 	.word	0x08007451
 8007430:	08007459 	.word	0x08007459
 8007434:	08007461 	.word	0x08007461
 8007438:	08007477 	.word	0x08007477
 800743c:	08007467 	.word	0x08007467
 8007440:	08007477 	.word	0x08007477
 8007444:	08007477 	.word	0x08007477
 8007448:	08007477 	.word	0x08007477
 800744c:	0800746f 	.word	0x0800746f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007450:	f7fc fc62 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 8007454:	61b8      	str	r0, [r7, #24]
        break;
 8007456:	e013      	b.n	8007480 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007458:	f7fc fc72 	bl	8003d40 <HAL_RCC_GetPCLK2Freq>
 800745c:	61b8      	str	r0, [r7, #24]
        break;
 800745e:	e00f      	b.n	8007480 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007460:	4b1d      	ldr	r3, [pc, #116]	; (80074d8 <UART_SetConfig+0x4c4>)
 8007462:	61bb      	str	r3, [r7, #24]
        break;
 8007464:	e00c      	b.n	8007480 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007466:	f7fc fb45 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 800746a:	61b8      	str	r0, [r7, #24]
        break;
 800746c:	e008      	b.n	8007480 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800746e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007472:	61bb      	str	r3, [r7, #24]
        break;
 8007474:	e004      	b.n	8007480 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	77bb      	strb	r3, [r7, #30]
        break;
 800747e:	bf00      	nop
    }

    if (pclk != 0U)
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d018      	beq.n	80074b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	085a      	lsrs	r2, r3, #1
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	441a      	add	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	fbb2 f3f3 	udiv	r3, r2, r3
 8007498:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	2b0f      	cmp	r3, #15
 800749e:	d909      	bls.n	80074b4 <UART_SetConfig+0x4a0>
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a6:	d205      	bcs.n	80074b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60da      	str	r2, [r3, #12]
 80074b2:	e001      	b.n	80074b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80074c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	40007c00 	.word	0x40007c00
 80074d4:	40023800 	.word	0x40023800
 80074d8:	00f42400 	.word	0x00f42400

080074dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00a      	beq.n	8007506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00a      	beq.n	800754a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	f003 0310 	and.w	r3, r3, #16
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d01a      	beq.n	80075f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075da:	d10a      	bne.n	80075f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	605a      	str	r2, [r3, #4]
  }
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af02      	add	r7, sp, #8
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007630:	f7fb fad6 	bl	8002be0 <HAL_GetTick>
 8007634:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b08      	cmp	r3, #8
 8007642:	d10e      	bne.n	8007662 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f81b 	bl	800768e <UART_WaitOnFlagUntilTimeout>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e011      	b.n	8007686 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2220      	movs	r2, #32
 800766c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b09c      	sub	sp, #112	; 0x70
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	603b      	str	r3, [r7, #0]
 800769a:	4613      	mov	r3, r2
 800769c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800769e:	e0a7      	b.n	80077f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a6:	f000 80a3 	beq.w	80077f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076aa:	f7fb fa99 	bl	8002be0 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d302      	bcc.n	80076c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80076ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d13f      	bne.n	8007740 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076d4:	667b      	str	r3, [r7, #100]	; 0x64
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80076ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e6      	bne.n	80076c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3308      	adds	r3, #8
 80076f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007704:	f023 0301 	bic.w	r3, r3, #1
 8007708:	663b      	str	r3, [r7, #96]	; 0x60
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3308      	adds	r3, #8
 8007710:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007712:	64ba      	str	r2, [r7, #72]	; 0x48
 8007714:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e5      	bne.n	80076f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2220      	movs	r2, #32
 800772a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2220      	movs	r2, #32
 8007730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e068      	b.n	8007812 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b00      	cmp	r3, #0
 800774c:	d050      	beq.n	80077f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800775c:	d148      	bne.n	80077f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007766:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800777c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007786:	637b      	str	r3, [r7, #52]	; 0x34
 8007788:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800778c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e6      	bne.n	8007768 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	613b      	str	r3, [r7, #16]
   return(result);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3308      	adds	r3, #8
 80077b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077ba:	623a      	str	r2, [r7, #32]
 80077bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	69f9      	ldr	r1, [r7, #28]
 80077c0:	6a3a      	ldr	r2, [r7, #32]
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e5      	bne.n	800779a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2220      	movs	r2, #32
 80077d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2220      	movs	r2, #32
 80077e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e010      	b.n	8007812 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	69da      	ldr	r2, [r3, #28]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	4013      	ands	r3, r2
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	bf0c      	ite	eq
 8007800:	2301      	moveq	r3, #1
 8007802:	2300      	movne	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	461a      	mov	r2, r3
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	429a      	cmp	r2, r3
 800780c:	f43f af48 	beq.w	80076a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3770      	adds	r7, #112	; 0x70
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800781a:	b480      	push	{r7}
 800781c:	b095      	sub	sp, #84	; 0x54
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007840:	643b      	str	r3, [r7, #64]	; 0x40
 8007842:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e6      	bne.n	8007822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3308      	adds	r3, #8
 800785a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	61fb      	str	r3, [r7, #28]
   return(result);
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	64bb      	str	r3, [r7, #72]	; 0x48
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007874:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800787a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e5      	bne.n	8007854 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800788c:	2b01      	cmp	r3, #1
 800788e:	d118      	bne.n	80078c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	60bb      	str	r3, [r7, #8]
   return(result);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f023 0310 	bic.w	r3, r3, #16
 80078a4:	647b      	str	r3, [r7, #68]	; 0x44
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ae:	61bb      	str	r3, [r7, #24]
 80078b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6979      	ldr	r1, [r7, #20]
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	613b      	str	r3, [r7, #16]
   return(result);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e6      	bne.n	8007890 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078d6:	bf00      	nop
 80078d8:	3754      	adds	r7, #84	; 0x54
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f7ff fb71 	bl	8006fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b088      	sub	sp, #32
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	60bb      	str	r3, [r7, #8]
   return(result);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800792a:	61fb      	str	r3, [r7, #28]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	61bb      	str	r3, [r7, #24]
 8007936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	6979      	ldr	r1, [r7, #20]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	613b      	str	r3, [r7, #16]
   return(result);
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e6      	bne.n	8007916 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff fb3d 	bl	8006fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800795a:	bf00      	nop
 800795c:	3720      	adds	r7, #32
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <memset>:
 8007962:	4402      	add	r2, r0
 8007964:	4603      	mov	r3, r0
 8007966:	4293      	cmp	r3, r2
 8007968:	d100      	bne.n	800796c <memset+0xa>
 800796a:	4770      	bx	lr
 800796c:	f803 1b01 	strb.w	r1, [r3], #1
 8007970:	e7f9      	b.n	8007966 <memset+0x4>
	...

08007974 <__libc_init_array>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	4d0d      	ldr	r5, [pc, #52]	; (80079ac <__libc_init_array+0x38>)
 8007978:	4c0d      	ldr	r4, [pc, #52]	; (80079b0 <__libc_init_array+0x3c>)
 800797a:	1b64      	subs	r4, r4, r5
 800797c:	10a4      	asrs	r4, r4, #2
 800797e:	2600      	movs	r6, #0
 8007980:	42a6      	cmp	r6, r4
 8007982:	d109      	bne.n	8007998 <__libc_init_array+0x24>
 8007984:	4d0b      	ldr	r5, [pc, #44]	; (80079b4 <__libc_init_array+0x40>)
 8007986:	4c0c      	ldr	r4, [pc, #48]	; (80079b8 <__libc_init_array+0x44>)
 8007988:	f000 f818 	bl	80079bc <_init>
 800798c:	1b64      	subs	r4, r4, r5
 800798e:	10a4      	asrs	r4, r4, #2
 8007990:	2600      	movs	r6, #0
 8007992:	42a6      	cmp	r6, r4
 8007994:	d105      	bne.n	80079a2 <__libc_init_array+0x2e>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	f855 3b04 	ldr.w	r3, [r5], #4
 800799c:	4798      	blx	r3
 800799e:	3601      	adds	r6, #1
 80079a0:	e7ee      	b.n	8007980 <__libc_init_array+0xc>
 80079a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a6:	4798      	blx	r3
 80079a8:	3601      	adds	r6, #1
 80079aa:	e7f2      	b.n	8007992 <__libc_init_array+0x1e>
 80079ac:	08007a28 	.word	0x08007a28
 80079b0:	08007a28 	.word	0x08007a28
 80079b4:	08007a28 	.word	0x08007a28
 80079b8:	08007a2c 	.word	0x08007a2c

080079bc <_init>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	bf00      	nop
 80079c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c2:	bc08      	pop	{r3}
 80079c4:	469e      	mov	lr, r3
 80079c6:	4770      	bx	lr

080079c8 <_fini>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	bf00      	nop
 80079cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ce:	bc08      	pop	{r3}
 80079d0:	469e      	mov	lr, r3
 80079d2:	4770      	bx	lr
